{"version":3,"file":"e2e.entry.js","sources":["webpack:///webpack/bootstrap 27f3c15f61bbecf36083","webpack:///./node_modules/core-js/modules/_export.js","webpack:///./node_modules/core-js/modules/_fails.js","webpack:///./node_modules/core-js/modules/_an-object.js","webpack:///./node_modules/core-js/modules/_global.js","webpack:///./node_modules/core-js/modules/_is-object.js","webpack:///./node_modules/core-js/modules/_wks.js","webpack:///./node_modules/core-js/modules/_to-length.js","webpack:///./node_modules/core-js/modules/_object-dp.js","webpack:///./node_modules/core-js/modules/_descriptors.js","webpack:///./node_modules/core-js/modules/_core.js","webpack:///./node_modules/core-js/modules/_redefine.js","webpack:///./node_modules/core-js/modules/_to-object.js","webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/core-js/modules/_has.js","webpack:///./node_modules/core-js/modules/_hide.js","webpack:///./node_modules/core-js/modules/_to-iobject.js","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///./node_modules/core-js/modules/_to-integer.js","webpack:///./node_modules/core-js/modules/_object-gopd.js","webpack:///./node_modules/core-js/modules/_object-sap.js","webpack:///./node_modules/core-js/modules/_array-methods.js","webpack:///./node_modules/core-js/modules/_ctx.js","webpack:///./node_modules/core-js/modules/_a-function.js","webpack:///./node_modules/core-js/modules/_cof.js","webpack:///./node_modules/core-js/modules/_defined.js","webpack:///./node_modules/core-js/modules/_typed-array.js","webpack:///./node_modules/core-js/modules/_to-primitive.js","webpack:///./node_modules/core-js/modules/_meta.js","webpack:///./node_modules/core-js/modules/_property-desc.js","webpack:///./node_modules/core-js/modules/_uid.js","webpack:///./node_modules/core-js/modules/_library.js","webpack:///./node_modules/core-js/modules/_object-keys.js","webpack:///./node_modules/core-js/modules/_to-absolute-index.js","webpack:///./node_modules/core-js/modules/_object-create.js","webpack:///./node_modules/core-js/modules/_object-gopn.js","webpack:///./node_modules/core-js/modules/_object-gpo.js","webpack:///./node_modules/core-js/modules/_set-to-string-tag.js","webpack:///./node_modules/core-js/modules/_iterators.js","webpack:///./node_modules/core-js/modules/_add-to-unscopables.js","webpack:///./node_modules/core-js/modules/_set-species.js","webpack:///./node_modules/core-js/modules/_an-instance.js","webpack:///./node_modules/core-js/modules/_redefine-all.js","webpack:///./node_modules/core-js/modules/_validate-collection.js","webpack:///./node_modules/core-js/modules/_iobject.js","webpack:///./node_modules/core-js/modules/_object-pie.js","webpack:///./node_modules/core-js/modules/_classof.js","webpack:///./node_modules/core-js/modules/_species-constructor.js","webpack:///./node_modules/core-js/modules/_array-includes.js","webpack:///./node_modules/core-js/modules/_object-gops.js","webpack:///./node_modules/core-js/modules/_string-trim.js","webpack:///./node_modules/core-js/modules/_iter-detect.js","webpack:///./node_modules/core-js/modules/_flags.js","webpack:///./node_modules/core-js/modules/_regexp-exec-abstract.js","webpack:///./node_modules/core-js/modules/_fix-re-wks.js","webpack:///./node_modules/core-js/modules/_for-of.js","webpack:///./node_modules/core-js/modules/_user-agent.js","webpack:///./node_modules/core-js/modules/_collection.js","webpack:///./node_modules/core-js/modules/_typed.js","webpack:///./node_modules/core-js/modules/_dom-create.js","webpack:///./node_modules/core-js/modules/_shared.js","webpack:///./node_modules/core-js/modules/_wks-ext.js","webpack:///./node_modules/core-js/modules/_shared-key.js","webpack:///./node_modules/core-js/modules/_enum-bug-keys.js","webpack:///./node_modules/core-js/modules/_is-array.js","webpack:///./node_modules/core-js/modules/_html.js","webpack:///./node_modules/core-js/modules/_set-proto.js","webpack:///./node_modules/core-js/modules/_string-ws.js","webpack:///./node_modules/core-js/modules/_inherit-if-required.js","webpack:///./node_modules/core-js/modules/_string-repeat.js","webpack:///./node_modules/core-js/modules/_math-sign.js","webpack:///./node_modules/core-js/modules/_math-expm1.js","webpack:///./node_modules/core-js/modules/_string-at.js","webpack:///./node_modules/core-js/modules/_iter-define.js","webpack:///./node_modules/core-js/modules/_string-context.js","webpack:///./node_modules/core-js/modules/_is-regexp.js","webpack:///./node_modules/core-js/modules/_fails-is-regexp.js","webpack:///./node_modules/core-js/modules/_is-array-iter.js","webpack:///./node_modules/core-js/modules/_create-property.js","webpack:///./node_modules/core-js/modules/core.get-iterator-method.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./node_modules/core-js/modules/es6.array.iterator.js","webpack:///./node_modules/core-js/modules/_regexp-exec.js","webpack:///./node_modules/core-js/modules/_advance-string-index.js","webpack:///./node_modules/core-js/modules/_task.js","webpack:///./node_modules/core-js/modules/_typed-buffer.js","webpack:///./node_modules/core-js/modules/_ie8-dom-define.js","webpack:///./node_modules/core-js/modules/_wks-define.js","webpack:///./node_modules/core-js/modules/_object-keys-internal.js","webpack:///./node_modules/core-js/modules/_object-dps.js","webpack:///./node_modules/core-js/modules/_object-gopn-ext.js","webpack:///./node_modules/core-js/modules/_object-assign.js","webpack:///./node_modules/core-js/modules/_same-value.js","webpack:///./node_modules/core-js/modules/_bind.js","webpack:///./node_modules/core-js/modules/_invoke.js","webpack:///./node_modules/core-js/modules/_parse-int.js","webpack:///./node_modules/core-js/modules/_parse-float.js","webpack:///./node_modules/core-js/modules/_a-number-value.js","webpack:///./node_modules/core-js/modules/_is-integer.js","webpack:///./node_modules/core-js/modules/_math-log1p.js","webpack:///./node_modules/core-js/modules/_iter-create.js","webpack:///./node_modules/core-js/modules/_iter-call.js","webpack:///./node_modules/core-js/modules/_array-reduce.js","webpack:///./node_modules/core-js/modules/_array-copy-within.js","webpack:///./node_modules/core-js/modules/_iter-step.js","webpack:///./node_modules/core-js/modules/es6.regexp.exec.js","webpack:///./node_modules/core-js/modules/es6.regexp.flags.js","webpack:///./node_modules/core-js/modules/es6.promise.js","webpack:///./node_modules/core-js/modules/_new-promise-capability.js","webpack:///./node_modules/core-js/modules/_promise-resolve.js","webpack:///./node_modules/core-js/modules/_collection-strong.js","webpack:///./node_modules/core-js/modules/_collection-weak.js","webpack:///./node_modules/core-js/modules/_to-index.js","webpack:///./node_modules/core-js/modules/_own-keys.js","webpack:///./node_modules/core-js/modules/_string-pad.js","webpack:///./node_modules/core-js/modules/_object-to-array.js","webpack:///./test/e2e/index.js","webpack:///./node_modules/@babel/polyfill/lib/noConflict.js","webpack:///./node_modules/core-js/es6/index.js","webpack:///./node_modules/core-js/modules/es6.symbol.js","webpack:///./node_modules/core-js/modules/_enum-keys.js","webpack:///./node_modules/core-js/modules/es6.object.create.js","webpack:///./node_modules/core-js/modules/es6.object.define-property.js","webpack:///./node_modules/core-js/modules/es6.object.define-properties.js","webpack:///./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","webpack:///./node_modules/core-js/modules/es6.object.get-prototype-of.js","webpack:///./node_modules/core-js/modules/es6.object.keys.js","webpack:///./node_modules/core-js/modules/es6.object.get-own-property-names.js","webpack:///./node_modules/core-js/modules/es6.object.freeze.js","webpack:///./node_modules/core-js/modules/es6.object.seal.js","webpack:///./node_modules/core-js/modules/es6.object.prevent-extensions.js","webpack:///./node_modules/core-js/modules/es6.object.is-frozen.js","webpack:///./node_modules/core-js/modules/es6.object.is-sealed.js","webpack:///./node_modules/core-js/modules/es6.object.is-extensible.js","webpack:///./node_modules/core-js/modules/es6.object.assign.js","webpack:///./node_modules/core-js/modules/es6.object.is.js","webpack:///./node_modules/core-js/modules/es6.object.set-prototype-of.js","webpack:///./node_modules/core-js/modules/es6.object.to-string.js","webpack:///./node_modules/core-js/modules/es6.function.bind.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/core-js/modules/es6.function.has-instance.js","webpack:///./node_modules/core-js/modules/es6.parse-int.js","webpack:///./node_modules/core-js/modules/es6.parse-float.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js","webpack:///./node_modules/core-js/modules/es6.number.to-fixed.js","webpack:///./node_modules/core-js/modules/es6.number.to-precision.js","webpack:///./node_modules/core-js/modules/es6.number.epsilon.js","webpack:///./node_modules/core-js/modules/es6.number.is-finite.js","webpack:///./node_modules/core-js/modules/es6.number.is-integer.js","webpack:///./node_modules/core-js/modules/es6.number.is-nan.js","webpack:///./node_modules/core-js/modules/es6.number.is-safe-integer.js","webpack:///./node_modules/core-js/modules/es6.number.max-safe-integer.js","webpack:///./node_modules/core-js/modules/es6.number.min-safe-integer.js","webpack:///./node_modules/core-js/modules/es6.number.parse-float.js","webpack:///./node_modules/core-js/modules/es6.number.parse-int.js","webpack:///./node_modules/core-js/modules/es6.math.acosh.js","webpack:///./node_modules/core-js/modules/es6.math.asinh.js","webpack:///./node_modules/core-js/modules/es6.math.atanh.js","webpack:///./node_modules/core-js/modules/es6.math.cbrt.js","webpack:///./node_modules/core-js/modules/es6.math.clz32.js","webpack:///./node_modules/core-js/modules/es6.math.cosh.js","webpack:///./node_modules/core-js/modules/es6.math.expm1.js","webpack:///./node_modules/core-js/modules/es6.math.fround.js","webpack:///./node_modules/core-js/modules/_math-fround.js","webpack:///./node_modules/core-js/modules/es6.math.hypot.js","webpack:///./node_modules/core-js/modules/es6.math.imul.js","webpack:///./node_modules/core-js/modules/es6.math.log10.js","webpack:///./node_modules/core-js/modules/es6.math.log1p.js","webpack:///./node_modules/core-js/modules/es6.math.log2.js","webpack:///./node_modules/core-js/modules/es6.math.sign.js","webpack:///./node_modules/core-js/modules/es6.math.sinh.js","webpack:///./node_modules/core-js/modules/es6.math.tanh.js","webpack:///./node_modules/core-js/modules/es6.math.trunc.js","webpack:///./node_modules/core-js/modules/es6.string.from-code-point.js","webpack:///./node_modules/core-js/modules/es6.string.raw.js","webpack:///./node_modules/core-js/modules/es6.string.trim.js","webpack:///./node_modules/core-js/modules/es6.string.iterator.js","webpack:///./node_modules/core-js/modules/es6.string.code-point-at.js","webpack:///./node_modules/core-js/modules/es6.string.ends-with.js","webpack:///./node_modules/core-js/modules/es6.string.includes.js","webpack:///./node_modules/core-js/modules/es6.string.repeat.js","webpack:///./node_modules/core-js/modules/es6.string.starts-with.js","webpack:///./node_modules/core-js/modules/es6.string.anchor.js","webpack:///./node_modules/core-js/modules/es6.string.big.js","webpack:///./node_modules/core-js/modules/es6.string.blink.js","webpack:///./node_modules/core-js/modules/es6.string.bold.js","webpack:///./node_modules/core-js/modules/es6.string.fixed.js","webpack:///./node_modules/core-js/modules/es6.string.fontcolor.js","webpack:///./node_modules/core-js/modules/es6.string.fontsize.js","webpack:///./node_modules/core-js/modules/es6.string.italics.js","webpack:///./node_modules/core-js/modules/es6.string.link.js","webpack:///./node_modules/core-js/modules/es6.string.small.js","webpack:///./node_modules/core-js/modules/es6.string.strike.js","webpack:///./node_modules/core-js/modules/es6.string.sub.js","webpack:///./node_modules/core-js/modules/es6.string.sup.js","webpack:///./node_modules/core-js/modules/es6.date.now.js","webpack:///./node_modules/core-js/modules/es6.date.to-json.js","webpack:///./node_modules/core-js/modules/es6.date.to-iso-string.js","webpack:///./node_modules/core-js/modules/_date-to-iso-string.js","webpack:///./node_modules/core-js/modules/es6.date.to-string.js","webpack:///./node_modules/core-js/modules/es6.date.to-primitive.js","webpack:///./node_modules/core-js/modules/_date-to-primitive.js","webpack:///./node_modules/core-js/modules/es6.array.is-array.js","webpack:///./node_modules/core-js/modules/es6.array.from.js","webpack:///./node_modules/core-js/modules/es6.array.of.js","webpack:///./node_modules/core-js/modules/es6.array.join.js","webpack:///./node_modules/core-js/modules/es6.array.slice.js","webpack:///./node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/core-js/modules/es6.array.for-each.js","webpack:///./node_modules/core-js/modules/_array-species-create.js","webpack:///./node_modules/core-js/modules/_array-species-constructor.js","webpack:///./node_modules/core-js/modules/es6.array.map.js","webpack:///./node_modules/core-js/modules/es6.array.filter.js","webpack:///./node_modules/core-js/modules/es6.array.some.js","webpack:///./node_modules/core-js/modules/es6.array.every.js","webpack:///./node_modules/core-js/modules/es6.array.reduce.js","webpack:///./node_modules/core-js/modules/es6.array.reduce-right.js","webpack:///./node_modules/core-js/modules/es6.array.index-of.js","webpack:///./node_modules/core-js/modules/es6.array.last-index-of.js","webpack:///./node_modules/core-js/modules/es6.array.copy-within.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./node_modules/core-js/modules/es6.array.find.js","webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./node_modules/core-js/modules/es6.array.species.js","webpack:///./node_modules/core-js/modules/es6.regexp.constructor.js","webpack:///./node_modules/core-js/modules/es6.regexp.to-string.js","webpack:///./node_modules/core-js/modules/es6.regexp.match.js","webpack:///./node_modules/core-js/modules/es6.regexp.replace.js","webpack:///./node_modules/core-js/modules/es6.regexp.search.js","webpack:///./node_modules/core-js/modules/es6.regexp.split.js","webpack:///./node_modules/core-js/modules/_microtask.js","webpack:///./node_modules/core-js/modules/_perform.js","webpack:///./node_modules/core-js/modules/es6.map.js","webpack:///./node_modules/core-js/modules/es6.set.js","webpack:///./node_modules/core-js/modules/es6.weak-map.js","webpack:///./node_modules/core-js/modules/es6.weak-set.js","webpack:///./node_modules/core-js/modules/es6.typed.array-buffer.js","webpack:///./node_modules/core-js/modules/es6.typed.data-view.js","webpack:///./node_modules/core-js/modules/es6.typed.int8-array.js","webpack:///./node_modules/core-js/modules/es6.typed.uint8-array.js","webpack:///./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","webpack:///./node_modules/core-js/modules/es6.typed.int16-array.js","webpack:///./node_modules/core-js/modules/es6.typed.uint16-array.js","webpack:///./node_modules/core-js/modules/es6.typed.int32-array.js","webpack:///./node_modules/core-js/modules/es6.typed.uint32-array.js","webpack:///./node_modules/core-js/modules/es6.typed.float32-array.js","webpack:///./node_modules/core-js/modules/es6.typed.float64-array.js","webpack:///./node_modules/core-js/modules/es6.reflect.apply.js","webpack:///./node_modules/core-js/modules/es6.reflect.construct.js","webpack:///./node_modules/core-js/modules/es6.reflect.define-property.js","webpack:///./node_modules/core-js/modules/es6.reflect.delete-property.js","webpack:///./node_modules/core-js/modules/es6.reflect.enumerate.js","webpack:///./node_modules/core-js/modules/es6.reflect.get.js","webpack:///./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","webpack:///./node_modules/core-js/modules/es6.reflect.get-prototype-of.js","webpack:///./node_modules/core-js/modules/es6.reflect.has.js","webpack:///./node_modules/core-js/modules/es6.reflect.is-extensible.js","webpack:///./node_modules/core-js/modules/es6.reflect.own-keys.js","webpack:///./node_modules/core-js/modules/es6.reflect.prevent-extensions.js","webpack:///./node_modules/core-js/modules/es6.reflect.set.js","webpack:///./node_modules/core-js/modules/es6.reflect.set-prototype-of.js","webpack:///./node_modules/core-js/fn/array/includes.js","webpack:///./node_modules/core-js/modules/es7.array.includes.js","webpack:///./node_modules/core-js/fn/string/pad-start.js","webpack:///./node_modules/core-js/modules/es7.string.pad-start.js","webpack:///./node_modules/core-js/fn/string/pad-end.js","webpack:///./node_modules/core-js/modules/es7.string.pad-end.js","webpack:///./node_modules/core-js/fn/symbol/async-iterator.js","webpack:///./node_modules/core-js/modules/es7.symbol.async-iterator.js","webpack:///./node_modules/core-js/fn/object/get-own-property-descriptors.js","webpack:///./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","webpack:///./node_modules/core-js/fn/object/values.js","webpack:///./node_modules/core-js/modules/es7.object.values.js","webpack:///./node_modules/core-js/fn/object/entries.js","webpack:///./node_modules/core-js/modules/es7.object.entries.js","webpack:///./node_modules/core-js/fn/promise/finally.js","webpack:///./node_modules/core-js/modules/es7.promise.finally.js","webpack:///./node_modules/core-js/web/index.js","webpack:///./node_modules/core-js/modules/web.timers.js","webpack:///./node_modules/core-js/modules/web.immediate.js","webpack:///./node_modules/core-js/modules/web.dom.iterable.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/jasmine-co/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/co/index.js","webpack:///./node_modules/is-generator/is-generator.js","webpack:///./test/e2e \\.spec\\.js$","webpack:///./test/e2e/ColHeader.spec.js","webpack:///./test/e2e/Core_alter.spec.js","webpack:///./test/e2e/Core_beforeKeyDown.spec.js","webpack:///./test/e2e/Core_beforechange.spec.js","webpack:///./test/e2e/Core_count.spec.js","webpack:///./test/e2e/Core_countEmptyCols.spec.js","webpack:///./test/e2e/Core_countEmptyRows.spec.js","webpack:///./test/e2e/Core_dataSchema.spec.js","webpack:///./test/e2e/Core_datachange.spec.js","webpack:///./test/e2e/Core_destroy.spec.js","webpack:///./test/e2e/Core_destroyEditor.spec.js","webpack:///./test/e2e/Core_getCellMeta.spec.js","webpack:///./test/e2e/Core_getColHeader.spec.js","webpack:///./test/e2e/Core_getDataAt.spec.js","webpack:///./test/e2e/Core_getDataType.spec.js","webpack:///./test/e2e/Core_getRowHeader.spec.js","webpack:///./test/e2e/Core_init.spec.js","webpack:///./test/e2e/Core_isEmpty.spec.js","webpack:///./test/e2e/Core_keepEmptyRows.spec.js","webpack:///./test/e2e/Core_listen.spec.js","webpack:///./test/e2e/Core_loadData.spec.js","webpack:///./test/e2e/Core_navigation.spec.js","webpack:///./test/e2e/Core_onKeyDown.spec.js","webpack:///./test/e2e/Core_populateFromArray.spec.js","webpack:///./test/e2e/Core_reCreate.spec.js","webpack:///./test/e2e/Core_removeCellMeta.spec.js","webpack:///./test/e2e/Core_render.spec.js","webpack:///./test/e2e/Core_selection.spec.js","webpack:///./test/e2e/Core_setDataAtCell.spec.js","webpack:///./test/e2e/Core_splice.spec.js","webpack:///./test/e2e/Core_update.spec.js","webpack:///./test/e2e/Core_validate.spec.js","webpack:///./test/e2e/Core_view.spec.js","webpack:///./test/e2e/Dom.spec.js","webpack:///./test/e2e/Performance.spec.js","webpack:///./test/e2e/PluginHooks.spec.js","webpack:///./test/e2e/RowHeader.spec.js","webpack:///./test/e2e/cellTypes/index.spec.js","webpack:///./test/e2e/core/colToProp.spec.js","webpack:///./test/e2e/core/countSourceCols.spec.js","webpack:///./test/e2e/core/emptySelectedCells.spec.js","webpack:///./test/e2e/core/getCellMetaAtRow.spec.js","webpack:///./test/e2e/core/getCellsMeta.spec.js","webpack:///./test/e2e/core/getCopyableData.spec.js","webpack:///./test/e2e/core/getCopyableText.spec.js","webpack:///./test/e2e/core/getSelected.spec.js","webpack:///./test/e2e/core/getSelectedLast.spec.js","webpack:///./test/e2e/core/getSelectedRange.spec.js","webpack:///./test/e2e/core/getSelectedRangeLast.spec.js","webpack:///./test/e2e/core/getSourceDataArray.spec.js","webpack:///./test/e2e/core/getSourceDataAtCell.spec.js","webpack:///./test/e2e/core/getSourceDataAtCol.spec.js","webpack:///./test/e2e/core/propToCol.spec.js","webpack:///./test/e2e/core/selectAll.spec.js","webpack:///./test/e2e/core/selectCell.spec.js","webpack:///./test/e2e/core/selectCells.spec.js","webpack:///./test/e2e/core/selectColumns.spec.js","webpack:///./test/e2e/core/selectRows.spec.js","webpack:///./test/e2e/core/setCellMeta.spec.js","webpack:///./test/e2e/core/spliceCellsMeta.spec.js","webpack:///./test/e2e/core/spliceCol.spec.js","webpack:///./test/e2e/core/spliceRow.spec.js","webpack:///./test/e2e/core/toPhysicalColumn.spec.js","webpack:///./test/e2e/core/toPhysicalRow.spec.js","webpack:///./test/e2e/core/toVisualColumn.spec.js","webpack:///./test/e2e/core/toVisualRow.spec.js","webpack:///./test/e2e/editors/autocompleteEditor.spec.js","webpack:///./test/e2e/editors/baseEditor.spec.js","webpack:///./test/e2e/editors/dateEditor.spec.js","webpack:///./test/e2e/editors/dropdownEditor.spec.js","webpack:///./test/e2e/editors/handsontableEditor.spec.js","webpack:///./test/e2e/editors/index.spec.js","webpack:///./test/e2e/editors/noEditor.spec.js","webpack:///./test/e2e/editors/numericEditor.spec.js","webpack:///./test/e2e/editors/passwordEditor.spec.js","webpack:///./test/e2e/editors/selectEditor.spec.js","webpack:///./test/e2e/editors/textEditor.spec.js","webpack:///./test/e2e/i18n/index.spec.js","webpack:///./test/e2e/mobile/events.spec.js","webpack:///./test/e2e/mobile/scroll.spec.js","webpack:///./test/e2e/mobile/selection.spec.js","webpack:///./test/e2e/publicAPI.spec.js","webpack:///./test/e2e/renderers/autocompleteRenderer.spec.js","webpack:///./test/e2e/renderers/cellDecorator.spec.js","webpack:///./test/e2e/renderers/checkboxRenderer.spec.js","webpack:///./test/e2e/renderers/htmlRenderer.spec.js","webpack:///./test/e2e/renderers/index.spec.js","webpack:///./test/e2e/renderers/numericRenderer.spec.js","webpack:///./test/e2e/renderers/passwordRenderer.spec.js","webpack:///./test/e2e/renderers/textRenderer.spec.js","webpack:///./test/e2e/settings/autoWrapCol.spec.js","webpack:///./test/e2e/settings/autoWrapRow.spec.js","webpack:///./test/e2e/settings/colWidths.spec.js","webpack:///./test/e2e/settings/columns.spec.js","webpack:///./test/e2e/settings/copyable.spec.js","webpack:///./test/e2e/settings/currentHeaderClassName.spec.js","webpack:///./test/e2e/settings/currentRowClassName.spec.js","webpack:///./test/e2e/settings/editor.spec.js","webpack:///./test/e2e/settings/fixedColumnsLeft.spec.js","webpack:///./test/e2e/settings/fixedRowsBottom.spec.js","webpack:///./test/e2e/settings/fixedRowsTop.spec.js","webpack:///./test/e2e/settings/fragmentSelection.spec.js","webpack:///./test/e2e/settings/maxCols.spec.js","webpack:///./test/e2e/settings/maxRows.spec.js","webpack:///./test/e2e/settings/outsideClickDeselects.spec.js","webpack:///./test/e2e/settings/renderer.spec.js","webpack:///./test/e2e/settings/tableClassName.spec.js","webpack:///./test/e2e/utils/ghostTable.spec.js","webpack:///./test/e2e/validators/autocompleteValidator.spec.js","webpack:///./test/e2e/validators/dateValidator.spec.js","webpack:///./test/e2e/validators/index.spec.js","webpack:///./test/e2e/validators/numericValidator.spec.js","webpack:///./test/e2e/validators/timeValidator.spec.js","webpack:///./src/plugins \\.e2e\\.js$","webpack:///./src/plugins/autoColumnSize/test/autoColumnSize.e2e.js","webpack:///./src/plugins/autoRowSize/test/autoRowSize.e2e.js","webpack:///./src/plugins/autofill/test/autofill.e2e.js","webpack:///./src/plugins/columnSorting/test/columnSorting.e2e.js","webpack:///./src/plugins/comments/test/comments.e2e.js","webpack:///./src/plugins/contextMenu/test/contextMenu.e2e.js","webpack:///./src/plugins/contextMenu/test/predefinedItems/alignment.e2e.js","webpack:///./src/plugins/contextMenu/test/predefinedItems/readOnly.e2e.js","webpack:///./src/plugins/contextMenu/test/predefinedItems/removeColumn.e2e.js","webpack:///./src/plugins/contextMenu/test/predefinedItems/removeRow.e2e.js","webpack:///./src/plugins/copyPaste/test/copyPaste.e2e.js","webpack:///./src/plugins/customBorders/test/customBorders.e2e.js","webpack:///./src/plugins/dragToScroll/test/dragToScroll.e2e.js","webpack:///./src/plugins/manualColumnFreeze/test/manualColumnFreeze.e2e.js","webpack:///./src/plugins/manualColumnMove/test/manualColumnMove.e2e.js","webpack:///./src/plugins/manualColumnMove/test/manualColumnMoveUI.e2e.js","webpack:///./src/plugins/manualColumnResize/test/manualColumnResize.e2e.js","webpack:///./src/plugins/manualRowMove/test/manualRowMove.e2e.js","webpack:///./src/plugins/manualRowMove/test/manualRowMoveUI.e2e.js","webpack:///./src/plugins/manualRowResize/test/manualRowResize.e2e.js","webpack:///./src/plugins/mergeCells/test/mergeCells.e2e.js","webpack:///./src/plugins/mergeCells/test/selection.e2e.js","webpack:///./src/plugins/observeChanges/test/observeChanges.e2e.js","webpack:///./src/plugins/persistentState/test/persistentState.e2e.js","webpack:///./src/plugins/search/test/search.e2e.js","webpack:///./src/plugins/undoRedo/test/UndoRedo.e2e.js","webpack:///./test/e2e/MemoryLeakTest.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 121);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 27f3c15f61bbecf36083","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_export.js\n// module id = 0\n// module chunks = 0","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_fails.js\n// module id = 1\n// module chunks = 0","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_an-object.js\n// module id = 2\n// module chunks = 0","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_global.js\n// module id = 3\n// module chunks = 0","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_is-object.js\n// module id = 4\n// module chunks = 0","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_wks.js\n// module id = 5\n// module chunks = 0","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_to-length.js\n// module id = 6\n// module chunks = 0","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-dp.js\n// module id = 7\n// module chunks = 0","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_descriptors.js\n// module id = 8\n// module chunks = 0","var core = module.exports = { version: '2.6.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_core.js\n// module id = 9\n// module chunks = 0","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_redefine.js\n// module id = 10\n// module chunks = 0","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_to-object.js\n// module id = 11\n// module chunks = 0","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_string-html.js\n// module id = 12\n// module chunks = 0","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_has.js\n// module id = 13\n// module chunks = 0","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_hide.js\n// module id = 14\n// module chunks = 0","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_to-iobject.js\n// module id = 15\n// module chunks = 0","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_strict-method.js\n// module id = 16\n// module chunks = 0","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_to-integer.js\n// module id = 17\n// module chunks = 0","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-gopd.js\n// module id = 18\n// module chunks = 0","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-sap.js\n// module id = 19\n// module chunks = 0","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_array-methods.js\n// module id = 20\n// module chunks = 0","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_ctx.js\n// module id = 21\n// module chunks = 0","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_a-function.js\n// module id = 22\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_cof.js\n// module id = 23\n// module chunks = 0","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_defined.js\n// module id = 24\n// module chunks = 0","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_typed-array.js\n// module id = 25\n// module chunks = 0","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_to-primitive.js\n// module id = 26\n// module chunks = 0","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_meta.js\n// module id = 27\n// module chunks = 0","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_property-desc.js\n// module id = 28\n// module chunks = 0","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_uid.js\n// module id = 29\n// module chunks = 0","module.exports = false;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_library.js\n// module id = 30\n// module chunks = 0","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-keys.js\n// module id = 31\n// module chunks = 0","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_to-absolute-index.js\n// module id = 32\n// module chunks = 0","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-create.js\n// module id = 33\n// module chunks = 0","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-gopn.js\n// module id = 34\n// module chunks = 0","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-gpo.js\n// module id = 35\n// module chunks = 0","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_set-to-string-tag.js\n// module id = 36\n// module chunks = 0","module.exports = {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_iterators.js\n// module id = 37\n// module chunks = 0","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_add-to-unscopables.js\n// module id = 38\n// module chunks = 0","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_set-species.js\n// module id = 39\n// module chunks = 0","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_an-instance.js\n// module id = 40\n// module chunks = 0","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_redefine-all.js\n// module id = 41\n// module chunks = 0","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_validate-collection.js\n// module id = 42\n// module chunks = 0","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_iobject.js\n// module id = 43\n// module chunks = 0","exports.f = {}.propertyIsEnumerable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-pie.js\n// module id = 44\n// module chunks = 0","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_classof.js\n// module id = 45\n// module chunks = 0","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_species-constructor.js\n// module id = 46\n// module chunks = 0","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_array-includes.js\n// module id = 47\n// module chunks = 0","exports.f = Object.getOwnPropertySymbols;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-gops.js\n// module id = 48\n// module chunks = 0","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_string-trim.js\n// module id = 49\n// module chunks = 0","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_iter-detect.js\n// module id = 50\n// module chunks = 0","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_flags.js\n// module id = 51\n// module chunks = 0","'use strict';\n\nvar classof = require('./_classof');\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_regexp-exec-abstract.js\n// module id = 52\n// module chunks = 0","'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_fix-re-wks.js\n// module id = 53\n// module chunks = 0","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_for-of.js\n// module id = 54\n// module chunks = 0","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_user-agent.js\n// module id = 55\n// module chunks = 0","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar redefineAll = require('./_redefine-all');\nvar meta = require('./_meta');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar $iterDetect = require('./_iter-detect');\nvar setToStringTag = require('./_set-to-string-tag');\nvar inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_collection.js\n// module id = 56\n// module chunks = 0","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_typed.js\n// module id = 57\n// module chunks = 0","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_dom-create.js\n// module id = 58\n// module chunks = 0","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_shared.js\n// module id = 59\n// module chunks = 0","exports.f = require('./_wks');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_wks-ext.js\n// module id = 60\n// module chunks = 0","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_shared-key.js\n// module id = 61\n// module chunks = 0","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_enum-bug-keys.js\n// module id = 62\n// module chunks = 0","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_is-array.js\n// module id = 63\n// module chunks = 0","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_html.js\n// module id = 64\n// module chunks = 0","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_set-proto.js\n// module id = 65\n// module chunks = 0","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_string-ws.js\n// module id = 66\n// module chunks = 0","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_inherit-if-required.js\n// module id = 67\n// module chunks = 0","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_string-repeat.js\n// module id = 68\n// module chunks = 0","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_math-sign.js\n// module id = 69\n// module chunks = 0","// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_math-expm1.js\n// module id = 70\n// module chunks = 0","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_string-at.js\n// module id = 71\n// module chunks = 0","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_iter-define.js\n// module id = 72\n// module chunks = 0","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_string-context.js\n// module id = 73\n// module chunks = 0","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_is-regexp.js\n// module id = 74\n// module chunks = 0","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_fails-is-regexp.js\n// module id = 75\n// module chunks = 0","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_is-array-iter.js\n// module id = 76\n// module chunks = 0","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_create-property.js\n// module id = 77\n// module chunks = 0","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/core.get-iterator-method.js\n// module id = 78\n// module chunks = 0","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_array-fill.js\n// module id = 79\n// module chunks = 0","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.iterator.js\n// module id = 80\n// module chunks = 0","'use strict';\n\nvar regexpFlags = require('./_flags');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_regexp-exec.js\n// module id = 81\n// module chunks = 0","'use strict';\nvar at = require('./_string-at')(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_advance-string-index.js\n// module id = 82\n// module chunks = 0","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_task.js\n// module id = 83\n// module chunks = 0","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_typed-buffer.js\n// module id = 84\n// module chunks = 0","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_ie8-dom-define.js\n// module id = 85\n// module chunks = 0","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_wks-define.js\n// module id = 86\n// module chunks = 0","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-keys-internal.js\n// module id = 87\n// module chunks = 0","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-dps.js\n// module id = 88\n// module chunks = 0","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-gopn-ext.js\n// module id = 89\n// module chunks = 0","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-assign.js\n// module id = 90\n// module chunks = 0","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_same-value.js\n// module id = 91\n// module chunks = 0","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_bind.js\n// module id = 92\n// module chunks = 0","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_invoke.js\n// module id = 93\n// module chunks = 0","var $parseInt = require('./_global').parseInt;\nvar $trim = require('./_string-trim').trim;\nvar ws = require('./_string-ws');\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_parse-int.js\n// module id = 94\n// module chunks = 0","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_parse-float.js\n// module id = 95\n// module chunks = 0","var cof = require('./_cof');\nmodule.exports = function (it, msg) {\n  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n  return +it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_a-number-value.js\n// module id = 96\n// module chunks = 0","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_is-integer.js\n// module id = 97\n// module chunks = 0","// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_math-log1p.js\n// module id = 98\n// module chunks = 0","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_iter-create.js\n// module id = 99\n// module chunks = 0","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_iter-call.js\n// module id = 100\n// module chunks = 0","var aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar toLength = require('./_to-length');\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_array-reduce.js\n// module id = 101\n// module chunks = 0","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_array-copy-within.js\n// module id = 102\n// module chunks = 0","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_iter-step.js\n// module id = 103\n// module chunks = 0","'use strict';\nvar regexpExec = require('./_regexp-exec');\nrequire('./_export')({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.regexp.exec.js\n// module id = 104\n// module chunks = 0","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.regexp.flags.js\n// module id = 105\n// module chunks = 0","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.promise.js\n// module id = 106\n// module chunks = 0","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_new-promise-capability.js\n// module id = 107\n// module chunks = 0","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_promise-resolve.js\n// module id = 108\n// module chunks = 0","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_collection-strong.js\n// module id = 109\n// module chunks = 0","'use strict';\nvar redefineAll = require('./_redefine-all');\nvar getWeak = require('./_meta').getWeak;\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar createArrayMethod = require('./_array-methods');\nvar $has = require('./_has');\nvar validate = require('./_validate-collection');\nvar arrayFind = createArrayMethod(5);\nvar arrayFindIndex = createArrayMethod(6);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (that) {\n  return that._l || (that._l = new UncaughtFrozenStore());\n};\nvar UncaughtFrozenStore = function () {\n  this.a = [];\n};\nvar findUncaughtFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;      // collection type\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var data = getWeak(anObject(key), true);\n    if (data === true) uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_collection-weak.js\n// module id = 110\n// module chunks = 0","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_to-index.js\n// module id = 111\n// module chunks = 0","// all object keys, includes non-enumerable and symbols\nvar gOPN = require('./_object-gopn');\nvar gOPS = require('./_object-gops');\nvar anObject = require('./_an-object');\nvar Reflect = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_own-keys.js\n// module id = 112\n// module chunks = 0","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_string-pad.js\n// module id = 113\n// module chunks = 0","var getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_object-to-array.js\n// module id = 114\n// module chunks = 0","require('@babel/polyfill/lib/noConflict');\nrequire('jasmine-co').install();\n\nlet testPathRegExp = null;\n\nif (typeof __ENV_ARGS__ === 'object' && __ENV_ARGS__.testPathPattern) {\n  // Remove string between % signs. On Windows' machines an empty env variable was visible as '%{variable_name}%' so it must be stripped.\n  // See https://github.com/handsontable/handsontable/issues/4378).\n  const pattern = __ENV_ARGS__.testPathPattern.replace(/^%(.*)%$/, '');\n\n  if (pattern) {\n    testPathRegExp = new RegExp(pattern, 'i');\n  }\n}\n\nconst ignoredE2ETestsPath = './mobile';\n\n[\n  require.context('.', true, /\\.spec\\.js$/),\n  require.context('./../../src/plugins', true, /\\.e2e\\.js$/),\n].forEach((req) => {\n  req.keys().forEach((filePath) => {\n    if (filePath.includes(ignoredE2ETestsPath) === false) {\n      if (testPathRegExp === null || (testPathRegExp instanceof RegExp && testPathRegExp.test(filePath))) {\n        req(filePath);\n      }\n    }\n  });\n});\n\nrequire('./MemoryLeakTest');\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/index.js","\"use strict\";\n\nrequire(\"core-js/es6\");\n\nrequire(\"core-js/fn/array/includes\");\n\nrequire(\"core-js/fn/string/pad-start\");\n\nrequire(\"core-js/fn/string/pad-end\");\n\nrequire(\"core-js/fn/symbol/async-iterator\");\n\nrequire(\"core-js/fn/object/get-own-property-descriptors\");\n\nrequire(\"core-js/fn/object/values\");\n\nrequire(\"core-js/fn/object/entries\");\n\nrequire(\"core-js/fn/promise/finally\");\n\nrequire(\"core-js/web\");\n\nrequire(\"regenerator-runtime/runtime\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/polyfill/lib/noConflict.js\n// module id = 122\n// module chunks = 0","require('../modules/es6.symbol');\nrequire('../modules/es6.object.create');\nrequire('../modules/es6.object.define-property');\nrequire('../modules/es6.object.define-properties');\nrequire('../modules/es6.object.get-own-property-descriptor');\nrequire('../modules/es6.object.get-prototype-of');\nrequire('../modules/es6.object.keys');\nrequire('../modules/es6.object.get-own-property-names');\nrequire('../modules/es6.object.freeze');\nrequire('../modules/es6.object.seal');\nrequire('../modules/es6.object.prevent-extensions');\nrequire('../modules/es6.object.is-frozen');\nrequire('../modules/es6.object.is-sealed');\nrequire('../modules/es6.object.is-extensible');\nrequire('../modules/es6.object.assign');\nrequire('../modules/es6.object.is');\nrequire('../modules/es6.object.set-prototype-of');\nrequire('../modules/es6.object.to-string');\nrequire('../modules/es6.function.bind');\nrequire('../modules/es6.function.name');\nrequire('../modules/es6.function.has-instance');\nrequire('../modules/es6.parse-int');\nrequire('../modules/es6.parse-float');\nrequire('../modules/es6.number.constructor');\nrequire('../modules/es6.number.to-fixed');\nrequire('../modules/es6.number.to-precision');\nrequire('../modules/es6.number.epsilon');\nrequire('../modules/es6.number.is-finite');\nrequire('../modules/es6.number.is-integer');\nrequire('../modules/es6.number.is-nan');\nrequire('../modules/es6.number.is-safe-integer');\nrequire('../modules/es6.number.max-safe-integer');\nrequire('../modules/es6.number.min-safe-integer');\nrequire('../modules/es6.number.parse-float');\nrequire('../modules/es6.number.parse-int');\nrequire('../modules/es6.math.acosh');\nrequire('../modules/es6.math.asinh');\nrequire('../modules/es6.math.atanh');\nrequire('../modules/es6.math.cbrt');\nrequire('../modules/es6.math.clz32');\nrequire('../modules/es6.math.cosh');\nrequire('../modules/es6.math.expm1');\nrequire('../modules/es6.math.fround');\nrequire('../modules/es6.math.hypot');\nrequire('../modules/es6.math.imul');\nrequire('../modules/es6.math.log10');\nrequire('../modules/es6.math.log1p');\nrequire('../modules/es6.math.log2');\nrequire('../modules/es6.math.sign');\nrequire('../modules/es6.math.sinh');\nrequire('../modules/es6.math.tanh');\nrequire('../modules/es6.math.trunc');\nrequire('../modules/es6.string.from-code-point');\nrequire('../modules/es6.string.raw');\nrequire('../modules/es6.string.trim');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/es6.string.code-point-at');\nrequire('../modules/es6.string.ends-with');\nrequire('../modules/es6.string.includes');\nrequire('../modules/es6.string.repeat');\nrequire('../modules/es6.string.starts-with');\nrequire('../modules/es6.string.anchor');\nrequire('../modules/es6.string.big');\nrequire('../modules/es6.string.blink');\nrequire('../modules/es6.string.bold');\nrequire('../modules/es6.string.fixed');\nrequire('../modules/es6.string.fontcolor');\nrequire('../modules/es6.string.fontsize');\nrequire('../modules/es6.string.italics');\nrequire('../modules/es6.string.link');\nrequire('../modules/es6.string.small');\nrequire('../modules/es6.string.strike');\nrequire('../modules/es6.string.sub');\nrequire('../modules/es6.string.sup');\nrequire('../modules/es6.date.now');\nrequire('../modules/es6.date.to-json');\nrequire('../modules/es6.date.to-iso-string');\nrequire('../modules/es6.date.to-string');\nrequire('../modules/es6.date.to-primitive');\nrequire('../modules/es6.array.is-array');\nrequire('../modules/es6.array.from');\nrequire('../modules/es6.array.of');\nrequire('../modules/es6.array.join');\nrequire('../modules/es6.array.slice');\nrequire('../modules/es6.array.sort');\nrequire('../modules/es6.array.for-each');\nrequire('../modules/es6.array.map');\nrequire('../modules/es6.array.filter');\nrequire('../modules/es6.array.some');\nrequire('../modules/es6.array.every');\nrequire('../modules/es6.array.reduce');\nrequire('../modules/es6.array.reduce-right');\nrequire('../modules/es6.array.index-of');\nrequire('../modules/es6.array.last-index-of');\nrequire('../modules/es6.array.copy-within');\nrequire('../modules/es6.array.fill');\nrequire('../modules/es6.array.find');\nrequire('../modules/es6.array.find-index');\nrequire('../modules/es6.array.species');\nrequire('../modules/es6.array.iterator');\nrequire('../modules/es6.regexp.constructor');\nrequire('../modules/es6.regexp.exec');\nrequire('../modules/es6.regexp.to-string');\nrequire('../modules/es6.regexp.flags');\nrequire('../modules/es6.regexp.match');\nrequire('../modules/es6.regexp.replace');\nrequire('../modules/es6.regexp.search');\nrequire('../modules/es6.regexp.split');\nrequire('../modules/es6.promise');\nrequire('../modules/es6.map');\nrequire('../modules/es6.set');\nrequire('../modules/es6.weak-map');\nrequire('../modules/es6.weak-set');\nrequire('../modules/es6.typed.array-buffer');\nrequire('../modules/es6.typed.data-view');\nrequire('../modules/es6.typed.int8-array');\nrequire('../modules/es6.typed.uint8-array');\nrequire('../modules/es6.typed.uint8-clamped-array');\nrequire('../modules/es6.typed.int16-array');\nrequire('../modules/es6.typed.uint16-array');\nrequire('../modules/es6.typed.int32-array');\nrequire('../modules/es6.typed.uint32-array');\nrequire('../modules/es6.typed.float32-array');\nrequire('../modules/es6.typed.float64-array');\nrequire('../modules/es6.reflect.apply');\nrequire('../modules/es6.reflect.construct');\nrequire('../modules/es6.reflect.define-property');\nrequire('../modules/es6.reflect.delete-property');\nrequire('../modules/es6.reflect.enumerate');\nrequire('../modules/es6.reflect.get');\nrequire('../modules/es6.reflect.get-own-property-descriptor');\nrequire('../modules/es6.reflect.get-prototype-of');\nrequire('../modules/es6.reflect.has');\nrequire('../modules/es6.reflect.is-extensible');\nrequire('../modules/es6.reflect.own-keys');\nrequire('../modules/es6.reflect.prevent-extensions');\nrequire('../modules/es6.reflect.set');\nrequire('../modules/es6.reflect.set-prototype-of');\nmodule.exports = require('../modules/_core');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/es6/index.js\n// module id = 123\n// module chunks = 0","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.symbol.js\n// module id = 124\n// module chunks = 0","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_enum-keys.js\n// module id = 125\n// module chunks = 0","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.create.js\n// module id = 126\n// module chunks = 0","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.define-property.js\n// module id = 127\n// module chunks = 0","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.define-properties.js\n// module id = 128\n// module chunks = 0","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js\n// module id = 129\n// module chunks = 0","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.get-prototype-of.js\n// module id = 130\n// module chunks = 0","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.keys.js\n// module id = 131\n// module chunks = 0","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function () {\n  return require('./_object-gopn-ext').f;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.get-own-property-names.js\n// module id = 132\n// module chunks = 0","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.freeze.js\n// module id = 133\n// module chunks = 0","// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.seal.js\n// module id = 134\n// module chunks = 0","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.prevent-extensions.js\n// module id = 135\n// module chunks = 0","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.is-frozen.js\n// module id = 136\n// module chunks = 0","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.is-sealed.js\n// module id = 137\n// module chunks = 0","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.is-extensible.js\n// module id = 138\n// module chunks = 0","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.assign.js\n// module id = 139\n// module chunks = 0","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', { is: require('./_same-value') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.is.js\n// module id = 140\n// module chunks = 0","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.set-prototype-of.js\n// module id = 141\n// module chunks = 0","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.object.to-string.js\n// module id = 142\n// module chunks = 0","// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = require('./_export');\n\n$export($export.P, 'Function', { bind: require('./_bind') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.function.bind.js\n// module id = 143\n// module chunks = 0","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.function.name.js\n// module id = 144\n// module chunks = 0","'use strict';\nvar isObject = require('./_is-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar HAS_INSTANCE = require('./_wks')('hasInstance');\nvar FunctionProto = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n  if (typeof this != 'function' || !isObject(O)) return false;\n  if (!isObject(this.prototype)) return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n  return false;\n} });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.function.has-instance.js\n// module id = 145\n// module chunks = 0","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.parse-int.js\n// module id = 146\n// module chunks = 0","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.parse-float.js\n// module id = 147\n// module chunks = 0","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.constructor.js\n// module id = 148\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar toInteger = require('./_to-integer');\nvar aNumberValue = require('./_a-number-value');\nvar repeat = require('./_string-repeat');\nvar $toFixed = 1.0.toFixed;\nvar floor = Math.floor;\nvar data = [0, 0, 0, 0, 0, 0];\nvar ERROR = 'Number.toFixed: incorrect invocation!';\nvar ZERO = '0';\n\nvar multiply = function (n, c) {\n  var i = -1;\n  var c2 = c;\n  while (++i < 6) {\n    c2 += n * data[i];\n    data[i] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\nvar divide = function (n) {\n  var i = 6;\n  var c = 0;\n  while (--i >= 0) {\n    c += data[i];\n    data[i] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\nvar numToString = function () {\n  var i = 6;\n  var s = '';\n  while (--i >= 0) {\n    if (s !== '' || i === 0 || data[i] !== 0) {\n      var t = String(data[i]);\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n    }\n  } return s;\n};\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\n$export($export.P + $export.F * (!!$toFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !require('./_fails')(function () {\n  // V8 ~ Android 4.3-\n  $toFixed.call({});\n})), 'Number', {\n  toFixed: function toFixed(fractionDigits) {\n    var x = aNumberValue(this, ERROR);\n    var f = toInteger(fractionDigits);\n    var s = '';\n    var m = ZERO;\n    var e, z, j, k;\n    if (f < 0 || f > 20) throw RangeError(ERROR);\n    // eslint-disable-next-line no-self-compare\n    if (x != x) return 'NaN';\n    if (x <= -1e21 || x >= 1e21) return String(x);\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n    if (x > 1e-21) {\n      e = log(x * pow(2, 69, 1)) - 69;\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = f;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        m = numToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        m = numToString() + repeat.call(ZERO, f);\n      }\n    }\n    if (f > 0) {\n      k = m.length;\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n    } else {\n      m = s + m;\n    } return m;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.to-fixed.js\n// module id = 149\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $fails = require('./_fails');\nvar aNumberValue = require('./_a-number-value');\nvar $toPrecision = 1.0.toPrecision;\n\n$export($export.P + $export.F * ($fails(function () {\n  // IE7-\n  return $toPrecision.call(1, undefined) !== '1';\n}) || !$fails(function () {\n  // V8 ~ Android 4.3-\n  $toPrecision.call({});\n})), 'Number', {\n  toPrecision: function toPrecision(precision) {\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.to-precision.js\n// module id = 150\n// module chunks = 0","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.epsilon.js\n// module id = 151\n// module chunks = 0","// 20.1.2.2 Number.isFinite(number)\nvar $export = require('./_export');\nvar _isFinite = require('./_global').isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it) {\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.is-finite.js\n// module id = 152\n// module chunks = 0","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.is-integer.js\n// module id = 153\n// module chunks = 0","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.is-nan.js\n// module id = 154\n// module chunks = 0","// 20.1.2.5 Number.isSafeInteger(number)\nvar $export = require('./_export');\nvar isInteger = require('./_is-integer');\nvar abs = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number) {\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.is-safe-integer.js\n// module id = 155\n// module chunks = 0","// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.max-safe-integer.js\n// module id = 156\n// module chunks = 0","// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.min-safe-integer.js\n// module id = 157\n// module chunks = 0","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.parse-float.js\n// module id = 158\n// module chunks = 0","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.number.parse-int.js\n// module id = 159\n// module chunks = 0","// 20.2.2.3 Math.acosh(x)\nvar $export = require('./_export');\nvar log1p = require('./_math-log1p');\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.acosh.js\n// module id = 160\n// module chunks = 0","// 20.2.2.5 Math.asinh(x)\nvar $export = require('./_export');\nvar $asinh = Math.asinh;\n\nfunction asinh(x) {\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0\n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.asinh.js\n// module id = 161\n// module chunks = 0","// 20.2.2.7 Math.atanh(x)\nvar $export = require('./_export');\nvar $atanh = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0\n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x) {\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.atanh.js\n// module id = 162\n// module chunks = 0","// 20.2.2.9 Math.cbrt(x)\nvar $export = require('./_export');\nvar sign = require('./_math-sign');\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x) {\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.cbrt.js\n// module id = 163\n// module chunks = 0","// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.clz32.js\n// module id = 164\n// module chunks = 0","// 20.2.2.12 Math.cosh(x)\nvar $export = require('./_export');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.cosh.js\n// module id = 165\n// module chunks = 0","// 20.2.2.14 Math.expm1(x)\nvar $export = require('./_export');\nvar $expm1 = require('./_math-expm1');\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.expm1.js\n// module id = 166\n// module chunks = 0","// 20.2.2.16 Math.fround(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { fround: require('./_math-fround') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.fround.js\n// module id = 167\n// module chunks = 0","// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_math-fround.js\n// module id = 168\n// module chunks = 0","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.hypot.js\n// module id = 169\n// module chunks = 0","// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export');\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.imul.js\n// module id = 170\n// module chunks = 0","// 20.2.2.21 Math.log10(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.log10.js\n// module id = 171\n// module chunks = 0","// 20.2.2.20 Math.log1p(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { log1p: require('./_math-log1p') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.log1p.js\n// module id = 172\n// module chunks = 0","// 20.2.2.22 Math.log2(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log2: function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.log2.js\n// module id = 173\n// module chunks = 0","// 20.2.2.28 Math.sign(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { sign: require('./_math-sign') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.sign.js\n// module id = 174\n// module chunks = 0","// 20.2.2.30 Math.sinh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require('./_fails')(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.sinh.js\n// module id = 175\n// module chunks = 0","// 20.2.2.33 Math.tanh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x) {\n    var a = expm1(x = +x);\n    var b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.tanh.js\n// module id = 176\n// module chunks = 0","// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.math.trunc.js\n// module id = 177\n// module chunks = 0","var $export = require('./_export');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.from-code-point.js\n// module id = 178\n// module chunks = 0","var $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.raw.js\n// module id = 179\n// module chunks = 0","'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire('./_string-trim')('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.trim.js\n// module id = 180\n// module chunks = 0","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.iterator.js\n// module id = 181\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $at = require('./_string-at')(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos) {\n    return $at(this, pos);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.code-point-at.js\n// module id = 182\n// module chunks = 0","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.ends-with.js\n// module id = 183\n// module chunks = 0","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export = require('./_export');\nvar context = require('./_string-context');\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.includes.js\n// module id = 184\n// module chunks = 0","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.repeat.js\n// module id = 185\n// module chunks = 0","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.starts-with.js\n// module id = 186\n// module chunks = 0","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.anchor.js\n// module id = 187\n// module chunks = 0","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.big.js\n// module id = 188\n// module chunks = 0","'use strict';\n// B.2.3.4 String.prototype.blink()\nrequire('./_string-html')('blink', function (createHTML) {\n  return function blink() {\n    return createHTML(this, 'blink', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.blink.js\n// module id = 189\n// module chunks = 0","'use strict';\n// B.2.3.5 String.prototype.bold()\nrequire('./_string-html')('bold', function (createHTML) {\n  return function bold() {\n    return createHTML(this, 'b', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.bold.js\n// module id = 190\n// module chunks = 0","'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.fixed.js\n// module id = 191\n// module chunks = 0","'use strict';\n// B.2.3.7 String.prototype.fontcolor(color)\nrequire('./_string-html')('fontcolor', function (createHTML) {\n  return function fontcolor(color) {\n    return createHTML(this, 'font', 'color', color);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.fontcolor.js\n// module id = 192\n// module chunks = 0","'use strict';\n// B.2.3.8 String.prototype.fontsize(size)\nrequire('./_string-html')('fontsize', function (createHTML) {\n  return function fontsize(size) {\n    return createHTML(this, 'font', 'size', size);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.fontsize.js\n// module id = 193\n// module chunks = 0","'use strict';\n// B.2.3.9 String.prototype.italics()\nrequire('./_string-html')('italics', function (createHTML) {\n  return function italics() {\n    return createHTML(this, 'i', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.italics.js\n// module id = 194\n// module chunks = 0","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.link.js\n// module id = 195\n// module chunks = 0","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.small.js\n// module id = 196\n// module chunks = 0","'use strict';\n// B.2.3.12 String.prototype.strike()\nrequire('./_string-html')('strike', function (createHTML) {\n  return function strike() {\n    return createHTML(this, 'strike', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.strike.js\n// module id = 197\n// module chunks = 0","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.sub.js\n// module id = 198\n// module chunks = 0","'use strict';\n// B.2.3.14 String.prototype.sup()\nrequire('./_string-html')('sup', function (createHTML) {\n  return function sup() {\n    return createHTML(this, 'sup', '', '');\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.string.sup.js\n// module id = 199\n// module chunks = 0","// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = require('./_export');\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.date.now.js\n// module id = 200\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.date.to-json.js\n// module id = 201\n// module chunks = 0","// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar $export = require('./_export');\nvar toISOString = require('./_date-to-iso-string');\n\n// PhantomJS / old WebKit has a broken implementations\n$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n  toISOString: toISOString\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.date.to-iso-string.js\n// module id = 202\n// module chunks = 0","'use strict';\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar fails = require('./_fails');\nvar getTime = Date.prototype.getTime;\nvar $toISOString = Date.prototype.toISOString;\n\nvar lz = function (num) {\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\nmodule.exports = (fails(function () {\n  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  $toISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var d = this;\n  var y = d.getUTCFullYear();\n  var m = d.getUTCMilliseconds();\n  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n} : $toISOString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_date-to-iso-string.js\n// module id = 203\n// module chunks = 0","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.date.to-string.js\n// module id = 204\n// module chunks = 0","var TO_PRIMITIVE = require('./_wks')('toPrimitive');\nvar proto = Date.prototype;\n\nif (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.date.to-primitive.js\n// module id = 205\n// module chunks = 0","'use strict';\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\nvar NUMBER = 'number';\n\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n  return toPrimitive(anObject(this), hint != NUMBER);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_date-to-primitive.js\n// module id = 206\n// module chunks = 0","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.is-array.js\n// module id = 207\n// module chunks = 0","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.from.js\n// module id = 208\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.of.js\n// module id = 209\n// module chunks = 0","'use strict';\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {\n  join: function join(separator) {\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.join.js\n// module id = 210\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar html = require('./_html');\nvar cof = require('./_cof');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * require('./_fails')(function () {\n  if (html) arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end) {\n    var len = toLength(this.length);\n    var klass = cof(this);\n    end = end === undefined ? len : end;\n    if (klass == 'Array') return arraySlice.call(this, begin, end);\n    var start = toAbsoluteIndex(begin, len);\n    var upTo = toAbsoluteIndex(end, len);\n    var size = toLength(upTo - start);\n    var cloned = new Array(size);\n    var i = 0;\n    for (; i < size; i++) cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.slice.js\n// module id = 211\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.sort.js\n// module id = 212\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $forEach = require('./_array-methods')(0);\nvar STRICT = require('./_strict-method')([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.for-each.js\n// module id = 213\n// module chunks = 0","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_array-species-create.js\n// module id = 214\n// module chunks = 0","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_array-species-constructor.js\n// module id = 215\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $map = require('./_array-methods')(1);\n\n$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.map.js\n// module id = 216\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $filter = require('./_array-methods')(2);\n\n$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.filter.js\n// module id = 217\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $some = require('./_array-methods')(3);\n\n$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.some.js\n// module id = 218\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $every = require('./_array-methods')(4);\n\n$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments[1]);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.every.js\n// module id = 219\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.reduce.js\n// module id = 220\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.reduce-right.js\n// module id = 221\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $indexOf = require('./_array-includes')(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.index-of.js\n// module id = 222\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.last-index-of.js\n// module id = 223\n// module chunks = 0","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });\n\nrequire('./_add-to-unscopables')('copyWithin');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.copy-within.js\n// module id = 224\n// module chunks = 0","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.fill.js\n// module id = 225\n// module chunks = 0","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.find.js\n// module id = 226\n// module chunks = 0","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.find-index.js\n// module id = 227\n// module chunks = 0","require('./_set-species')('Array');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.array.species.js\n// module id = 228\n// module chunks = 0","var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.regexp.constructor.js\n// module id = 229\n// module chunks = 0","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.regexp.to-string.js\n// module id = 230\n// module chunks = 0","'use strict';\n\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.regexp.match.js\n// module id = 231\n// module chunks = 0","'use strict';\n\nvar anObject = require('./_an-object');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return ch;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return ch;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return ch;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.regexp.replace.js\n// module id = 232\n// module chunks = 0","'use strict';\n\nvar anObject = require('./_an-object');\nvar sameValue = require('./_same-value');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@search logic\nrequire('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {\n  return [\n    // `String.prototype.search` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[SEARCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n    },\n    // `RegExp.prototype[@@search]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n    function (regexp) {\n      var res = maybeCallNative($search, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      var previousLastIndex = rx.lastIndex;\n      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n      var result = regExpExec(rx, S);\n      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }\n  ];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.regexp.search.js\n// module id = 233\n// module chunks = 0","'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\n\n// eslint-disable-next-line no-empty\nvar SUPPORTS_Y = !!(function () { try { return new RegExp('x', 'y'); } catch (e) {} })();\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                    (rx.multiline ? 'm' : '') +\n                    (rx.unicode ? 'u' : '') +\n                    (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? 0xffffffff : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.regexp.split.js\n// module id = 234\n// module chunks = 0","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_microtask.js\n// module id = 235\n// module chunks = 0","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/_perform.js\n// module id = 236\n// module chunks = 0","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.map.js\n// module id = 237\n// module chunks = 0","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.set.js\n// module id = 238\n// module chunks = 0","'use strict';\nvar each = require('./_array-methods')(0);\nvar redefine = require('./_redefine');\nvar meta = require('./_meta');\nvar assign = require('./_object-assign');\nvar weak = require('./_collection-weak');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar validate = require('./_validate-collection');\nvar WEAK_MAP = 'WeakMap';\nvar getWeak = meta.getWeak;\nvar isExtensible = Object.isExtensible;\nvar uncaughtFrozenStore = weak.ufstore;\nvar tmp = {};\nvar InternalMap;\n\nvar wrapper = function (get) {\n  return function WeakMap() {\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key) {\n    if (isObject(key)) {\n      var data = getWeak(key);\n      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value) {\n    return weak.def(validate(this, WEAK_MAP), key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {\n  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function (key) {\n    var proto = $WeakMap.prototype;\n    var method = proto[key];\n    redefine(proto, key, function (a, b) {\n      // store frozen objects on internal weakmap shim\n      if (isObject(a) && !isExtensible(a)) {\n        if (!this._f) this._f = new InternalMap();\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.weak-map.js\n// module id = 239\n// module chunks = 0","'use strict';\nvar weak = require('./_collection-weak');\nvar validate = require('./_validate-collection');\nvar WEAK_SET = 'WeakSet';\n\n// 23.4 WeakSet Objects\nrequire('./_collection')(WEAK_SET, function (get) {\n  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value) {\n    return weak.def(validate(this, WEAK_SET), value, true);\n  }\n}, weak, false, true);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.weak-set.js\n// module id = 240\n// module chunks = 0","'use strict';\nvar $export = require('./_export');\nvar $typed = require('./_typed');\nvar buffer = require('./_typed-buffer');\nvar anObject = require('./_an-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar isObject = require('./_is-object');\nvar ArrayBuffer = require('./_global').ArrayBuffer;\nvar speciesConstructor = require('./_species-constructor');\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * require('./_fails')(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n    while (first < fin) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\nrequire('./_set-species')(ARRAY_BUFFER);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.array-buffer.js\n// module id = 241\n// module chunks = 0","var $export = require('./_export');\n$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {\n  DataView: require('./_typed-buffer').DataView\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.data-view.js\n// module id = 242\n// module chunks = 0","require('./_typed-array')('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.int8-array.js\n// module id = 243\n// module chunks = 0","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.uint8-array.js\n// module id = 244\n// module chunks = 0","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js\n// module id = 245\n// module chunks = 0","require('./_typed-array')('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.int16-array.js\n// module id = 246\n// module chunks = 0","require('./_typed-array')('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.uint16-array.js\n// module id = 247\n// module chunks = 0","require('./_typed-array')('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.int32-array.js\n// module id = 248\n// module chunks = 0","require('./_typed-array')('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.uint32-array.js\n// module id = 249\n// module chunks = 0","require('./_typed-array')('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.float32-array.js\n// module id = 250\n// module chunks = 0","require('./_typed-array')('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.typed.float64-array.js\n// module id = 251\n// module chunks = 0","// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar rApply = (require('./_global').Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !require('./_fails')(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.apply.js\n// module id = 252\n// module chunks = 0","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.construct.js\n// module id = 253\n// module chunks = 0","// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP = require('./_object-dp');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * require('./_fails')(function () {\n  // eslint-disable-next-line no-undef\n  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes) {\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.define-property.js\n// module id = 254\n// module chunks = 0","// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export = require('./_export');\nvar gOPD = require('./_object-gopd').f;\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey) {\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.delete-property.js\n// module id = 255\n// module chunks = 0","'use strict';\n// 26.1.5 Reflect.enumerate(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar Enumerate = function (iterated) {\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = [];      // keys\n  var key;\n  for (key in iterated) keys.push(key);\n};\nrequire('./_iter-create')(Enumerate, 'Object', function () {\n  var that = this;\n  var keys = that._k;\n  var key;\n  do {\n    if (that._i >= keys.length) return { value: undefined, done: true };\n  } while (!((key = keys[that._i++]) in that._t));\n  return { value: key, done: false };\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target) {\n    return new Enumerate(target);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.enumerate.js\n// module id = 256\n// module chunks = 0","// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\n\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var desc, proto;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', { get: get });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.get.js\n// module id = 257\n// module chunks = 0","// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD = require('./_object-gopd');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js\n// module id = 258\n// module chunks = 0","// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export = require('./_export');\nvar getProto = require('./_object-gpo');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target) {\n    return getProto(anObject(target));\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.get-prototype-of.js\n// module id = 259\n// module chunks = 0","// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey) {\n    return propertyKey in target;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.has.js\n// module id = 260\n// module chunks = 0","// 26.1.10 Reflect.isExtensible(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target) {\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.is-extensible.js\n// module id = 261\n// module chunks = 0","// 26.1.11 Reflect.ownKeys(target)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.own-keys.js\n// module id = 262\n// module chunks = 0","// 26.1.12 Reflect.preventExtensions(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target) {\n    anObject(target);\n    try {\n      if ($preventExtensions) $preventExtensions(target);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.prevent-extensions.js\n// module id = 263\n// module chunks = 0","// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP = require('./_object-dp');\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar createDesc = require('./_property-desc');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\n\nfunction set(target, propertyKey, V /* , receiver */) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDesc = gOPD.f(anObject(target), propertyKey);\n  var existingDescriptor, proto;\n  if (!ownDesc) {\n    if (isObject(proto = getPrototypeOf(target))) {\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if (has(ownDesc, 'value')) {\n    if (ownDesc.writable === false || !isObject(receiver)) return false;\n    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {\n      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n      existingDescriptor.value = V;\n      dP.f(receiver, propertyKey, existingDescriptor);\n    } else dP.f(receiver, propertyKey, createDesc(0, V));\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', { set: set });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.set.js\n// module id = 264\n// module chunks = 0","// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export = require('./_export');\nvar setProto = require('./_set-proto');\n\nif (setProto) $export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto) {\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es6.reflect.set-prototype-of.js\n// module id = 265\n// module chunks = 0","require('../../modules/es7.array.includes');\nmodule.exports = require('../../modules/_core').Array.includes;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/fn/array/includes.js\n// module id = 266\n// module chunks = 0","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es7.array.includes.js\n// module id = 267\n// module chunks = 0","require('../../modules/es7.string.pad-start');\nmodule.exports = require('../../modules/_core').String.padStart;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/fn/string/pad-start.js\n// module id = 268\n// module chunks = 0","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\n$export($export.P + $export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(userAgent), 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es7.string.pad-start.js\n// module id = 269\n// module chunks = 0","require('../../modules/es7.string.pad-end');\nmodule.exports = require('../../modules/_core').String.padEnd;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/fn/string/pad-end.js\n// module id = 270\n// module chunks = 0","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\n$export($export.P + $export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(userAgent), 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es7.string.pad-end.js\n// module id = 271\n// module chunks = 0","require('../../modules/es7.symbol.async-iterator');\nmodule.exports = require('../../modules/_wks-ext').f('asyncIterator');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/fn/symbol/async-iterator.js\n// module id = 272\n// module chunks = 0","require('./_wks-define')('asyncIterator');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es7.symbol.async-iterator.js\n// module id = 273\n// module chunks = 0","require('../../modules/es7.object.get-own-property-descriptors');\nmodule.exports = require('../../modules/_core').Object.getOwnPropertyDescriptors;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/fn/object/get-own-property-descriptors.js\n// module id = 274\n// module chunks = 0","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = require('./_export');\nvar ownKeys = require('./_own-keys');\nvar toIObject = require('./_to-iobject');\nvar gOPD = require('./_object-gopd');\nvar createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js\n// module id = 275\n// module chunks = 0","require('../../modules/es7.object.values');\nmodule.exports = require('../../modules/_core').Object.values;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/fn/object/values.js\n// module id = 276\n// module chunks = 0","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es7.object.values.js\n// module id = 277\n// module chunks = 0","require('../../modules/es7.object.entries');\nmodule.exports = require('../../modules/_core').Object.entries;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/fn/object/entries.js\n// module id = 278\n// module chunks = 0","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es7.object.entries.js\n// module id = 279\n// module chunks = 0","'use strict';\nrequire('../../modules/es6.promise');\nrequire('../../modules/es7.promise.finally');\nmodule.exports = require('../../modules/_core').Promise['finally'];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/fn/promise/finally.js\n// module id = 280\n// module chunks = 0","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/es7.promise.finally.js\n// module id = 281\n// module chunks = 0","require('../modules/web.timers');\nrequire('../modules/web.immediate');\nrequire('../modules/web.dom.iterable');\nmodule.exports = require('../modules/_core');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/web/index.js\n// module id = 282\n// module chunks = 0","// ie9- setTimeout & setInterval additional parameters fix\nvar global = require('./_global');\nvar $export = require('./_export');\nvar userAgent = require('./_user-agent');\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\nvar wrap = function (set) {\n  return function (fn, time /* , ...args */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : false;\n    return set(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n    } : fn, time);\n  };\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout: wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/web.timers.js\n// module id = 283\n// module chunks = 0","var $export = require('./_export');\nvar $task = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/web.immediate.js\n// module id = 284\n// module chunks = 0","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/modules/web.dom.iterable.js\n// module id = 285\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime.js\n// module id = 286\n// module chunks = 0","var co = require('co'),\n    isGeneratorFn = require('is-generator').fn;\n\nvar DEFAULT_METHODS = [\n    'afterAll',\n    'afterEach',\n    'beforeAll',\n    'beforeEach',\n    'it', 'fit', //'xit',\n];\nvar EXPECTS_NAME = ['it', 'fit', 'xit'];\n\nvar originalMethods = {},\n    overrideMethods, installed;\n\nmodule.exports = function jasmineCo(userFn) {\n    return wrapFn(userFn);\n};\nmodule.exports.install = function install() {\n    (overrideMethods || DEFAULT_METHODS).forEach(function(fname) {\n        coifyJasmineFn(fname);\n    });\n    installed = true;\n};\nmodule.exports.uninstall = function uninstall() {\n    Object.keys(originalMethods).forEach(function(key) {\n        global[key] = originalMethods[key];\n    });\n    originalMethods = {};\n    installed = false;\n};\nmodule.exports.isInstalled = function isInstalled() {\n    return installed;\n};\nmodule.exports.setOverrideMethods = function setOverrideMethods(methods) {\n    overrideMethods = Array.isArray(methods) ? methods : DEFAULT_METHODS;\n};\n\nfunction coifyJasmineFn(fname) {\n    // don't process methods that don't exist globally or have already been overridden\n    if (!global[fname] || originalMethods[fname]) { return; }\n\n    var origFn = originalMethods[fname] = global[fname];\n    global[fname] = wrapFn(origFn, EXPECTS_NAME.indexOf(fname) !== -1);\n}\n\nfunction wrapFn(origFn, expectsName) {\n    return function() {\n        var userFn = expectsName ? arguments[1] : arguments[0];\n        var restParams = [].slice.call(arguments, expectsName ? 2 : 1);\n        var args;\n        if (isGeneratorFn(userFn)) {\n            // if the user method is a generator:\n            //   1. call it with the correct `this` context object\n            //   2. wrap it in a co function which fails the spec if an exception is\n            //      encountered and notifies jasmine that the spec is done when the co\n            //      promise settles\n            args = [function(done) {\n                return co(userFn.bind(this)).then(done, done.fail);\n            }];\n            if (expectsName) { args.unshift(arguments[0]); }\n            if (restParams.length) { args.push.apply(args, restParams); }\n            return origFn.apply(null, args);\n        } else if (userFn && !userFn.length) {\n            // if the user method is a standard function that doesn't expect to be asynchronous\n            // (i.e. it doesn't take `done` as a parameter), wrap it with a function that *is*\n            // asynchronous and retrofit it to support returning a promise from the function\n            args = [function(done) {\n                var result = userFn.call(this);\n                if (!(result && typeof result.then === 'function')) {\n                    done();\n                    return result;\n                } else {\n                    result.then(done, done.fail);\n                }\n            }];\n            if (expectsName) { args.unshift(arguments[0]); }\n            if (restParams.length) { args.push.apply(args, restParams); }\n            return origFn.apply(null, args);\n        } else {\n            // if the user method is already asynchronous, just call the standard jasmine method\n            // and let the user method take care of itself\n            return origFn.apply(null, arguments);\n        }\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jasmine-co/index.js\n// module id = 287\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 288\n// module chunks = 0","\n/**\n * slice() reference.\n */\n\nvar slice = Array.prototype.slice;\n\n/**\n * Expose `co`.\n */\n\nmodule.exports = co['default'] = co.co = co;\n\n/**\n * Wrap the given generator `fn` into a\n * function that returns a promise.\n * This is a separate function so that\n * every `co()` call doesn't create a new,\n * unnecessary closure.\n *\n * @param {GeneratorFunction} fn\n * @return {Function}\n * @api public\n */\n\nco.wrap = function (fn) {\n  createPromise.__generatorFunction__ = fn;\n  return createPromise;\n  function createPromise() {\n    return co.call(this, fn.apply(this, arguments));\n  }\n};\n\n/**\n * Execute the generator function or a generator\n * and return a promise.\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nfunction co(gen) {\n  var ctx = this;\n  var args = slice.call(arguments, 1)\n\n  // we wrap everything in a promise to avoid promise chaining,\n  // which leads to memory leak errors.\n  // see https://github.com/tj/co/issues/180\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.apply(ctx, args);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n\n    onFulfilled();\n\n    /**\n     * @param {Mixed} res\n     * @return {Promise}\n     * @api private\n     */\n\n    function onFulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    /**\n     * @param {Error} err\n     * @return {Promise}\n     * @api private\n     */\n\n    function onRejected(err) {\n      var ret;\n      try {\n        ret = gen.throw(err);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    /**\n     * Get the next value in the generator,\n     * return a promise.\n     *\n     * @param {Object} ret\n     * @return {Promise}\n     * @api private\n     */\n\n    function next(ret) {\n      if (ret.done) return resolve(ret.value);\n      var value = toPromise.call(ctx, ret.value);\n      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n    }\n  });\n}\n\n/**\n * Convert a `yield`ed value into a promise.\n *\n * @param {Mixed} obj\n * @return {Promise}\n * @api private\n */\n\nfunction toPromise(obj) {\n  if (!obj) return obj;\n  if (isPromise(obj)) return obj;\n  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);\n  if ('function' == typeof obj) return thunkToPromise.call(this, obj);\n  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);\n  if (isObject(obj)) return objectToPromise.call(this, obj);\n  return obj;\n}\n\n/**\n * Convert a thunk to a promise.\n *\n * @param {Function}\n * @return {Promise}\n * @api private\n */\n\nfunction thunkToPromise(fn) {\n  var ctx = this;\n  return new Promise(function (resolve, reject) {\n    fn.call(ctx, function (err, res) {\n      if (err) return reject(err);\n      if (arguments.length > 2) res = slice.call(arguments, 1);\n      resolve(res);\n    });\n  });\n}\n\n/**\n * Convert an array of \"yieldables\" to a promise.\n * Uses `Promise.all()` internally.\n *\n * @param {Array} obj\n * @return {Promise}\n * @api private\n */\n\nfunction arrayToPromise(obj) {\n  return Promise.all(obj.map(toPromise, this));\n}\n\n/**\n * Convert an object of \"yieldables\" to a promise.\n * Uses `Promise.all()` internally.\n *\n * @param {Object} obj\n * @return {Promise}\n * @api private\n */\n\nfunction objectToPromise(obj){\n  var results = new obj.constructor();\n  var keys = Object.keys(obj);\n  var promises = [];\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var promise = toPromise.call(this, obj[key]);\n    if (promise && isPromise(promise)) defer(promise, key);\n    else results[key] = obj[key];\n  }\n  return Promise.all(promises).then(function () {\n    return results;\n  });\n\n  function defer(promise, key) {\n    // predefine the key in the result\n    results[key] = undefined;\n    promises.push(promise.then(function (res) {\n      results[key] = res;\n    }));\n  }\n}\n\n/**\n * Check if `obj` is a promise.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isPromise(obj) {\n  return 'function' == typeof obj.then;\n}\n\n/**\n * Check if `obj` is a generator.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isGenerator(obj) {\n  return 'function' == typeof obj.next && 'function' == typeof obj.throw;\n}\n\n/**\n * Check if `obj` is a generator function.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\nfunction isGeneratorFunction(obj) {\n  var constructor = obj.constructor;\n  if (!constructor) return false;\n  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;\n  return isGenerator(constructor.prototype);\n}\n\n/**\n * Check for plain object.\n *\n * @param {Mixed} val\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(val) {\n  return Object == val.constructor;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/co/index.js\n// module id = 289\n// module chunks = 0","/**\n * Export generator function checks.\n */\nmodule.exports = isGenerator\nmodule.exports.fn = isGeneratorFunction\n\n/**\n * Check whether an object is a generator.\n *\n * @param  {Object}  obj\n * @return {Boolean}\n */\nfunction isGenerator (obj) {\n  return obj &&\n    typeof obj.next === 'function' &&\n    typeof obj.throw === 'function'\n}\n\n/**\n * Check whether a function is generator.\n *\n * @param  {Function} fn\n * @return {Boolean}\n */\nfunction isGeneratorFunction (fn) {\n  return typeof fn === 'function' &&\n    fn.constructor &&\n    fn.constructor.name === 'GeneratorFunction'\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/is-generator/is-generator.js\n// module id = 290\n// module chunks = 0","var map = {\n\t\"./ColHeader.spec.js\": 292,\n\t\"./Core_alter.spec.js\": 293,\n\t\"./Core_beforeKeyDown.spec.js\": 294,\n\t\"./Core_beforechange.spec.js\": 295,\n\t\"./Core_count.spec.js\": 296,\n\t\"./Core_countEmptyCols.spec.js\": 297,\n\t\"./Core_countEmptyRows.spec.js\": 298,\n\t\"./Core_dataSchema.spec.js\": 299,\n\t\"./Core_datachange.spec.js\": 300,\n\t\"./Core_destroy.spec.js\": 301,\n\t\"./Core_destroyEditor.spec.js\": 302,\n\t\"./Core_getCellMeta.spec.js\": 303,\n\t\"./Core_getColHeader.spec.js\": 304,\n\t\"./Core_getDataAt.spec.js\": 305,\n\t\"./Core_getDataType.spec.js\": 306,\n\t\"./Core_getRowHeader.spec.js\": 307,\n\t\"./Core_init.spec.js\": 308,\n\t\"./Core_isEmpty.spec.js\": 309,\n\t\"./Core_keepEmptyRows.spec.js\": 310,\n\t\"./Core_listen.spec.js\": 311,\n\t\"./Core_loadData.spec.js\": 312,\n\t\"./Core_navigation.spec.js\": 313,\n\t\"./Core_onKeyDown.spec.js\": 314,\n\t\"./Core_populateFromArray.spec.js\": 315,\n\t\"./Core_reCreate.spec.js\": 316,\n\t\"./Core_removeCellMeta.spec.js\": 317,\n\t\"./Core_render.spec.js\": 318,\n\t\"./Core_selection.spec.js\": 319,\n\t\"./Core_setDataAtCell.spec.js\": 320,\n\t\"./Core_splice.spec.js\": 321,\n\t\"./Core_update.spec.js\": 322,\n\t\"./Core_validate.spec.js\": 323,\n\t\"./Core_view.spec.js\": 324,\n\t\"./Dom.spec.js\": 325,\n\t\"./Performance.spec.js\": 326,\n\t\"./PluginHooks.spec.js\": 327,\n\t\"./RowHeader.spec.js\": 328,\n\t\"./cellTypes/index.spec.js\": 329,\n\t\"./core/colToProp.spec.js\": 330,\n\t\"./core/countSourceCols.spec.js\": 331,\n\t\"./core/emptySelectedCells.spec.js\": 332,\n\t\"./core/getCellMetaAtRow.spec.js\": 333,\n\t\"./core/getCellsMeta.spec.js\": 334,\n\t\"./core/getCopyableData.spec.js\": 335,\n\t\"./core/getCopyableText.spec.js\": 336,\n\t\"./core/getSelected.spec.js\": 337,\n\t\"./core/getSelectedLast.spec.js\": 338,\n\t\"./core/getSelectedRange.spec.js\": 339,\n\t\"./core/getSelectedRangeLast.spec.js\": 340,\n\t\"./core/getSourceDataArray.spec.js\": 341,\n\t\"./core/getSourceDataAtCell.spec.js\": 342,\n\t\"./core/getSourceDataAtCol.spec.js\": 343,\n\t\"./core/propToCol.spec.js\": 344,\n\t\"./core/selectAll.spec.js\": 345,\n\t\"./core/selectCell.spec.js\": 346,\n\t\"./core/selectCells.spec.js\": 347,\n\t\"./core/selectColumns.spec.js\": 348,\n\t\"./core/selectRows.spec.js\": 349,\n\t\"./core/setCellMeta.spec.js\": 350,\n\t\"./core/spliceCellsMeta.spec.js\": 351,\n\t\"./core/spliceCol.spec.js\": 352,\n\t\"./core/spliceRow.spec.js\": 353,\n\t\"./core/toPhysicalColumn.spec.js\": 354,\n\t\"./core/toPhysicalRow.spec.js\": 355,\n\t\"./core/toVisualColumn.spec.js\": 356,\n\t\"./core/toVisualRow.spec.js\": 357,\n\t\"./editors/autocompleteEditor.spec.js\": 358,\n\t\"./editors/baseEditor.spec.js\": 359,\n\t\"./editors/dateEditor.spec.js\": 360,\n\t\"./editors/dropdownEditor.spec.js\": 361,\n\t\"./editors/handsontableEditor.spec.js\": 362,\n\t\"./editors/index.spec.js\": 363,\n\t\"./editors/noEditor.spec.js\": 364,\n\t\"./editors/numericEditor.spec.js\": 365,\n\t\"./editors/passwordEditor.spec.js\": 366,\n\t\"./editors/selectEditor.spec.js\": 367,\n\t\"./editors/textEditor.spec.js\": 368,\n\t\"./i18n/index.spec.js\": 369,\n\t\"./mobile/events.spec.js\": 370,\n\t\"./mobile/scroll.spec.js\": 371,\n\t\"./mobile/selection.spec.js\": 372,\n\t\"./publicAPI.spec.js\": 373,\n\t\"./renderers/autocompleteRenderer.spec.js\": 374,\n\t\"./renderers/cellDecorator.spec.js\": 375,\n\t\"./renderers/checkboxRenderer.spec.js\": 376,\n\t\"./renderers/htmlRenderer.spec.js\": 377,\n\t\"./renderers/index.spec.js\": 378,\n\t\"./renderers/numericRenderer.spec.js\": 379,\n\t\"./renderers/passwordRenderer.spec.js\": 380,\n\t\"./renderers/textRenderer.spec.js\": 381,\n\t\"./settings/autoWrapCol.spec.js\": 382,\n\t\"./settings/autoWrapRow.spec.js\": 383,\n\t\"./settings/colWidths.spec.js\": 384,\n\t\"./settings/columns.spec.js\": 385,\n\t\"./settings/copyable.spec.js\": 386,\n\t\"./settings/currentHeaderClassName.spec.js\": 387,\n\t\"./settings/currentRowClassName.spec.js\": 388,\n\t\"./settings/editor.spec.js\": 389,\n\t\"./settings/fixedColumnsLeft.spec.js\": 390,\n\t\"./settings/fixedRowsBottom.spec.js\": 391,\n\t\"./settings/fixedRowsTop.spec.js\": 392,\n\t\"./settings/fragmentSelection.spec.js\": 393,\n\t\"./settings/maxCols.spec.js\": 394,\n\t\"./settings/maxRows.spec.js\": 395,\n\t\"./settings/outsideClickDeselects.spec.js\": 396,\n\t\"./settings/renderer.spec.js\": 397,\n\t\"./settings/tableClassName.spec.js\": 398,\n\t\"./utils/ghostTable.spec.js\": 399,\n\t\"./validators/autocompleteValidator.spec.js\": 400,\n\t\"./validators/dateValidator.spec.js\": 401,\n\t\"./validators/index.spec.js\": 402,\n\t\"./validators/numericValidator.spec.js\": 403,\n\t\"./validators/timeValidator.spec.js\": 404\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 291;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./test/e2e \\.spec\\.js$\n// module id = 291\n// module chunks = 0","describe('ColHeader', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should not show col headers by default', () => {\n    handsontable();\n\n    expect(spec().$container.find('thead th').length).toEqual(0);\n  });\n\n  it('should show col headers if true', () => {\n    handsontable({\n      colHeaders: true\n    });\n\n    expect(spec().$container.find('thead th').length).toBeGreaterThan(0);\n  });\n\n  it('should show default columns headers labelled A-(Z * n)', () => {\n    const startCols = 5;\n\n    handsontable({\n      startCols,\n      colHeaders: true\n    });\n\n    const ths = getHtCore().find('thead th');\n    expect(ths.length).toEqual(startCols);\n    expect($.trim(ths.eq(0).text())).toEqual('A');\n    expect($.trim(ths.eq(1).text())).toEqual('B');\n    expect($.trim(ths.eq(2).text())).toEqual('C');\n    expect($.trim(ths.eq(3).text())).toEqual('D');\n    expect($.trim(ths.eq(4).text())).toEqual('E');\n  });\n\n  it('should show default columns headers labelled A-(Z * n) when columns as an array is present', () => {\n    const startCols = 5;\n\n    handsontable({\n      startCols,\n      colHeaders: true,\n      columns: [{}, {}, {}, {}, {}]\n    });\n\n    const ths = getHtCore().find('thead th');\n    expect(ths.length).toEqual(startCols);\n    expect($.trim(ths.eq(0).text())).toEqual('A');\n    expect($.trim(ths.eq(1).text())).toEqual('B');\n    expect($.trim(ths.eq(2).text())).toEqual('C');\n    expect($.trim(ths.eq(3).text())).toEqual('D');\n    expect($.trim(ths.eq(4).text())).toEqual('E');\n  });\n\n  it('should show default columns headers labelled A-(Z * n) when columns as a function is present', () => {\n    const startCols = 5;\n\n    handsontable({\n      startCols,\n      colHeaders: true,\n      columns() {\n        return {};\n      }\n    });\n\n    const ths = getHtCore().find('thead th');\n    expect(ths.length).toEqual(startCols);\n    expect($.trim(ths.eq(0).text())).toEqual('A');\n    expect($.trim(ths.eq(1).text())).toEqual('B');\n    expect($.trim(ths.eq(2).text())).toEqual('C');\n    expect($.trim(ths.eq(3).text())).toEqual('D');\n    expect($.trim(ths.eq(4).text())).toEqual('E');\n  });\n\n  it('should show col headers with custom label', () => {\n    const startCols = 5;\n    handsontable({\n      startCols,\n      colHeaders: ['First', 'Second', 'Third']\n    });\n\n    const ths = getHtCore().find('thead th');\n    expect(ths.length).toEqual(startCols);\n    expect($.trim(ths.eq(0).text())).toEqual('First');\n    expect($.trim(ths.eq(1).text())).toEqual('Second');\n    expect($.trim(ths.eq(2).text())).toEqual('Third');\n    expect($.trim(ths.eq(3).text())).toEqual('D');\n    expect($.trim(ths.eq(4).text())).toEqual('E');\n  });\n\n  it('should not show col headers if false', () => {\n    handsontable({\n      colHeaders: false\n    });\n\n    expect(spec().$container.find('th.htColHeader').length).toEqual(0);\n  });\n\n  it('should hide columns headers after updateSettings', () => {\n    const hot = handsontable({\n      startCols: 5,\n      colHeaders: true\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(5);\n    expect(getTopClone().find('thead th').length).toEqual(5);\n\n    hot.updateSettings({\n      colHeaders: false\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(0);\n    expect(getTopClone().width()).toEqual(0);\n  });\n\n  it('should show/hide columns headers after updateSettings', () => {\n    const hot = handsontable({\n      startCols: 5,\n      colHeaders: true\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(5);\n    expect(getTopClone().find('thead th').length).toEqual(5);\n\n    hot.updateSettings({\n      colHeaders: false\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(0);\n    expect(getTopClone().width()).toEqual(0);\n\n    hot.updateSettings({\n      colHeaders: true\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(5);\n    expect(getTopClone().width()).toBeGreaterThan(0);\n\n    hot.updateSettings({\n      colHeaders: false\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(0);\n    expect(getTopClone().width()).toEqual(0);\n  });\n\n  it('should show columns headers after updateSettings', () => {\n    const hot = handsontable({\n      startCols: 5,\n      colHeaders: false\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(0);\n    expect(getTopClone().find('thead th').length).toEqual(0);\n\n    hot.updateSettings({\n      colHeaders: true\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(5);\n    expect(getTopClone().find('thead th').length).toEqual(5);\n  });\n\n  it('should show new columns headers after updateSettings', () => {\n    const hot = handsontable({\n      startCols: 3,\n      colHeaders: ['A', 'B', 'C']\n    });\n\n    const htCore = getHtCore();\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('A');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('B');\n    expect(htCore.find('thead th:eq(2)').text()).toEqual('C');\n\n    hot.updateSettings({\n      colHeaders: ['X', 'Y', 'Z']\n    });\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('X');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Y');\n    expect(htCore.find('thead th:eq(2)').text()).toEqual('Z');\n\n  });\n\n  it('should be possible to define colHeaders with a function', () => {\n    handsontable({\n      startCols: 2,\n      colHeaders(col) {\n        switch (col) {\n          case 0:\n            return 'One';\n          case 1:\n            return 'Two';\n          default:\n            break;\n        }\n      }\n    });\n\n    const htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should be possible to set HTML in colHeaders', () => {\n    handsontable({\n      startCols: 2,\n      colHeaders: ['One <input type=\"checkbox\">', 'Two <input type=\"checkbox\">']\n    });\n\n    const htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0) input[type=checkbox]').length).toEqual(1);\n    expect(htCore.find('thead th:eq(1) input[type=checkbox]').length).toEqual(1);\n  });\n\n  it('should be possible to set colHeaders when columns array is present', () => {\n    handsontable({\n      startCols: 2,\n      colHeaders: ['One', 'Two'],\n      columns: [\n        { type: 'text' },\n        { type: 'text' }\n      ]\n    });\n\n    const htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should be possible to set colHeaders when columns function is present', () => {\n    handsontable({\n      startCols: 2,\n      colHeaders: ['One', 'Two'],\n      columns(column) {\n        let colMeta = { type: 'text' };\n\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    const htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should be possible to set colHeaders using columns title property', () => {\n    handsontable({\n      startCols: 2,\n      colHeaders: ['One', 'Two'],\n      columns: [\n        { type: 'text', title: 'Special title' },\n        { type: 'text' }\n      ]\n    });\n\n    const htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('Special title');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should be possible to set colHeaders using columns title property when columns is a function', () => {\n    handsontable({\n      startCols: 2,\n      colHeaders: ['One', 'Two'],\n      columns(column) {\n        let colMeta = { type: 'text' };\n\n        if (column === 0) {\n          colMeta.title = 'Special title';\n        }\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    const htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('Special title');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should resize all the column headers in the overlays, according to the other overlays\\' height', () => {\n    handsontable({\n      startCols: 5,\n      colHeaders: ['a', 'a', 'a', 'a<BR>a', 'a'],\n      fixedColumnsLeft: 2\n    });\n\n    const topHeaderExample = $('.ht_clone_top').find('thead tr:first-child th:nth-child(1)');\n    const masterHeaderExample = $('.ht_master').find('thead tr:first-child th:nth-child(3)');\n\n    expect(topHeaderExample.height()).toEqual(masterHeaderExample.height());\n  });\n\n  it('should allow defining custom column header height using the columnHeaderHeight config option', () => {\n    const hot = handsontable({\n      startCols: 3,\n      colHeaders: true,\n      columnHeaderHeight: 40\n    });\n\n    hot.render();\n\n    expect(spec().$container.find('th').eq(0).height()).toEqual(40);\n  });\n\n  it('should allow defining custom column header heights using the columnHeaderHeight config option, when multiple column header levels are defined', () => {\n    const hot = handsontable({\n      startCols: 3,\n      colHeaders: true,\n      columnHeaderHeight: [45, 65],\n      afterGetColumnHeaderRenderers(array) {\n        array.push((index, TH) => {\n          TH.innerHTML = '';\n\n          const div = document.createElement('div');\n          const span = document.createElement('span');\n\n          div.className = 'relative';\n          span.className = 'colHeader';\n\n          span.innerText = index;\n\n          div.appendChild(span);\n          TH.appendChild(div);\n        });\n\n        return array;\n      }\n    });\n    hot.render();\n\n    expect(spec().$container.find('.handsontable.ht_clone_top tr:nth-child(1) th:nth-child(1)').height()).toEqual(45);\n    expect(spec().$container.find('.handsontable.ht_clone_top tr:nth-child(2) th:nth-child(1)').height()).toEqual(65);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/ColHeader.spec.js","describe('Core_alter', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfNestedObjects = function() {\n    return [\n      { id: 1,\n        name: {\n          first: 'Ted',\n          last: 'Right'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name' },\n      { id: 2,\n        name: {\n          first: 'Frank',\n          last: 'Honest'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name' },\n      { id: 3,\n        name: {\n          first: 'Joan',\n          last: 'Well'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name' }\n    ];\n  };\n\n  const arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  describe('remove row', () => {\n    describe('multiple items at once', () => {\n      it('should remove rows when index groups are passed in ascending order', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(15, 5),\n        });\n        // [[rowVisualIndex, amountRowsToRemove] ...]\n        alter('remove_row', [[1, 3], [5, 1], [7, 3], [11, 2]]);\n        // It remove rows as follow:\n        //     1--------3      5-1     7---------3       11-----2\n        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15\n        //\n        // Result: A1, A5, A7, A11, A14, A15\n\n        expect(getDataAtCol(0)).toEqual(['A1', 'A5', 'A7', 'A11', 'A14', 'A15']);\n        expect(getData().length).toBe(6);\n      });\n\n      it('should remove rows when index groups are passed in descending order', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(15, 5),\n        });\n        // [[rowVisualIndex, amountRowsToRemove] ...]\n        alter('remove_row', [[11, 2], [7, 3], [5, 1], [1, 3]]);\n        // It remove rows as follow:\n        //     1--------3      5-1     7---------3       11-----2\n        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15\n        //\n        // Result: A1, A5, A7, A11, A14, A15\n\n        expect(getDataAtCol(0)).toEqual(['A1', 'A5', 'A7', 'A11', 'A14', 'A15']);\n        expect(getData().length).toBe(6);\n      });\n\n      it('should remove rows when index groups are passed as intersecting values', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(15, 5),\n        });\n        // [[rowVisualIndex, amountRowsToRemove] ...]\n        alter('remove_row', [[1, 3], [4, 2], [5, 5], [11, 1]]);\n        // It remove rows as follow:\n        //     1---------------------------------9       11-1\n        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15\n        //\n        // Result: A1, A11, A13, A14, A15\n\n        expect(getDataAtCol(0)).toEqual(['A1', 'A11', 'A13', 'A14', 'A15']);\n        expect(getData().length).toBe(5);\n      });\n\n      it('should remove rows when index groups are passed as intersecting values (the second scenario)', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(15, 5),\n        });\n        // [[rowVisualIndex, amountRowsToRemove] ...]\n        alter('remove_row', [[1, 3], [2, 1], [5, 2]]);\n        // It remove columns as follow:\n        //     1--------3      5----2\n        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15\n        //\n        // Result: A1, A5, A8, A9, A10, A11, A12, A13, A14, A15\n\n        expect(getDataAtCol(0)).toEqual(['A1', 'A5', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15']);\n        expect(getData().length).toBe(10);\n      });\n\n      it('should remove rows when index groups are passed as intersecting values (placed randomly)', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(15, 5),\n        });\n        // [[rowVisualIndex, amountRowsToRemove] ...]\n        alter('remove_row', [[4, 2], [11, 1], [5, 5], [1, 3]]);\n        // It remove rows as follow:\n        //     1---------------------------------9       11-1\n        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15\n        //\n        // Result: A1, A11, A13, A14, A15\n\n        expect(getDataAtCol(0)).toEqual(['A1', 'A11', 'A13', 'A14', 'A15']);\n        expect(getData().length).toBe(5);\n      });\n    });\n\n    it('should remove row', () => {\n      handsontable({\n        minRows: 5,\n        data: arrayOfNestedObjects(),\n        columns: [\n          { data: 'id' },\n          { data: 'name.first' }\n        ]\n      });\n      alter('remove_row', 1);\n\n      expect(getDataAtCell(1, 1)).toEqual('Joan'); // Joan should be moved up\n      expect(getData().length).toEqual(5); // new row should be added by keepEmptyRows\n    });\n\n    it('should not remove row if amount is zero', () => {\n      handsontable({\n        data: arrayOfNestedObjects(),\n        columns: [\n          { data: 'id' },\n          { data: 'name.first' }\n        ],\n      });\n      const countedRows = countRows();\n\n      alter('remove_row', 1, 0);\n\n      expect(countRows()).toBe(countedRows);\n    });\n\n    it('should fire beforeRemoveRow event before removing row', () => {\n      const onBeforeRemoveRow = jasmine.createSpy('onBeforeRemoveRow');\n\n      handsontable({\n        data: arrayOfNestedObjects(),\n        columns: [\n          { data: 'id' },\n          { data: 'name.first' }\n        ],\n        beforeRemoveRow: onBeforeRemoveRow,\n      });\n      alter('remove_row', 2, 1, 'customSource');\n\n      expect(onBeforeRemoveRow).toHaveBeenCalledWith(countRows(), 1, [2], 'customSource', undefined, undefined);\n    });\n\n    it('should not remove row if removing has been canceled by beforeRemoveRow event handler', () => {\n      const onBeforeRemoveRow = jasmine.createSpy('onBeforeRemoveRow');\n\n      onBeforeRemoveRow.and.callFake(() => false);\n\n      handsontable({\n        data: arrayOfNestedObjects(),\n        columns: [\n          { data: 'id' },\n          { data: 'name.first' }\n        ],\n        beforeRemoveRow: onBeforeRemoveRow\n      });\n\n      expect(countRows()).toEqual(3);\n\n      alter('remove_row');\n\n      expect(countRows()).toEqual(3);\n    });\n\n    it('should not remove rows below minRows', () => {\n      handsontable({\n        startRows: 5,\n        minRows: 4\n      });\n      alter('remove_row', 1);\n      alter('remove_row', 1);\n      alter('remove_row', 1);\n\n      expect(countRows()).toEqual(4);\n    });\n\n    it('should not remove cols below minCols', () => {\n      handsontable({\n        startCols: 5,\n        minCols: 4\n      });\n      alter('remove_col', 1);\n      alter('remove_col', 1);\n      alter('remove_col', 1);\n\n      expect(countCols()).toEqual(4);\n    });\n\n    it('should remove one row if amount parameter is empty', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row', 1);\n\n      expect(countRows()).toEqual(4);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a1');\n      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('c2');\n    });\n\n    it('should remove as many rows as given in the amount parameter', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row', 1, 3);\n\n      expect(countRows()).toEqual(2);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a1');\n      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('e2');\n    });\n\n    it('should not remove more rows that exist', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row', 1, 10);\n\n      expect(countRows()).toEqual(1);\n      expect(getHtCore().find('tr:last td:last').html()).toEqual('a3');\n    });\n\n    it('should remove one row from end if no parameters are given', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row');\n\n      expect(countRows()).toEqual(4);\n      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('d1');\n    });\n\n    it('should remove amount of rows from end if index parameter is not given', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row', null, 3);\n\n      expect(countRows()).toEqual(2);\n      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('b1');\n    });\n\n    it('should remove rows from table with fixedRows', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3']\n        ],\n        fixedRowsTop: 1,\n        minSpareRows: 0\n      });\n\n      alter('remove_row', 1);\n\n      expect(countRows()).toEqual(1);\n\n    });\n\n    it('should remove all rows from table with fixedRows', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3']\n        ],\n        fixedRowsTop: 1,\n        minSpareRows: 0\n      });\n\n      alter('remove_row', 1);\n      alter('remove_row', 1);\n\n      expect(countRows()).toEqual(0);\n\n    });\n\n    it('should remove row\\'s cellProperties', () => {\n      handsontable({\n        startCols: 1,\n        startRows: 3\n      });\n\n      getCellMeta(0, 0).someValue = [0, 0];\n      getCellMeta(1, 0).someValue = [1, 0];\n      getCellMeta(2, 0).someValue = [2, 0];\n\n      alter('remove_row', 0);\n\n      expect(getCellMeta(0, 0).someValue).toEqual([1, 0]);\n      expect(getCellMeta(1, 0).someValue).toEqual([2, 0]);\n    });\n\n    it('should fire callback on remove row', () => {\n      let outputBefore;\n      let outputAfter;\n\n      handsontable({\n        minRows: 5,\n        data: arrayOfNestedObjects(),\n        columns: [\n          { data: 'id' },\n          { data: 'name.first' }\n        ],\n        beforeRemoveRow(index, amount, removedRows, source) {\n          outputBefore = [index, amount, removedRows, source];\n        },\n        afterRemoveRow(index, amount, removedRows, source) {\n          outputAfter = [index, amount, removedRows, source];\n        }\n      });\n      alter('remove_row', 1, 2, 'customSource');\n\n      expect(outputBefore).toEqual([1, 2, [1, 2], 'customSource']);\n      expect(outputAfter).toEqual([1, 2, [1, 2], 'customSource']);\n    });\n\n    it('should decrement the number of fixed rows, if a fix row is removed', () => {\n      const hot = handsontable({\n        startCols: 1,\n        startRows: 3,\n        fixedRowsTop: 4\n      });\n\n      alter('remove_row', 1, 1);\n      expect(hot.getSettings().fixedRowsTop).toEqual(3);\n      alter('remove_row', 1, 2);\n      expect(hot.getSettings().fixedRowsTop).toEqual(1);\n    });\n\n    it('should shift the cell meta according to the new row layout', () => {\n      handsontable({\n        startCols: 3,\n        startRows: 4\n      });\n\n      setCellMeta(2, 1, 'className', 'test');\n      alter('remove_row', 1, 1);\n\n      expect(getCellMeta(1, 1).className).toEqual('test');\n    });\n\n    it('should shift the cell meta according to the new rows (>1) layout', () => {\n      handsontable({\n        startCols: 3,\n        startRows: 4\n      });\n\n      setCellMeta(2, 1, 'className', 'test');\n      alter('remove_row', 0, 2);\n\n      expect(getCellMeta(0, 1).className).toEqual('test');\n    });\n  });\n\n  describe('remove column', () => {\n    describe('multiple items at once', () => {\n      it('should remove columns when index groups are passed in ascending order', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(5, 15),\n        });\n        // [[columnVisualIndex, amountColumnsToRemove] ...]\n        alter('remove_col', [[1, 3], [5, 1], [7, 3], [11, 2]]);\n        // It remove columns as follow:\n        //     1--------3      5-1     7--------3      11---2\n        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1\n        //\n        // Result: A1, E1, G1, K1, N1, O1\n\n        expect(getDataAtRow(0)).toEqual(['A1', 'E1', 'G1', 'K1', 'N1', 'O1']);\n        expect(getData()[0].length).toBe(6);\n      });\n\n      it('should remove columns when index groups are passed in descending order', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(5, 15),\n        });\n        // [[columnVisualIndex, amountColumnsToRemove] ...]\n        alter('remove_col', [[11, 2], [7, 3], [5, 1], [1, 3]]);\n        // It remove columns as follow:\n        //     1--------3      5-1     7--------3      11---2\n        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1\n        //\n        // Result: A1, E1, G1, K1, N1, O1\n\n        expect(getDataAtRow(0)).toEqual(['A1', 'E1', 'G1', 'K1', 'N1', 'O1']);\n        expect(getData()[0].length).toBe(6);\n      });\n\n      it('should remove columns when index groups are passed as intersecting values', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(5, 15),\n        });\n        // [[columnVisualIndex, amountColumnsToRemove] ...]\n        alter('remove_col', [[1, 3], [4, 2], [5, 5], [11, 1]]);\n        // It remove columns as follow:\n        //     1--------------------------------9     11-1\n        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1\n        //\n        // Result: A1, K1, M1, N1, O1\n\n        expect(getDataAtRow(0)).toEqual(['A1', 'K1', 'M1', 'N1', 'O1']);\n        expect(getData()[0].length).toBe(5);\n      });\n\n      it('should remove columns when index groups are passed as intersecting values (the second scenario)', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(5, 15),\n        });\n        // [[columnVisualIndex, amountColumnsToRemove] ...]\n        alter('remove_col', [[1, 3], [2, 1], [5, 2]]);\n        // It remove columns as follow:\n        //     1--------3      5----2\n        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1\n        //\n        // Result: A1, E1, H1\n\n        expect(getDataAtRow(0)).toEqual(['A1', 'E1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1']);\n        expect(getData()[0].length).toBe(10);\n      });\n\n      it('should remove columns when index groups are passed as intersecting values (placed randomly)', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(5, 15),\n        });\n        // [[columnVisualIndex, amountColumnsToRemove] ...]\n        alter('remove_col', [[4, 2], [11, 1], [5, 5], [1, 3]]);\n        // It remove columns as follow:\n        //     1--------------------------------9     11-1\n        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1\n        //\n        // Result: A1, K1, M1, N1, O1\n\n        expect(getDataAtRow(0)).toEqual(['A1', 'K1', 'M1', 'N1', 'O1']);\n        expect(getData()[0].length).toBe(5);\n      });\n    });\n\n    it('should not remove column if amount is zero', () => {\n      handsontable({\n        data: arrayOfArrays(),\n      });\n      const countedColumns = countCols();\n\n      alter('remove_col', 1, 0);\n\n      expect(countCols()).toBe(countedColumns);\n    });\n\n    it('should remove one column if amount parameter is empty', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col', 1);\n\n      expect(countCols()).toEqual(7);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a');\n      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('c');\n    });\n\n    it('should remove as many columns as given in the amount parameter', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col', 1, 3);\n\n      expect(countCols()).toEqual(5);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a');\n      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('e');\n    });\n\n    it('should not remove more columns that exist', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col', 6, 3);\n\n      expect(countCols()).toEqual(6);\n      expect(spec().$container.find('tr:eq(1) td:last').html()).toEqual('f');\n    });\n\n    it('should remove one column from end if no parameters are given', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col');\n\n      expect(countCols()).toEqual(7);\n      expect(spec().$container.find('tr:eq(1) td:last').html()).toEqual('g');\n    });\n\n    it('should remove amount of columns from end if index parameter is not given', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col', null, 3);\n\n      expect(countCols()).toEqual(5);\n      expect(spec().$container.find('tr:eq(1) td:last').html()).toEqual('e');\n    });\n\n    it('should fire beforeRemoveCol event before removing col', () => {\n      const onBeforeRemoveCol = jasmine.createSpy('onBeforeRemoveCol');\n\n      handsontable({\n        beforeRemoveCol: onBeforeRemoveCol\n      });\n      alter('remove_col');\n\n      expect(onBeforeRemoveCol).toHaveBeenCalledWith(countCols(), 1, [4], undefined, undefined, undefined);\n    });\n\n    it('should not remove column if removing has been canceled by beforeRemoveCol event handler', () => {\n      const onBeforeRemoveCol = jasmine.createSpy('onBeforeRemoveCol');\n\n      onBeforeRemoveCol.and.callFake(() => false);\n\n      handsontable({\n        beforeRemoveCol: onBeforeRemoveCol\n      });\n\n      expect(countCols()).toEqual(5);\n\n      alter('remove_col');\n\n      expect(countCols()).toEqual(5);\n    });\n\n    it('should fire callback on remove col', () => {\n      let outputBefore;\n      let outputAfter;\n\n      handsontable({\n        minRows: 5,\n        data: arrayOfArrays(),\n        beforeRemoveCol(index, amount, removedCols, source) {\n          outputBefore = [index, amount, removedCols, source];\n        },\n        afterRemoveCol(index, amount, removedCols, source) {\n          outputAfter = [index, amount, removedCols, source];\n        }\n      });\n      alter('remove_col', 1, 2, 'customSource');\n\n      expect(outputBefore).toEqual([1, 2, [1, 2], 'customSource']);\n      expect(outputAfter).toEqual([1, 2, [1, 2], 'customSource']);\n    });\n\n    it('should remove column\\'s properties', () => {\n      handsontable({\n        startCols: 3,\n        startRows: 1\n      });\n\n      getCellMeta(0, 0).someValue = [0, 0];\n      getCellMeta(0, 1).someValue = [0, 1];\n      getCellMeta(0, 2).someValue = [0, 2];\n\n      alter('remove_col', 0);\n\n      expect(getCellMeta(0, 0).someValue).toEqual([0, 1]);\n      expect(getCellMeta(0, 1).someValue).toEqual([0, 2]);\n    });\n\n    it('should remove column when not all rows are visible in the viewport', () => {\n      spec().$container.css({\n        height: '100',\n        overflow: 'auto'\n      });\n\n      handsontable({\n        startCols: 3,\n        startRows: 20\n      });\n\n      expect(getHtCore().find('tbody tr').length).toBeLessThan(20);\n      expect(countCols()).toEqual(3);\n\n      alter('remove_col', 0);\n\n      expect(countCols()).toEqual(2);\n    });\n\n    it('should not remove column header together with the column, if headers were NOT specified explicitly', () => {\n\n      handsontable({\n        startCols: 3,\n        startRows: 2,\n        colHeaders: true\n      });\n\n      expect(getColHeader()).toEqual(['A', 'B', 'C']);\n\n      expect(countCols()).toEqual(3);\n\n      alter('remove_col', 1);\n\n      expect(countCols()).toEqual(2);\n\n      expect(getColHeader()).toEqual(['A', 'B']);\n\n    });\n\n    it('should remove column header together with the column, if headers were specified explicitly', () => {\n\n      handsontable({\n        startCols: 3,\n        startRows: 2,\n        colHeaders: ['Header0', 'Header1', 'Header2']\n      });\n\n      expect(getColHeader()).toEqual(['Header0', 'Header1', 'Header2']);\n\n      expect(countCols()).toEqual(3);\n\n      alter('remove_col', 1);\n\n      expect(countCols()).toEqual(2);\n\n      expect(getColHeader()).toEqual(['Header0', 'Header2']);\n\n    });\n\n    it('should decrement the number of fixed columns, if a fix column is removed', () => {\n      const hot = handsontable({\n        startCols: 1,\n        startRows: 3,\n        fixedColumnsLeft: 4\n      });\n\n      alter('remove_col', 1, 1);\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(3);\n      alter('remove_col', 1, 2);\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n    });\n\n    it('should shift the cell meta according to the new column layout', () => {\n      handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(1, 2, 'className', 'test');\n      alter('remove_col', 1, 1);\n\n      expect(getCellMeta(1, 1).className).toEqual('test');\n    });\n\n    it('should shift the cell meta according to the new columns (>1) layout', () => {\n      handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(1, 2, 'className', 'test');\n      alter('remove_col', 0, 2);\n\n      expect(getCellMeta(1, 0).className).toEqual('test');\n    });\n  });\n\n  describe('insert row', () => {\n    it('should insert row at given index', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('insert_row', 1);\n\n      expect(countRows()).toEqual(6);\n      expect(spec().$container.find('tr:eq(2) td:eq(0)').html()).toEqual('b1');\n    });\n\n    it('should fire the beforeCreateRow hook before creating a row', () => {\n      const onBeforeCreateRow = jasmine.createSpy('beforeCreateRow');\n\n      handsontable({\n        data: arrayOfNestedObjects(),\n        columns: [\n          { data: 'id' },\n          { data: 'name.first' }\n        ],\n        beforeCreateRow: onBeforeCreateRow,\n      });\n      alter('insert_row', 2, 1, 'customSource');\n\n      expect(onBeforeCreateRow).toHaveBeenCalledWith(2, 1, 'customSource', void 0, void 0, void 0);\n    });\n\n    it('should not create row if removing has been canceled by beforeCreateRow hook handler', () => {\n      const beforeCreateRow = jasmine.createSpy('beforeCreateRow');\n\n      beforeCreateRow.and.callFake(() => false);\n\n      handsontable({\n        data: arrayOfNestedObjects(),\n        columns: [\n          { data: 'id' },\n          { data: 'name.first' }\n        ],\n        beforeCreateRow\n      });\n\n      expect(countRows()).toEqual(3);\n\n      alter('insert_row');\n\n      expect(countRows()).toEqual(3);\n    });\n\n    it('should insert row at the end if index is not given', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('insert_row');\n\n      expect(countRows()).toEqual(6);\n      expect(getHtCore().find('tr:eq(4) td:eq(0)').html()).toEqual('e1');\n\n      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('');\n    });\n\n    it('should not change cellMeta after executing `insert row` without parameters (#3581, #3989, #2114)', () => {\n      const greenRenderer = function(instance, td, ...args) {\n        Handsontable.renderers.TextRenderer.apply(this, [instance, td, ...args]);\n        td.style.backgroundColor = 'green';\n      };\n\n      handsontable({\n        data: [\n          [0, 'a', true],\n          [1, 'b', false],\n          [2, 'c', true],\n          [3, 'd', true]\n        ],\n        cell: [\n          { row: 0, col: 0, renderer: greenRenderer, type: 'text', readOnly: true }\n        ],\n        columns: [\n          { type: 'numeric' },\n          { type: 'text' },\n          { type: 'checkbox' }\n        ]\n      });\n\n      alter('insert_row');\n\n      expect(getCellMeta(1, 0).renderer).not.toBe(greenRenderer);\n      expect(getCellMeta(1, 0).readOnly).toBe(false);\n\n      expect(getCellMeta(4, 0).renderer).not.toBe(greenRenderer);\n      expect(getCellMeta(4, 0).readOnly).toBe(false);\n    });\n\n    it('should add new row which respect defined type of cells after executing `insert_row`', () => {\n      handsontable({\n        data: [\n          [0, 'a', true],\n          [1, 'b', false],\n          [2, 'c', true],\n          [3, 'd', true]\n        ],\n        cell: [\n          { row: 0, col: 0, type: 'text' }\n        ],\n        columns: [\n          { type: 'numeric' },\n          { type: 'text' },\n          { type: 'checkbox' }\n        ]\n      });\n\n      alter('insert_row');\n\n      // added row\n\n      expect(getCellMeta(4, 0).type).toEqual('numeric');\n      expect(getDataAtCell(4, 0)).toEqual(null);\n\n      expect(getCellMeta(4, 2).type).toEqual('checkbox');\n      expect(getDataAtCell(4, 2)).toEqual(null);\n    });\n\n    it('should insert the amount of rows at given index', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('insert_row', 1, 3);\n\n      expect(countRows()).toEqual(8);\n\n      expect(spec().$container.find('tr:eq(1) td:eq(0)').html()).toEqual('');\n\n      expect(spec().$container.find('tr:eq(4) td:eq(0)').html()).toEqual('b1');\n    });\n\n    it('should insert the amount of rows at the end if index is not given', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('insert_row', null, 3);\n\n      expect(countRows()).toEqual(8);\n      expect(getHtCore().find('tr:eq(4) td:eq(0)').html()).toEqual('e1');\n\n      expect(getHtCore().find('tr:eq(5) td:eq(0)').html()).toEqual('');\n      expect(getHtCore().find('tr:eq(6) td:eq(0)').html()).toEqual('');\n      expect(getHtCore().find('tr:eq(7) td:eq(0)').html()).toEqual('');\n    });\n\n    it('should insert not more rows than maxRows', () => {\n      handsontable({\n        startRows: 5,\n        maxRows: 7\n      });\n      alter('insert_row', 1);\n      alter('insert_row', 1);\n      alter('insert_row', 1);\n\n      expect(countRows()).toEqual(7);\n    });\n\n    it('when amount parameter is used, should not insert more rows than allowed by maxRows', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ],\n        maxRows: 10\n      });\n      alter('insert_row', 1, 10);\n\n      expect(countRows()).toEqual(10);\n      expect(spec().$container.find('tr:eq(6) td:eq(0)').html()).toEqual('b1');\n    });\n\n    it('should not add more source rows than defined in maxRows when trimming rows using the modifyRow hook', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 4),\n        modifyRow(row) {\n          return [8, 9].indexOf(row) > -1 ? null : row;\n        },\n        maxRows: 10\n      });\n\n      expect(hot.countRows()).toEqual(8);\n\n      hot.populateFromArray(7, 0, [['a'], ['b'], ['c']]);\n\n      expect(hot.countSourceRows()).toEqual(10);\n      expect(hot.getDataAtCell(7, 0)).toEqual('a');\n    });\n\n    it('should fire callback on create row', () => {\n      let outputBefore;\n      let outputAfter;\n\n      handsontable({\n        minRows: 5,\n        data: arrayOfNestedObjects(),\n        columns: [\n          { data: 'id' },\n          { data: 'name.first' }\n        ],\n        beforeCreateRow(index, amount, source) {\n          outputBefore = [index, amount, source];\n        },\n        afterCreateRow(index, amount, source) {\n          outputAfter = [index, amount, source];\n        },\n      });\n      alter('insert_row', 3, 1, 'customSource');\n\n      expect(outputBefore).toEqual([3, 1, 'customSource']);\n      expect(outputAfter).toEqual([3, 1, 'customSource']);\n    });\n\n    it('should keep the single-cell selection in the same position as before inserting the row', () => {\n      handsontable({\n        minRows: 5,\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n\n      selectCell(2, 2);\n      alter('insert_row', 2);\n\n      const selected = getSelected();\n\n      expect(selected[0][0]).toBe(3);\n      expect(selected[0][2]).toBe(3);\n      expect(selected.length).toBe(1);\n    });\n\n    it('should shift the cell meta according to the new row layout', () => {\n      handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(2, 1, 'className', 'test');\n      alter('insert_row', 1, 1);\n\n      expect(getCellMeta(3, 1).className).toEqual('test');\n    });\n\n    it('should shift the cell meta according to the new rows (>1) layout', () => {\n      handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(2, 1, 'className', 'test');\n      alter('insert_row', 0, 3);\n\n      expect(getCellMeta(5, 1).className).toEqual('test');\n    });\n  });\n\n  describe('insert column', () => {\n    it('should insert column at given index', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('insert_col', 1);\n\n      expect(countCols()).toEqual(9);\n      expect(spec().$container.find('tr:eq(1) td:eq(2)').html()).toEqual('b');\n    });\n\n    it('should insert column at the end if index is not given', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('insert_col');\n\n      expect(countCols()).toEqual(9);\n      expect(spec().$container.find('tr:eq(1) td:eq(7)').html()).toEqual('h');\n    });\n\n    it('should insert the amount of columns at given index', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('insert_col', 1, 3);\n\n      expect(countCols()).toEqual(11);\n      expect(spec().$container.find('tr:eq(1) td:eq(4)').html()).toEqual('b');\n    });\n\n    it('should insert the amount of columns at the end if index is not given', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('insert_col', null, 3);\n\n      expect(countCols()).toEqual(11);\n      expect(spec().$container.find('tr:eq(1) td:eq(7)').html()).toEqual('h');\n\n      expect(spec().$container.find('tr:eq(1) td:eq(8)').html()).toEqual('');\n      expect(spec().$container.find('tr:eq(1) td:eq(9)').html()).toEqual('');\n      expect(spec().$container.find('tr:eq(1) td:eq(10)').html()).toEqual('');\n    });\n\n    it('should insert not more cols than maxCols', () => {\n      handsontable({\n        startCols: 5,\n        maxCols: 7\n      });\n      alter('insert_col', 1);\n      alter('insert_col', 1);\n      alter('insert_col', 1);\n\n      expect(countCols()).toEqual(7);\n    });\n\n    it('should not insert more columns than allowed by maxCols, when amount parameter is used', () => {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ],\n        maxCols: 10\n      });\n      alter('insert_col', 1, 10);\n\n      expect(countCols()).toEqual(10);\n      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('');\n      expect(spec().$container.find('tr:eq(1) td:eq(2)').html()).toEqual('');\n      expect(spec().$container.find('tr:eq(1) td:eq(3)').html()).toEqual('b');\n    });\n\n    it('should fire callback on create col', () => {\n      let outputBefore;\n      let outputAfter;\n\n      handsontable({\n        minRows: 5,\n        data: arrayOfArrays(),\n        beforeCreateCol(index, amount, source) {\n          outputBefore = [index, amount, source];\n        },\n        afterCreateCol(index, amount, source) {\n          outputAfter = [index, amount, source];\n        },\n      });\n      alter('insert_col', 2, 1, 'customSource');\n\n      expect(outputBefore).toEqual([2, 1, 'customSource']);\n      expect(outputAfter).toEqual([2, 1, 'customSource']);\n    });\n\n    it('should not create column header together with the column, if headers were NOT specified explicitly', () => {\n\n      handsontable({\n        startCols: 3,\n        startRows: 2,\n        colHeaders: true\n      });\n\n      expect(getColHeader()).toEqual(['A', 'B', 'C']);\n\n      expect(countCols()).toEqual(3);\n\n      alter('insert_col', 1);\n\n      expect(countCols()).toEqual(4);\n\n      expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);\n\n    });\n\n    it('should create column header together with the column, if headers were specified explicitly', () => {\n\n      handsontable({\n        startCols: 3,\n        startRows: 2,\n        colHeaders: ['Header0', 'Header1', 'Header2']\n      });\n\n      expect(getColHeader()).toEqual(['Header0', 'Header1', 'Header2']);\n\n      expect(countCols()).toEqual(3);\n\n      alter('insert_col', 1);\n\n      expect(countCols()).toEqual(4);\n\n      expect(getColHeader()).toEqual(['Header0', 'B', 'Header1', 'Header2']);\n\n    });\n\n    it('should stretch the table after adding another column (if stretching is set to \\'all\\')', () => {\n      spec().$container.css({\n        width: 500,\n      });\n\n      const hot = handsontable({\n        startCols: 5,\n        startRows: 10,\n        stretchH: 'all'\n      });\n\n      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);\n      alter('insert_col', null, 1);\n      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);\n      alter('insert_col', null, 1);\n      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);\n    });\n\n    it('should shift the cell meta according to the new column layout', () => {\n      handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(1, 2, 'className', 'test');\n      alter('insert_col', 1, 1);\n\n      expect(getCellMeta(1, 3).className).toEqual('test');\n    });\n\n    it('should shift the cell meta according to the new columns (>1) layout', () => {\n      handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(1, 2, 'className', 'test');\n      alter('insert_col', 0, 3);\n\n      expect(getCellMeta(1, 5).className).toEqual('test');\n    });\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_alter.spec.js","describe('Core_beforeKeyDown', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should run beforeKeyDown hook', () => {\n    let called = false;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeKeyDown() {\n        called = true;\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('arrow_right');\n\n    expect(called).toEqual(true);\n  });\n\n  it('should run afterDocumentKeyDown and beforeKeyDown hook', () => {\n    const called = [];\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      afterDocumentKeyDown() {\n        called.push('afterDocumentKeyDown');\n      },\n      beforeKeyDown() {\n        called.push('beforeKeyDown');\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('arrow_right');\n\n    expect(called).toEqual(['afterDocumentKeyDown', 'beforeKeyDown']);\n  });\n\n  it('should prevent hook from running default action', () => {\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeKeyDown(event) {\n        serveImmediatePropagation(event).stopImmediatePropagation();\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('arrow_right');\n\n    expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    expect(getSelected()).not.toEqual([[0, 1, 0, 1]]);\n  });\n\n  it('should overwrite default behavior of delete key, but not this of right arrow', () => {\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeKeyDown(event) {\n        if (event.keyCode === 8) {\n          event.stopImmediatePropagation();\n          getInstance().alter('insert_row', 1, 1);\n        }\n      }\n    });\n\n    selectCell(0, 0);\n\n    keyDown('backspace');\n    keyDown('arrow_right');\n\n    expect(getData().length).toEqual(3);\n    expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n  });\n\n  it('should run beforeKeyDown hook in cell editor handler', () => {\n    let called = 0;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeKeyDown() {\n        called += 1;\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('enter');\n    keyDown('enter');\n\n    expect(called).toEqual(2);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_beforeKeyDown.spec.js","describe('Core_beforechange', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('this.rootElement should point to handsontable rootElement', () => {\n    let output = null;\n\n    handsontable({\n      beforeChange() {\n        output = this.rootElement;\n      }\n    });\n    setDataAtCell(0, 0, 'test');\n\n    expect(output).toEqual(spec().$container[0]);\n  });\n\n  it('should remove change from stack', () => {\n    let output = null;\n\n    handsontable({\n      data: [['a', 'b'], ['c', 'd']],\n      beforeChange(changes) {\n        changes[1] = null;\n      },\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    setDataAtCell([[0, 0, 'test'], [1, 0, 'test'], [1, 1, 'test']]);\n\n    expect(getDataAtCell(0, 0)).toEqual('test');\n    expect(getDataAtCell(1, 0)).toEqual('c');\n    expect(getDataAtCell(1, 1)).toEqual('test');\n    expect(output).toEqual([[0, 0, 'a', 'test'], [1, 1, 'd', 'test']]);\n  });\n\n  it('should drop all changes when beforeChange return false', () => {\n    handsontable({\n      data: [['a', 'b'], ['c', 'd']],\n      beforeChange() {\n        return false;\n      }\n    });\n    setDataAtCell([[0, 0, 'test'], [1, 0, 'test'], [1, 1, 'test']]);\n\n    expect(getDataAtCell(0, 0)).toEqual('a');\n    expect(getDataAtCell(1, 0)).toEqual('c');\n    expect(getDataAtCell(1, 1)).toEqual('d');\n  });\n\n  function beforechangeOnKeyFactory(keyCode) {\n    return function() {\n      let called = false;\n\n      handsontable({\n        beforeChange(changes) {\n          if (changes[0][2] === 'test' && changes[0][3] === '') {\n            called = true;\n          }\n        }\n      });\n\n      setDataAtCell(0, 0, 'test');\n      selectCell(0, 0);\n\n      keyDown(keyCode);\n\n      expect(called).toEqual(true);\n    };\n  }\n\n  it('should be called on Delete key', beforechangeOnKeyFactory(46)); // 46 = Delete key\n\n  it('should be called on Backspace key', beforechangeOnKeyFactory(8)); // 8 = Backspace key\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_beforechange.spec.js","describe('Core_count', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    destroy();\n    this.$container.remove();\n  });\n\n  describe('countVisibleRows', () => {\n    it('should return number of visible rows', () => {\n      const instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        height: 100,\n        width: 600\n      });\n      expect(instance.countVisibleRows()).toEqual(4);\n    });\n\n    it('should return -1 if table is not rendered', () => {\n      spec().$container.remove();\n      const instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        width: 100\n      });\n      expect(instance.countVisibleRows()).toEqual(-1);\n    });\n  });\n\n  describe('countRenderedRows', () => {\n    it('should return number of rendered rows', () => {\n      const instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        height: 100,\n        viewportRowRenderingOffset: 0\n      });\n      expect(instance.countRenderedRows()).toEqual(5);\n    });\n\n    it('should return number of rendered rows, including rows rendered becausee of viewportRowRenderingOffset', () => {\n      const instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(50, 10),\n        height: 100,\n        viewportRowRenderingOffset: 20\n      });\n      expect(instance.countRenderedRows()).toEqual(25);\n    });\n\n    it('should return -1 if table is not rendered', () => {\n      spec().$container.remove();\n      const instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        width: 100\n      });\n      expect(instance.countRenderedRows()).toEqual(-1);\n    });\n  });\n\n  describe('countVisibleCols', () => {\n    it('should return number of visible columns', () => {\n      const instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        width: 100\n      });\n      expect(instance.countVisibleCols()).toEqual(10);\n    });\n\n    it('should return -1 if table is not rendered', () => {\n      spec().$container.remove();\n      const instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        width: 100\n      });\n\n      expect(instance.countVisibleCols()).toEqual(-1);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_count.spec.js","/* eslint-disable no-multi-spaces, array-bracket-spacing */\n\ndescribe('Core_countEmptyCols', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should count empty columns properly for empty data set', () => {\n    handsontable({\n      data: []\n    });\n\n    expect(countEmptyCols()).toBe(0);\n  });\n\n  it('should count empty columns properly when using a simple data set', () => {\n    handsontable({\n      data: [\n        [null, null, 1,    null, null, null],\n        [4,    null, null, null, null, null],\n        [null, null, null, null, null, null],\n        [3,    null, null, null, null, null],\n        [1,    null, null, null, null, null],\n        [null, null, null, null, 1,    null],\n      ]\n    });\n\n    expect(countEmptyCols()).toBe(3);\n  });\n\n  it('should count empty columns at the end of the data source properly (optional `ending` parameter)', () => {\n    handsontable({\n      data: [\n        [null, null, 1,    null, null, null],\n        [4,    null, null, null, null, null],\n        [null, null, null, null, null, null],\n        [3,    null, null, null, null, null],\n        [1,    null, null, null, null, null],\n        [null, null, null, null, 1,    null],\n      ]\n    });\n\n    expect(countEmptyCols(true)).toBe(1);\n  });\n\n  it('should count empty columns properly when using `minSpareCols` option', () => {\n    handsontable({\n      data: [\n        [null, null, 1,    null, null],\n        [4,    null, null, null, null],\n        [null, null, null, null, null],\n        [3,    null, null, null, null],\n        [1,    null, null, null, null],\n        [null, null, null, null, 1   ],\n      ],\n      minSpareCols: 2\n    });\n\n    expect(countEmptyCols()).toBe(4);\n  });\n\n  it('should count empty columns properly when translating columns in the viewport', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      modifyCol(row) {\n        return row + 2;\n      }\n    });\n\n    expect(countEmptyCols()).toBe(2);\n  });\n\n  it('should count empty columns properly when translating columns outside the viewport', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(100, 100),\n      modifyCol(column) {\n        return column + 5;\n      }\n    });\n\n    expect(countEmptyCols()).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_countEmptyCols.spec.js","describe('Core_countEmptyRows', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should count empty rows properly when using a simple data set', () => {\n    handsontable({\n      data: [\n        [null],\n        [4],\n        [null],\n        [3],\n        [1],\n        [null],\n      ]\n    });\n\n    expect(countEmptyRows()).toBe(3);\n  });\n\n  it('should count empty rows at the end of the data source properly (optional `ending` parameter)', () => {\n    handsontable({\n      data: [\n        [null],\n        [4],\n        [null],\n        [3],\n        [1],\n        [null],\n        [null],\n        [null],\n        [null],\n        [null],\n      ]\n    });\n\n    expect(countEmptyRows(true)).toBe(5);\n  });\n\n  it('should count empty rows properly when using `minSpareRows` option', () => {\n    handsontable({\n      data: [\n        [null],\n        [4],\n        [null],\n        [3],\n        [1],\n      ],\n      minSpareRows: 2\n    });\n\n    expect(countEmptyRows()).toBe(4);\n  });\n\n  it('should count empty rows properly when translating rows in the viewport', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      modifyRow(row) {\n        return row + 2;\n      }\n    });\n\n    expect(countEmptyRows()).toBe(2);\n  });\n\n  it('should count empty rows properly when translating rows below the viewport', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(100, 100),\n      modifyRow(row) {\n        return row + 5;\n      }\n    });\n\n    expect(countEmptyRows()).toBe(5);\n  });\n\n  it('should count empty rows properly when rows was trimmed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      modifyRow(row) {\n        if (row === 9 || row === 8) {\n          return null;\n        }\n\n        if (row >= 2) {\n          return row + 2;\n        }\n\n        return row;\n      }\n    });\n\n    expect(countEmptyRows()).toBe(0);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_countEmptyRows.spec.js","describe('Core_dataSchema', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as object)', () => {\n    const schema = { id: null, name: { first: null, last: null }, cars: [{ brand: null }] };\n    const hot = handsontable({\n      data: [],\n      dataSchema: schema,\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name'],\n      columns: [\n        { data: 'id' },\n        { data: 'name.first' },\n        { data: 'name.last' }\n      ],\n      minSpareRows: 1\n    });\n\n    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as object) when columns is a function', () => {\n    const schema = { id: null, name: { first: null, last: null }, cars: [{ brand: null }] };\n    const hot = handsontable({\n      data: [],\n      dataSchema: schema,\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name'],\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      minSpareRows: 1\n    });\n\n    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as function)', () => {\n    const schema = { id: null, name: { first: null, last: null }, cars: [{ brand: null }] };\n    const hot = handsontable({\n      data: [],\n      dataSchema() {\n        return schema;\n      },\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name'],\n      columns: [\n        { data: 'id' },\n        { data: 'name.first' },\n        { data: 'name.last' }\n      ],\n      minSpareRows: 1\n    });\n\n    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as function) when columns is a function', () => {\n    const schema = { id: null, name: { first: null, last: null }, cars: [{ brand: null }] };\n    const hot = handsontable({\n      data: [],\n      dataSchema() {\n        return schema;\n      },\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name'],\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      minSpareRows: 1\n    });\n    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is generated based on data structure', () => {\n    const hot = handsontable({\n      data: [\n        { id: 1, name: { first: 'Alan', last: 'Pakoli' }, cars: [{ brand: 'Ford' }] }\n      ],\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name'],\n      columns: [\n        { data: 'id' },\n        { data: 'name.first' },\n        { data: 'name.last' }\n      ],\n      minSpareRows: 1\n    });\n\n    expect(JSON.stringify(hot.getSchema()))\n      .toEqual(JSON.stringify({ id: null, name: { first: null, last: null }, cars: [{ brand: null }] }));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is generated based on data structure when columns is a function', () => {\n    const hot = handsontable({\n      data: [\n        { id: 1, name: { first: 'Alan', last: 'Pakoli' }, cars: [{ brand: 'Ford' }] }\n      ],\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name'],\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      minSpareRows: 1\n    });\n\n    expect(JSON.stringify(hot.getSchema()))\n      .toEqual(JSON.stringify({ id: null, name: { first: null, last: null }, cars: [{ brand: null }] }));\n  });\n\n  it('should create new row from dataSchema', () => {\n    handsontable({\n      data: [],\n      dataSchema: { id: null, name: { first: null, last: null }, address: null },\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n      columns: [\n        { data: 'id' },\n        { data: 'name.first' },\n        { data: 'name.last' },\n        { data: 'address' }\n      ],\n      minSpareRows: 1\n    });\n    selectCell(0, 1);\n\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n    keyDownUp('enter');\n    expect(getData()[0][1]).toEqual('Ted');\n    expect(getSourceData()[0].name.first).toEqual('Ted');\n  });\n\n  it('should create new row from dataSchema when columns is a function', () => {\n    handsontable({\n      data: [],\n      dataSchema: { id: null, name: { first: null, last: null }, address: null },\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else if (column === 3) {\n          colMeta.data = 'address';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      minSpareRows: 1\n    });\n    selectCell(0, 1);\n\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n    keyDownUp('enter');\n    expect(getData()[0][1]).toEqual('Ted');\n    expect(getSourceData()[0].name.first).toEqual('Ted');\n  });\n\n  it('should create new row from dataSchema (functional)', () => {\n    handsontable({\n      data: [],\n      dataSchema(index) {\n        return { id: 1000 + index, name: { first: null, last: null }, address: null };\n      },\n      isEmptyRow(r) {\n        const row = this.getSourceData()[r];\n\n        return (row.name.first === null || row.name.first === '') &&\n          (row.name.last === null || row.name.last === '') &&\n          (row.address === null || row.address === '');\n      },\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n      columns: [\n        { data: 'id' },\n        { data: 'name.first' },\n        { data: 'name.last' },\n        { data: 'address' }\n      ],\n      minSpareRows: 1\n    });\n    selectCell(4, 1);\n\n    expect(countRows()).toEqual(5);\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n\n    // need it in next frame as long as HT is rendered in async\n    keyDownUp('enter');\n    // need it in next frame as long as HT is rendered in async\n    keyDownUp('enter');\n\n    expect(getSourceData()[4].name.first).toEqual('Ted');\n    expect(getSourceData()[4].id).toEqual(1004);\n    expect(getData()[4][1]).toEqual('Ted');\n    expect(getData()[4][0]).toEqual(1004);\n    expect(countRows()).toEqual(6); // row should be added by keepEmptyRows\n  });\n\n  it('should create new row from dataSchema (functional) when columns is a function', () => {\n    handsontable({\n      data: [],\n      dataSchema(index) {\n        return { id: 1000 + index, name: { first: null, last: null }, address: null };\n      },\n      isEmptyRow(r) {\n        const row = this.getSourceData()[r];\n\n        return (row.name.first === null || row.name.first === '') &&\n          (row.name.last === null || row.name.last === '') &&\n          (row.address === null || row.address === '');\n      },\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else if (column === 3) {\n          colMeta.data = 'address';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      minSpareRows: 1\n    });\n    selectCell(4, 1);\n\n    expect(countRows()).toEqual(5);\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n\n    // need it in next frame as long as HT is rendered in async\n    keyDownUp('enter');\n    // need it in next frame as long as HT is rendered in async\n    keyDownUp('enter');\n\n    expect(getSourceData()[4].name.first).toEqual('Ted');\n    expect(getSourceData()[4].id).toEqual(1004);\n    expect(getData()[4][1]).toEqual('Ted');\n    expect(getData()[4][0]).toEqual(1004);\n    expect(countRows()).toEqual(6); // row should be added by keepEmptyRows\n  });\n\n  it('should translate prop to col, when prop is a function', () => {\n    const idAccessor = createAccessorForProperty('id');\n    const nameAccessor = createAccessorForProperty('name');\n\n    hot = handsontable({\n      data: [\n        Model({\n          id: 1,\n          name: 'Tom'\n        }),\n        Model({\n          id: 2,\n          name: 'Hanna'\n        }),\n        Model({\n          id: 3,\n          name: 'Jerry'\n        })\n      ],\n      dataSchema: Model,\n      columns: [\n        {\n          data: idAccessor\n        },\n        {\n          data: nameAccessor\n        }\n      ]\n    });\n\n    expect(hot.propToCol(idAccessor)).toEqual(0);\n    expect(hot.propToCol(nameAccessor)).toEqual(1);\n  });\n\n  it('should translate prop to col, when prop and columns is a function', () => {\n    const idAccessor = createAccessorForProperty('id');\n    const nameAccessor = createAccessorForProperty('name');\n\n    hot = handsontable({\n      data: [\n        Model({\n          id: 1,\n          name: 'Tom'\n        }),\n        Model({\n          id: 2,\n          name: 'Hanna'\n        }),\n        Model({\n          id: 3,\n          name: 'Jerry'\n        })\n      ],\n      dataSchema: Model,\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = idAccessor;\n\n        } else if (column === 1) {\n          colMeta.data = nameAccessor;\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(hot.propToCol(idAccessor)).toEqual(0);\n    expect(hot.propToCol(nameAccessor)).toEqual(1);\n  });\n\n  it('should create new row data matched to dataSchema (data type as `array`)', () => {\n    const spy = jasmine.createSpy();\n    const hot = handsontable({\n      data: [[{ id: 1 }]],\n      dataSchema: [{ id: null }],\n      columns: [\n        { data: '0', renderer: spy }\n      ],\n      autoColumnSize: false,\n      autoRowSize: false,\n    });\n\n    expect(spy.calls.count()).toBe(1);\n    expect(spy.calls.argsFor(0)[5]).toEqual({ id: 1 });\n\n    spy.calls.reset();\n    hot.alter('insert_row', 0);\n\n    expect(spy.calls.count()).toBe(2);\n    expect(spy.calls.argsFor(0)[5]).toEqual({ id: null });\n    expect(spy.calls.argsFor(1)[5]).toEqual({ id: 1 });\n  });\n\n  it('should create new row data matched to dataSchema (data type as `array`) when columns is a function', () => {\n    const spy = jasmine.createSpy();\n    const hot = handsontable({\n      data: [[{ id: 1 }]],\n      dataSchema: [{ id: null }],\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = '0';\n          colMeta.renderer = spy;\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      autoColumnSize: false,\n      autoRowSize: false\n    });\n\n    expect(spy.calls.count()).toBe(1);\n    expect(spy.calls.argsFor(0)[5]).toEqual({ id: 1 });\n\n    spy.calls.reset();\n    hot.alter('insert_row', 0);\n\n    expect(spy.calls.count()).toBe(2);\n    expect(spy.calls.argsFor(0)[5]).toEqual({ id: null });\n    expect(spy.calls.argsFor(1)[5]).toEqual({ id: 1 });\n  });\n\n  it('should create an array of objects as the source structure, when dataSchema is defined (as an object) but no data is provided', () => {\n    const hot = handsontable({\n      startCols: 2,\n      minSpareRows: 4,\n      dataSchema: { id: null, name: null, surname: null },\n    });\n\n    const dataAtRow = hot.getSourceDataAtRow(0);\n\n    expect(Array.isArray(dataAtRow)).toBe(false);\n    expect(dataAtRow.id).toEqual(null);\n    expect(dataAtRow.name).toEqual(null);\n    expect(dataAtRow.surname).toEqual(null);\n  });\n\n  it('should create an array of objects as the source structure, when dataSchema is defined (as a function) but no data is provided', () => {\n    const hot = handsontable({\n      startCols: 2,\n      minSpareRows: 4,\n      dataSchema() {\n        return { id: null, name: null, surname: null };\n      },\n    });\n\n    const dataAtRow = hot.getSourceDataAtRow(0);\n\n    expect(Array.isArray(dataAtRow)).toBe(false);\n    expect(dataAtRow.id).toEqual(null);\n    expect(dataAtRow.name).toEqual(null);\n    expect(dataAtRow.surname).toEqual(null);\n  });\n\n  it('should create an array of objects as the source structure, when dataSchema is defined (as an array with an object) but no data is provided', () => {\n    const hot = handsontable({\n      startCols: 2,\n      minSpareRows: 4,\n      dataSchema: [{ id: null, name: null, surname: null }],\n    });\n\n    const dataAtRow = hot.getSourceDataAtRow(0);\n\n    expect(Array.isArray(dataAtRow)).toBe(false);\n    expect(dataAtRow.id).toEqual(null);\n    expect(dataAtRow.name).toEqual(null);\n    expect(dataAtRow.surname).toEqual(null);\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_dataSchema.spec.js","describe('Core_datachange', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should call onChange callback', () => {\n    let output = null;\n\n    handsontable({\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    setDataAtCell(1, 2, 'test');\n\n    expect(output[0][0]).toEqual(1);\n    expect(output[0][1]).toEqual(2);\n    expect(output[0][2]).toEqual(null);\n    expect(output[0][3]).toEqual('test');\n  });\n\n  it('should use custom source for datachange', () => {\n    let output = null;\n    let src = null;\n\n    handsontable({\n      afterChange(changes, source) {\n        output = changes;\n        src = source;\n      }\n    });\n    setDataAtCell(1, 2, 'abc', 'test');\n\n    expect(output[0][3]).toEqual('abc');\n    expect(src).toEqual('test');\n  });\n\n  it('should use custom source for datachange with array', () => {\n    let output = null;\n    let src = null;\n\n    handsontable({\n      afterChange(changes, source) {\n        output = changes;\n        src = source;\n      }\n    });\n    setDataAtCell([[1, 2, 'abc']], 'test');\n\n    expect(output[0][3]).toEqual('abc');\n    expect(src).toEqual('test');\n  });\n\n  it('should trigger datachange event', () => {\n    let output = null;\n\n    handsontable();\n    Handsontable.hooks.add('afterChange', (changes) => {\n      output = changes;\n    });\n    setDataAtCell(1, 2, 'test');\n\n    expect(output[0][0]).toEqual(1);\n    expect(output[0][1]).toEqual(2);\n    expect(output[0][2]).toEqual(null);\n    expect(output[0][3]).toEqual('test');\n  });\n\n  it('this.rootElement should point to handsontable rootElement', () => {\n    const $container = spec().$container;\n    let output = null;\n\n    handsontable({\n      afterChange() {\n        output = this.rootElement;\n      }\n    });\n    setDataAtCell(0, 0, 'test');\n\n    expect(output).toEqual($container[0]);\n  });\n\n  it('onChange should be triggered after data is rendered to DOM (init)', () => {\n    const $container = spec().$container;\n    let output = null;\n\n    handsontable({\n      data: [\n        ['Joe Red']\n      ],\n      afterChange(changes, source) {\n        if (source === 'loadData') {\n          output = $container.find('table.htCore tbody td:first').html();\n        }\n      }\n    });\n\n    expect(output).toEqual('Joe Red');\n  });\n\n  it('onChange should be triggered after data is rendered to DOM (setDataAtCell)', () => {\n    const $container = spec().$container;\n    let output = null;\n\n    handsontable({\n      data: [\n        ['Joe Red']\n      ],\n      afterChange(changes, source) {\n        if (source === 'edit') {\n          output = $container.find('table.htCore tbody td:first').html();\n        }\n      }\n    });\n    setDataAtCell(0, 0, 'Alice Red');\n\n    expect(output).toEqual('Alice Red');\n  });\n\n  it('onChange event object should contain documented keys and values when triggered by edit', () => {\n    const sampleData = [\n      {\n        col1: 'a',\n        col2: 'b',\n        col3: 'c'\n      }\n    ];\n    let event = null;\n\n    handsontable({\n      data: sampleData,\n      afterChange(changes, source) {\n        if (source === 'edit') {\n          event = changes.shift();\n        }\n      }\n    });\n    setDataAtCell(0, 0, 'test');\n\n    expect(event[0]).toEqual(0);\n    expect(event[1]).toEqual('col1');\n    expect(event[2]).toEqual('a');\n    expect(event[3]).toEqual('test');\n  });\n\n  it('source parameter should be `edit` when cell value is changed through editor', () => {\n    const sources = [];\n\n    handsontable({\n      data: [\n        ['Joe Red']\n      ],\n      afterChange(changes, source) {\n        sources.push(source);\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('enter');\n    document.activeElement.value = 'Ted';\n    keyDown('enter');\n\n    expect(sources).toEqual(['loadData', 'edit']); // loadData is always the first source\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_datachange.spec.js","describe('Core_destroy', () => {\n  const id = 'testContainer';\n\n  beforeEach(() => {\n    spec().$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(() => {\n    if (spec().$container) {\n      destroy();\n      spec().$container.remove();\n    }\n  });\n\n  it('should remove table from the root element', () => {\n    handsontable();\n    destroy();\n\n    expect(spec().$container.html()).toEqual('');\n  });\n\n  it('should remove events from the root element, document element and window', () => {\n    const x = handsontable();\n\n    expect(x.eventListeners.length > 0).toBeTruthy();\n    destroy();\n    expect(x.eventListeners).toBeNull();\n    $(document.documentElement).off('.copypaste'); // remove copypaste.js listeners, which are not removed by destroy (because copypaste is a singleton for whole page)\n  });\n\n  it('should NOT remove events from document element and window for other Handsontable instances on the page', () => {\n    // test based on Core_selectionSpec.js (should deselect currently selected cell)\n    handsontable();\n\n    const $tmp = $('<div id=\"tmp\"></div>').appendTo(document.body);\n    $tmp.handsontable();\n    $tmp.handsontable('destroy');\n    $tmp.remove();\n\n    selectCell(0, 0);\n\n    $('html').simulate('mousedown');\n\n    expect(getSelected()).toBeUndefined();\n  });\n\n  it('should throw an exception when metod on destroyed instance is called', () => {\n    const hot = handsontable();\n\n    destroy();\n\n    expect(() => {\n      hot.getDataAtCell(0, 0);\n    }).toThrowError('The \"getDataAtCell\" method cannot be called because this Handsontable instance has been destroyed');\n    expect(() => {\n      hot.listen();\n    }).toThrowError('The \"listen\" method cannot be called because this Handsontable instance has been destroyed');\n  });\n\n  it('should set isDestroyed flag to `true` when instance is destroyed', () => {\n    const hot = handsontable();\n\n    expect(hot.isDestroyed).toBe(false);\n\n    destroy();\n\n    expect(hot.isDestroyed).toBe(true);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_destroy.spec.js","describe('Core_destroyEditor', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('editor should not be visible', () => {\n    handsontable();\n    selectCell(1, 1);\n\n    keyDownUp('enter');\n    destroyEditor();\n\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('value should be saved', () => {\n    handsontable();\n    selectCell(1, 1);\n\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n\n    destroyEditor();\n    expect(getDataAtCell(1, 1)).toEqual('Ted');\n  });\n\n  it('cell should be selected', () => {\n    handsontable();\n    selectCell(1, 1);\n\n    keyDownUp('enter');\n\n    destroyEditor();\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n  });\n\n  it('should revert original value when param set to true', () => {\n    handsontable();\n    selectCell(1, 1);\n\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n\n    destroyEditor(true);\n    expect(getDataAtCell(1, 1)).toEqual(null);\n  });\n\n  it('should not destroy editor on scroll', () => {\n    spec().$container.css({\n      width: 200,\n      height: 100\n    });\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 10)\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    const editor = $('.handsontableInputHolder');\n\n    expect(editor.is(':visible')).toBe(true);\n\n    spec().$container.scroll();\n\n    expect(editor.is(':visible')).toBe(true);\n\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_destroyEditor.spec.js","describe('Core_getCellMeta', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should get proper cell meta when indexes was modified', () => {\n    handsontable({\n      modifyRow(row) {\n        return row + 10;\n      },\n      modifyCol(col) {\n        return col + 10;\n      }\n    });\n\n    const cellMeta = getCellMeta(0, 1);\n\n    expect(cellMeta.row).toEqual(10);\n    expect(cellMeta.col).toEqual(11);\n    expect(cellMeta.visualRow).toEqual(0);\n    expect(cellMeta.visualCol).toEqual(1);\n  });\n\n  it('should not allow manual editing of a read only cell', () => {\n    let allCellsReadOnly = false;\n\n    handsontable({\n      cells() {\n        return { readOnly: allCellsReadOnly };\n      }\n    });\n    allCellsReadOnly = true;\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('should allow manual editing of cell that is no longer read only', () => {\n    let allCellsReadOnly = true;\n\n    handsontable({\n      cells() {\n        return { readOnly: allCellsReadOnly };\n      }\n    });\n    allCellsReadOnly = false;\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should move the selection to the cell below, when hitting the ENTER key on a read-only cell', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      cells() {\n        return { readOnly: true };\n      }\n    });\n\n    selectCell(0, 0);\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    keyDown('enter');\n    expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n\n  });\n\n  it('should use default cell editor for a cell that has declared only cell renderer', () => {\n    handsontable({\n      cells() {\n        return {\n          renderer(instance, td, ...args) {\n            // taken from demo/renderers.html\n            Handsontable.renderers.TextRenderer.apply(this, [instance, td, ...args]);\n            $(td).css({\n              background: 'yellow'\n            });\n          }\n        };\n      }\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    document.activeElement.value = 'new value';\n    destroyEditor();\n    expect(getDataAtCell(2, 2)).toEqual('new value');\n  });\n\n  it('should allow to use type and renderer in `flat` notation', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [0, 9, 8, 7]\n      ],\n      cells(row, col) {\n        if (row === 2 && col === 2) {\n          return {\n            type: 'checkbox',\n            renderer(instance, td, ...args) {\n              // taken from demo/renderers.html\n              Handsontable.renderers.TextRenderer.apply(this, [instance, td, ...args]);\n\n              td.style.backgroundColor = 'yellow';\n            }\n          };\n        }\n      }\n    });\n\n    expect(getCell(2, 2).style.backgroundColor).toEqual('yellow');\n    expect(getCell(1, 1).style.backgroundColor).toEqual('');\n  });\n\n  it('this in cells should point to cellProperties', () => {\n    let called = 0;\n    let _row;\n    let _this;\n\n    handsontable({\n      cells(row) {\n        called += 1;\n        _row = row;\n        _this = this;\n      }\n    });\n\n    const HOT = getInstance();\n\n    expect(called).toBeGreaterThan(0);\n    expect(_this.row).toEqual(_row);\n    expect(_this.instance).toBe(HOT);\n  });\n\n  it('should get proper cellProperties when order of displayed rows is different than order of stored data', () => {\n    handsontable({\n      data: [\n        ['C'],\n        ['A'],\n        ['B']\n      ],\n      minSpareRows: 1,\n      cells(row, col) {\n        const cellProperties = {};\n\n        if (getSourceData()[row][col] === 'A') {\n          cellProperties.readOnly = true;\n        }\n\n        return cellProperties;\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C');\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htDimmed')).toBe(false);\n\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A');\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').hasClass('htDimmed')).toBe(true);\n\n    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('B');\n    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').hasClass('htDimmed')).toBe(false);\n\n    // Column sorting changes the order of displayed rows while keeping table data unchanged\n    updateSettings({\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A');\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htDimmed')).toBe(true);\n\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('B');\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').hasClass('htDimmed')).toBe(false);\n\n    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('C');\n    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should call `beforeGetCellMeta` plugin hook with visual indexes as parameters', () => {\n    let rowInsideHook;\n    let colInsideHook;\n\n    const hot = handsontable({\n      beforeGetCellMeta(row, col) {\n        rowInsideHook = row;\n        colInsideHook = col;\n      },\n      modifyRow(row) {\n        return row + 10;\n      },\n      modifyCol(col) {\n        return col + 10;\n      }\n    });\n\n    hot.getCellMeta(0, 1);\n\n    expect(rowInsideHook).toEqual(0);\n    expect(colInsideHook).toEqual(1);\n  });\n\n  it('should call `afterGetCellMeta` plugin hook with visual indexes as parameters', () => {\n    let rowInsideHook;\n    let colInsideHook;\n\n    const hot = handsontable({\n      afterGetCellMeta(row, col) {\n        rowInsideHook = row;\n        colInsideHook = col;\n      },\n      modifyRow(row) {\n        return row + 10;\n      },\n      modifyCol(col) {\n        return col + 10;\n      }\n    });\n\n    hot.getCellMeta(0, 1);\n\n    expect(rowInsideHook).toEqual(0);\n    expect(colInsideHook).toEqual(1);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_getCellMeta.spec.js","describe('Core.getColHeader', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('when not configured, should return undefined', () => {\n    handsontable();\n    expect(getColHeader(1)).toBe(null);\n  });\n\n  it('when configured as true, should return the Excel-style column title', () => {\n    handsontable({\n      colHeaders: true\n    });\n    expect(getColHeader(30)).toEqual('AE');\n  });\n\n  it('when configured as array, should return value at index', () => {\n    handsontable({\n      colHeaders: ['One', 'Two', 'Three', 'Four', 'Five']\n    });\n    expect(getColHeader(1)).toEqual('Two');\n  });\n\n  it('when configured as function, should return function output', () => {\n    handsontable({\n      colHeaders(index) {\n        return `col${index}`;\n      }\n    });\n    expect(getColHeader(1)).toEqual('col1');\n  });\n\n  it('when configured as static value, should return the value', () => {\n    handsontable({\n      colHeaders: 'static'\n    });\n    expect(getColHeader(1)).toEqual('static');\n  });\n\n  it('when configured as HTML value, should render that as HTML', () => {\n    handsontable({\n      colHeaders(index) {\n        return `<b>col${index}</b>`;\n      }\n    });\n    expect(getColHeader(1)).toEqual('<b>col1</b>');\n  });\n\n  it('when no argument given, should return as much column headers as there are columns', () => {\n    handsontable({\n      colHeaders: true,\n      startCols: 3\n    });\n    expect(getColHeader()).toEqual(['A', 'B', 'C']);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_getColHeader.spec.js","describe('Core_getDataAt*', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  const arrayOfObjects = function() {\n    return [\n      {\n        'id.a.b.c': 1,\n        id: 1,\n        name: 'Nannie Patel',\n        address: 'Jenkin ville',\n        details: {\n          city: 'Chicago'\n        },\n      },\n      {\n        'id.a.b.c': 2,\n        id: 2,\n        name: 'Łucja Grożny and Środeńczak',\n        address: 'Gardiner',\n        details: {\n          city: 'New York'\n        },\n      },\n    ];\n  };\n\n  it('should return data at specified row', () => {\n    handsontable({\n      data: arrayOfArrays()\n    });\n\n    expect(getDataAtRow(0)).toEqual(['', 'Kia', 'Nissan', 'Toyota', 'Honda']);\n  });\n\n  it('should return data at specified col', () => {\n    handsontable({\n      data: arrayOfArrays()\n    });\n\n    expect(getDataAtCol(1)).toEqual(['Kia', 10, 20, 30]);\n  });\n\n  describe('Core_getDataAtRowProp', () => {\n    it('should return data at specified column', () => {\n      handsontable({\n        data: arrayOfObjects()\n      });\n\n      expect(getDataAtRowProp(1, 'id.a.b.c')).toBe(2);\n      expect(getDataAtRowProp(1, 'id')).toBe(2);\n      expect(getDataAtRowProp(1, 'id')).toBe(2);\n      expect(getDataAtRowProp(1, 'details.city')).toBe('New York');\n    });\n  });\n\n  describe('`modifyData` hook', () => {\n    it('should be fired with specified arguments on every `set`, `get` operation (array of arrays)', () => {\n      const spy = jasmine.createSpy();\n\n      handsontable({\n        data: arrayOfArrays(),\n        autoColumnSize: false,\n        modifyData: spy,\n      });\n\n      expect(spy.calls.count()).toBe(20); // call for all cells\n      expect(spy.calls.argsFor(1)[0]).toBe(0);\n      expect(spy.calls.argsFor(1)[1]).toBe(1);\n      expect(spy.calls.argsFor(1)[2].value).toBe('Kia');\n      expect(spy.calls.argsFor(1)[3]).toBe('get');\n\n      spy.calls.reset();\n      setDataAtCell(2, 3, 'foo');\n\n      expect(spy.calls.count()).toBe(21); // call for all cells + 1 from setDataAtCell\n      expect(spy.calls.argsFor(0)[0]).toBe(2);\n      expect(spy.calls.argsFor(0)[1]).toBe(3);\n      expect(spy.calls.argsFor(0)[2].value).toBe('foo');\n      expect(spy.calls.argsFor(0)[3]).toBe('set');\n    });\n\n    it('should be fired with specified arguments on every `set`, `get` operation (array of objects)', () => {\n      const spy = jasmine.createSpy();\n\n      handsontable({\n        data: arrayOfObjects(),\n        autoColumnSize: false,\n        modifyData: spy,\n      });\n\n      expect(spy.calls.count()).toBe(10); // call for all cells\n      expect(spy.calls.argsFor(2)[0]).toBe(0);\n      expect(spy.calls.argsFor(2)[1]).toBe(2);\n      expect(spy.calls.argsFor(2)[2].value).toBe('Nannie Patel');\n      expect(spy.calls.argsFor(2)[3]).toBe('get');\n\n      spy.calls.reset();\n      setDataAtRowProp(2, 'name', 'foo');\n\n      expect(spy.calls.count()).toBe(16);\n      expect(spy.calls.argsFor(0)[0]).toBe(2);\n      expect(spy.calls.argsFor(0)[1]).toBe(2);\n      expect(spy.calls.argsFor(0)[2].value).toBe('foo');\n      expect(spy.calls.argsFor(0)[3]).toBe('set');\n    });\n\n    it('should overwrite value while loading data', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        modifyData(row, column, valueHolder, ioMode) {\n          if (ioMode === 'get' && row === 1 && column === 2) {\n            valueHolder.value = 'foo';\n          }\n        },\n      });\n\n      expect(getDataAtCell(1, 2)).toBe('foo');\n      expect(getSourceDataAtCell(1, 2)).toBe(11);\n    });\n\n    it('should overwrite value while saving data', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        modifyData(row, column, valueHolder, ioMode) {\n          if (ioMode === 'set' && row === 1 && column === 2) {\n            valueHolder.value = 'foo';\n          }\n        },\n      });\n\n      setDataAtCell(1, 2, 'bar');\n\n      expect(getDataAtCell(1, 2)).toBe('foo');\n      expect(getSourceDataAtCell(1, 2)).toBe('foo');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_getDataAt.spec.js","describe('Core_getDataType', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  it('should return data type at specyfied range (default type)', () => {\n    handsontable({\n      data: arrayOfArrays()\n    });\n\n    expect(getDataType(0, 0)).toEqual('text');\n    expect(getDataType(0, 0, 1, 1)).toEqual('text');\n  });\n\n  it('should return data type at specyfied range (type defined in columns)', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      columns: [\n        { type: 'numeric' },\n        { type: 'text' },\n        { type: 'date' },\n        { type: 'autocomplete' },\n        { type: 'dropdown' },\n      ]\n    });\n\n    expect(getDataType(0, 0)).toEqual('numeric');\n    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');\n    expect(getDataType(0, 1, 1, 1)).toEqual('text');\n    expect(getDataType(0, 2, 1, 2)).toEqual('date');\n    expect(getDataType(3, 3, 3, 3)).toEqual('autocomplete');\n    expect(getDataType(3, 4, 3, 4)).toEqual('dropdown');\n  });\n\n  it('should return data type at specyfied range (type defined in columns) when columns is a function', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.type = 'numeric';\n\n        } else if (column === 1) {\n          colMeta.type = 'text';\n\n        } else if (column === 2) {\n          colMeta.type = 'date';\n\n        } else if (column === 3) {\n          colMeta.type = 'autocomplete';\n\n        } else if (column === 4) {\n          colMeta.type = 'dropdown';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getDataType(0, 0)).toEqual('numeric');\n    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');\n    expect(getDataType(0, 1, 1, 1)).toEqual('text');\n    expect(getDataType(0, 2, 1, 2)).toEqual('date');\n    expect(getDataType(3, 3, 3, 3)).toEqual('autocomplete');\n    expect(getDataType(3, 4, 3, 4)).toEqual('dropdown');\n  });\n\n  it('should return data type at specyfied range (type defined in cells)', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      cells(row, column) {\n        const cellMeta = {};\n\n        if (row === 1 && column === 1) {\n          cellMeta.type = 'date';\n        }\n        if (column === 2) {\n          cellMeta.type = 'checkbox';\n        }\n\n        return cellMeta;\n      }\n    });\n\n    expect(getDataType(0, 0)).toEqual('text');\n    expect(getDataType(1, 1)).toEqual('date');\n    expect(getDataType(1, 2)).toEqual('checkbox');\n    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_getDataType.spec.js","describe('Core.getRowHeader', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('when not configured, should return undefined', () => {\n    handsontable();\n    expect(getRowHeader(1)).toEqual(void 0);\n  });\n\n  it('when configured as true, should return the index incremented by 1', () => {\n    handsontable({\n      rowHeaders: true\n    });\n    expect(getRowHeader(1)).toEqual(2);\n  });\n\n  it('when configured as array, should return value at index', () => {\n    handsontable({\n      rowHeaders: ['One', 'Two', 'Three', 'Four', 'Five']\n    });\n    expect(getRowHeader(1)).toEqual('Two');\n  });\n\n  it('when configured as function, should return function output', () => {\n    handsontable({\n      rowHeaders(index) {\n        return `row${index}`;\n      }\n    });\n    expect(getRowHeader(1)).toEqual('row1');\n  });\n\n  it('when configured as static value, should return the value', () => {\n    handsontable({\n      rowHeaders: 'static'\n    });\n    expect(getRowHeader(1)).toEqual('static');\n  });\n\n  it('when configured as HTML value, should render that as HTML', () => {\n    handsontable({\n      rowHeaders(index) {\n        return `<b>row${index}</b>`;\n      }\n    });\n    expect(getRowHeader(1)).toEqual('<b>row1</b>');\n  });\n\n  it('when no argument given, should return as much row headers as there are rows', () => {\n    handsontable({\n      rowHeaders: true,\n      startRows: 3\n    });\n    expect(getRowHeader()).toEqual([1, 2, 3]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_getRowHeader.spec.js","describe('Core_init', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should respect startRows and startCols when no data is provided', () => {\n    spec().$container.remove();\n    spec().$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    handsontable();\n\n    expect(countRows()).toEqual(5); // as given in README.md\n    expect(countCols()).toEqual(5); // as given in README.md\n  });\n\n  it('should respect width provided in inline style', () => {\n    spec().$container.css({\n      overflow: 'auto',\n      width: '200px'\n    });\n    handsontable({\n      data: [\n        ['ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC']\n      ]\n    });\n\n    expect(spec().$container.width()).toEqual(200);\n  });\n\n  it('should respect width provided in CSS class', () => {\n    $('<style>.myTable {overflow: auto; width: 200px}</style>').appendTo('head');\n    spec().$container.addClass('myTable');\n    handsontable({\n      data: [\n        ['ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC']\n      ]\n    });\n\n    expect(spec().$container.width()).toEqual(200);\n  });\n\n  it('should construct when container is not appended to document', () => {\n    spec().$container.remove();\n    handsontable();\n    expect(getData()).toBeTruthy();\n  });\n\n  xit('should create table even if is launched inside custom element', () => {\n    // TODO: When we'll update phantomjs, then we should try to run this test case.\n    spec().$container = $(`<hot-table><div id=\"${id}\"></div></hot-table>`).appendTo('body');\n    handsontable();\n\n    expect(() => {\n      mouseOver(spec().$container.find('tr:eq(0) td:eq(1)'));\n    }).not.toThrow();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_init.spec.js","describe('Core.isEmpty*', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('isEmptyRow', () => {\n    it('should be empty row', () => {\n      handsontable();\n      const hot = getInstance();\n      expect(hot.isEmptyRow(0)).toEqual(true);\n    });\n\n    it('should not be empty row', () => {\n      handsontable();\n      setDataAtCell(0, 0, 'test');\n      const hot = getInstance();\n      expect(hot.isEmptyRow(0)).toEqual(false);\n    });\n\n    it('should bind this to instance', () => {\n      handsontable();\n      const hot = getInstance();\n      const check = hot.isEmptyRow;\n      expect(check(0)).toEqual(true); // this may be change in future when we switch to define isEmptyCol in prototype\n    });\n  });\n\n  describe('isEmptyCol', () => {\n    it('should be empty row', () => {\n      handsontable();\n      const hot = getInstance();\n      expect(hot.isEmptyCol(0)).toEqual(true);\n    });\n\n    it('should not be empty row', () => {\n      handsontable();\n      setDataAtCell(0, 0, 'test');\n      const hot = getInstance();\n      expect(hot.isEmptyCol(0)).toEqual(false);\n    });\n\n    it('should bind this to instance', () => {\n      handsontable();\n      const hot = getInstance();\n      const check = hot.isEmptyCol;\n      expect(check(0)).toEqual(true); // this may be change in future when we switch to define isEmptyCol in prototype\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_isEmpty.spec.js","describe('Core_keepEmptyRows', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfNestedObjects = function() {\n    return [\n      { id: 1,\n        name: {\n          first: 'Ted',\n          last: 'Right'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name' },\n      { id: 2,\n        name: {\n          first: 'Frank',\n          last: 'Honest'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name' },\n      { id: 3,\n        name: {\n          first: 'Joan',\n          last: 'Well'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name' }\n    ];\n  };\n\n  it('should remove columns if needed', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'name.first' }\n      ]\n    });\n\n    expect(spec().$container.find('tbody tr:first td').length).toEqual(2);\n  });\n\n  it('should remove columns if needed when columns is a function', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:first td').length).toEqual(2);\n  });\n\n  it('should create columns if needed', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'name.first' },\n        { data: 'name.last' },\n        { data: 'address' },\n        { data: 'zip' },\n        { data: 'city' }\n      ]\n    });\n\n    expect(spec().$container.find('tbody tr:first td').length).toEqual(6);\n  });\n\n  it('should create columns if needed when columns is a function', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else if (column === 3) {\n          colMeta.data = 'address';\n\n        } else if (column === 4) {\n          colMeta.data = 'zip';\n\n        } else if (column === 5) {\n          colMeta.data = 'city';\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:first td').length).toEqual(6);\n  });\n\n  it('should create spare cols and rows on init (array data source)', () => {\n    handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      minCols: 4,\n      minRows: 4,\n      minSpareRows: 4,\n      minSpareCols: 4\n    });\n\n    expect(countCells()).toEqual(36);\n  });\n\n  it('should create spare cols and rows on init (object data source)', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      minRows: 4,\n      minSpareRows: 1\n    });\n\n    expect(countRows()).toEqual(4);\n    expect(countCols()).toEqual(6); // because arrayOfNestedObjects has 6 nested properites and they should be figured out if dataSchema/columns is not given\n    expect(spec().$container.find('tbody tr:first td:last').text()).toEqual('City Name');\n  });\n\n  it('should create new row when last cell in last row is edited', () => {\n    const data = [\n      ['one', 'two'],\n      ['three', 'four']\n    ];\n\n    handsontable({\n      data,\n      minRows: 4,\n      minCols: 4,\n      minSpareRows: 1\n    });\n    setDataAtCell(3, 3, 'test');\n\n    expect(data.length).toEqual(5);\n  });\n\n  it('should create new col when last cell in last row is edited', () => {\n    const data = [\n      ['one', 'two'],\n      ['three', 'four']\n    ];\n\n    handsontable({\n      data,\n      minRows: 4,\n      minCols: 4,\n      minSpareCols: 1\n    });\n    setDataAtCell(3, 3, 'test');\n\n    expect(countCols()).toEqual(5);\n  });\n\n  it('should create new row when last cell in last row is edited by autocomplete', (done) => {\n    const data = [\n      { id: 1, color: 'orange' }\n    ];\n\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);\n    });\n\n    handsontable({\n      data,\n      startRows: 5,\n      colHeaders: true,\n      minSpareRows: 1,\n      columns: [\n        { data: 'id', type: 'text' },\n        {\n          data: 'color',\n          editor: 'autocomplete',\n          source: syncSources\n        }\n      ]\n    });\n\n    selectCell(1, 1);\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      keyDown('arrow_down');\n      keyDownUp('enter');\n\n      expect(data.length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should create new row when last cell in last row is edited by autocomplete when columns is a function', (done) => {\n    const data = [\n      { id: 1, color: 'orange' }\n    ];\n\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);\n    });\n\n    handsontable({\n      data,\n      startRows: 5,\n      colHeaders: true,\n      minSpareRows: 1,\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n          colMeta.type = 'text';\n\n        } else if (column === 1) {\n          colMeta.data = 'color';\n          colMeta.editor = 'autocomplete';\n          colMeta.source = syncSources;\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    selectCell(1, 1);\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      keyDown('arrow_down');\n      keyDownUp('enter');\n\n      expect(data.length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should not create more rows that maxRows', () => {\n    handsontable({\n      startRows: 4,\n      maxRows: 6,\n      minSpareRows: 1\n    });\n    setDataAtCell(3, 0, 'test');\n    setDataAtCell(4, 0, 'test');\n    setDataAtCell(5, 0, 'test');\n\n    expect(countRows()).toEqual(6);\n  });\n\n  it('should not create more cols that maxCols', () => {\n    handsontable({\n      startCols: 4,\n      maxCols: 6,\n      minSpareCols: 1\n    });\n    setDataAtCell(0, 3, 'test');\n    setDataAtCell(0, 4, 'test');\n    setDataAtCell(0, 5, 'test');\n\n    expect(countCols()).toEqual(6);\n  });\n\n  it('should ignore minCols if columns is set', () => {\n    handsontable({\n      startCols: 1,\n      minCols: 6,\n      columns: [\n        {},\n        {}\n      ]\n    });\n\n    expect(countCols()).toEqual(2);\n  });\n\n  it('should ignore minCols if columns is set when columns is a function', () => {\n    handsontable({\n      startCols: 1,\n      minCols: 6,\n      columns(column) {\n        let colMeta = {};\n\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(countCols()).toEqual(1);\n  });\n\n  it('columns should have priority over startCols', () => {\n    handsontable({\n      startCols: 3,\n      minCols: 6,\n      columns: [\n        {},\n        {}\n      ]\n    });\n\n    expect(countCols()).toEqual(2);\n  });\n\n  it('columns should have priority over startCols when columns is a function', () => {\n    handsontable({\n      startCols: 3,\n      minCols: 6,\n      columns(column) {\n        let colMeta = {};\n\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(countCols()).toEqual(2);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_keepEmptyRows.spec.js","describe('Core_listen', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should listen to changes when cell is selected', () => {\n    const hot = handsontable();\n    hot.selectCell(0, 0);\n    expect(hot.isListening()).toEqual(true);\n  });\n\n  it('should\\'t listen to changes when cell is selected via `selectCell` when `changeListener` argument is `false`', () => {\n    const hot = handsontable();\n\n    hot.unlisten();\n\n    expect(hot.isListening()).toEqual(false);\n\n    hot.selectCell(0, 0, undefined, undefined, true, false);\n\n    expect(hot.isListening()).toEqual(false);\n  });\n\n  it('should unlisten changes', () => {\n    const hot = handsontable();\n    hot.selectCell(0, 0);\n    expect(hot.isListening()).toEqual(true);\n    hot.unlisten();\n    expect(hot.isListening()).toEqual(false);\n  });\n\n  it('should listen to changes, when called after unlisten', () => {\n    const hot = handsontable();\n    hot.selectCell(0, 0);\n    hot.unlisten();\n    hot.listen();\n    expect(hot.isListening()).toEqual(true);\n  });\n\n  it('should change focus on active element, when listen without arguments was called', () => {\n    const hot = handsontable();\n    const input = document.createElement('input');\n\n    document.body.appendChild(input);\n\n    hot.selectCell(0, 0);\n    input.focus();\n    hot.listen();\n\n    expect(hot.isListening()).toEqual(true);\n    expect(document.activeElement).not.toBe(input);\n    expect(document.activeElement).toBe(document.body);\n\n    document.body.removeChild(input);\n  });\n\n  it('should not change focus on active element, when listen with first argument as `false` was called', () => {\n    const hot = handsontable();\n    const input = document.createElement('input');\n\n    document.body.appendChild(input);\n\n    hot.selectCell(0, 0);\n    input.focus();\n    hot.listen(false);\n\n    expect(hot.isListening()).toEqual(true);\n    expect(document.activeElement).toBe(input);\n\n    document.body.removeChild(input);\n  });\n\n  it('when second instance is created, first should unlisten automatically', () => {\n    const $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable();\n    $container1.handsontable('selectCell', 0, 0);\n    const $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable();\n    $container2.handsontable('selectCell', 0, 0);\n\n    expect($container1.handsontable('isListening')).toEqual(false);\n    expect($container2.handsontable('isListening')).toEqual(true);\n\n    $container1.handsontable('destroy');\n    $container1.remove();\n    $container2.handsontable('destroy');\n    $container2.remove();\n  });\n\n  it('when listen is called on first instance, second should unlisten automatically', () => {\n    const $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable();\n    $container1.handsontable('selectCell', 0, 0);\n    const $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable();\n    $container2.handsontable('selectCell', 0, 0);\n\n    $container1.handsontable('listen');\n    expect($container1.handsontable('isListening')).toEqual(true);\n    expect($container2.handsontable('isListening')).toEqual(false);\n\n    $container1.handsontable('destroy');\n    $container1.remove();\n    $container2.handsontable('destroy');\n    $container2.remove();\n  });\n\n  describe('hooks', () => {\n    it('should call `afterListen` after set listen on instance', () => {\n      const afterListenCallback = jasmine.createSpy('afterListenCallback');\n\n      handsontable({\n        afterListen: afterListenCallback\n      });\n\n      expect(afterListenCallback.calls.count()).toBe(0);\n\n      spec().$container.handsontable('listen');\n\n      expect(afterListenCallback.calls.count()).toBe(1);\n    });\n\n    it('should call `afterUnlisten` after unset listen on instance', () => {\n      const afterUnlistenCallback = jasmine.createSpy('afterListenCallback');\n\n      handsontable({\n        afterUnlisten: afterUnlistenCallback\n      });\n\n      spec().$container.handsontable('listen');\n\n      expect(afterUnlistenCallback.calls.count()).toBe(0);\n\n      spec().$container.handsontable('unlisten');\n\n      expect(afterUnlistenCallback.calls.count()).toBe(1);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_listen.spec.js","describe('Core_loadData', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  const arrayOfObjects = function() {\n    return [\n      { id: 1, name: 'Ted', lastName: 'Right' },\n      { id: 2, name: 'Frank', lastName: 'Honest' },\n      { id: 3, name: 'Joan', lastName: 'Well' },\n      { id: 4, name: 'Sid', lastName: 'Strong' },\n      { id: 5, name: 'Jane', lastName: 'Neat' },\n      { id: 6, name: 'Chuck', lastName: 'Jackson' },\n      { id: 7, name: 'Meg', lastName: 'Jansen' },\n      { id: 8, name: 'Rob', lastName: 'Norris' },\n      { id: 9, name: 'Sean', lastName: 'O\\'Hara' },\n      { id: 10, name: 'Eve', lastName: 'Branson' }\n    ];\n  };\n\n  const arrayOfNestedObjects = function() {\n    return [\n      {\n        id: 1,\n        name: {\n          first: 'Ted',\n          last: 'Right'\n        },\n        'full.street': 'Street I',\n      },\n      {\n        id: 2,\n        name: {\n          first: 'Frank',\n          last: 'Honest'\n        },\n        'full.street': 'Street II',\n      },\n      {\n        id: 3,\n        name: {\n          first: 'Joan',\n          last: 'Well'\n        },\n        'full.street': 'Street III',\n      }\n    ];\n  };\n\n  const htmlData = [\n    ['<b>H&M</b>']\n  ];\n\n  it('should allow array of arrays', () => {\n    handsontable();\n    loadData(arrayOfArrays());\n    expect(getDataAtCell(0, 2)).toEqual('Nissan');\n  });\n\n  it('should allow array of objects', () => {\n    handsontable({\n      columns: [\n        { data: 'id' },\n        { data: 'lastName' },\n        { data: 'name' }\n      ]\n    });\n    loadData(arrayOfObjects());\n    expect(getDataAtCell(0, 2)).toEqual('Ted');\n  });\n\n  it('should allow array of objects when columns as a function', () => {\n    handsontable({\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n        } else if (column === 1) {\n          colMeta.data = 'lastName';\n        } else if (column === 2) {\n          colMeta.data = 'name';\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n    loadData(arrayOfObjects());\n    expect(getDataAtCell(0, 2)).toEqual('Ted');\n  });\n\n  it('should allow array of nested objects', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true,\n      columns: [\n        { data: 'id' },\n        { data: 'name.last' },\n        { data: 'name.first' },\n        { data: 'full.street' },\n      ]\n    });\n    expect(getDataAtCell(0, 2)).toEqual('Ted');\n    expect(getDataAtCell(1, 3)).toEqual('Street II');\n    expect(getDataAtRowProp(2, 'full.street')).toEqual('Street III');\n  });\n\n  it('should allow array of nested objects when columns as a function', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true,\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n        } else if (column === 1) {\n          colMeta.data = 'name.last';\n        } else if (column === 2) {\n          colMeta.data = 'name.first';\n        } else if (column === 3) {\n          colMeta.data = 'full.street';\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n    expect(getDataAtCell(0, 2)).toEqual('Ted');\n    expect(getDataAtCell(1, 3)).toEqual('Street II');\n    expect(getDataAtRowProp(2, 'full.street')).toEqual('Street III');\n  });\n\n  it('should figure out default column names for array of nested objects', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true\n    });\n    expect(getDataAtCell(0, 2)).toEqual('Right');\n  });\n\n  it('should trigger onChange callback when loaded array of arrays', () => {\n    let called = false;\n\n    handsontable({\n      afterChange(changes, source) {\n        if (source === 'loadData') {\n          called = true;\n        }\n      }\n    });\n    loadData(arrayOfArrays());\n\n    expect(called).toEqual(true);\n  });\n\n  it('should trigger onChange callback when loaded array of objects', () => {\n    let called = false;\n\n    handsontable({\n      afterChange(changes, source) {\n        if (source === 'loadData') {\n          called = true;\n        }\n      }\n    });\n    loadData(arrayOfObjects());\n\n    expect(called).toEqual(true);\n  });\n\n  it('should trigger onChange callback when loaded array of nested objects', () => {\n    let called = false;\n\n    handsontable({\n      afterChange(changes, source) {\n        if (source === 'loadData') {\n          called = true;\n        }\n      }\n    });\n    loadData(arrayOfNestedObjects());\n\n    expect(called).toEqual(true);\n  });\n\n  it('should create new rows for array of arrays (and respect minRows)', () => {\n    handsontable({\n      minRows: 20, // minRows should be respected\n      data: arrayOfArrays()\n    });\n\n    expect(countRows()).toEqual(20); // TODO why this must be checked after render?\n  });\n\n  it('should create new rows for array of nested objects (and respect minRows)', () => {\n    handsontable({\n      minRows: 20, // minRows should be respected\n      data: arrayOfNestedObjects()\n    });\n\n    expect(countRows()).toEqual(20); // TODO why this must be checked after render?\n  });\n\n  it('HTML special chars should be escaped by default', () => {\n    handsontable();\n    loadData(htmlData);\n\n    expect(getCell(0, 0).innerHTML).toEqual('&lt;b&gt;H&amp;M&lt;/b&gt;');\n  });\n\n  it('should create as many rows as needed by array of objects', () => {\n    handsontable({\n      minRows: 6,\n      data: arrayOfObjects()\n    });\n\n    expect(getCell(9, 1).innerHTML).toEqual('Eve');\n  });\n\n  // https://github.com/handsontable/handsontable/pull/233\n  it('should not invoke the cells callback multiple times with the same row/col (without overlays)', () => {\n    const cellsSpy = jasmine.createSpy('cellsSpy');\n\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colWidths: [90, 90, 90, 90],\n      rowHeights: [23, 23, 23, 23],\n      cells: cellsSpy\n    });\n    //\n    expect(cellsSpy.calls.count()).toEqual(43);\n  });\n\n  it('should not invoke the cells callback multiple times with the same row/col (with overlays)', () => {\n    const cellsSpy = jasmine.createSpy('cellsSpy');\n\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true,\n      rowHeaders: true,\n      colWidths: [90, 90, 90, 90],\n      rowHeights: [90, 90, 90, 90],\n      cells: cellsSpy\n    });\n\n    expect(cellsSpy.calls.count()).toEqual(56);\n  });\n\n  it('should remove grid rows if new data source has less of them', () => {\n    const data1 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e'],\n      ['f'],\n      ['g'],\n      ['h']\n    ];\n\n    const data2 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e']\n    ];\n\n    handsontable({\n      data: data1,\n      rowHeaders: true,\n      colHeaders: true\n    });\n    selectCell(7, 0);\n    loadData(data2);\n\n    expect(countRows()).toBe(data2.length);\n    expect(getSelected()).toEqual([[4, 0, 4, 0]]);\n  });\n\n  it('should remove grid rows if new data source has less of them (with minSpareRows)', () => {\n    const data1 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e'],\n      ['f'],\n      ['g'],\n      ['h']\n    ];\n    const data2 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e']\n    ];\n\n    handsontable({\n      data: data1,\n      minSpareCols: 1,\n      minSpareRows: 1,\n      rowHeaders: true,\n      colHeaders: true\n    });\n    selectCell(8, 0);\n    loadData(data2);\n\n    expect(countRows()).toBe(6); // +1 because of minSpareRows\n    expect(getSelected()).toEqual([[5, 0, 5, 0]]);\n  });\n\n  it('loading empty data should remove all rows', () => {\n    const data1 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e'],\n      ['f'],\n      ['g'],\n      ['h']\n    ];\n\n    const data2 = [];\n\n    handsontable({\n      data: data1,\n      rowHeaders: true,\n      colHeaders: true\n    });\n    selectCell(7, 0);\n    loadData(data2);\n\n    expect(countRows()).toBe(0);\n    expect(getSelected()).toBeUndefined();\n  });\n\n  it('should only have as many columns as in settings', () => {\n    const data1 = arrayOfArrays();\n\n    handsontable({\n      data: data1,\n      columns: [\n        { data: 1 },\n        { data: 3 }\n      ]\n    });\n\n    expect(countCols()).toBe(2);\n  });\n\n  it('should only have as many columns as in settings when columns is a function', () => {\n    const data1 = arrayOfArrays();\n\n    handsontable({\n      data: data1,\n      columns(column) {\n        let colMeta = {\n          data: column\n        };\n\n        if ([1, 3].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(countCols()).toBe(2);\n  });\n\n  it('should throw error when trying to load a string (constructor)', () => {\n    let errors = 0;\n\n    try {\n      handsontable({\n        data: 'string'\n      });\n    } catch (e) {\n      errors += 1;\n    }\n\n    expect(errors).toBe(1);\n  });\n\n  it('should throw error when trying to load a string (loadData)', () => {\n    let errors = 0;\n\n    try {\n      handsontable();\n      loadData('string');\n    } catch (e) {\n      errors += 1;\n    }\n\n    expect(errors).toBe(1);\n  });\n\n  it('should load Backbone Collection as data source', () => {\n    // code borrowed from demo/backbone.js\n\n    const CarModel = Backbone.Model.extend({});\n\n    const CarCollection = Backbone.Collection.extend({\n      model: CarModel,\n      // Backbone.Collection doesn't support `splice`, yet! Easy to add.\n      splice: hackedSplice\n    });\n    const cars = new CarCollection();\n\n    cars.add([\n      { make: 'Dodge', model: 'Ram', year: 2012, weight: 6811 },\n      { make: 'Toyota', model: 'Camry', year: 2012, weight: 3190 },\n      { make: 'Smart', model: 'Fortwo', year: 2012, weight: 1808 }\n    ]);\n\n    handsontable({\n      data: cars,\n      columns: [\n        attr('make'),\n        attr('model'),\n        attr('year')\n      ]\n    });\n\n    // use the \"good\" Collection methods to emulate Array.splice\n    function hackedSplice(index, howMany, ...models) {\n      const args = _.toArray([index, howMany, ...models]).slice(2).concat({ at: index });\n      const removed = this.models.slice(index, index + howMany);\n\n      this.remove(removed).add.apply(this, args);\n\n      return removed;\n    }\n\n    // normally, you'd get these from the server with .fetch()\n    function attr(attribute) {\n      // this lets us remember `attr` for when when it is get/set\n      return {\n        data(car, value) {\n          if (_.isUndefined(value)) {\n            return car.get(attribute);\n          }\n          car.set(attribute, value);\n        }\n      };\n    }\n\n    expect(countRows()).toBe(3);\n  });\n\n  it('should load Backbone Collection as data source when columns is a function', () => {\n    // code borrowed from demo/backbone.js\n\n    const CarModel = Backbone.Model.extend({});\n\n    const CarCollection = Backbone.Collection.extend({\n      model: CarModel,\n      // Backbone.Collection doesn't support `splice`, yet! Easy to add.\n      splice: hackedSplice\n    });\n    const cars = new CarCollection();\n\n    cars.add([\n      { make: 'Dodge', model: 'Ram', year: 2012, weight: 6811 },\n      { make: 'Toyota', model: 'Camry', year: 2012, weight: 3190 },\n      { make: 'Smart', model: 'Fortwo', year: 2012, weight: 1808 }\n    ]);\n\n    handsontable({\n      data: cars,\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = attr('make');\n        } else if (column === 1) {\n          colMeta = attr('model');\n        } else if (column === 2) {\n          colMeta = attr('year');\n        }\n\n        return colMeta;\n      }\n    });\n\n    // use the \"good\" Collection methods to emulate Array.splice\n    function hackedSplice(index, howMany, ...models) {\n      const args = _.toArray([index, howMany, ...models]).slice(2).concat({ at: index });\n      const removed = this.models.slice(index, index + howMany);\n\n      this.remove(removed).add.apply(this, args);\n\n      return removed;\n    }\n\n    // normally, you'd get these from the server with .fetch()\n    function attr(attribute) {\n      // this lets us remember `attr` for when when it is get/set\n      return {\n        data(car, value) {\n          if (_.isUndefined(value)) {\n            return car.get(attribute);\n          }\n\n          car.set(attribute, value);\n        }\n      };\n    }\n\n    expect(countRows()).toBe(3);\n  });\n\n  it('should clear cell properties after loadData', () => {\n    handsontable();\n    loadData(arrayOfArrays());\n\n    getCellMeta(0, 0).foo = 'bar';\n\n    expect(getCellMeta(0, 0).foo).toEqual('bar');\n\n    loadData(arrayOfArrays());\n\n    expect(getCellMeta(0, 0).foo).toBeUndefined();\n  });\n\n  it('should clear cell properties after loadData, but before rendering new data', () => {\n    handsontable();\n    loadData(arrayOfArrays());\n\n    getCellMeta(0, 0).valid = false;\n    render();\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n\n    loadData(arrayOfArrays());\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);\n\n  });\n\n  // https://github.com/handsontable/handsontable/issues/1700\n  // can't edit anything after starting editing cell with no nested object\n  it('should correct behave with cell with no nested object data source corresponding to column mapping', () => {\n\n    const objectData = [\n      { id: 1, user: { name: { first: 'Ted', last: 'Right' } } },\n      { id: 2, user: { name: {} } },\n      { id: 3 }\n    ];\n\n    handsontable({\n      data: objectData,\n      columns: [\n        { data: 'id' },\n        { data: 'user.name.first' },\n        { data: 'user.name.last' }\n      ]\n    });\n\n    mouseDoubleClick(getCell(1, 1));\n    document.activeElement.value = 'Harry';\n    deselectCell();\n    expect(objectData[1].user.name.first).toEqual('Harry');\n\n    mouseDoubleClick(getCell(2, 1));\n    document.activeElement.value = 'Barry';\n    deselectCell();\n    expect(objectData[2].user.name.first).toEqual('Barry');\n  });\n\n  it('should correct behave with cell with no nested object data source corresponding to column mapping when columns is a function', () => {\n\n    const objectData = [\n      { id: 1, user: { name: { first: 'Ted', last: 'Right' } } },\n      { id: 2, user: { name: {} } },\n      { id: 3 }\n    ];\n\n    handsontable({\n      data: objectData,\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { data: 'id' };\n\n        } else if (column === 1) {\n          colMeta = { data: 'user.name.first' };\n\n        } else if (column === 2) {\n          colMeta = { data: 'user.name.last' };\n        }\n\n        return colMeta;\n      }\n    });\n\n    mouseDoubleClick(getCell(1, 1));\n    document.activeElement.value = 'Harry';\n    deselectCell();\n    expect(objectData[1].user.name.first).toEqual('Harry');\n\n    mouseDoubleClick(getCell(2, 1));\n    document.activeElement.value = 'Barry';\n    deselectCell();\n    expect(objectData[2].user.name.first).toEqual('Barry');\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_loadData.spec.js","describe('Core_navigation', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should move to the next cell', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(0, 0);\n    keyDown('arrow_right');\n\n    expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n  });\n\n  it('should move to the previous cell', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(1, 2);\n    keyDown('arrow_left');\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n  });\n\n  it('should move to the cell above', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(1, 2);\n    keyDown('arrow_up');\n\n    expect(getSelected()).toEqual([[0, 2, 0, 2]]);\n  });\n\n  it('should move to the cell below', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(1, 2);\n    keyDown('arrow_down');\n\n    expect(getSelected()).toEqual([[2, 2, 2, 2]]);\n  });\n\n  describe('autoWrap disabled', () => {\n    it('should NOT move to the next cell, if already at the last cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: false\n      });\n\n      selectCell(0, 4);\n      keyDown('arrow_right');\n\n      expect(getSelected()).toEqual([[0, 4, 0, 4]]);\n    });\n\n    it('should NOT move to the previous cell, if already at the first cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: false\n      });\n\n      selectCell(1, 0);\n      keyDown('arrow_left');\n\n      expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n    });\n\n    it('should NOT move to the cell below, if already at the last cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: false\n      });\n\n      selectCell(4, 0);\n      keyDown('arrow_down');\n\n      expect(getSelected()).toEqual([[4, 0, 4, 0]]);\n    });\n\n    it('should NOT move to the cell above, if already at the first cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: false\n      });\n\n      selectCell(0, 1);\n      keyDown('arrow_up');\n\n      expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n    });\n\n  });\n\n  describe('autoWrap enabled', () => {\n    it('should move to the first cell of the next row, if already at the last cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(0, 4);\n      keyDown('arrow_right');\n\n      expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n    });\n\n    it('should move to the first cell of the previous row, if already at the first cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(1, 0);\n      keyDown('arrow_left');\n\n      expect(getSelected()).toEqual([[0, 4, 0, 4]]);\n    });\n\n    it('should move to the first cell of the next column, if already at the last cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(4, 1);\n      keyDown('arrow_down');\n\n      expect(getSelected()).toEqual([[0, 2, 0, 2]]);\n    });\n\n    it('should move to the last cell of the previous column, if already at the first cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(0, 1);\n      keyDown('arrow_up');\n\n      expect(getSelected()).toEqual([[4, 0, 4, 0]]);\n    });\n\n    it('should move to the first cell of the first row, after trying to get to the next cell in row, being already at the last cell in table', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(4, 4);\n      keyDown('arrow_right');\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n\n    it('should move to the first cell of the first row, after trying to get to the next cell in column, being already at the last cell in table', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(4, 4);\n      keyDown('arrow_down');\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n\n    it('should move to the last cell of the last row, after trying to get to the previous cell in row, being already at the first cell in table', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(0, 0);\n      keyDown('arrow_left');\n\n      expect(getSelected()).toEqual([[4, 4, 4, 4]]);\n    });\n\n    it('should move to the last cell of the last row, after trying to get to the previous cell in column, being already at the first cell in table', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(0, 0);\n      keyDown('arrow_up');\n\n      expect(getSelected()).toEqual([[4, 4, 4, 4]]);\n    });\n\n    it('should traverse whole table by constantly selecting next cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(0, 0);\n\n      for (let row = 0, rlen = countRows(); row < rlen; row++) {\n        for (let col = 0, clen = countCols(); col < clen; col++) {\n          expect(getSelected()).toEqual([[row, col, row, col]]);\n          keyDown('arrow_right');\n        }\n      }\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n\n    it('should traverse whole table by constantly selecting previous cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(4, 4);\n\n      for (let row = countRows() - 1; row >= 0; row--) {\n        for (let col = countCols() - 1; col >= 0; col--) {\n          expect(getSelected()).toEqual([[row, col, row, col]]);\n          keyDown('arrow_left');\n        }\n      }\n\n      expect(getSelected()).toEqual([[4, 4, 4, 4]]);\n    });\n\n    it('should traverse whole table by constantly selecting next cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(0, 0);\n\n      for (let col = 0, clen = countCols(); col < clen; col++) {\n        for (let row = 0, rlen = countRows(); row < rlen; row++) {\n          expect(getSelected()).toEqual([[row, col, row, col]]);\n          keyDown('arrow_down');\n        }\n      }\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n\n    it('should traverse whole table by constantly selecting previous cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(4, 4);\n\n      for (let col = countCols() - 1; col >= 0; col--) {\n        for (let row = countRows() - 1; row >= 0; row--) {\n          expect(getSelected()).toEqual([[row, col, row, col]]);\n          keyDown('arrow_up');\n        }\n      }\n\n      expect(getSelected()).toEqual([[4, 4, 4, 4]]);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_navigation.spec.js","describe('Core_onKeyDown', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should advance to next cell when TAB is pressed', () => {\n    // https://github.com/handsontable/handsontable/issues/151\n    handsontable();\n    selectCell(0, 0);\n    keyDownUp('tab');\n    expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n  });\n\n  it('should advance to previous cell when shift+TAB is pressed', () => {\n    handsontable();\n    selectCell(1, 1);\n    keyDownUp('shift+tab');\n    expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n  });\n\n  describe('while editing (quick edit mode)', () => {\n    it('should finish editing and advance to next cell when TAB is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x'); // value to cell trigger quick edit mode\n      keyProxy().val('Ted');\n      keyDownUp('tab');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[1, 2, 1, 2]]);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x'); // value to cell trigger quick edit mode\n      keyProxy().val('Ted');\n      keyDownUp('enter');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[2, 1, 2, 1]]);\n    });\n\n    it('should finish editing and advance to higher cell when shift+enter is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x'); // trigger quick edit mode\n      keyProxy().val('Ted');\n      keyDownUp('shift+enter');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n    });\n\n    it('should finish editing and advance to lower cell when down arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_down');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[2, 1, 2, 1]]);\n    });\n\n    it('should finish editing and advance to higher cell when up arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_up');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n    });\n\n    it('should finish editing and advance to right cell when right arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[2, 0, 2, 0]]);\n    });\n\n    it('should finish editing and advance to left cell when left arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n      Handsontable.dom.setCaretPosition(keyProxy()[0], 0, 0);\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed (with sync validator)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        validator(val, cb) {\n          cb(true);\n        },\n        afterValidate: onAfterValidate\n      });\n\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n        expect(getData()[1][1]).toEqual('Ted');\n        expect(getSelected()).toEqual([[2, 1, 2, 1]]);\n        done();\n      }, 200);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed (with async validator)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        validator(val, cb) {\n          setTimeout(() => {\n            cb(true);\n          }, 10);\n        },\n        afterValidate: onAfterValidate\n      });\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n        expect(getData()[1][1]).toEqual('Ted');\n        expect(getSelected()).toEqual([[2, 1, 2, 1]]);\n        done();\n      }, 200);\n    });\n  });\n\n  describe('while editing (full edit mode)', () => {\n    it('should finish editing and advance to next cell when TAB is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('tab');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[1, 2, 1, 2]]);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('enter');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[2, 1, 2, 1]]);\n    });\n\n    it('should finish editing and advance to higher cell when shift+enter is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('shift+enter');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n    });\n\n    it('shouldn\\'t finish editing and advance to lower cell when down arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_down');\n      expect(getData()[1][1]).toEqual(null);\n      expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n    });\n\n    it('shouldn\\'t finish editing and advance to higher cell when up arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_up');\n      expect(getData()[1][1]).toEqual(null);\n      expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n    });\n\n    it('shouldn\\'t finish editing and advance to right cell when right arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      expect(getData()[1][1]).toEqual(null);\n      expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n    });\n\n    it('shouldn\\'t finish editing and advance to left cell when left arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      expect(getData()[1][1]).toEqual(null);\n      expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed (with sync validator)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        validator(val, cb) {\n          cb(true);\n        },\n        afterValidate: onAfterValidate\n      });\n\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n        expect(getData()[1][1]).toEqual('Ted');\n        expect(getSelected()).toEqual([[2, 1, 2, 1]]);\n        done();\n      }, 200);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed (with async validator)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        validator(val, cb) {\n          setTimeout(() => {\n            cb(true);\n          }, 10);\n        },\n        afterValidate: onAfterValidate\n      });\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n        expect(getData()[1][1]).toEqual('Ted');\n        expect(getSelected()).toEqual([[2, 1, 2, 1]]);\n        done();\n      }, 200);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_onKeyDown.spec.js","describe('Core_populateFromArray', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda', 'Mix'],\n      ['2008', 10, 11, 12, 13, { a: 1, b: 2 }],\n      ['2009', 20, 11, 14, 13, { a: 1, b: 2 }],\n      ['2010', 30, 15, 12, 13, { a: 1, b: 2 }]\n    ];\n  };\n\n  it('should call onChange callback', () => {\n    let output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(0, 0, [['test', 'test'], ['test', 'test']], 1, 1);\n\n    expect(output).toEqual([[0, 0, '', 'test'], [0, 1, 'Kia', 'test'], [1, 0, '2008', 'test'], [1, 1, 10, 'test']]);\n  });\n\n  it('should populate single value for whole selection', () => {\n    let output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(0, 0, [['test']], 3, 0);\n\n    expect(output).toEqual([[0, 0, '', 'test'], [1, 0, '2008', 'test'], [2, 0, '2009', 'test'], [3, 0, '2010', 'test']]);\n  });\n\n  it('should populate value for whole selection only if populated data isn\\'t an array', () => {\n    let output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(0, 0, [['test'], [[1, 2, 3]]], 3, 0);\n\n    expect(output).toEqual([[0, 0, '', 'test'], [2, 0, '2009', 'test']]);\n  });\n\n  it('should populate value for whole selection only if populated data isn\\'t an object', () => {\n    let output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(0, 0, [['test'], [{ test: 1 }]], 3, 0);\n\n    expect(output).toEqual([[0, 0, '', 'test'], [2, 0, '2009', 'test']]);\n  });\n\n  it('shouldn\\'t populate value if original value doesn\\'t have the same data structure', () => {\n    let output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(1, 3, [['test']], 1, 5);\n\n    expect(output).toEqual([[1, 3, 12, 'test'], [1, 4, 13, 'test']]);\n  });\n\n  it('should shift values down', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      minSpareRows: 1\n    });\n    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 2, 2, null, 'shift_down');\n\n    expect(getData()).toEqual([\n      ['test', 'test2', 'test', 'Toyota', 'Honda', 'Mix'],\n      ['test3', 'test4', 'test3', 12, 13, { a: 1, b: 2 }],\n      ['test', 'test2', 'test', 14, 13, { a: 1, b: 2 }],\n      ['', 'Kia', 'Nissan', 12, 13, { a: 1, b: 2 }],\n      ['2008', 10, 11, null, null, null],\n      ['2009', 20, 11, null, null, null],\n      ['2010', 30, 15, null, null, null],\n      [null, null, null, null, null, null]\n    ]);\n  });\n\n  it('should shift values right', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      minSpareCols: 1\n    });\n    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 2, 2, null, 'shift_right');\n\n    expect(getData()).toEqual([\n      ['test', 'test2', 'test', '', 'Kia', 'Nissan', 'Toyota', 'Honda', 'Mix', null],\n      ['test3', 'test4', 'test3', '2008', 10, { a: 1, b: 2 }, 12, 13, null, null],\n      ['test', 'test2', 'test', '2009', 20, { a: 1, b: 2 }, 14, 13, null, null],\n      ['2010', 30, 15, 12, 13, { a: 1, b: 2 }, null, null, null, null]\n    ]);\n  });\n\n  it('should run beforeAutofillInsidePopulate hook for each inserted value', () => {\n    const hot = handsontable({\n      data: arrayOfArrays()\n    });\n    let called = 0;\n\n    hot.addHook('beforeAutofillInsidePopulate', () => {\n      called += 1;\n    });\n\n    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 1, 1, 'Autofill.fill', 'overwrite');\n\n    expect(called).toEqual(4);\n  });\n\n  it('should run beforeAutofillInsidePopulate hook and could change cell data before insert if returned object with value property', () => {\n\n    const hot = handsontable({\n      data: arrayOfArrays()\n    });\n\n    hot.addHook('beforeAutofillInsidePopulate', () => ({\n      value: 'my_test'\n    }));\n\n    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 1, 1, 'Autofill.fill', 'overwrite');\n\n    expect(getDataAtCell(0, 0)).toEqual('my_test');\n  });\n\n  it('should populate 1 row from 2 selected rows', () => {\n    handsontable({\n      data: arrayOfArrays()\n    });\n\n    populateFromArray(2, 0, [['A1'], ['A2']], 2, 0, 'autofill', null, 'down', [[0]]);\n\n    expect(getDataAtCell(2, 0)).toEqual('A1');\n    expect(getDataAtCell(3, 0)).toEqual('2010');\n  });\n\n  it('should populate 1 column from 2 selected columns`', () => {\n    handsontable({\n      data: arrayOfArrays()\n    });\n\n    populateFromArray(0, 2, [['A1', 'A2']], 0, 2, 'autofill', null, 'right', [[0]]);\n\n    expect(getDataAtCell(0, 2)).toEqual('A1');\n    expect(getDataAtCell(0, 3)).toEqual('Toyota');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_populateFromArray.spec.js","describe('Core_reCreate', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should correctly re-render corner header when there is multiline content', () => {\n    const settings = {\n      rowHeaders: true,\n      colHeaders(col) {\n        return `Column<br>${col}`;\n      }\n    };\n    handsontable(settings);\n    destroy();\n    handsontable(settings);\n\n    expect(getTopLeftClone().width()).toBe(54);\n    expect(getTopLeftClone().height()).toBe(45);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_reCreate.spec.js","describe('Core_removeCellMeta', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should remove meta for cell', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [0, 9, 8, 7]\n      ]\n    });\n    const border = {\n      top: {\n\n      },\n      left: {\n\n      }\n    };\n\n    setCellMeta(0, 0, 'borders', border);\n    expect(getCellMeta(0, 0).borders).toEqual(border);\n\n    removeCellMeta(0, 0, 'borders');\n    expect(getCellMeta(0, 0).borders).toBeUndefined();\n  });\n\n  it('should remove proper cell meta when indexes was modified', () => {\n    handsontable({\n      modifyRow(row) {\n        return row + 10;\n      },\n      modifyCol(col) {\n        return col + 10;\n      }\n    });\n\n    setCellMeta(0, 0, 'key', 'value');\n    removeCellMeta(0, 0, 'key');\n\n    expect(getCellMeta(0, 0).key).toBeUndefined();\n  });\n\n  it('should trigger `beforeRemoveCellMeta` hook with proper parameters', () => {\n    const beforeRemoveCellMeta = jasmine.createSpy('beforeRemoveCellMeta');\n\n    handsontable({\n      data: [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [0, 9, 8, 7]\n      ],\n      beforeRemoveCellMeta\n    });\n\n    setCellMeta(0, 0, 'key', 'value');\n    removeCellMeta(0, 0, 'key');\n\n    expect(beforeRemoveCellMeta).toHaveBeenCalledWith(0, 0, 'key', 'value', undefined, undefined);\n  });\n\n  it('should trigger `afterRemoveCellMeta` hook with proper parameters - case 1 (removed `key` existed)', () => {\n    const afterRemoveCellMeta = jasmine.createSpy('afterRemoveCellMeta');\n\n    handsontable({\n      data: [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [0, 9, 8, 7]\n      ],\n      afterRemoveCellMeta\n    });\n\n    setCellMeta(0, 0, 'key', 'value');\n    removeCellMeta(0, 0, 'key');\n\n    expect(afterRemoveCellMeta).toHaveBeenCalledWith(0, 0, 'key', 'value', undefined, undefined);\n  });\n\n  it('should trigger `afterRemoveCellMeta` hook with proper parameters - case 2  (removed `key` not existed)', () => {\n    const afterRemoveCellMeta = jasmine.createSpy('afterRemoveCellMeta');\n\n    handsontable({\n      data: [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [0, 9, 8, 7]\n      ],\n      afterRemoveCellMeta\n    });\n\n    removeCellMeta(0, 0, 'key');\n\n    expect(afterRemoveCellMeta).toHaveBeenCalledWith(0, 0, 'key', undefined, undefined, undefined);\n  });\n\n  it('should call `beforeRemoveCellMeta` plugin hook with visual indexes as parameters', () => {\n    let rowInsideHook;\n    let colInsideHook;\n\n    handsontable({\n      beforeRemoveCellMeta(row, col) {\n        rowInsideHook = row;\n        colInsideHook = col;\n      },\n      modifyRow(row) {\n        return row + 10;\n      },\n      modifyCol(col) {\n        return col + 10;\n      }\n    });\n\n    removeCellMeta(0, 1, 'key');\n\n    expect(rowInsideHook).toEqual(0);\n    expect(colInsideHook).toEqual(1);\n  });\n\n  it('should call `afterRemoveCellMeta` plugin hook with visual indexes as parameters', () => {\n    let rowInsideHook;\n    let colInsideHook;\n\n    handsontable({\n      afterRemoveCellMeta(row, col) {\n        rowInsideHook = row;\n        colInsideHook = col;\n      },\n      modifyRow(row) {\n        return row + 10;\n      },\n      modifyCol(col) {\n        return col + 10;\n      }\n    });\n\n    removeCellMeta(0, 1, 'key');\n\n    expect(rowInsideHook).toEqual(0);\n    expect(colInsideHook).toEqual(1);\n  });\n\n  it('should block removing cell meta when hook `beforeRemoveCellMeta` return false', () => {\n    handsontable({\n      beforeRemoveCellMeta(row, col) {\n        if (row === 0 && col === 0) {\n          return false;\n        }\n\n        return true;\n      }\n    });\n\n    setCellMeta(0, 0, 'key', 'value');\n    setCellMeta(0, 1, 'key', 'value');\n\n    removeCellMeta(0, 0, 'key');\n    removeCellMeta(0, 1, 'key');\n\n    // `value` shouldn't be removed\n    expect(getCellMeta(0, 0).key).toEqual('value');\n    expect(getCellMeta(0, 1).key).toBeUndefined();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_removeCellMeta.spec.js","describe('Core_render', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('all cells should get green background', () => {\n    function greenCell(instance, td, ...args) {\n      Handsontable.renderers.TextRenderer.apply(this, [instance, td, ...args]);\n      td.style.backgroundColor = 'green';\n\n    }\n\n    handsontable({\n      data: [\n        ['a', 'b'],\n        ['c', 'd']\n      ],\n      minRows: 4,\n      minCols: 4,\n      minSpareRows: 4,\n      minSpareCols: 4,\n      cells() {\n        return {\n          renderer: greenCell\n        };\n      }\n    });\n\n    const $tds = spec().$container.find('.htCore tbody td');\n    $tds.each(function() {\n      expect(this.style.backgroundColor).toEqual('green');\n    });\n  });\n\n  it('render should update border dimensions', () => {\n    const data = [\n      ['a', 'b'],\n      ['c', 'd']\n    ];\n\n    handsontable({\n      data,\n      minRows: 4,\n      minCols: 4,\n      minSpareRows: 4,\n      minSpareCols: 4\n    });\n\n    selectCell(1, 1);\n    data[1][1] = 'dddddddddddddddddddd';\n    render();\n\n    const $td = spec().$container.find('.htCore tbody tr:eq(1) td:eq(1)');\n    expect(spec().$container.find('.wtBorder.current').width()).toBeGreaterThan($td.width());\n  });\n\n  it('should not render table twice', () => {\n    let counter = 0;\n\n    handsontable({\n      data: [\n        ['Joe Red']\n      ],\n      afterRender() {\n        counter += 1;\n      }\n    });\n    populateFromArray(0, 0, [['t', 'e', 's', 't']]);\n\n    expect(counter).toEqual(2); // 1 from load and 1 from populateFromArray\n  });\n\n  it('should run afterRenderer hook', () => {\n    let lastCellProperties;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      afterRenderer(td, row, col, prop, value, cellProperties) {\n        td.innerHTML = 'Changed by plugin';\n\n        if (!cellProperties) {\n          throw new Error();\n        }\n        lastCellProperties = cellProperties;\n      }\n    });\n\n    expect(spec().$container.find('td:eq(0)')[0].innerHTML).toEqual('Changed by plugin');\n    expect(lastCellProperties.row).toEqual(1);\n    expect(lastCellProperties.col).toEqual(4);\n  });\n\n  it('should run beforeValueRender hook', () => {\n    handsontable({\n      data: [['A1', 'B1']],\n      beforeValueRender(value, cellProperties) {\n        return cellProperties.col === 0 ? 'Test' : value;\n      }\n    });\n\n    expect(spec().$container.find('td:eq(0)')[0].innerHTML).toEqual('Test');\n    expect(spec().$container.find('td:eq(1)')[0].innerHTML).toEqual('B1');\n  });\n\n  it('should run beforeRenderer hook', () => {\n    let lastCellProperties;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeRenderer(td, row, col, prop, value, cellProperties) {\n        td.innerHTML = 'Changed by plugin';\n        lastCellProperties = cellProperties;\n      }\n    });\n\n    // Value is overwritten by text renderer\n    expect(spec().$container.find('td:eq(0)')[0].innerHTML).toEqual('1');\n    expect(lastCellProperties.row).toEqual(1);\n    expect(lastCellProperties.col).toEqual(4);\n  });\n\n  it('should reflect changes applied in beforeRenderer into afterRenderer', () => {\n    const afterRenderer = jasmine.createSpy();\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeRenderer(td, row, col, prop, value, cellProperties) {\n        cellProperties.foo = 'bar';\n      },\n      afterRenderer,\n    });\n\n    expect(afterRenderer.calls.count()).toBe(10);\n    expect(afterRenderer.calls.argsFor(0)[0] instanceof HTMLTableCellElement).toBe(true);\n    expect(afterRenderer.calls.argsFor(0)[1]).toBe(0);\n    expect(afterRenderer.calls.argsFor(0)[2]).toBe(0);\n    expect(afterRenderer.calls.argsFor(0)[3]).toBe(0);\n    expect(afterRenderer.calls.argsFor(0)[4]).toBe(1);\n    expect(afterRenderer.calls.argsFor(0)[5].foo).toBe('bar');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_render.spec.js","describe('Core_selection', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should correctly render the selection using event simulation', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(9, 8),\n      selectionMode: 'multiple',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    $(getCell(5, 4)).simulate('mousedown');\n    $(getCell(1, 1)).simulate('mouseover');\n    $(getCell(1, 1)).simulate('mouseup');\n\n    keyDown('ctrl');\n\n    $(getCell(0, 2)).simulate('mousedown');\n    $(getCell(8, 2)).simulate('mouseover');\n    $(getCell(7, 2)).simulate('mouseup');\n\n    $(getCell(2, 4)).simulate('mousedown');\n    $(getCell(2, 4)).simulate('mouseover');\n    $(getCell(2, 4)).simulate('mouseup');\n\n    $(getCell(7, 6)).simulate('mousedown');\n    $(getCell(8, 7)).simulate('mouseover');\n    $(getCell(8, 7)).simulate('mouseup');\n\n    expect(`\n      |   ║   : - : - : - : - :   : - : - |\n      |===:===:===:===:===:===:===:===:===|\n      | - ║   :   : 0 :   :   :   :   :   |\n      | - ║   : 0 : 1 : 0 : 0 :   :   :   |\n      | - ║   : 0 : 1 : 0 : 1 :   :   :   |\n      | - ║   : 0 : 1 : 0 : 0 :   :   :   |\n      | - ║   : 0 : 1 : 0 : 0 :   :   :   |\n      | - ║   : 0 : 1 : 0 : 0 :   :   :   |\n      | - ║   :   : 0 :   :   :   :   :   |\n      | - ║   :   : 0 :   :   :   : A : 0 |\n      | - ║   :   : 0 :   :   :   : 0 : 0 |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should focus external textarea when clicked during editing', () => {\n    const textarea = $('<input type=\"text\">').prependTo($('body'));\n\n    handsontable();\n    selectCell(0, 0);\n\n    keyDown('enter');\n    // $(\"html\").triggerHandler('mouseup');\n    $('html').simulate('mouseup');\n    textarea.focus();\n\n    expect(document.activeElement).toBe(textarea[0]);\n    textarea.remove();\n  });\n\n  it('should deselect currently selected cell', () => {\n    handsontable();\n    selectCell(0, 0);\n\n    $('html').simulate('mousedown');\n\n    expect(getSelected()).toBeUndefined();\n  });\n\n  it('should fix start range if provided is out of bounds (to the left)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      autoWrapCol: false,\n      autoWrapRow: false\n    });\n    selectCell(0, 0);\n    keyDownUp('arrow_left');\n\n    expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n  });\n\n  it('should fix start range if provided is out of bounds (to the top)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      autoWrapCol: false,\n      autoWrapRow: false\n    });\n    selectCell(0, 0);\n    keyDownUp('arrow_up');\n\n    expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n  });\n\n  it('should fix start range if provided is out of bounds (to the right)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      autoWrapCol: false,\n      autoWrapRow: false\n    });\n    selectCell(0, 4);\n    keyDownUp('arrow_right');\n\n    expect(getSelected()).toEqual([[0, 4, 0, 4]]);\n  });\n\n  it('should fix start range if provided is out of bounds (to the bottom)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      autoWrapCol: false,\n      autoWrapRow: false\n    });\n    selectCell(4, 0);\n    keyDownUp('arrow_down');\n\n    expect(getSelected()).toEqual([[4, 0, 4, 0]]);\n  });\n\n  it('should fix end range if provided is out of bounds (to the left)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 1);\n    keyDownUp('shift+arrow_left');\n    keyDownUp('shift+arrow_left');\n\n    expect(getSelected()).toEqual([[0, 1, 0, 0]]);\n  });\n\n  it('should fix end range if provided is out of bounds (to the top)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(1, 0);\n    keyDownUp('shift+arrow_up');\n    keyDownUp('shift+arrow_up');\n\n    expect(getSelected()).toEqual([[1, 0, 0, 0]]);\n  });\n\n  it('should fix end range if provided is out of bounds (to the right)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 3);\n    keyDownUp('shift+arrow_right');\n    keyDownUp('shift+arrow_right');\n\n    expect(getSelected()).toEqual([[0, 3, 0, 4]]);\n  });\n\n  it('should fix end range if provided is out of bounds (to the bottom)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(3, 0);\n    keyDownUp('shift+arrow_down');\n    keyDownUp('shift+arrow_down');\n    keyDownUp('shift+arrow_down');\n\n    expect(getSelected()).toEqual([[3, 0, 4, 0]]);\n  });\n\n  it('should select multiple cells', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(3, 0, 4, 1);\n\n    expect(getSelected()).toEqual([[3, 0, 4, 1]]);\n  });\n\n  it('should call onSelectionEnd as many times as onSelection when `selectCell` is called', () => {\n    let tick = 0;\n    let tickEnd = 0;\n\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      afterSelection() {\n        tick += 1;\n      },\n      afterSelectionEnd() {\n        tickEnd += 1;\n      }\n    });\n    selectCell(3, 0);\n    selectCell(1, 1);\n\n    expect(tick).toEqual(2);\n    expect(tickEnd).toEqual(2);\n  });\n\n  it('should call onSelectionEnd when user finishes selection by releasing SHIFT key (3 times)', () => {\n    let tick = 0;\n\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      afterSelectionEnd() {\n        tick += 1;\n      }\n    });\n    selectCell(3, 0); // makes tick++\n    keyDownUp('shift+arrow_down'); // makes tick++\n    keyDownUp('shift+arrow_down'); // makes tick++\n    keyDownUp('shift+arrow_down'); // makes tick++\n\n    expect(getSelected()).toEqual([[3, 0, 4, 0]]);\n    expect(tick).toEqual(4);\n  });\n\n  it('should call onSelectionEnd when user finishes selection by releasing SHIFT key (1 time)', () => {\n    let tick = 0;\n\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      afterSelectionEnd() {\n        tick += 1;\n      }\n    });\n    selectCell(3, 0); // makes tick++\n    keyDown('shift+arrow_down');\n    keyDown('shift+arrow_down');\n    keyDownUp('shift+arrow_down'); // makes tick++\n\n    expect(getSelected()).toEqual([[3, 0, 4, 0]]);\n    expect(tick).toEqual(2);\n  });\n\n  it('should select columns by click on header with SHIFT key', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mousedown');\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mouseup');\n\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', { shiftKey: true });\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[0, 1, 4, 4]]);\n  });\n\n  it('should select rows by click on header with SHIFT key', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      rowHeaders: true\n    });\n\n    spec().$container.find('.ht_clone_left tr:eq(1) th:eq(0)').simulate('mousedown');\n    spec().$container.find('.ht_clone_left tr:eq(1) th:eq(0)').simulate('mouseup');\n\n    spec().$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mousedown', { shiftKey: true });\n    spec().$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[1, 0, 4, 4]]);\n  });\n\n  it('should select columns by click on header with SHIFT key', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mousedown');\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mouseup');\n\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', { shiftKey: true });\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[0, 1, 4, 4]]);\n\n  });\n\n  it('should change selection after click on row header with SHIFT key', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      rowHeaders: true\n    });\n\n    selectCell(1, 1, 3, 3);\n\n    spec().$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mousedown', { shiftKey: true });\n    spec().$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[1, 0, 4, 4]]);\n\n  });\n\n  it('should change selection after click on column header with SHIFT key', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    selectCell(1, 1, 3, 3);\n\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', { shiftKey: true });\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[0, 1, 4, 4]]);\n  });\n\n  it('should call onSelection while user selects cells with mouse; onSelectionEnd when user finishes selection', () => {\n    let tick = 0;\n    let tickEnd = 0;\n\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      afterSelection() {\n        tick += 1;\n      },\n      afterSelectionEnd() {\n        tickEnd += 1;\n      }\n    });\n\n    spec().$container.find('tr:eq(0) td:eq(0)').simulate('mousedown');\n    spec().$container.find('tr:eq(0) td:eq(1)').simulate('mouseover');\n    spec().$container.find('tr:eq(1) td:eq(3)').simulate('mouseover');\n\n    spec().$container.find('tr:eq(1) td:eq(3)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[0, 0, 1, 3]]);\n    expect(tick).toEqual(3);\n    expect(tickEnd).toEqual(1);\n  });\n\n  it('should properly select columns, when the user moves the cursor over column headers across two overlays', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      fixedColumnsLeft: 2\n    });\n\n    spec().$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mousedown');\n    spec().$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseover');\n    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(2)').simulate('mouseover');\n    spec().$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseover');\n    spec().$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[0, 1, 4, 1]]);\n  });\n\n  it('should move focus to selected cell', () => {\n    const $input = $('<input>').appendTo(document.body);\n\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    $input[0].focus();\n    selectCell(0, 0);\n\n    keyDownUp('enter');\n    expect(isEditorVisible()).toEqual(true);\n    $input.remove();\n  });\n\n  // This test should cover the #893 case, but it always passes. It seems like the keydown event (with CTRL key pressed) isn't delivered.\n  it('should not move focus from outside elements on CTRL keydown event, when no cell is selected', () => {\n    const $input = $('<input type=\"text\"/>');\n\n    $('body').append($input);\n    handsontable();\n    selectCell(0, 0);\n\n    expect(document.activeElement.nodeName).toBeInArray(['TEXTAREA', 'BODY', 'HTML']);\n\n    $input.focus();\n    expect(document.activeElement.nodeName).toBe('INPUT');\n\n    $input.simulate('keydown', { ctrlKey: true, metaKey: true });\n    expect(document.activeElement.nodeName).toBe('INPUT');\n\n    $input.remove();\n  });\n\n  it('should select the entire column after column header is clicked', () => {\n    handsontable({\n      width: 200,\n      height: 100,\n      startRows: 10,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    spec().$container.find('thead th:eq(0)').simulate('mousedown');\n\n    expect(getSelected()).toEqual([[0, 0, 9, 0]]);\n    expect(`\n      | * :   :   :   :   |\n      |===:===:===:===:===|\n      | A :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should select the entire column and row after column header and row header is clicked', () => {\n    handsontable({\n      width: 200,\n      height: 100,\n      startRows: 10,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    spec().$container.find('thead th:eq(3)').simulate('mousedown');\n    keyDown('ctrl');\n    spec().$container.find('tr:eq(2) th:eq(0)').simulate('mousedown');\n\n    expect(`\n      |   ║ - : - : * : - : - |\n      |===:===:===:===:===:===|\n      | - ║   :   : 0 :   :   |\n      | * ║ A : 0 : 1 : 0 : 0 |\n      | - ║   :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should select the entire column and row after column header and row header is clicked when cell editor is open', () => {\n    handsontable({\n      width: 200,\n      height: 100,\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n\n    expect(getActiveEditor()).not.toBeUndefined();\n\n    keyDown('ctrl');\n    spec().$container.find('thead th:eq(3)').simulate('mousedown');\n    spec().$container.find('tr:eq(3) th:eq(0)').simulate('mousedown');\n\n    expect(`\n      |   ║ - : - : * : - : - |\n      |===:===:===:===:===:===|\n      | - ║ 0 :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      | * ║ A : 0 : 1 : 0 : 0 |\n      | - ║   :   : 0 :   :   |\n      | - ║   :   : 0 :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not overwrite background color of the cells with custom CSS classes', () => {\n    handsontable({\n      width: 300,\n      height: 150,\n      startRows: 5,\n      startCols: 5,\n      cells: (row, col) => (row === 1 && col === 1 ? { className: 'red-background' } : void 0)\n    });\n\n    $(getCell(0, 0)).simulate('mousedown');\n    $(getCell(4, 4)).simulate('mouseover');\n    $(getCell(4, 4)).simulate('mouseup');\n\n    expect(window.getComputedStyle(getCell(1, 1))['background-color']).toBe('rgb(255, 0, 0)');\n  });\n\n  it('should select the entire column after column header is clicked (in fixed rows/cols corner)', () => {\n    handsontable({\n      width: 200,\n      height: 100,\n      startRows: 10,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedRowsTop: 2,\n      fixedColumnsLeft: 2\n    });\n\n    spec().$container.find('.ht_master thead th:eq(1)').simulate('mousedown');\n\n    expect(getSelected()).toEqual([[0, 0, 9, 0]]);\n    expect(`\n      |   ║ * :   |   :   :   |\n      |===:===:===:===:===:===|\n      | - ║ A :   |   :   :   |\n      | - ║ 0 :   |   :   :   |\n      |---:---:---:---:---:---|\n      | - ║ 0 :   |   :   :   |\n      | - ║ 0 :   |   :   :   |\n      | - ║ 0 :   |   :   :   |\n      | - ║ 0 :   |   :   :   |\n      | - ║ 0 :   |   :   :   |\n      | - ║ 0 :   |   :   :   |\n      | - ║ 0 :   |   :   :   |\n      | - ║ 0 :   |   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should select the entire fixed column after column header is clicked, after scroll horizontally', () => {\n    const hot = handsontable({\n      width: 200,\n      height: 100,\n      startRows: 10,\n      startCols: 10,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedColumnsLeft: 2\n    });\n\n    hot.render();\n    hot.scrollViewportTo(void 0, hot.countCols() - 1);\n\n    spec().$container.find('.ht_master thead th:eq(2)').simulate('mousedown');\n    spec().$container.find('.ht_master thead th:eq(2)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[0, 1, 9, 1]]);\n    expect(`\n      |   ║   : * |   :   :   :   :   :   :   :   |\n      |===:===:===:===:===:===:===:===:===:===:===|\n      | - ║   : A |   :   :   :   :   :   :   :   |\n      | - ║   : 0 |   :   :   :   :   :   :   :   |\n      | - ║   : 0 |   :   :   :   :   :   :   :   |\n      | - ║   : 0 |   :   :   :   :   :   :   :   |\n      | - ║   : 0 |   :   :   :   :   :   :   :   |\n      | - ║   : 0 |   :   :   :   :   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should scroll viewport after partially visible column\\'s header is clicked, without vertical scroll manipulation', () => {\n    const hot = handsontable({\n      width: 200,\n      height: 100,\n      startRows: 40,\n      startCols: 40,\n      colWidths: 73,\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n\n    mainHolder.scrollTop = 200;\n\n    const firstLastVisibleColumn = hot.view.wt.wtTable.getLastVisibleColumn();\n    const headerElement = hot.view.wt.wtTable.getColumnHeader(firstLastVisibleColumn + 1);\n\n    $(headerElement).simulate('mousedown');\n\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toBe(firstLastVisibleColumn + 1);\n    expect(mainHolder.scrollTop).toBe(200);\n  });\n\n  it('should set the selection end to the first visible row, when dragging the selection from a cell to a column header', async() => {\n    const hot = handsontable({\n      width: 200,\n      height: 200,\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    hot.scrollViewportTo(10, 10);\n    hot.render();\n\n    await sleep(30);\n\n    $(getCell(12, 11)).simulate('mousedown');\n    spec().$container.find('.ht_clone_top thead th:eq(2)').simulate('mouseover');\n\n    await sleep(30);\n\n    expect(getSelected()).toEqual([[12, 11, 10, 11]]);\n  });\n\n  it('should render selection borders with set proper z-indexes', () => {\n    const hot = handsontable({\n      width: 200,\n      height: 200,\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    hot.selectCell(1, 1, 2, 2);\n\n    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .current')).zIndex).toBe('10');\n    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .area')).zIndex).toBe('8');\n  });\n\n  it('should set the selection end to the first visible column, when dragging the selection from a cell to a row header', async() => {\n    const hot = handsontable({\n      width: 200,\n      height: 200,\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    hot.scrollViewportTo(10, 10);\n    hot.render();\n\n    await sleep(30);\n\n    $(getCell(12, 11)).simulate('mousedown');\n    spec().$container.find('.ht_clone_left tbody th:eq(12)').simulate('mouseover');\n\n    await sleep(30);\n\n    expect(getSelected()).toEqual([[12, 11, 12, 10]]);\n  });\n\n  it('should allow to scroll the table when a whole column is selected and table is longer than it\\'s container', async() => {\n    let errCount = 0;\n\n    $(window).on('error.selectionTest', () => {\n      errCount += 1;\n    });\n\n    const onAfterScrollVertically = jasmine.createSpy('onAfterScrollVertically');\n\n    const hot = handsontable({\n      height: 100,\n      width: 300,\n      startRows: 100,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true,\n      afterScrollVertically: onAfterScrollVertically\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n\n    mainHolder.scrollTop = 0;\n\n    spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mousedown');\n    spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseup');\n\n    mainHolder.scrollTop = 120;\n\n    await sleep(100);\n\n    expect(errCount).toEqual(0); // expect no errors to be thrown\n\n    $(window).off('error.selectionTest');\n  });\n\n  it('should scroll to the end of the selection, when selecting cells using the keyboard', () => {\n    const hot = handsontable({\n      height: 300,\n      width: 300,\n      startRows: 50,\n      startCols: 50,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedRowsTop: 2,\n      fixedColumnsLeft: 2\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n\n    mainHolder.scrollTop = 100;\n    selectCell(1, 3);\n    keyDownUp('arrow_down');\n    expect(mainHolder.scrollTop).toEqual(0);\n\n    mainHolder.scrollTop = 100;\n    selectCell(1, 3);\n    keyDownUp('shift+arrow_down');\n    expect(mainHolder.scrollTop).toEqual(0);\n\n    mainHolder.scrollLeft = 100;\n    selectCell(3, 1);\n    keyDownUp('arrow_right');\n    expect(mainHolder.scrollLeft).toEqual(0);\n\n    mainHolder.scrollLeft = 100;\n    selectCell(3, 1);\n    keyDownUp('shift+arrow_right');\n    expect(mainHolder.scrollLeft).toEqual(0);\n\n    const lastVisibleColumn = hot.view.wt.wtTable.getLastVisibleColumn();\n    selectCell(3, lastVisibleColumn);\n    keyDownUp('arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 1);\n\n    keyDownUp('arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 2);\n\n    keyDownUp('shift+arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 3);\n\n    const lastVisibleRow = hot.view.wt.wtTable.getLastVisibleRow();\n    selectCell(lastVisibleRow, 3);\n    keyDownUp('arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 1);\n\n    keyDownUp('arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 2);\n\n    keyDownUp('shift+arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 3);\n  });\n\n  it('should scroll to the last selected row or column of the selection, when user uses the keyboard', () => {\n    const hot = handsontable({\n      height: 300,\n      width: 300,\n      startRows: 50,\n      startCols: 50,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedRowsTop: 2,\n      fixedColumnsLeft: 2\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n    const lastVisibleColumn = hot.view.wt.wtTable.getLastVisibleColumn();\n    const lastVisibleRow = hot.view.wt.wtTable.getLastVisibleRow();\n    const rowHeader = hot.view.wt.wtTable.getRowHeader(lastVisibleRow);\n    const columnHeader = hot.view.wt.wtTable.getColumnHeader(lastVisibleColumn);\n\n    $(columnHeader).simulate('mousedown');\n    $(columnHeader).simulate('mouseup');\n    keyDownUp('shift+arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 1);\n\n    keyDownUp('shift+arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 2);\n\n    keyDownUp('shift+arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 3);\n\n    const scrollLeft = mainHolder.scrollLeft;\n    expect(scrollLeft).toBeGreaterThan(0);\n    expect(mainHolder.scrollTop).toBe(0);\n\n    $(rowHeader).simulate('mousedown');\n    $(rowHeader).simulate('mouseup');\n    keyDownUp('shift+arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 1);\n\n    keyDownUp('shift+arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 2);\n\n    keyDownUp('shift+arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 3);\n    expect(mainHolder.scrollLeft).toBe(scrollLeft);\n    expect(mainHolder.scrollTop).toBeGreaterThan(0);\n  });\n\n  it('should select the entire row after row header is clicked', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    spec().$container.find('tr:eq(2) th:eq(0)').simulate('mousedown');\n\n    expect(getSelected()).toEqual([[1, 0, 1, 4]]);\n    expect(`\n      |   ║ - : - : - : - : - |\n      |===:===:===:===:===:===|\n      |   ║   :   :   :   :   |\n      | * ║ A : 0 : 0 : 0 : 0 |\n      |   ║   :   :   :   :   |\n      |   ║   :   :   :   :   |\n      |   ║   :   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should scroll viewport after partially visible row\\'s header is clicked, without horizontal scroll manipulation', () => {\n    const hot = handsontable({\n      width: 200,\n      height: 100,\n      startRows: 40,\n      startCols: 40,\n      rowHeights: 27,\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n\n    mainHolder.scrollLeft = 200;\n\n    const firstLastVisibleRow = hot.view.wt.wtTable.getLastVisibleRow();\n    const headerElement = hot.view.wt.wtTable.getRowHeader(firstLastVisibleRow + 1);\n\n    $(headerElement).simulate('mousedown');\n\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toBe(firstLastVisibleRow + 1);\n    expect(mainHolder.scrollLeft).toBe(200);\n  });\n\n  it('should select the entire row of a partially fixed table after row header is clicked', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedRowsTop: 2,\n      fixedColumnsLeft: 2\n    });\n\n    spec().$container.find('tr:eq(2) th:eq(0)').simulate('mousedown');\n    expect(getSelected()).toEqual([[1, 0, 1, 4]]);\n\n    spec().$container.find('tr:eq(3) th:eq(0)').simulate('mousedown');\n    expect(getSelected()).toEqual([[2, 0, 2, 4]]);\n  });\n\n  it('should select a cell in a newly added row after automatic row adding, triggered by editing a cell in the last row with minSpareRows > 0, ' +\n    'unless editing happened within the fixed bottom rows', async() => {\n    handsontable({\n      startRows: 5,\n      startCols: 2,\n      minSpareRows: 1\n    });\n\n    await sleep(10);\n    selectCell(4, 0);\n    keyDownUp('enter');\n\n    await sleep(90);\n    keyDownUp('enter');\n\n    await sleep(100);\n    expect(countRows()).toEqual(6);\n    expect(getSelected()).toEqual([[5, 0, 5, 0]]);\n  });\n\n  it('should select a cell which one was added automatically by minSpareCols', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 5),\n      minSpareCols: 1,\n    });\n\n    selectCell(0, 5);\n    keyDownUp('tab');\n\n    expect(countCols()).toEqual(7);\n    expect(getSelected()).toEqual([[0, 6, 0, 6]]);\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n    expect(getDataAtCell(0, 1)).toEqual('B1');\n    expect(getDataAtCell(0, 2)).toEqual('C1');\n    expect(getDataAtCell(0, 3)).toEqual('D1');\n    expect(getDataAtCell(0, 4)).toEqual('E1');\n    expect(getDataAtCell(0, 5)).toBeNull();\n    expect(getDataAtCell(0, 6)).toBeNull();\n  });\n\n  it('should change selected coords by modifying coords object via `modifyTransformStart` hook', () => {\n    const hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(0, 0);\n\n    hot.addHook('modifyTransformStart', (coords) => {\n      coords.col += 1;\n      coords.row += 1;\n    });\n    keyDown('arrow_down');\n\n    expect(getSelected()).toEqual([[2, 1, 2, 1]]);\n  });\n\n  it('should change selected coords by modifying coords object via `modifyTransformEnd` hook', () => {\n    const hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(0, 0);\n\n    hot.addHook('modifyTransformEnd', (coords) => {\n      coords.col += 2;\n      coords.row += 1;\n    });\n    keyDown('shift+arrow_down');\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n  });\n\n  it('should indicate is coords is out of bounds via `afterModifyTransformStart` hook', () => {\n    const spy = jasmine.createSpy();\n    const hot = handsontable({\n      startRows: 5,\n      startCols: 5,\n      autoWrapCol: false,\n      autoWrapRow: false\n    });\n\n    hot.addHook('afterModifyTransformStart', spy);\n    selectCell(2, 0);\n    keyDownUp('arrow_left');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(0);\n    expect(spy.calls.mostRecent().args[2]).toBe(-1);\n\n    spy.calls.reset();\n    selectCell(2, 4);\n    keyDownUp('arrow_right');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(0);\n    expect(spy.calls.mostRecent().args[2]).toBe(1);\n\n    spy.calls.reset();\n    selectCell(4, 2);\n    keyDownUp('arrow_down');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(1);\n    expect(spy.calls.mostRecent().args[2]).toBe(0);\n\n    spy.calls.reset();\n    selectCell(0, 2);\n    keyDownUp('arrow_up');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(-1);\n    expect(spy.calls.mostRecent().args[2]).toBe(0);\n  });\n\n  it('should indicate is coords is out of bounds via `afterModifyTransformEnd` hook', () => {\n    const spy = jasmine.createSpy();\n    const hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    hot.addHook('afterModifyTransformEnd', spy);\n    selectCell(2, 0);\n    keyDownUp('shift+arrow_left');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(0);\n    expect(spy.calls.mostRecent().args[2]).toBe(-1);\n\n    spy.calls.reset();\n    selectCell(2, 4);\n    keyDownUp('shift+arrow_right');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(0);\n    expect(spy.calls.mostRecent().args[2]).toBe(1);\n\n    spy.calls.reset();\n    selectCell(4, 2);\n    keyDownUp('shift+arrow_down');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(1);\n    expect(spy.calls.mostRecent().args[2]).toBe(0);\n\n    spy.calls.reset();\n    selectCell(0, 2);\n    keyDownUp('shift+arrow_up');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(-1);\n    expect(spy.calls.mostRecent().args[2]).toBe(0);\n  });\n\n  it('should change selection after left mouse button on one of selected cell', () => {\n    const hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    const cells = $('.ht_master.handsontable td');\n\n    cells.eq(6).simulate('mousedown');\n    cells.eq(18).simulate('mouseover');\n    cells.eq(18).simulate('mouseup');\n\n    expect(hot.getSelected()).toEqual([[1, 1, 3, 3]]);\n\n    cells.eq(16).simulate('mousedown');\n    cells.eq(16).simulate('mouseup');\n\n    expect(hot.getSelected()).toEqual([[3, 1, 3, 1]]);\n  });\n\n  it('should select the first row after corner header is clicked', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    spec().$container.find('thead').find('th').eq(0).simulate('mousedown');\n\n    expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    expect(`\n      |   ║ - :   :   :   :   |\n      |===:===:===:===:===:===|\n      | - ║ # :   :   :   :   |\n      |   ║   :   :   :   :   |\n      |   ║   :   :   :   :   |\n      |   ║   :   :   :   :   |\n      |   ║   :   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should redraw selection when option `colHeaders` is set and user scrolled', async() => {\n    const hot = handsontable({\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true,\n      width: 400,\n      height: 200\n    });\n    let cellVerticalPosition;\n    const borderOffsetInPixels = 1;\n    let topBorder;\n\n    selectCell(5, 5);\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(2);\n\n    await sleep(100);\n\n    cellVerticalPosition = hot.getCell(5, 5).offsetTop;\n    topBorder = $('.wtBorder.current')[0];\n    expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(0);\n\n    await sleep(100);\n    cellVerticalPosition = hot.getCell(5, 5).offsetTop;\n    topBorder = $('.wtBorder.current')[0];\n    expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);\n  });\n\n  it('should redraw selection on `leftOverlay` when options `colHeaders` and `fixedColumnsLeft` are set, and user scrolled', async() => {\n    const hot = handsontable({\n      fixedColumnsLeft: 2,\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true,\n      width: 400,\n      height: 200\n    });\n    let cellVerticalPosition;\n    const borderOffsetInPixels = 1;\n    let topBorder;\n\n    selectCell(1, 0);\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(5);\n\n    await sleep(100);\n    cellVerticalPosition = hot.getCell(1, 0).offsetTop;\n    topBorder = $('.wtBorder.current')[0];\n    expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(0);\n\n    await sleep(100);\n    cellVerticalPosition = hot.getCell(1, 0).offsetTop;\n    topBorder = $('.wtBorder.current')[0];\n    expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);\n  });\n\n  describe('multiple selection mode', () => {\n    it('should select cells by using two layers when CTRL key is pressed (default mode of the selectionMode option)', () => {\n      handsontable({\n        startRows: 8,\n        startCols: 10\n      });\n\n      $(getCell(1, 1)).simulate('mousedown');\n      $(getCell(4, 4)).simulate('mouseover');\n      $(getCell(4, 4)).simulate('mouseup');\n\n      expect(getSelected()).toEqual([[1, 1, 4, 4]]);\n\n      keyDown('ctrl');\n\n      $(getCell(3, 3)).simulate('mousedown');\n      $(getCell(5, 6)).simulate('mouseover');\n      $(getCell(5, 6)).simulate('mouseup');\n\n      expect(getSelected()).toEqual([[1, 1, 4, 4], [3, 3, 5, 6]]);\n    });\n\n    it('should be disallowed to select non-consecutive cells when selectionMode is set as `single`', () => {\n      handsontable({\n        startRows: 8,\n        startCols: 10,\n        selectionMode: 'single',\n      });\n\n      $(getCell(1, 1)).simulate('mousedown');\n      $(getCell(4, 4)).simulate('mouseover');\n      $(getCell(4, 4)).simulate('mouseup');\n\n      expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n\n      keyDown('ctrl');\n\n      $(getCell(3, 3)).simulate('mousedown');\n      $(getCell(5, 6)).simulate('mouseover');\n      $(getCell(5, 6)).simulate('mouseup');\n\n      expect(getSelected()).toEqual([[3, 3, 3, 3]]);\n    });\n\n    it('should be allowed to select consecutive cells when selectionMode is set as `range`', () => {\n      handsontable({\n        startRows: 8,\n        startCols: 10,\n        selectionMode: 'range',\n      });\n\n      $(getCell(1, 1)).simulate('mousedown');\n      $(getCell(4, 4)).simulate('mouseover');\n      $(getCell(4, 4)).simulate('mouseup');\n\n      expect(getSelected()).toEqual([[1, 1, 4, 4]]);\n\n      $(getCell(3, 3)).simulate('mousedown');\n      $(getCell(5, 6)).simulate('mouseover');\n      $(getCell(5, 6)).simulate('mouseup');\n\n      expect(getSelected()).toEqual([[3, 3, 5, 6]]);\n    });\n\n    it('should be disallowed to select non-consecutive cells when selectionMode is set as `range`', () => {\n      handsontable({\n        startRows: 8,\n        startCols: 10,\n        selectionMode: 'range',\n      });\n\n      $(getCell(1, 1)).simulate('mousedown');\n      $(getCell(4, 4)).simulate('mouseover');\n      $(getCell(4, 4)).simulate('mouseup');\n\n      expect(getSelected()).toEqual([[1, 1, 4, 4]]);\n\n      keyDown('ctrl');\n\n      $(getCell(3, 3)).simulate('mousedown');\n      $(getCell(5, 6)).simulate('mouseover');\n      $(getCell(5, 6)).simulate('mouseup');\n\n      expect(getSelected()).toEqual([[3, 3, 5, 6]]);\n    });\n\n    it('should properly colorize selection layers including layer intersections', () => {\n      handsontable({\n        startRows: 21,\n        startCols: 30,\n        selectionMode: 'multiple',\n        colHeaders: true,\n        rowHeaders: true,\n      });\n\n      $(getCell(0, 0)).simulate('mousedown');\n      $(getCell(20, 15)).simulate('mouseover');\n      $(getCell(20, 15)).simulate('mouseup');\n\n      keyDown('ctrl');\n\n      $(getCell(1, 1)).simulate('mousedown');\n      $(getCell(19, 16)).simulate('mouseover');\n      $(getCell(19, 16)).simulate('mouseup');\n\n      $(getCell(2, 2)).simulate('mousedown');\n      $(getCell(18, 17)).simulate('mouseover');\n      $(getCell(18, 17)).simulate('mouseup');\n\n      $(getCell(3, 3)).simulate('mousedown');\n      $(getCell(17, 18)).simulate('mouseover');\n      $(getCell(17, 18)).simulate('mouseup');\n\n      $(getCell(4, 4)).simulate('mousedown');\n      $(getCell(16, 19)).simulate('mouseover');\n      $(getCell(16, 19)).simulate('mouseup');\n\n      $(getCell(5, 5)).simulate('mousedown');\n      $(getCell(15, 20)).simulate('mouseover');\n      $(getCell(15, 20)).simulate('mouseup');\n\n      $(getCell(6, 6)).simulate('mousedown');\n      $(getCell(14, 21)).simulate('mouseover');\n      $(getCell(14, 21)).simulate('mouseup');\n\n      $(getCell(7, 7)).simulate('mousedown');\n      $(getCell(13, 22)).simulate('mouseover');\n      $(getCell(13, 22)).simulate('mouseup');\n\n      $(getCell(8, 8)).simulate('mousedown');\n      $(getCell(12, 23)).simulate('mouseover');\n      $(getCell(12, 23)).simulate('mouseup');\n\n      $(getCell(9, 9)).simulate('mousedown');\n      $(getCell(11, 24)).simulate('mouseover');\n      $(getCell(11, 24)).simulate('mouseup');\n\n      $(getCell(10, 10)).simulate('mousedown');\n      $(getCell(10, 25)).simulate('mouseover');\n      $(getCell(10, 25)).simulate('mouseup');\n\n      expect(`\n        |   ║ - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - :   :   :   :   |\n        |===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===|\n        | - ║ 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :   :   :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : H : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - ║ 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :   :   :   :   :   :   :   :   :   :   :   :   :   :   |\n        `).toBeMatchToSelectionPattern();\n    });\n\n    it('should call afterSelection and afterSelectionEnd hooks with proper arguments', () => {\n      const hooks = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionEnd']);\n      handsontable({\n        startRows: 21,\n        startCols: 30,\n        selectionMode: 'multiple',\n        afterSelection: hooks.afterSelection,\n        afterSelectionEnd: hooks.afterSelectionEnd,\n      });\n\n      $(getCell(0, 0)).simulate('mousedown');\n      $(getCell(20, 15)).simulate('mouseover');\n      $(getCell(20, 15)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([0, 0, 0, 0, jasmine.any(Object), 0]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([0, 0, 20, 15, jasmine.any(Object), 0]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([0, 0, 20, 15, 0, void 0]);\n\n      keyDown('ctrl');\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(1, 1)).simulate('mousedown');\n      $(getCell(19, 16)).simulate('mouseover');\n      $(getCell(19, 16)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([1, 1, 1, 1, jasmine.any(Object), 1]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([1, 1, 19, 16, jasmine.any(Object), 1]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([1, 1, 19, 16, 1, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(2, 2)).simulate('mousedown');\n      $(getCell(18, 17)).simulate('mouseover');\n      $(getCell(18, 17)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([2, 2, 2, 2, jasmine.any(Object), 2]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([2, 2, 18, 17, jasmine.any(Object), 2]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([2, 2, 18, 17, 2, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(3, 3)).simulate('mousedown');\n      $(getCell(17, 18)).simulate('mouseover');\n      $(getCell(17, 18)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([3, 3, 3, 3, jasmine.any(Object), 3]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([3, 3, 17, 18, jasmine.any(Object), 3]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([3, 3, 17, 18, 3, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(4, 4)).simulate('mousedown');\n      $(getCell(16, 19)).simulate('mouseover');\n      $(getCell(16, 19)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([4, 4, 4, 4, jasmine.any(Object), 4]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([4, 4, 16, 19, jasmine.any(Object), 4]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([4, 4, 16, 19, 4, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(5, 5)).simulate('mousedown');\n      $(getCell(15, 20)).simulate('mouseover');\n      $(getCell(15, 20)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([5, 5, 5, 5, jasmine.any(Object), 5]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([5, 5, 15, 20, jasmine.any(Object), 5]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([5, 5, 15, 20, 5, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(6, 6)).simulate('mousedown');\n      $(getCell(14, 21)).simulate('mouseover');\n      $(getCell(14, 21)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([6, 6, 6, 6, jasmine.any(Object), 6]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([6, 6, 14, 21, jasmine.any(Object), 6]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([6, 6, 14, 21, 6, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(7, 7)).simulate('mousedown');\n      $(getCell(13, 22)).simulate('mouseover');\n      $(getCell(13, 22)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([7, 7, 7, 7, jasmine.any(Object), 7]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([7, 7, 13, 22, jasmine.any(Object), 7]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([7, 7, 13, 22, 7, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(8, 8)).simulate('mousedown');\n      $(getCell(12, 23)).simulate('mouseover');\n      $(getCell(12, 23)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([8, 8, 8, 8, jasmine.any(Object), 8]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([8, 8, 12, 23, jasmine.any(Object), 8]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([8, 8, 12, 23, 8, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(9, 9)).simulate('mousedown');\n      $(getCell(11, 24)).simulate('mouseover');\n      $(getCell(11, 24)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([9, 9, 9, 9, jasmine.any(Object), 9]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([9, 9, 11, 24, jasmine.any(Object), 9]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([9, 9, 11, 24, 9, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(10, 10)).simulate('mousedown');\n      $(getCell(10, 25)).simulate('mouseover');\n      $(getCell(10, 25)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([10, 10, 10, 10, jasmine.any(Object), 10]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([10, 10, 10, 25, jasmine.any(Object), 10]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([10, 10, 10, 25, 10, void 0]);\n    });\n\n    it('should call afterSelectionByProp and afterSelectionEndByProp hooks with proper arguments', () => {\n      const hooks = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionEnd']);\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(21, 30),\n        selectionMode: 'multiple',\n        afterSelectionByProp: hooks.afterSelection,\n        afterSelectionEndByProp: hooks.afterSelectionEnd,\n      });\n\n      $(getCell(0, 0)).simulate('mousedown');\n      $(getCell(20, 15)).simulate('mouseover');\n      $(getCell(20, 15)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([0, 'prop0', 0, 'prop0', jasmine.any(Object), 0]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([0, 'prop0', 20, 'prop15', jasmine.any(Object), 0]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([0, 'prop0', 20, 'prop15', 0, void 0]);\n\n      keyDown('ctrl');\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(1, 1)).simulate('mousedown');\n      $(getCell(19, 16)).simulate('mouseover');\n      $(getCell(19, 16)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([1, 'prop1', 1, 'prop1', jasmine.any(Object), 1]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([1, 'prop1', 19, 'prop16', jasmine.any(Object), 1]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([1, 'prop1', 19, 'prop16', 1, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(2, 2)).simulate('mousedown');\n      $(getCell(18, 17)).simulate('mouseover');\n      $(getCell(18, 17)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([2, 'prop2', 2, 'prop2', jasmine.any(Object), 2]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([2, 'prop2', 18, 'prop17', jasmine.any(Object), 2]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([2, 'prop2', 18, 'prop17', 2, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(3, 3)).simulate('mousedown');\n      $(getCell(17, 18)).simulate('mouseover');\n      $(getCell(17, 18)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([3, 'prop3', 3, 'prop3', jasmine.any(Object), 3]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([3, 'prop3', 17, 'prop18', jasmine.any(Object), 3]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([3, 'prop3', 17, 'prop18', 3, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(4, 4)).simulate('mousedown');\n      $(getCell(16, 19)).simulate('mouseover');\n      $(getCell(16, 19)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([4, 'prop4', 4, 'prop4', jasmine.any(Object), 4]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([4, 'prop4', 16, 'prop19', jasmine.any(Object), 4]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([4, 'prop4', 16, 'prop19', 4, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(5, 5)).simulate('mousedown');\n      $(getCell(15, 20)).simulate('mouseover');\n      $(getCell(15, 20)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([5, 'prop5', 5, 'prop5', jasmine.any(Object), 5]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([5, 'prop5', 15, 'prop20', jasmine.any(Object), 5]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([5, 'prop5', 15, 'prop20', 5, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(6, 6)).simulate('mousedown');\n      $(getCell(14, 21)).simulate('mouseover');\n      $(getCell(14, 21)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([6, 'prop6', 6, 'prop6', jasmine.any(Object), 6]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([6, 'prop6', 14, 'prop21', jasmine.any(Object), 6]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([6, 'prop6', 14, 'prop21', 6, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(7, 7)).simulate('mousedown');\n      $(getCell(13, 22)).simulate('mouseover');\n      $(getCell(13, 22)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([7, 'prop7', 7, 'prop7', jasmine.any(Object), 7]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([7, 'prop7', 13, 'prop22', jasmine.any(Object), 7]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([7, 'prop7', 13, 'prop22', 7, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(8, 8)).simulate('mousedown');\n      $(getCell(12, 23)).simulate('mouseover');\n      $(getCell(12, 23)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([8, 'prop8', 8, 'prop8', jasmine.any(Object), 8]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([8, 'prop8', 12, 'prop23', jasmine.any(Object), 8]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([8, 'prop8', 12, 'prop23', 8, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(9, 9)).simulate('mousedown');\n      $(getCell(11, 24)).simulate('mouseover');\n      $(getCell(11, 24)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([9, 'prop9', 9, 'prop9', jasmine.any(Object), 9]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([9, 'prop9', 11, 'prop24', jasmine.any(Object), 9]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([9, 'prop9', 11, 'prop24', 9, void 0]);\n\n      hooks.afterSelection.calls.reset();\n      hooks.afterSelectionEnd.calls.reset();\n\n      $(getCell(10, 10)).simulate('mousedown');\n      $(getCell(10, 25)).simulate('mouseover');\n      $(getCell(10, 25)).simulate('mouseup');\n\n      expect(hooks.afterSelection.calls.count()).toBe(2);\n      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([10, 'prop10', 10, 'prop10', jasmine.any(Object), 10]);\n      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([10, 'prop10', 10, 'prop25', jasmine.any(Object), 10]);\n      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);\n      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([10, 'prop10', 10, 'prop25', 10, void 0]);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_selection.spec.js","describe('Core_setDataAtCell', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfNestedObjects = function() {\n    return [\n      { id: 1,\n        name: {\n          first: 'Ted',\n          last: 'Right'\n        } },\n      { id: 2,\n        name: {\n          first: 'Frank',\n          last: 'Honest'\n        } },\n      { id: 3,\n        name: {\n          first: 'Joan',\n          last: 'Well'\n        } }\n    ];\n  };\n\n  const htmlText = 'Ben & Jerry\\'s';\n\n  it('HTML special chars should be preserved in data map but escaped in DOM', () => {\n    // https://github.com/handsontable/handsontable/issues/147\n    handsontable();\n    const td = setDataAtCell(0, 0, htmlText);\n    selectCell(0, 0);\n\n    $(td).simulate('dblclick');\n    deselectCell();\n\n    expect(getDataAtCell(0, 0)).toEqual(htmlText);\n  });\n\n  it('should correctly paste string that contains \"quotes\"', (done) => {\n    // https://github.com/handsontable/handsontable/issues/205\n    handsontable({});\n    selectCell(0, 0);\n    triggerPaste('1\\nThis is a \"test\" and a test\\n2');\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('1');\n      expect(getDataAtCell(1, 0)).toEqual('This is a \"test\" and a test');\n      expect(getDataAtCell(2, 0)).toEqual('2');\n      done();\n    }, 200);\n  });\n\n  it('should correctly paste string when dataSchema is used', (done) => {\n    // https://github.com/handsontable/handsontable/issues/237\n    handsontable({\n      colHeaders: true,\n      dataSchema: {\n        col1: null,\n        col2: null,\n        col3: null\n      }\n    });\n    selectCell(0, 0);\n    triggerPaste('1\\tTest\\t2');\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('1');\n      expect(getDataAtCell(0, 1)).toEqual('Test');\n      expect(getDataAtCell(0, 2)).toEqual('2');\n      done();\n    }, 200);\n  });\n\n  it('should paste not more rows than maxRows', async() => {\n    handsontable({\n      minSpareRows: 1,\n      minRows: 5,\n      maxRows: 10,\n    });\n    selectCell(4, 0);\n    triggerPaste('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10');\n\n    await sleep(200);\n\n    expect(countRows()).toEqual(10);\n    expect(getDataAtCell(9, 0)).toEqual('6');\n  });\n\n  it('should paste not more cols than maxCols', (done) => {\n    handsontable({\n      minSpareCols: 1,\n      minCols: 5,\n      maxCols: 10,\n    });\n    selectCell(0, 4);\n    triggerPaste('1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10');\n\n    setTimeout(() => {\n      expect(countCols()).toEqual(10);\n      expect(getDataAtCell(0, 9)).toEqual('6');\n      done();\n    }, 200);\n  });\n\n  it('should paste not more rows & cols than maxRows & maxCols', (done) => {\n    handsontable({\n      minSpareRows: 1,\n      minSpareCols: 1,\n      minRows: 5,\n      minCols: 5,\n      maxRows: 6,\n      maxCols: 6,\n    });\n    selectCell(4, 4);\n    triggerPaste('1\\t2\\t3\\n4\\t5\\t6\\n7\\t8\\t9');\n\n    setTimeout(() => {\n      expect(countRows()).toEqual(6);\n      expect(countCols()).toEqual(6);\n      expect(getDataAtCell(5, 5)).toEqual('5');\n      done();\n    }, 200);\n  });\n\n  // https://github.com/handsontable/handsontable/issues/250\n  it('should create new rows when pasting into grid with object data source', (done) => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true,\n      columns: [\n        { data: 'id' },\n        { data: 'name.last' },\n        { data: 'name.first' }\n      ],\n      minSpareRows: 1,\n    });\n    selectCell(3, 0);\n    triggerPaste('a\\tb\\tc\\nd\\te\\tf\\ng\\th\\ti');\n\n    setTimeout(() => {\n      expect(countRows()).toEqual(7);\n      expect(getDataAtCell(5, 2)).toEqual('i');\n      done();\n    }, 200);\n  });\n\n  // https://handsontable.com/demo/datasources.html\n  it('should work with functional data source', () => {\n    handsontable({\n      data: [\n        model({ id: 1, name: 'Ted Right', address: '' }),\n        model({ id: 2, name: 'Frank Honest', address: '' }),\n        model({ id: 3, name: 'Joan Well', address: '' })\n      ],\n      dataSchema: model,\n      startRows: 5,\n      startCols: 3,\n      colHeaders: ['ID', 'Name', 'Address'],\n      columns: [\n        { data: property('id') },\n        { data: property('name') },\n        { data: property('address') }\n      ],\n      minSpareRows: 1\n    });\n\n    function model(opts) {\n      const _pub = {};\n      const _priv = $.extend({\n        id: undefined,\n        name: undefined,\n        address: undefined\n      }, opts);\n\n      _pub.attr = function(attr, val) {\n        if (typeof val === 'undefined') {\n          return _priv[attr];\n        }\n        _priv[attr] = val;\n\n        return _pub;\n      };\n\n      return _pub;\n    }\n\n    function property(attr) {\n      return function(row, value) {\n        return row.attr(attr, value);\n      };\n    }\n\n    expect(getDataAtCell(1, 1)).toEqual('Frank Honest');\n    setDataAtCell(1, 1, 'Something Else');\n    expect(getDataAtCell(1, 1)).toEqual('Something Else');\n  });\n\n  it('should accept changes array as 1st param and source as 2nd param', () => {\n    let lastSource = '';\n\n    handsontable({\n      afterChange(changes, source) {\n        lastSource = source;\n      }\n    });\n\n    setDataAtCell([[0, 0, 'new value']], 'customSource');\n    expect(getDataAtCell(0, 0)).toEqual('new value');\n    expect(lastSource).toEqual('customSource');\n  });\n\n  it('should trigger `afterSetDataAtCell` hook with applied changes', () => {\n    let _changes;\n    let _source;\n\n    handsontable({\n      afterSetDataAtCell(changes, source) {\n        _changes = changes;\n        _source = source;\n      }\n    });\n\n    setDataAtCell(0, 0, 'foo bar', 'customSource');\n\n    expect(_changes).toEqual([[0, 0, null, 'foo bar']]);\n    expect(_source).toBe('customSource');\n    expect(getDataAtCell(0, 0)).toEqual('foo bar');\n  });\n\n  it('should modify value on the fly using `afterSetDataAtCell` hook', () => {\n    handsontable({\n      data: [['a', 'b', 'c'], [1, 2, 3]],\n      afterSetDataAtCell(changes) {\n        if (changes[0][3] === 'foo bar') {\n          changes[0][3] = 'bar';\n        }\n        if (changes[0][3] === 22) {\n          changes[0][3] = 33;\n        }\n      }\n    });\n\n    setDataAtCell(0, 0, 'foo bar', 'customSource');\n    setDataAtCell(1, 2, 22, 'customSource');\n\n    expect(getDataAtCell(0, 0)).toBe('bar');\n    expect(getDataAtCell(1, 2)).toBe(33);\n    expect(getData()).toEqual([['bar', 'b', 'c'], [1, 2, 33]]);\n  });\n\n  it('should trigger `afterSetDataAtRowProp` hook with applied changes', () => {\n    let _changes;\n    let _source;\n\n    handsontable({\n      columns: [{ data: 'name' }, { data: 'id' }],\n      afterSetDataAtRowProp(changes, source) {\n        _changes = changes;\n        _source = source;\n      }\n    });\n\n    setDataAtRowProp(0, 'name', 'foo bar', 'customSource');\n\n    expect(_changes).toEqual([[0, 'name', void 0, 'foo bar']]);\n    expect(_source).toBe('customSource');\n    expect(getDataAtCell(0, 0)).toBe('foo bar');\n  });\n\n  it('should modify value on the fly using `afterSetDataAtRowProp` hook', () => {\n    handsontable({\n      data: [{ name: 'a', id: 1 }, { name: 'b', id: 2 }, { name: 'c', id: 3 }],\n      columns: [{ data: 'name' }, { data: 'id' }],\n      afterSetDataAtRowProp(changes) {\n        if (changes[0][3] === 'foo bar') {\n          changes[0][3] = 'bar';\n        }\n        if (changes[0][3] === 22) {\n          changes[0][3] = 33;\n        }\n      }\n    });\n\n    setDataAtRowProp(0, 'name', 'foo bar', 'customSource');\n    setDataAtRowProp(1, 'id', 22, 'customSource');\n\n    expect(getDataAtRowProp(0, 'name')).toEqual('bar');\n    expect(getDataAtRowProp(1, 'id')).toBe(33);\n    expect(getData()).toEqual([['bar', 1], ['b', 33], ['c', 3]]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_setDataAtCell.spec.js","describe('Core_splice', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  describe('spliceCol', () => {\n    it('should remove data from specified col', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareRows: 1\n      });\n\n      expect(spliceCol(1, 0, 2)).toEqual(['Kia', 10]);\n      expect(getData(0, 1, 3, 1)).toEqual([[20], [30], [null], [null]]);\n    });\n\n    it('should insert data into specified col', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareRows: 1\n      });\n\n      expect(spliceCol(1, 1, 0, 'test', 'test', 'test')).toEqual([]);\n      expect(getData(0, 1, 6, 1)).toEqual([['Kia'], ['test'], ['test'], ['test'], [10], [20], [30]]);\n    });\n\n    it('should remove and insert data into specified col', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareRows: 1\n      });\n\n      expect(spliceCol(1, 0, 2, 'test', 'test', 'test')).toEqual(['Kia', 10]);\n      expect(getData(0, 1, 4, 1)).toEqual([['test'], ['test'], ['test'], [20], [30]]);\n    });\n  });\n\n  describe('spliceRow', () => {\n    it('should remove data from specified row', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareCols: 1\n      });\n\n      expect(spliceRow(0, 0, 3)).toEqual(['', 'Kia', 'Nissan']);\n      expect(getData(0, 0, 0, 4)).toEqual([['Toyota', 'Honda', null, null, null]]);\n    });\n\n    it('should insert data into specified row', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareCols: 1\n      });\n\n      expect(spliceRow(0, 0, 0, 'test', 'test', 'test')).toEqual([]);\n      expect(getData(0, 0, 0, 7)).toEqual([['test', 'test', 'test', '', 'Kia', 'Nissan', 'Toyota', 'Honda']]);\n    });\n\n    it('should remove and insert data into specified row', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareCols: 1\n      });\n\n      expect(spliceRow(0, 0, 2, 'test', 'test', 'test')).toEqual(['', 'Kia']);\n      expect(getData(0, 0, 0, 5)).toEqual([['test', 'test', 'test', 'Nissan', 'Toyota', 'Honda']]);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_splice.spec.js","describe('Core_updateSettings', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should inherit cell type', () => {\n    handsontable({\n      data: [[1, 2]],\n      columns: [\n        {},\n        { type: 'checkbox' },\n      ],\n      cells(row, col) {\n        if (row === 0 && col === 0) {\n          return {\n            type: 'numeric'\n          };\n        }\n      }\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('numeric');\n    expect(getCellMeta(0, 1).type).toEqual('checkbox');\n  });\n\n  it('should inherit cell type when columns is a function', () => {\n    handsontable({\n      data: [[1, 2]],\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = {};\n\n        } else if (column === 1) {\n          colMeta = { type: 'checkbox' };\n        }\n\n        return colMeta;\n      },\n      cells(row, col) {\n        if (row === 0 && col === 0) {\n          return {\n            type: 'numeric'\n          };\n        }\n      }\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('numeric');\n    expect(getCellMeta(0, 1).type).toEqual('checkbox');\n  });\n\n  it('should ignore mixed in properties to the cell array option', () => {\n    /* eslint-disable no-array-constructor */\n    /* eslint-disable no-extend-native */\n    Array.prototype.willFail = 'BOOM';\n\n    handsontable({\n      data: [[1, true]],\n      columns: [\n        { type: 'numeric' },\n        { type: 'checkbox' }\n      ]\n    });\n\n    expect(() => {\n      updateSettings({ cell: new Array() });\n    }).not.toThrow();\n  });\n\n  it('should ignore mixed in properties to the cell array option when columns is a function', () => {\n    /* eslint-disable no-array-constructor */\n    /* eslint-disable no-extend-native */\n    Array.prototype.willFail = 'BOOM';\n\n    handsontable({\n      data: [[1, true]],\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { type: 'numeric' };\n\n        } else if (column === 1) {\n          colMeta = { type: 'checkbox' };\n        }\n\n        return colMeta;\n      },\n    });\n\n    expect(() => {\n      updateSettings({ cell: new Array() });\n    }).not.toThrow();\n  });\n\n  it('should not reset columns types to text', () => {\n    handsontable({\n      data: [[1, true]],\n      columns: [\n        { type: 'numeric' },\n        { type: 'checkbox' }\n      ]\n    });\n\n    const td = spec().$container.find('td');\n\n    expect(td.eq(0).text()).toEqual('1');\n    expect(td.eq(1).text()).toEqual('');\n\n    updateSettings({});\n\n    expect(td.eq(0).text()).toEqual('1');\n    expect(td.eq(1).text()).toEqual('');\n  });\n\n  it('should not reset columns types to text when columns is a function', () => {\n    handsontable({\n      data: [[1, true]],\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { type: 'numeric' };\n\n        } else if (column === 1) {\n          colMeta = { type: 'checkbox' };\n        }\n\n        return colMeta;\n      }\n    });\n\n    const td = spec().$container.find('td');\n\n    expect(td.eq(0).text()).toEqual('1');\n    expect(td.eq(1).text()).toEqual('');\n\n    updateSettings({});\n\n    expect(td.eq(0).text()).toEqual('1');\n    expect(td.eq(1).text()).toEqual('');\n  });\n\n  it('should update readOnly global setting', () => {\n    handsontable({\n      readOnly: true,\n      data: [['foo', 'bar']],\n      columns: [\n        {},\n        {},\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n\n    updateSettings({\n      readOnly: false\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should update readOnly global setting when columns is a function', () => {\n    handsontable({\n      readOnly: true,\n      data: [['foo', 'bar']],\n      columns(column) {\n        let colMeta = {};\n\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n\n    updateSettings({\n      readOnly: false\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should update readOnly columns setting', () => {\n    handsontable({\n      data: [['foo', true]],\n      columns: [\n        { type: 'text', readOnly: true },\n        { type: 'checkbox' }\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n\n    updateSettings({\n      columns: [\n        { type: 'text', readOnly: false },\n        { type: 'checkbox' }\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should update readOnly columns setting when columns is a function', () => {\n    handsontable({\n      data: [['foo', true]],\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { type: 'text', readOnly: true };\n        } else if (column === 1) {\n          colMeta = { type: 'checkbox' };\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n\n    updateSettings({\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { type: 'text', readOnly: false };\n        } else if (column === 1) {\n          colMeta = { type: 'checkbox' };\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should update readOnly columns setting and override global setting', () => {\n    handsontable({\n      readOnly: true,\n      data: [['foo', true]],\n      columns: [\n        { type: 'text' },\n        { type: 'checkbox' }\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n\n    updateSettings({\n      columns: [\n        { type: 'text', readOnly: false },\n        { type: 'checkbox' }\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n  });\n\n  it('should update readOnly columns setting and override global setting when columns is a function', () => {\n    handsontable({\n      readOnly: true,\n      data: [['foo', true]],\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { type: 'text' };\n\n        } else if (column === 1) {\n          colMeta = { type: 'checkbox' };\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n\n    updateSettings({\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { type: 'text', readOnly: false };\n\n        } else if (column === 1) {\n          colMeta = { type: 'checkbox' };\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n  });\n\n  it('should not alter the columns object during init', () => {\n    const columns = [\n      {\n        type: 'text'\n      }\n    ];\n\n    const columnsCopy = JSON.parse(JSON.stringify(columns));\n\n    handsontable({\n      columns\n    });\n\n    expect(columns).toEqual(columnsCopy);\n  });\n\n  it('should update column type', () => {\n    const columns = [\n      {\n        type: 'text'\n      }\n    ];\n\n    handsontable({\n      columns\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('text');\n    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.TextRenderer);\n    expect(getCellEditor(0, 0)).toBe(Handsontable.editors.TextEditor);\n\n    columns[0].type = 'date';\n\n    updateSettings({\n      columns\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('date');\n    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.AutocompleteRenderer);\n    expect(getCellEditor(0, 0)).toEqual(Handsontable.editors.DateEditor);\n  });\n\n  it('should update cell type functions, even if new type does not implement all of those functions', () => {\n    const columns = [\n      {\n        type: 'numeric'\n      }\n    ];\n\n    handsontable({\n      columns\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('numeric');\n    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.NumericRenderer);\n    expect(getCellEditor(0, 0)).toBe(Handsontable.editors.NumericEditor);\n    expect(getCellValidator(0, 0)).toBe(Handsontable.cellTypes.numeric.validator);\n\n    columns[0].type = 'text';\n\n    updateSettings({\n      columns\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('text');\n    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.TextRenderer);\n    expect(getCellEditor(0, 0)).toEqual(Handsontable.editors.TextEditor);\n    expect(Handsontable.cellTypes.text.validator).toBeUndefined();\n    expect(getCellValidator(0, 0)).toBeUndefined();\n  });\n\n  it('should allow updating the table height', () => {\n    handsontable({\n      startRows: 22,\n      startCols: 5\n    });\n\n    const initialHeight = parseInt(spec().$container[0].style.height, 10);\n\n    updateSettings({\n      height: 300\n    });\n\n    expect(parseInt(spec().$container[0].style.height, 10)).toEqual(300);\n    expect(parseInt(spec().$container[0].style.height, 10)).not.toEqual(initialHeight);\n  });\n\n  it('should not reset the table height, when the updateSettings config object doesn\\'t have any height specified', () => {\n    handsontable({\n      startRows: 22,\n      startCols: 5,\n      height: 300\n    });\n\n    const initialHeight = spec().$container[0].style.height;\n\n    updateSettings({\n      rowHeaders: true\n    });\n\n    expect(parseInt(spec().$container[0].style.height, 10)).toEqual(parseInt(initialHeight, 10));\n  });\n\n  it('should allow resetting the table height', () => {\n    handsontable({\n      startRows: 22,\n      startCols: 5,\n      height: 300\n    });\n\n    const initialHeight = spec().$container[0].style.height;\n\n    updateSettings({\n      height: null\n    });\n\n    expect(parseInt(spec().$container[0].style.height, 10)).not.toEqual(parseInt(initialHeight, 10));\n  });\n\n  it('should allow updating the stretching type', () => {\n    const hot = handsontable({\n      stretchH: 'last'\n    });\n\n    expect(hot.view.wt.getSetting('stretchH')).toEqual('last');\n\n    updateSettings({\n      stretchH: 'all'\n    });\n\n    expect(hot.view.wt.getSetting('stretchH')).toEqual('all');\n\n    updateSettings({\n      stretchH: 'none'\n    });\n\n    expect(hot.view.wt.getSetting('stretchH')).toEqual('none');\n\n    updateSettings({\n      stretchH: 'last'\n    });\n\n    expect(hot.view.wt.getSetting('stretchH')).toEqual('last');\n  });\n\n  it('should change colHeader\\'s row height if is needed', () => {\n    handsontable({\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    const rowHeights = [];\n\n    rowHeights.push(spec().$container.find('.ht_clone_top_left_corner thead th')[0].clientHeight);\n    updateSettings({\n      colHeaders: ['A<br/>A']\n    });\n\n    rowHeights.push(spec().$container.find('.ht_clone_top_left_corner thead th')[0].clientHeight);\n\n    expect(rowHeights[0]).toBeLessThan(rowHeights[1]);\n  });\n\n  it('should not overwrite properties (created by columns defined as function) of cells below the viewport by updateSettings #4029', () => {\n    let rows = 50;\n    const columns = 2;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(columns, rows),\n      columns(col) {\n        const colProp = {\n          data: `prop${col}`,\n          readOnly: true\n        };\n\n        if (col === 1) {\n          colProp.type = 'checkbox';\n        }\n\n        return colProp;\n      }\n    });\n\n    updateSettings({});\n    expect(getCellMeta(rows, 0).readOnly).toEqual(true);\n    expect(getCellMeta(rows, 1).type).toEqual('checkbox');\n\n    rows = 100;\n\n    updateSettings({ data: Handsontable.helper.createSpreadsheetObjectData(columns, rows) });\n    expect(getCellMeta(rows, 0).readOnly).toEqual(true);\n    expect(getCellMeta(rows, 1).type).toEqual('checkbox');\n\n    updateSettings({\n      columns(col) {\n        const colProp = {\n          data: `prop${col}`,\n          type: 'numeric'\n        };\n\n        return colProp;\n      }\n    });\n    expect(getCellMeta(0, 1).type).toEqual('numeric');\n    expect(getCellMeta(0, 1).readOnly).toEqual(false);\n    expect(getCellMeta(rows, 1).type).toEqual('numeric');\n    expect(getCellMeta(rows, 1).readOnly).toEqual(false);\n  });\n\n  it('should not overwrite properties (created by columns defined as array) of cells below the viewport by updateSettings #4029', () => {\n    let rows = 50;\n    const columns = 2;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(columns, rows),\n      columns: [\n        {\n          type: 'numeric',\n          numericFormat: {\n            pattern: '0,0.00 $',\n          },\n        },\n        {\n          type: 'text',\n          readOnly: true\n        }\n      ]\n    });\n\n    updateSettings({});\n    expect(getCellMeta(rows, 0).type).toEqual('numeric');\n    expect(getCellMeta(rows, 1).readOnly).toEqual(true);\n\n    rows = 100;\n\n    updateSettings({ data: Handsontable.helper.createSpreadsheetObjectData(columns, rows) });\n    expect(getCellMeta(rows, 0).type).toEqual('numeric');\n    expect(typeof getCellMeta(rows, 0).numericFormat).toEqual('object');\n    expect(getCellMeta(rows, 1).readOnly).toEqual(true);\n\n    updateSettings({\n      columns: [\n        {\n          type: 'text',\n          readOnly: true\n        },\n        {\n          type: 'numeric',\n          numericFormat: {\n            pattern: '0,0.00 $',\n          },\n        }\n      ]\n    });\n    expect(getCellMeta(0, 0).type).toEqual('text');\n    expect(getCellMeta(0, 0).readOnly).toEqual(true);\n    expect(getCellMeta(0, 1).type).toEqual('numeric');\n    expect(typeof getCellMeta(0, 1).numericFormat).toEqual('object');\n    expect(getCellMeta(0, 1).readOnly).toEqual(false);\n    expect(getCellMeta(rows, 0).type).toEqual('text');\n    expect(getCellMeta(rows, 1).type).toEqual('numeric');\n  });\n\n  it('should call `afterUpdateSettings` hook with proper parameter', () => {\n    const afterUpdateSettings = jasmine.createSpy('afterUpdateSettings');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      readOnly: true,\n      afterUpdateSettings\n    });\n\n    const newSettings = { readOnly: false };\n\n    updateSettings(newSettings);\n\n    expect(afterUpdateSettings).toHaveBeenCalledWith(newSettings, undefined, undefined, undefined, undefined, undefined);\n  });\n\n  it('should not extend parameter passed to `afterUpdateSettings` hook by another properties', () => {\n    const updatedSetting = { fillHandle: true };\n    let newSettings;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      readOnly: true,\n      afterUpdateSettings(settings) {\n        newSettings = settings;\n      }\n    });\n\n    updateSettings(updatedSetting);\n\n    expect(Object.keys(updatedSetting)).toEqual(Object.keys(newSettings));\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_update.spec.js","describe('Core_validate', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfObjects = function() {\n    return [\n      { id: 1, name: 'Ted', lastName: 'Right' },\n      { id: 2, name: 'Frank', lastName: 'Honest' },\n      { id: 3, name: 'Joan', lastName: 'Well' },\n      { id: 4, name: 'Sid', lastName: 'Strong' },\n      { id: 5, name: 'Jane', lastName: 'Neat' },\n      { id: 6, name: 'Chuck', lastName: 'Jackson' },\n      { id: 7, name: 'Meg', lastName: 'Jansen' },\n      { id: 8, name: 'Rob', lastName: 'Norris' },\n      { id: 9, name: 'Sean', lastName: 'O\\'Hara' },\n      { id: 10, name: 'Eve', lastName: 'Branson' }\n    ];\n  };\n\n  it('should call beforeValidate', () => {\n    let fired = null;\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      beforeValidate() {\n        fired = true;\n      }\n    });\n    setDataAtCell(2, 0, 'test');\n\n    expect(fired).toEqual(true);\n  });\n\n  it('should call beforeValidate when columns is a function', () => {\n    let fired = null;\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n          colMeta.type = 'numeric';\n\n        } else if (column === 1) {\n          colMeta.data = 'name';\n\n        } else if (column === 2) {\n          colMeta.data = 'lastName';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      beforeValidate() {\n        fired = true;\n      }\n    });\n    setDataAtCell(2, 0, 'test');\n\n    expect(fired).toBe(true);\n  });\n\n  it('should call afterValidate', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate.calls.count()).toBe(1);\n      done();\n    }, 200);\n  });\n\n  it('should call afterValidate when columns is a function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n          colMeta.type = 'numeric';\n\n        } else if (column === 1) {\n          colMeta.data = 'name';\n\n        } else if (column === 2) {\n          colMeta.data = 'lastName';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate.calls.count()).toBe(1);\n      done();\n    }, 200);\n  });\n\n  it('beforeValidate can manipulate value', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    let result = null;\n\n    onAfterValidate.and.callFake((valid, value) => {\n      result = value;\n    });\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      beforeValidate() {\n        return 999;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(result).toBe(999);\n      done();\n    }, 200);\n  });\n\n  it('beforeValidate can manipulate value when columns is a function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    let result = null;\n\n    onAfterValidate.and.callFake((valid, value) => {\n      result = value;\n    });\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n          colMeta.type = 'numeric';\n\n        } else if (column === 1) {\n          colMeta.data = 'name';\n\n        } else if (column === 2) {\n          colMeta.data = 'lastName';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      beforeValidate() {\n        return 999;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(result).toBe(999);\n      done();\n    }, 200);\n  });\n\n  it('should be able to define custom validator function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id',\n          validator(value, cb) {\n            cb(true);\n          } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('should be able to define custom validator function when columns is a function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(true);\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n\n        } else if (column === 2) {\n          colMeta = { data: 'lastName' };\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('should be able to define custom validator RegExp', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', validator: /^\\d+$/ },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('should be able to define custom validator RegExp when columns is a function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { data: 'id', validator: /^\\d+$/ };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n\n        } else if (column === 2) {\n          colMeta = { data: 'lastName' };\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('this in validator should point to cellProperties', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    let result = null;\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {\n          data: 'id',\n          validator(value, cb) {\n            result = this;\n            cb(true);\n          }\n        },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(result.instance).toEqual(getInstance());\n      done();\n    }, 200);\n  });\n\n  it('this in validator should point to cellProperties when columns is a function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    let result = null;\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              result = this;\n              cb(true);\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n\n        } else if (column === 2) {\n          colMeta = { data: 'lastName' };\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(result.instance).toEqual(getInstance());\n      done();\n    }, 200);\n  });\n\n  it('should not throw error after calling validateCells without first argument', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value === 'B1') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    expect(() => hot.validateCells()).not.toThrow();\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should throw error after calling validateRows first argument not array', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        callb(true);\n      },\n      afterValidate: onAfterValidate\n    });\n    expect(() => hot.validateRows()).toThrow();\n    expect(() => hot.validateRows(0, () => {})).toThrow();\n    expect(() => hot.validateRows({}, () => {})).toThrow();\n    expect(() => hot.validateRows(() => {})).toThrow();\n    done();\n  });\n\n  it('should throw error after calling validateColumns first argument not array', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        callb(true);\n      },\n      afterValidate: onAfterValidate\n    });\n    expect(() => hot.validateColumns()).toThrow();\n    expect(() => hot.validateColumns(0, () => {})).toThrow();\n    expect(() => hot.validateColumns({}, () => {})).toThrow();\n    expect(() => hot.validateColumns(() => {})).toThrow();\n    done();\n  });\n\n  it('should not throw error after calling validateRows without second argument', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        callb(true);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    expect(() => hot.validateRows([])).not.toThrow();\n    expect(() => hot.validateRows([0, 1])).not.toThrow();\n    expect(() => hot.validateRows([100, 101])).not.toThrow();\n    done();\n  });\n\n  it('should not throw error after calling validateColumns without second argument', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        callb(true);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    expect(() => hot.validateColumns([])).not.toThrow();\n    expect(() => hot.validateColumns([0, 1])).not.toThrow();\n    expect(() => hot.validateColumns([100, 101])).not.toThrow();\n    done();\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - on validateCells', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value === 'B1') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(() => {\n      hot.render();\n    });\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - on validateRows', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value === 'B1') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateRows([], () => {\n      hot.render();\n    });\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);\n      hot.updateSettings({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n      hot.validateRows([0], () => {\n        hot.render();\n      });\n    }, 100);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n      hot.updateSettings({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n      hot.validateRows([1], () => {\n        hot.render();\n      });\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);\n      hot.updateSettings({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n      hot.validateRows([0, 1], () => {\n        hot.render();\n      });\n    }, 300);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n      hot.updateSettings({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n      hot.validateRows([0, 1, 100], () => {\n        hot.render();\n      });\n    }, 400);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n      hot.updateSettings({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n      hot.validateRows([100, 101], () => {\n        hot.render();\n      });\n    }, 500);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);\n      done();\n    }, 600);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - on validateColumns', async() => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value === 'B1') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    await promisfy(resolve => hot.validateColumns([], resolve));\n\n    expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);\n\n    hot.updateSettings({\n      data: Handsontable.helper.createSpreadsheetData(2, 2)\n    });\n    await promisfy(resolve => hot.validateColumns([0], resolve));\n\n    expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);\n\n    hot.updateSettings({\n      data: Handsontable.helper.createSpreadsheetData(2, 2)\n    });\n    await promisfy(resolve => hot.validateColumns([1], resolve));\n\n    expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n\n    hot.updateSettings({\n      data: Handsontable.helper.createSpreadsheetData(2, 2)\n    });\n    await promisfy(resolve => hot.validateColumns([0, 1], resolve));\n\n    expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n\n    hot.updateSettings({\n      data: Handsontable.helper.createSpreadsheetData(2, 2)\n    });\n    await promisfy(resolve => hot.validateColumns([0, 1, 100], resolve));\n\n    expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n\n    hot.updateSettings({\n      data: Handsontable.helper.createSpreadsheetData(2, 2)\n    });\n    await promisfy(resolve => hot.validateColumns([100, 101], resolve));\n\n    expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - when we trigger validateCell', async() => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, cb) {\n        cb(false);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);\n\n    hot.validateCell(hot.getDataAtCell(1, 1), hot.getCellMeta(1, 1), () => {});\n\n    await sleep(200);\n\n    expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n  });\n\n  it('should remove class name `htInvalid` from an cell that does validate - when we change validator rules', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    let isValid = false;\n    const validator = function() {\n      return isValid;\n    };\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, cb) {\n        cb(validator());\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(() => {});\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(4);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(0);\n\n      isValid = true;\n      onAfterValidate.calls.reset();\n      hot.validateCell(hot.getDataAtCell(1, 1), hot.getCellMeta(1, 1), () => {});\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(3);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(1);\n      done();\n    }, 400);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - on edit', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value === 'test') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'test');\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      done();\n    }, 200);\n  });\n\n  it('should add class name `htInvalid` to a cell without removing other classes', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const validator = jasmine.createSpy('validator');\n\n    validator.and.callFake((value, callb) => {\n      if (value === 123) {\n        callb(false);\n      } else {\n        callb(true);\n      }\n    });\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      type: 'numeric',\n      validator,\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(0, 0, 123);\n\n    setTimeout(() => {\n      expect(validator.calls.count()).toEqual(1);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htNumeric')).toEqual(true);\n      onAfterValidate.calls.reset();\n      setDataAtCell(0, 0, 124);\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htNumeric')).toEqual(true);\n      done();\n    }, 400);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - after validateCells', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'test');\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n      updateSettings({\n        validator(value, callb) {\n          if (value === 'test') {\n            callb(false);\n          } else {\n            callb(true);\n          }\n        }\n      });\n\n      onAfterValidate.calls.reset();\n\n      hot.validateCells(() => {});\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      done();\n    }, 400);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - after validateRows', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'test');\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n      updateSettings({\n        validator(value, callb) {\n          if (value === 'test') {\n            callb(false);\n          } else {\n            callb(true);\n          }\n        }\n      });\n\n      onAfterValidate.calls.reset();\n\n      hot.validateRows([0], () => {});\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      done();\n    }, 400);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - after validateColumns', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'test');\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n      updateSettings({\n        validator(value, callb) {\n          if (value === 'test') {\n            callb(false);\n          } else {\n            callb(true);\n          }\n        }\n      });\n\n      onAfterValidate.calls.reset();\n\n      hot.validateColumns([0], () => {});\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      done();\n    }, 400);\n  });\n\n  it('should remove class name `htInvalid` when cell is edited to validate', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value === 'A1') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(() => {\n      hot.render();\n    });\n\n    setTimeout(() => {\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      onAfterValidate.calls.reset();\n      setDataAtCell(0, 0, 'test');\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);\n      done();\n    }, 400);\n  });\n\n  it('should call callback with first argument as `true` if all cells are valid', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callback) {\n        callback(true);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(true);\n      done();\n    }, 200);\n  });\n\n  it('should call callback with first argument as `true` if all cells are valid - on validateRows', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callback) {\n        callback(true);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateRows([0, 1], onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(true);\n      done();\n    }, 200);\n  });\n\n  it('should call callback with first argument as `true` if all cells are valid - on validateColumns', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callback) {\n        callback(true);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateColumns([0, 1], onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(true);\n      done();\n    }, 200);\n  });\n\n  it('should call callback with first argument as `false` if one of cells is invalid', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callback) {\n        callback(false);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      done();\n    }, 200);\n  });\n\n  it('should call callback with first argument as `false` if one of cells is invalid - on validateRows', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callback) {\n        callback(false);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateRows([0, 1], onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      done();\n    }, 200);\n  });\n\n  it('should call callback with first argument as `false` if one of cells is invalid - on validateColumns', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callback) {\n        callback(false);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateColumns([0, 1], onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      done();\n    }, 200);\n  });\n\n  it('should not allow for changes where data is invalid (multiple changes, async)', (done) => {\n    let validatedChanges;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callb) {\n        setTimeout(() => {\n          if (value === 'fail') {\n            callb(false);\n          } else {\n            callb(true);\n          }\n        }, 10);\n      },\n      afterChange(changes, source) {\n        if (source !== 'loadData') {\n          validatedChanges = changes;\n        }\n      }\n    });\n\n    populateFromArray(0, 0, [\n      ['A1-new'],\n      ['fail'],\n      ['A3-new']\n    ]);\n\n    setTimeout(() => {\n      expect(validatedChanges.length).toEqual(2);\n      expect(validatedChanges[0]).toEqual([0, 0, 'A1', 'A1-new']);\n      expect(validatedChanges[1]).toEqual([2, 0, 'A3', 'A3-new']);\n      expect(getDataAtCell(0, 0)).toEqual('A1-new');\n      expect(getDataAtCell(1, 0)).toEqual('A2');\n      expect(getDataAtCell(2, 0)).toEqual('A3-new');\n      expect(getCellMeta(0, 0).valid).toBe(true);\n      expect(getCellMeta(1, 0).valid).toBe(true);\n      expect(getCellMeta(2, 0).valid).toBe(true);\n      done();\n    }, 200);\n  });\n\n  it('should call beforeChange exactly once after cell value edit and validator is synchronous', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const onBeforeChange = jasmine.createSpy('onBeforeChange');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        callback(true);\n      },\n      beforeChange: onBeforeChange,\n      afterValidate: onAfterValidate\n    });\n\n    expect(onBeforeChange.calls.count()).toEqual(0);\n\n    hot.setDataAtCell(0, 0, 10);\n\n    setTimeout(() => {\n      expect(onBeforeChange.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call beforeChange exactly once after cell value edit and validator is asynchronous', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const onBeforeChange = jasmine.createSpy('onBeforeChange');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          callback(true);\n        }, 10);\n      },\n      beforeChange: onBeforeChange,\n      afterValidate: onAfterValidate\n    });\n\n    expect(onBeforeChange.calls.count()).toEqual(0);\n\n    hot.setDataAtCell(0, 0, 10);\n\n    setTimeout(() => {\n      expect(onBeforeChange.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call afterChange exactly once after cell value edit and validator is synchronous', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const onAfterChange = jasmine.createSpy('onAfterChange');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        callback(true);\n      },\n      afterChange: onAfterChange,\n      afterValidate: onAfterValidate\n    });\n\n    expect(onAfterChange.calls.count()).toEqual(1); // loadData\n\n    hot.setDataAtCell(0, 0, 10);\n\n    setTimeout(() => {\n      expect(onAfterChange.calls.count()).toEqual(2);\n      done();\n    }, 200);\n  });\n\n  it('should call afterChange exactly once after cell value edit and validator is asynchronous', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const onAfterChange = jasmine.createSpy('onAfterChange');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          callback(true);\n        }, 10);\n      },\n      afterChange: onAfterChange,\n      afterValidate: onAfterValidate\n    });\n\n    expect(onAfterChange.calls.count()).toEqual(1); // loadData\n\n    hot.setDataAtCell(0, 0, 10);\n\n    setTimeout(() => {\n      expect(onAfterChange.calls.count()).toEqual(2);\n      done();\n    }, 200);\n  });\n\n  it('edited cell should stay on screen until value is validated', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const onAfterChange = jasmine.createSpy('onAfterChange');\n    let isEditorVisibleBeforeChange;\n    let isEditorVisibleAfterChange;\n\n    onAfterValidate.and.callFake(() => {\n      isEditorVisibleBeforeChange = isEditorVisible();\n    });\n    onAfterChange.and.callFake(() => {\n      isEditorVisibleAfterChange = isEditorVisible();\n    });\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      afterValidate: onAfterValidate,\n      afterChange: onAfterChange,\n      validator(value, callback) {\n        setTimeout(() => {\n          callback(true);\n        }, 100);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'Ted';\n\n    onAfterValidate.calls.reset();\n    onAfterChange.calls.reset();\n\n    keyDown('enter');\n\n    expect(document.activeElement.nodeName).toEqual('TEXTAREA');\n\n    setTimeout(() => {\n      expect(isEditorVisibleBeforeChange).toBe(true);\n      expect(isEditorVisibleAfterChange).toBe(true);\n      expect(isEditorVisible()).toBe(false);\n      done();\n    }, 200);\n  });\n\n  it('should validate edited cell after selecting another cell', async() => {\n    let validatedValue;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          validatedValue = value;\n          callback(true);\n        }, 50);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(0, 1);\n    await sleep(150);\n\n    expect(validatedValue).toEqual('Ted');\n  });\n\n  it('should leave the new value in editor if it does not validate (async validation), after hitting ENTER', (done) => {\n    let validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          validationResult = value.length === 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(document.activeElement.value).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should leave the new value in editor if it does not validate (sync validation), after hitting ENTER', (done) => {\n    let validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        validationResult = value.length === 2;\n        callback(validationResult);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(document.activeElement.value).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should leave the new value in editor if it does not validate (async validation), after selecting another cell', (done) => {\n    let validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          validationResult = value.length === 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(1, 0);\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(document.activeElement.value).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should leave the new value in editor if it does not validate (sync validation), after selecting another cell', (done) => {\n    let validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        validationResult = value.length === 2;\n        callback(validationResult);\n      }\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(1, 0);\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(document.activeElement.value).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should remove htInvalid class properly after cancelling change, when physical indexes are not equal to visual indexes', (done) => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      columnSorting: {\n        column: 0,\n        sortOrder: 'desc'\n      },\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          callback(value.length === 2);\n        }, 100);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      const $cell = $(getCell(0, 0));\n      expect($cell.hasClass('htInvalid')).toEqual(false);\n      done();\n    }, 200);\n  });\n\n  it('should not attempt to remove the htInvalid class if the validated cell is no longer rendered', (done) => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 2),\n      columnSorting: {\n        column: 0,\n        sortOrder: 'desc'\n      },\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          callback(value.length === 2);\n        }, 100);\n      },\n      height: 40\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(19, 0);\n\n    setTimeout(() => {\n      const $cell = $(getCell(0, 0));\n      expect($cell.hasClass('htInvalid')).toEqual(false);\n      done();\n    }, 200);\n  });\n\n  it('should close the editor and save the new value if validation fails and allowInvalid is set to \"true\"', (done) => {\n    let validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: true,\n      validator(value, callback) {\n        setTimeout(() => {\n          validationResult = value.length === 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(1, 0);\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(getDataAtCell(0, 0)).toEqual('Ted');\n      expect(getCell(0, 0).className).toMatch(/htInvalid/);\n      done();\n    }, 200);\n  });\n\n  it('should close the editor and save the new value after double clicking on a cell, if the previously edited cell validated correctly', async() => {\n    let validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n\n          validationResult = value.length === 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect(isEditorVisible()).toBe(true);\n\n    document.activeElement.value = 'AA';\n\n    expect(document.activeElement.value).toEqual('AA');\n\n    const cell = $(getCell(1, 0));\n\n    await sleep();\n\n    mouseDown(cell);\n    mouseUp(cell);\n\n    await sleep(100);\n\n    mouseDown(cell);\n    mouseUp(cell);\n\n    await sleep(200);\n\n    expect(isEditorVisible()).toBe(false);\n    expect(validationResult).toBe(true);\n    expect(getDataAtCell(0, 0)).toEqual('AA');\n  });\n\n  it('should close the editor and restore the original value after double clicking on a cell, if the previously edited cell have not validated', (done) => {\n    let validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          validationResult = value.length === 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'AAA';\n\n    expect(document.activeElement.value).toEqual('AAA');\n\n    const cell = $(getCell(1, 0));\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n    }, 0);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n    }, 100);\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n      done();\n    }, 300);\n  });\n\n  it('should listen to key changes after cell is corrected (allowInvalid: false)', async() => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        {\n          data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            cb(parseInt(val, 10) > 100);\n          }\n        },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    document.activeElement.value = '99';\n\n    onAfterValidate.calls.reset();\n\n    keyDownUp('enter'); // should be ignored\n\n    await sleep(200);\n\n    expect(isEditorVisible()).toBe(true);\n    document.activeElement.value = '999';\n\n    onAfterValidate.calls.reset();\n    keyDownUp('enter'); // should be accepted\n\n    await sleep(200);\n\n    expect(isEditorVisible()).toBe(false);\n    expect(getSelected()).toEqual([[3, 0, 3, 0]]);\n\n    keyDownUp('arrow_up');\n    expect(getSelected()).toEqual([[2, 0, 2, 0]]);\n  });\n\n  it('should allow keyboard movement when cell is being validated (move DOWN)', async() => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        { data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            setTimeout(() => {\n              cb(parseInt(val, 10) > 100);\n            }, 100);\n          } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    document.activeElement.value = '999';\n    keyDownUp('enter');\n\n    expect(getSelected()).toEqual([[3, 0, 3, 0]]);\n\n    keyDownUp('arrow_down');\n    keyDownUp('arrow_down');\n\n    expect(isEditorVisible()).toBe(true);\n    expect(getSelected()).toEqual([[5, 0, 5, 0]]);\n\n    await sleep(200);\n\n    expect(isEditorVisible()).toBe(false);\n    expect(getSelected()).toEqual([[5, 0, 5, 0]]); // only enterMove and first arrow_down is performed\n  });\n\n  it('should not allow keyboard movement until cell is validated (move UP)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        { data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            setTimeout(() => {\n              cb(parseInt(val, 10) > 100);\n            }, 100);\n          } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    document.activeElement.value = '999';\n    keyDownUp('enter');\n\n    expect(getSelected()).toEqual([[3, 0, 3, 0]]);\n\n    keyDownUp('arrow_up');\n    keyDownUp('arrow_up');\n    expect(isEditorVisible()).toBe(true);\n    expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n\n    setTimeout(() => {\n      expect(isEditorVisible()).toBe(false);\n      expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n      done();\n    }, 200);\n  });\n\n  it('should not allow keyboard movement until cell is validated (move RIGHT)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        { data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            setTimeout(() => {\n              cb(parseInt(val, 10) > 100);\n            }, 100);\n          } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    document.activeElement.value = '999';\n    keyDownUp('enter'); // should be accepted but only after 100 ms\n    expect(getSelected()).toEqual([[3, 0, 3, 0]]);\n\n    keyDownUp('arrow_right');\n    keyDownUp('arrow_right');\n    expect(isEditorVisible()).toBe(true);\n    expect(getSelected()).toEqual([[3, 2, 3, 2]]);\n\n    setTimeout(() => {\n      expect(isEditorVisible()).toBe(false);\n      expect(getSelected()).toEqual([[3, 2, 3, 2]]);\n      done();\n    }, 200);\n  });\n\n  it('should not allow keyboard movement until cell is validated (move LEFT)', async() => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    hot = handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        { data: 'name' },\n        { data: 'lastName' },\n        { data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            setTimeout(() => {\n              cb(parseInt(val, 10) > 100);\n            }, 100);\n          } }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(2, 2);\n\n    keyDownUp('enter');\n    document.activeElement.value = '999';\n    keyDownUp('enter'); // should be accepted but only after 100 ms\n    expect(getSelected()).toEqual([[3, 2, 3, 2]]);\n\n    spec().$container.simulate('keydown', { keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT });\n    spec().$container.simulate('keyup', { keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT });\n    spec().$container.simulate('keydown', { keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT });\n    spec().$container.simulate('keyup', { keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT });\n\n    expect(isEditorVisible()).toBe(true);\n    expect(getSelected()).toEqual([[3, 0, 3, 0]]);\n\n    await sleep(200);\n\n    expect(isEditorVisible()).toBe(false);\n    expect(getSelected()).toEqual([[3, 0, 3, 0]]);\n  });\n\n  it('should not validate cell if editing has been canceled', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(0, 0);\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n    setTimeout(() => {\n      expect(onAfterValidate).not.toHaveBeenCalled();\n      done();\n    }, 100);\n  });\n\n  it('should not validate cell if editing has been canceled when columns is a function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = { data: 'id' };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n\n        } else if (column === 2) {\n          colMeta = { data: 'lastName' };\n\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(0, 0);\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n    setTimeout(() => {\n      expect(onAfterValidate).not.toHaveBeenCalled();\n      done();\n    }, 100);\n  });\n\n  it('should leave cell invalid if editing has been canceled', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id',\n          validator(value, cb) {\n            cb(false);\n          } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'foo');\n\n    setTimeout(() => {\n      expect(getCellMeta(0, 0).valid).toBe(false);\n\n      selectCell(0, 0);\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n      keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n      expect(getCellMeta(0, 0).valid).toBe(false);\n      done();\n    }, 200);\n  });\n\n  it('should leave cell invalid if editing has been canceled when columns is a function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(false);\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n\n        } else if (column === 2) {\n          colMeta = { data: 'lastName' };\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'foo');\n\n    setTimeout(() => {\n      expect(getCellMeta(0, 0).valid).toBe(false);\n\n      selectCell(0, 0);\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n      keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n      expect(getCellMeta(0, 0).valid).toBe(false);\n      done();\n    }, 200);\n  });\n\n  it('should open an appropriate editor after cell value is valid again', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {\n          data: 'id',\n          validator(value, cb) {\n            // eslint-disable-next-line\n            cb(value == parseInt(value, 10));\n          },\n          allowInvalid: false\n        },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(0, 0);\n\n    let activeEditor = hot.getActiveEditor();\n\n    expect(activeEditor.row).toEqual(0);\n    expect(activeEditor.col).toEqual(0);\n\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n    activeEditor.setValue('foo');\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes, close editor\n\n    setTimeout(() => {\n      onAfterValidate.calls.reset();\n      activeEditor = hot.getActiveEditor();\n\n      expect(activeEditor.isOpened()).toBe(true); // value is invalid, so editor stays opened\n      expect(activeEditor.row).toEqual(0);\n      expect(activeEditor.col).toEqual(0);\n\n      activeEditor.setValue(2);\n\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes and move to cell below (row: 1, col: ś0)\n    }, 200);\n\n    setTimeout(() => {\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n\n      activeEditor = hot.getActiveEditor();\n      expect(activeEditor.row).toEqual(1);\n      expect(activeEditor.col).toEqual(0);\n      done();\n    }, 400);\n  });\n\n  it('should open an appropriate editor after cell value is valid again when columns is a function', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              // eslint-disable-next-line\n              cb(value == parseInt(value, 10));\n            },\n            allowInvalid: false\n          };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n\n        } else if (column === 2) {\n          colMeta = { data: 'lastName' };\n\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(0, 0);\n\n    let activeEditor = hot.getActiveEditor();\n\n    expect(activeEditor.row).toEqual(0);\n    expect(activeEditor.col).toEqual(0);\n\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n    activeEditor.setValue('foo');\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes, close editor\n\n    setTimeout(() => {\n      onAfterValidate.calls.reset();\n      activeEditor = hot.getActiveEditor();\n\n      expect(activeEditor.isOpened()).toBe(true); // value is invalid, so editor stays opened\n      expect(activeEditor.row).toEqual(0);\n      expect(activeEditor.col).toEqual(0);\n\n      activeEditor.setValue(2);\n\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes and move to cell below (row: 1, col: ś0)\n    }, 200);\n\n    setTimeout(() => {\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n\n      activeEditor = hot.getActiveEditor();\n      expect(activeEditor.row).toEqual(1);\n      expect(activeEditor.col).toEqual(0);\n      done();\n    }, 400);\n  });\n\n  it('should call the validation callback only once, when using the validateCells method on a mixed set of data', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    const hot = handsontable({\n      data: [\n        { id: 'sth', name: 'Steve' },\n        { id: 'sth else', name: 'Bob' }\n      ],\n      columns: [\n        {\n          data: 'id',\n          validator(value, cb) {\n            cb(value === parseInt(value, 10));\n          }\n        },\n        { data: 'name' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      expect(onValidate.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call the validation callback only once, when using the validateRows method on a mixed set of data', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    const hot = handsontable({\n      data: [\n        { id: 'sth', name: 'Steve' },\n        { id: 'sth else', name: 'Bob' }\n      ],\n      columns: [\n        {\n          data: 'id',\n          validator(value, cb) {\n            cb(value === parseInt(value, 10));\n          }\n        },\n        { data: 'name' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateRows([0, 1], onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      expect(onValidate.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call the validation callback only once, when using the validateColumns method on a mixed set of data', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    const hot = handsontable({\n      data: [\n        { id: 'sth', name: 'Steve' },\n        { id: 'sth else', name: 'Bob' }\n      ],\n      columns: [\n        {\n          data: 'id',\n          validator(value, cb) {\n            cb(value === parseInt(value, 10));\n          }\n        },\n        { data: 'name' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateColumns([0, 1], onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      expect(onValidate.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call the validation callback only once, when using the validateCells method on a mixed set of data and when columns is a function', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    const hot = handsontable({\n      data: [\n        { id: 'sth', name: 'Steve' },\n        { id: 'sth else', name: 'Bob' }\n      ],\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(value === parseInt(value, 10));\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      expect(onValidate.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call the validation callback only once, when using the validateRows method on a mixed set of data and when columns is a function', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    const hot = handsontable({\n      data: [\n        { id: 'sth', name: 'Steve' },\n        { id: 'sth else', name: 'Bob' }\n      ],\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(value === parseInt(value, 10));\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateRows([0, 1], onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      expect(onValidate.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call the validation callback only once, when using the validateColumns method on a mixed set of data and when columns is a function', (done) => {\n    const onValidate = jasmine.createSpy('onValidate');\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    const hot = handsontable({\n      data: [\n        { id: 'sth', name: 'Steve' },\n        { id: 'sth else', name: 'Bob' }\n      ],\n      columns(column) {\n        let colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(value === parseInt(value, 10));\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = { data: 'name' };\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateColumns([0, 1], onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      expect(onValidate.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_validate.spec.js","describe('Core_view', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should focus cell after viewport is scrolled using down arrow', () => {\n    spec().$container[0].style.width = '400px';\n    spec().$container[0].style.height = '60px';\n\n    handsontable({\n      startRows: 20\n    });\n    selectCell(0, 0);\n\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n\n    expect(getSelected()).toEqual([[4, 0, 4, 0]]);\n\n    keyDown('enter');\n\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should scroll viewport if selected cell is out of the viewport and renderAllRows is enabled', () => {\n    spec().$container[0].style.width = '400px';\n    spec().$container[0].style.height = '50px';\n    spec().$container[0].style.overflow = 'hidden';\n\n    const hot = handsontable({\n      startRows: 20,\n      renderAllRows: true,\n    });\n\n    selectCell(0, 0);\n\n    const scrollableElement = hot.view.wt.wtOverlays.topOverlay.mainTableScrollableElement;\n    const initialScrollTop = scrollableElement.scrollTop;\n\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n\n    expect(scrollableElement.scrollTop).toBeGreaterThan(initialScrollTop);\n  });\n\n  it('should not render \"undefined\" class name', () => {\n    spec().$container[0].style.width = '501px';\n    spec().$container[0].style.height = '100px';\n    spec().$container[0].style.overflow = 'hidden';\n\n    handsontable({\n      startRows: 10,\n      startCols: 5,\n      colWidths: [47, 47, 47, 47, 47],\n      rowHeaders: true,\n      colHeaders: true,\n      stretchH: 'all'\n    });\n\n    selectCell(0, 0);\n\n    expect(spec().$container.find('.undefined').length).toBe(0);\n  });\n\n  it('should scroll viewport when partially visible cell is clicked', () => {\n    spec().$container[0].style.width = '400px';\n    spec().$container[0].style.height = '60px';\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 3),\n      height: 60\n    });\n\n    const htCore = getHtCore();\n    const scrollTop = hot.rootElement.querySelector('.wtHolder').scrollTop;\n\n    expect(scrollTop).toBe(0);\n    expect(spec().$container.height()).toEqual(60);\n    expect(spec().$container.find('.wtHolder .wtHider').height()).toBeGreaterThan(60);\n\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    htCore.find('tr:eq(3) td:eq(0)').simulate('mousedown');\n\n    expect(hot.rootElement.querySelector('.wtHolder').scrollTop).toBeGreaterThan(scrollTop);\n    expect(getSelected()).toEqual([[3, 0, 3, 0]]);\n  });\n\n  it('should scroll viewport without cell selection', () => {\n    spec().$container[0].style.width = '400px';\n\n    const hot1 = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 20),\n      height: 100\n    });\n\n    hot1.scrollViewportTo(10, 10);\n\n    const wtHolder = spec().$container.find('.ht_master .wtHolder');\n\n    expect(wtHolder[0].scrollTop).toEqual(230);\n    expect(wtHolder[0].scrollLeft).toEqual(500);\n\n  });\n\n  it('should not throw error while scrolling viewport to 0, 0 (empty data)', () => {\n    spec().$container[0].style.width = '400px';\n\n    const hot1 = handsontable({\n      data: [],\n      height: 100\n    });\n\n    expect(() => {\n      hot1.view.scrollViewport({ row: 0, col: 0 });\n    }).not.toThrow();\n  });\n\n  it('should throw error while scrolling viewport below 0 (empty data)', () => {\n    spec().$container[0].style.width = '400px';\n\n    const hot1 = handsontable({\n      data: [],\n      height: 100\n    });\n\n    expect(hot1.view.scrollViewport({ row: -1, col: 0 })).toBe(false);\n    expect(hot1.view.scrollViewport({ row: 0, col: -1 })).toBe(false);\n    expect(hot1.view.scrollViewport({ row: -1, col: -1 })).toBe(false);\n  });\n\n  it('should scroll viewport, respecting fixed rows', () => {\n    spec().$container[0].style.width = '400px';\n    spec().$container[0].style.height = '60px';\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 9),\n      fixedRowsTop: 1,\n      height: 60\n    });\n\n    const htCore = getHtCore();\n    const scrollTop = hot.rootElement.querySelector('.wtHolder').scrollTop;\n\n    expect(scrollTop).toBe(0);\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(0) td:eq(1)').html()).toEqual('B1');\n    expect(htCore.find('tr:eq(0) td:eq(2)').html()).toEqual('C1');\n\n    selectCell(0, 0);\n\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n\n    expect(hot.rootElement.querySelector('.wtHolder').scrollTop).toBeGreaterThan(scrollTop);\n  });\n\n  it('should enable to change fixedRowsTop with updateSettings', () => {\n    spec().$container[0].style.width = '400px';\n    spec().$container[0].style.height = '60px';\n\n    const HOT = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 9),\n      fixedRowsTop: 1,\n      width: 200,\n      height: 100\n    });\n\n    selectCell(0, 0);\n\n    const htCore = getHtCore();\n    const topClone = getTopClone();\n\n    expect(topClone.find('tr').length).toEqual(1);\n    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n    expect(htCore.find('tr:eq(3) td:eq(0)').html()).toEqual('A4');\n\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n\n    expect(topClone.find('tr').length).toEqual(1);\n    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n\n    HOT.updateSettings({\n      fixedRowsTop: 2\n    });\n\n    expect(topClone.find('tr').length).toEqual(2);\n    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(topClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n    expect(htCore.find('tr:eq(3) td:eq(0)').html()).toEqual('A4');\n  });\n\n  it('should scroll viewport, respecting fixed columns', () => {\n    spec().$container[0].style.width = '200px';\n    spec().$container[0].style.height = '100px';\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 9),\n      fixedColumnsLeft: 1\n    });\n\n    const htCore = getHtCore();\n    const leftClone = spec().$container.find('.ht_clone_left');\n\n    expect(leftClone.find('tr:eq(0) td').length).toEqual(1);\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    selectCell(0, 3);\n\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n  });\n\n  it('should enable to change fixedColumnsLeft with updateSettings', () => {\n    spec().$container[0].style.width = '200px';\n    spec().$container[0].style.height = '100px';\n\n    const HOT = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 9),\n      fixedColumnsLeft: 1\n    });\n\n    selectCell(0, 0);\n\n    const leftClone = spec().$container.find('.ht_clone_left');\n\n    expect(leftClone.find('tr:eq(0) td').length).toEqual(1);\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    selectCell(0, 0);\n\n    HOT.updateSettings({\n      fixedColumnsLeft: 2\n    });\n\n    expect(leftClone.find('tr:eq(0) td').length).toEqual(2);\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(0) td:eq(1)').html()).toEqual('B1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(1) td:eq(1)').html()).toEqual('B2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n    expect(leftClone.find('tr:eq(2) td:eq(1)').html()).toEqual('B3');\n\n  });\n\n  it('should not scroll viewport when last cell is clicked', () => {\n    handsontable({\n      startRows: 40\n    });\n\n    $(window).scrollTop(10000);\n\n    const lastScroll = $(window).scrollTop();\n\n    render(); // renders synchronously so we don't have to put stuff in waits/runs\n    selectCell(39, 0);\n\n    expect($(window).scrollTop()).toEqual(lastScroll);\n\n    keyDown('arrow_right');\n\n    expect(getSelected()).toEqual([[39, 1, 39, 1]]);\n    expect($(window).scrollTop()).toEqual(lastScroll);\n  });\n\n  it('should not shrink table when width and height is not specified for container', async() => {\n    spec().$container[0].style.overflow = 'hidden';\n    spec().$container.wrap('<div style=\"width: 50px;\"></div>');\n    handsontable({\n      startRows: 10,\n      startCols: 10\n    });\n\n    await sleep(250);\n\n    const initHeight = spec().$container.height();\n\n    await sleep(250);\n\n    expect(spec().$container.height()).toEqual(initHeight);\n  });\n\n  it('should allow height to be a number', () => {\n    handsontable({\n      startRows: 10,\n      startCols: 10,\n      height: 107\n    });\n\n    expect(spec().$container.height()).toEqual(107);\n  });\n\n  it('should allow height to be a function', () => {\n    handsontable({\n      startRows: 10,\n      startCols: 10,\n      height() {\n        return 107;\n      }\n    });\n\n    expect(spec().$container.height()).toEqual(107);\n  });\n\n  it('should allow width to be a number', () => {\n    handsontable({\n      startRows: 10,\n      startCols: 10,\n      width: 107,\n    });\n\n    expect(spec().$container.width()).toEqual(107); // rootElement is full width but this should do the trick\n  });\n\n  it('should allow width to be a function', () => {\n    handsontable({\n      startRows: 10,\n      startCols: 10,\n      width() {\n        return 107;\n      }\n    });\n\n    expect(spec().$container.width()).toEqual(107); // rootElement is full width but this should do the trick\n  });\n\n  it('should fire beforeRender event after table has been scrolled', async() => {\n    spec().$container[0].style.width = '400px';\n    spec().$container[0].style.height = '60px';\n    spec().$container[0].style.overflow = 'hidden';\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(100, 3)\n    });\n\n    const beforeRenderCallback = jasmine.createSpy('beforeRenderCallback');\n\n    hot.addHook('beforeRender', beforeRenderCallback);\n    spec().$container.find('.ht_master .wtHolder').scrollTop(1000);\n\n    await sleep(200);\n\n    expect(beforeRenderCallback.calls.count()).toBe(1);\n  });\n\n  it('should fire afterRender event after table has been scrolled', async() => {\n    spec().$container[0].style.width = '400px';\n    spec().$container[0].style.height = '60px';\n    spec().$container[0].style.overflow = 'hidden';\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 3)\n    });\n\n    const afterRenderCallback = jasmine.createSpy('afterRenderCallback');\n    hot.addHook('afterRender', afterRenderCallback);\n    spec().$container.find('.ht_master .wtHolder').first().scrollTop(1000);\n\n    await sleep(200);\n\n    expect(afterRenderCallback.calls.count()).toBe(1);\n  });\n\n  it('should fire afterRender event after table physically rendered', async() => {\n    spec().$container[0].style.width = '400px';\n    spec().$container[0].style.height = '60px';\n    spec().$container[0].style.overflow = 'hidden';\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 3)\n    });\n\n    hot.addHook('afterRender', () => {\n      hot.view.wt.wtTable.holder.style.overflow = 'scroll';\n      hot.view.wt.wtTable.holder.style.width = '220px';\n    });\n    spec().$container.find('.ht_master .wtHolder').first().scrollTop(1000);\n\n    await sleep(100);\n    // after afterRender hook triggered element style shouldn't changed\n    expect(hot.view.wt.wtTable.holder.style.overflow).toBe('scroll');\n    expect(hot.view.wt.wtTable.holder.style.width).toBe('220px');\n  });\n\n  // TODO fix these tests - https://github.com/handsontable/handsontable/issues/1559\n  describe('maximumVisibleElementWidth', () => {\n    it('should return maximum width until right edge of the viewport', () => {\n      const hot = handsontable({\n        startRows: 2,\n        startCols: 10,\n        width: 100,\n        height: 100,\n      });\n\n      expect(hot.view.maximumVisibleElementWidth(0)).toEqual(100);\n    });\n\n    it('should return maximum width until right edge of the viewport (excluding the scrollbar)', () => {\n      const hot = handsontable({\n        startRows: 10,\n        startCols: 10,\n        width: 100,\n        height: 100,\n      });\n\n      expect(hot.view.maximumVisibleElementWidth(200)).toBeLessThan(100);\n    });\n  });\n\n  describe('maximumVisibleElementHeight', () => {\n    it('should return maximum height until bottom edge of the viewport', () => {\n      const hot = handsontable({\n        startRows: 10,\n        startCols: 2,\n        width: 120,\n        height: 100,\n      });\n\n      expect(hot.view.maximumVisibleElementHeight(0)).toEqual(100);\n    });\n\n    it('should return maximum height until bottom edge of the viewport (excluding the scrollbar)', () => {\n      const hot = handsontable({\n        startRows: 10,\n        startCols: 10,\n        width: 120,\n        height: 100,\n      });\n\n      expect(hot.view.maximumVisibleElementHeight()).toBeLessThan(100);\n    });\n  });\n\n  describe('fixed column row heights', () => {\n    it('should be the same as the row heights in the main table', () => {\n      const hot = handsontable({\n        data: [['A', 'B', 'C', 'D'], ['a', 'b', 'c\\nc', 'd'], ['aa', 'bb', 'cc', 'dd']],\n        startRows: 3,\n        startCols: 4,\n        fixedColumnsLeft: 2,\n      });\n\n      expect(hot.getCell(1, 2).clientHeight).toEqual(hot.getCell(1, 1).clientHeight);\n\n      hot.setDataAtCell(1, 2, 'c');\n\n      expect(hot.getCell(1, 2).clientHeight).toEqual(hot.getCell(1, 1).clientHeight);\n    });\n\n    it('should be the same as the row heights in the main table (after scroll)', () => {\n      const myData = Handsontable.helper.createSpreadsheetData(20, 4);\n      myData[1][3] = 'very\\nlong\\ntext';\n      myData[5][3] = 'very\\nlong\\ntext';\n      myData[10][3] = 'very\\nlong\\ntext';\n      myData[15][3] = 'very\\nlong\\ntext';\n\n      const hot = handsontable({\n        data: myData,\n        startRows: 3,\n        startCols: 4,\n        fixedRowsTop: 2,\n        fixedColumnsLeft: 2,\n        width: 200,\n        height: 200\n      });\n\n      const mainHolder = hot.view.wt.wtTable.holder;\n\n      $(mainHolder).scrollTop(200);\n      hot.render();\n\n      const masterTD = spec().$container.find('.ht_master tbody tr:eq(5) td:eq(1)')[0];\n      const cloneTD = spec().$container.find('.ht_clone_left tbody tr:eq(5) td:eq(1)')[0];\n\n      expect(cloneTD.clientHeight).toEqual(masterTD.clientHeight);\n    });\n\n    it('should be the same as the row heights in the main table (after scroll, in corner)', () => {\n      const myData = Handsontable.helper.createSpreadsheetData(20, 4);\n      myData[1][3] = 'very\\nlong\\ntext';\n      myData[5][3] = 'very\\nlong\\ntext';\n      myData[10][3] = 'very\\nlong\\ntext';\n      myData[15][3] = 'very\\nlong\\ntext';\n\n      const hot = handsontable({\n        data: myData,\n        startRows: 3,\n        startCols: 4,\n        fixedRowsTop: 2,\n        fixedColumnsLeft: 2,\n        width: 200,\n        height: 200\n      });\n\n      const rowHeight = hot.getCell(1, 3).clientHeight;\n      const mainHolder = hot.view.wt.wtTable.holder;\n\n      expect(spec().$container.find('.ht_clone_top_left_corner tbody tr:eq(1) td:eq(1)')[0].clientHeight).toEqual(rowHeight);\n\n      $(mainHolder).scrollTop(200);\n      hot.render();\n\n      expect(spec().$container.find('.ht_clone_top_left_corner tbody tr:eq(1) td:eq(1)')[0].clientHeight).toEqual(rowHeight);\n    });\n  });\n\n  describe('fixed column widths', () => {\n    it('should set the columns width correctly after changes made during updateSettings', () => {\n      const hot = handsontable({\n        startRows: 2,\n        fixedColumnsLeft: 2,\n        columns: [{\n          width: 50\n        }, {\n          width: 80\n        }, {\n          width: 110\n        }, {\n          width: 140\n        }, {\n          width: 30\n        }, {\n          width: 30\n        }, {\n          width: 30\n        }]\n      });\n\n      const leftClone = spec().$container.find('.ht_clone_left');\n\n      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);\n\n      hot.updateSettings({\n        manualColumnMove: [2, 0, 1],\n        fixedColumnsLeft: 1\n      });\n\n      expect(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0]).toBe(undefined);\n\n      hot.updateSettings({\n        manualColumnMove: false,\n        fixedColumnsLeft: 2\n      });\n\n      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);\n    });\n\n    it('should set the columns width correctly after changes made during updateSettings when columns is a function', () => {\n      const hot = handsontable({\n        startCols: 7,\n        startRows: 2,\n        fixedColumnsLeft: 2,\n        columns(column) {\n          let colMeta = {};\n\n          if (column === 0) {\n            colMeta.width = 50;\n\n          } else if (column === 1) {\n            colMeta.width = 80;\n\n          } else if (column === 2) {\n            colMeta.width = 110;\n\n          } else if (column === 3) {\n            colMeta.width = 140;\n\n          } else if ([4, 5, 6].indexOf(column) > -1) {\n            colMeta.width = 30;\n\n          } else {\n            colMeta = null;\n          }\n\n          return colMeta;\n        }\n      });\n\n      const leftClone = spec().$container.find('.ht_clone_left');\n\n      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);\n\n      hot.updateSettings({\n        manualColumnMove: [2, 0, 1],\n        fixedColumnsLeft: 1\n      });\n\n      expect(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0]).toBe(undefined);\n\n      hot.updateSettings({\n        manualColumnMove: false,\n        fixedColumnsLeft: 2\n      });\n\n      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);\n    });\n  });\n\n  describe('stretchH', () => {\n    it('should stretch all visible columns with the ratio appropriate to the container\\'s width', () => {\n      spec().$container[0].style.width = '300px';\n\n      const hot = handsontable({\n        startRows: 5,\n        startCols: 5,\n        rowHeaders: true,\n        colHeaders: true,\n        stretchH: 'all'\n      });\n      const rowHeaderWidth = hot.view.wt.wtViewport.getRowHeaderWidth();\n      let expectedCellWidth = (parseInt(spec().$container[0].style.width, 10) - rowHeaderWidth) / 5;\n\n      expect(getCell(0, 0).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 1).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 2).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 3).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 4).offsetWidth).toEqual(expectedCellWidth);\n\n      spec().$container[0].style.width = '';\n      spec().$container.wrap('<div class=\"temp_wrapper\" style=\"width:400px;\"></div>');\n      hot.render();\n\n      expectedCellWidth = (parseInt($('.temp_wrapper')[0].style.width, 10) - rowHeaderWidth) / 5;\n\n      expect(getCell(0, 0).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 1).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 2).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 3).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 4).offsetWidth).toEqual(expectedCellWidth);\n\n      spec().$container.unwrap();\n    });\n\n    it('should stretch all visible columns with overflow hidden', () => {\n      spec().$container[0].style.width = '501px';\n      spec().$container[0].style.height = '100px';\n      spec().$container[0].style.overflow = 'hidden';\n\n      handsontable({\n        startRows: 10,\n        startCols: 5,\n        colWidths: [47, 47, 47, 47, 47],\n        rowHeaders: true,\n        colHeaders: true,\n        stretchH: 'all'\n      });\n\n      const masterTH = spec().$container[0].querySelectorAll('.ht_master thead tr th');\n      const overlayTH = spec().$container[0].querySelectorAll('.ht_clone_top thead tr th');\n\n      expect(masterTH[0].offsetWidth).toEqual(50);\n      expect(overlayTH[0].offsetWidth).toEqual(50);\n\n      expect(masterTH[1].offsetWidth).toBeInArray([86, 87, 88, 90]);\n      expect(overlayTH[1].offsetWidth).toBeInArray([86, 87, 88, 90]); // if you get 90, it means it is calculated before scrollbars were applied, or show scroll on scrolling is enabled\n\n      expect(masterTH[2].offsetWidth).toEqual(overlayTH[2].offsetWidth);\n      expect(masterTH[3].offsetWidth).toEqual(overlayTH[3].offsetWidth);\n      expect(masterTH[4].offsetWidth).toEqual(overlayTH[4].offsetWidth);\n      expect(masterTH[5].offsetWidth).toEqual(overlayTH[5].offsetWidth);\n    });\n\n    it('should respect stretched widths returned in beforeStretchingColumnWidth hook', () => {\n      spec().$container[0].style.width = '501px';\n      spec().$container[0].style.height = '100px';\n      spec().$container[0].style.overflow = 'hidden';\n\n      const callbackSpy = jasmine.createSpy();\n\n      callbackSpy.and.callFake((width, column) => {\n        if (column === 1) {\n          return 150;\n        }\n\n        return width;\n      });\n\n      handsontable({\n        startRows: 2,\n        startCols: 5,\n        rowHeaders: true,\n        colHeaders: true,\n        stretchH: 'all',\n        beforeStretchingColumnWidth: callbackSpy\n      });\n\n      const $columnHeaders = spec().$container.find('thead tr:eq(0) th');\n\n      expect($columnHeaders.eq(0).width()).toEqual(48);\n      expect($columnHeaders.eq(1).width()).toEqual(73);\n      expect($columnHeaders.eq(2).width()).toEqual(149);\n      expect($columnHeaders.eq(3).width()).toEqual(74);\n      expect($columnHeaders.eq(4).width()).toEqual(74);\n\n      expect(callbackSpy).toHaveBeenCalled();\n      // First cycle to check what columns has permanent width\n      expect(callbackSpy.calls.argsFor(0)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(0)[1]).toBe(0);\n      expect(callbackSpy.calls.argsFor(1)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(1)[1]).toBe(1);\n      expect(callbackSpy.calls.argsFor(2)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(2)[1]).toBe(2);\n      expect(callbackSpy.calls.argsFor(3)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(3)[1]).toBe(3);\n      expect(callbackSpy.calls.argsFor(4)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(4)[1]).toBe(4);\n      // // Second cycle retrieve stretched width or permanent width\n      expect(callbackSpy.calls.argsFor(5)[0]).toBe(75);\n      expect(callbackSpy.calls.argsFor(6)[0]).toBe(75);\n      expect(callbackSpy.calls.argsFor(7)[0]).toBe(75);\n      expect(callbackSpy.calls.argsFor(8)[0]).toBe(75);\n      expect(callbackSpy.calls.argsFor(9)[0]).toBe(75);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Core_view.spec.js","describe('Handsontable.Dom', () => {\n\n  describe('offset', () => {\n    const $window = $(window);\n    const $forceScrollbar = $('<div id=\"forceScrollbar\"></div>').css({\n      position: 'absolute',\n      height: '4000px',\n      width: '4000px',\n      top: 0,\n      left: 0\n    });\n\n    beforeEach(function() {\n      $forceScrollbar.appendTo(document.body);\n      this.$div = $('<div id=\"test\"></div>').appendTo($forceScrollbar);\n      this.div = this.$div[0];\n    });\n\n    afterEach(function() {\n      this.$div.remove();\n      $forceScrollbar.remove();\n    });\n\n    describe('top', () => {\n      it('should return offset top with position absolute', function() {\n        this.$div.css({ position: 'absolute', top: 200 });\n\n        expect(Handsontable.dom.offset(this.div).top).toEqual(200);\n      });\n\n      it('should return offset top with position absolute & scrolled window', function() {\n        this.$div.css({ position: 'absolute', top: 200 });\n        $window.scrollTop(1900);\n\n        expect(Handsontable.dom.offset(this.div).top).toEqual(200);\n\n        $window.scrollTop(0);\n      });\n\n      it('should return offset top with position fixed', function() {\n        this.$div.css({ position: 'fixed', top: 200 });\n\n        expect(Handsontable.dom.offset(this.div).top).toEqual(200);\n      });\n\n      it('should return offset top with position fixed & scrolled window', function() {\n        this.$div.css({ position: 'fixed', top: 200 });\n        $window.scrollTop(1900);\n\n        expect(Handsontable.dom.offset(this.div).top).toEqual(2100); // this is the same jQuery offset returns\n\n        $window.scrollTop(0);\n      });\n    });\n\n    describe('left', () => {\n      it('should return offset left with position absolute', function() {\n        this.$div.css({ position: 'absolute', left: 200 });\n\n        expect(Handsontable.dom.offset(this.div).left).toEqual(200);\n      });\n\n      it('should return offset left with position absolute & scrolled window', function() {\n        this.$div.css({ position: 'absolute', left: 200 });\n        $window.scrollLeft(1900);\n\n        expect(Handsontable.dom.offset(this.div).left).toEqual(200);\n\n        $window.scrollLeft(0);\n      });\n\n      it('should return offset left with position fixed', function() {\n        this.$div.css({ position: 'fixed', left: 200 });\n\n        expect(Handsontable.dom.offset(this.div).left).toEqual(200);\n      });\n\n      it('should return offset left with position fixed & scrolled window', function() {\n        this.$div.css({ position: 'fixed', left: 200 });\n        $window.scrollLeft(1900);\n\n        expect(Handsontable.dom.offset(this.div).left).toEqual(2100); // this is the same jQuery offset returns\n\n        $window.scrollLeft(0);\n      });\n    });\n  });\n\n  describe('isVisible', () => {\n    it('should return true for appended table', () => {\n      const $table = $('<table></table>').appendTo('body');\n\n      expect(Handsontable.dom.isVisible($table[0])).toBe(true);\n\n      $table.remove();\n    });\n\n    it('should return false for not appended table', () => {\n      const $table = $('<table></table>');\n\n      expect(Handsontable.dom.isVisible($table[0])).toBe(false);\n\n      $table.remove();\n    });\n\n    it('should return false for table with `display: none`', () => {\n      const $table = $('<table style=\"display: none\"></table>').appendTo('body');\n\n      expect(Handsontable.dom.isVisible($table[0])).toBe(false);\n\n      $table.remove();\n    });\n\n    it('should return false for table with parent `display: none`', () => {\n      const $div = $('<div style=\"display: none\"></div>').appendTo('body');\n      const $table = $('<table></table>').appendTo($div);\n\n      expect(Handsontable.dom.isVisible($table[0])).toBe(false);\n\n      $table.remove();\n    });\n\n    it('should return false for something detached from DOM', () => {\n      const $table = $('<table><tr><td></td></tr></table>').appendTo('body');\n\n      const TD = $table.find('td')[0];\n      const TR = TD.parentNode;\n      expect(Handsontable.dom.isVisible(TD)).toBe(true);\n      TR.parentNode.removeChild(TR);\n      expect(Handsontable.dom.isVisible(TD)).toBe(false);\n\n      $table.remove();\n    });\n  });\n\n  describe('outerHeight', () => {\n    it('should return correct outerHeight for table', () => {\n      const $table = $('<table style=\"border-width: 0;\"><tbody><tr><td style=\"border: 1px solid black\"><div style=\"height: 30px\">test</div></td>' +\n                     '</tr></tbody></table>').appendTo('body');\n\n      expect(Handsontable.dom.outerHeight($table[0])).toBe(38); // this is according to current stylesheet\n      expect($table.outerHeight()).toBe(38); // jQuery check to confirm\n\n      $table.remove();\n    });\n\n    it('should return correct outerHeight for table (with caption)', () => {\n      const $table = $('<table style=\"border-width: 0;\"><caption style=\"padding: 0; margin:0\"><div style=\"height: 30px\">caption</div></caption><tbody>' +\n                     '<tr><td style=\"border: 1px solid black\"><div style=\"height: 30px\">test</div></td></tr></tbody></table>').appendTo('body');\n\n      expect(Handsontable.dom.outerHeight($table[0])).toBe(68); // this is according to current stylesheet\n\n      $table.remove();\n    });\n  });\n\n  it('should return correct offset for table cell (table with caption)', () => {\n    const $table = $('<table style=\"border-width: 0;\"><caption style=\"padding: 0; margin:0\"><div style=\"height: 30px\">caption</div></caption><tbody>' +\n                   '<tr><td style=\"border: 1px solid black\"><div style=\"height: 30px\">test</div></td></tr></tbody></table>').appendTo('body');\n\n    const tableOffset = Handsontable.dom.offset($table[0]);\n    const tdOffset = Handsontable.dom.offset($table.find('td')[0]);\n\n    expect(parseInt(tdOffset.left - tableOffset.left, 10)).toBeAroundValue(2); // this is according to current stylesheet\n    expect(parseInt(tdOffset.top - tableOffset.top, 10)).toBeAroundValue(32); // this is according to current stylesheet\n\n    $table.remove();\n  });\n\n  it('should return font size', () => {\n    const $html = $('<style>.bigText{font: 12px serif;}</style><div class=\"bigText\"><span id=\"testable\"></span></div>').appendTo('body');\n\n    const span = document.getElementById('testable');\n    const compStyle = Handsontable.dom.getComputedStyle(span);\n\n    expect(compStyle.fontSize).toBe('12px');\n\n    $html.remove();\n  });\n\n  it('should return top border width', () => {\n    const $html = $('<style>.redBorder{border: 10px solid red;}</style><div class=\"redBorder\" id=\"testable\"></div>').appendTo('body');\n\n    const div = document.getElementById('testable');\n    const compStyle = Handsontable.dom.getComputedStyle(div);\n\n    expect(compStyle.borderTopWidth).toBe('10px');\n\n    $html.remove();\n  });\n\n  it('should insert HTML properly', () => {\n    const $html = $('<div id=\"testable\"></div>').appendTo('body');\n    const text = '<span>test<br>test</span>';\n    const div = document.getElementById('testable');\n\n    Handsontable.dom.fastInnerHTML(div, text);\n    Handsontable.dom.fastInnerHTML(div, text);\n\n    expect(div.childNodes[0].childNodes.length).toEqual(3);\n\n    $html.remove();\n  });\n\n  it('should set the immediatePropagation properties properly for given event', () => {\n    const event = document.createEvent('MouseEvents');\n    event.initMouseEvent('mousedown', true, true, window, null, null, null, null, null, null, null, null, null, null, null);\n\n    Handsontable.dom.stopImmediatePropagation(event);\n\n    expect(event.isImmediatePropagationEnabled).toBe(false);\n\n    expect(Handsontable.dom.isImmediatePropagationStopped(event)).toBe(true);\n  });\n\n  describe('getScrollableElement', () => {\n    it('should return scrollable element with \\'scroll\\' value of \\'overflow\\', \\'overflowX\\' or \\'overflowY\\' property', () => {\n      const $html = $([\n        '<div style=\"overflow: scroll\"><span class=\"overflow\"></span></div>',\n        '<div style=\"overflow-x: scroll\"><span class=\"overflowX\"></span></div>',\n        '<div style=\"overflow-y: scroll\"><span class=\"overflowY\"></span></div>'\n      ].join('')).appendTo('body');\n\n      expect(Handsontable.dom.getScrollableElement($html.find('.overflow')[0])).toBe($html[0]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.overflowX')[0])).toBe($html[1]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.overflowY')[0])).toBe($html[2]);\n\n      $html.remove();\n    });\n\n    it('should return scrollable element with \\'auto\\' value of \\'overflow\\' or \\'overflowY\\' property', () => {\n      const $html = $([\n        '<div style=\"overflow: auto; height: 50px;\"><div class=\"knob\" style=\"height: 100px\"></div></div>',\n        '<div style=\"overflow-y: auto; height: 50px;\"><div class=\"knob\" style=\"height: 100px\"></div></div>',\n        '<div style=\"overflow-y: auto; height: 50px;\">',\n        '<div>',\n        '<div class=\"knob\" style=\"height: 100px;\"></div>',\n        '</div>',\n        '</div>'\n      ].join('')).appendTo('body');\n\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe($html[0]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe($html[1]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[2])).toBe($html[2]);\n\n      $html.remove();\n    });\n\n    it('should return scrollable element with \\'auto\\' value of \\'overflow\\' or \\'overflowX\\' property', () => {\n      const $html = $([\n        '<div style=\"overflow: auto; width: 50px; height: 10px\"><div class=\"knob\" style=\"width: 100px; height: 5px\"></div></div>',\n        '<div style=\"overflow-x: auto; width: 50px; height: 10px\"><div class=\"knob\" style=\"width: 100px; height: 5px\"></div></div>',\n        '<div style=\"overflow-x: auto; width: 50px; height: 10px\">',\n        '<div>',\n        '<div class=\"knob\" style=\"width: 100px; height: 5px\"></div>',\n        '</div>',\n        '</div>'\n      ].join('')).appendTo('body');\n\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe($html[0]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe($html[1]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[2])).toBe($html[2]);\n\n      $html.remove();\n    });\n\n    it('should return window object as scrollable element', () => {\n      const $html = $([\n        '<div style=\"overflow: hidden; width: 50px; height: 10px\"><div class=\"knob\" style=\"width: 100px; height: 5px\"></div></div>',\n        '<div style=\"width: 50px; height: 10px\"><div class=\"knob\" style=\"width: 100px; height: 5px\"></div></div>'\n      ].join('')).appendTo('body');\n\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe(window);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe(window);\n\n      $html.remove();\n    });\n  });\n\n  //\n  // Handsontable.dom.isChildOfWebComponentTable\n  //\n  describe('isChildOfWebComponentTable', () => {\n    it('should return correct Boolean value depending on whether an element exists in `hot-table` or not', () => {\n      // skip if browser not support Shadow DOM natively\n      if (!document.createElement('div').createShadowRoot) {\n        // Fix for \"no exceptations\" warnings\n        expect(true).toBe(true);\n\n        return;\n      }\n      const hotTable = document.createElement('hot-table');\n      const outsideDiv = document.createElement('div');\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(hotTable)).toBe(true);\n      expect(Handsontable.dom.isChildOfWebComponentTable(outsideDiv)).toBe(false);\n\n      const hotTableDiv = document.createElement('div');\n      hotTable.appendChild(hotTableDiv);\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(hotTableDiv)).toBe(true);\n\n      const fragment = document.createDocumentFragment();\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(fragment)).toBe(false);\n\n      const myElement = document.createElement('my-element');\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(myElement)).toBe(false);\n\n      const shadowRoot = myElement.createShadowRoot();\n      const insideDiv = shadowRoot.appendChild(document.createElement('div'));\n      hotTable.createShadowRoot().appendChild(myElement);\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(myElement)).toBe(true);\n      expect(Handsontable.dom.isChildOfWebComponentTable(insideDiv)).toBe(true);\n    });\n  });\n\n  //\n  // Handsontable.dom.polymerWrap\n  //\n  describe('polymerWrap', () => {\n    it('should wrap element into polymer wrapper if exists', () => {\n      expect(Handsontable.dom.polymerWrap(1)).toBe(1);\n\n      window.wrap = function() { return 'wrapped'; };\n      window.Polymer = {};\n\n      expect(Handsontable.dom.polymerWrap(1)).toBe('wrapped');\n\n      // Test https://github.com/handsontable/handsontable/issues/2283\n      window.wrap = document.createElement('div');\n\n      expect(Handsontable.dom.polymerWrap(1)).toBe(1);\n\n      delete window.wrap;\n      delete window.Polymer;\n    });\n  });\n\n  //\n  // Handsontable.dom.polymerUnwrap\n  //\n  describe('polymerUnwrap', () => {\n    it('should unwrap element from polymer wrapper if exists', () => {\n      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe('wrapped');\n\n      window.unwrap = function() { return 1; };\n      window.Polymer = {};\n\n      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe(1);\n\n      window.unwrap = document.createElement('div');\n\n      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe('wrapped');\n\n      delete window.unwrap;\n      delete window.Polymer;\n    });\n  });\n\n  //\n  // Handsontable.dom.addClass\n  //\n  describe('addClass', () => {\n    it('should add class names as string to an element', () => {\n      const element = document.createElement('div');\n\n      expect(element.className).toBe('');\n\n      Handsontable.dom.addClass(element, 'test');\n\n      expect(element.className).toBe('test');\n\n      Handsontable.dom.addClass(element, 'test test1 test2');\n\n      expect(element.className).toBe('test test1 test2');\n\n      Handsontable.dom.addClass(element, 'test3');\n\n      expect(element.className).toBe('test test1 test2 test3');\n\n      Handsontable.dom.addClass(element, '');\n\n      expect(element.className).toBe('test test1 test2 test3');\n    });\n\n    it('should add class names as array to an element', () => {\n      const element = document.createElement('div');\n\n      expect(element.className).toBe('');\n\n      Handsontable.dom.addClass(element, ['test']);\n\n      expect(element.className).toBe('test');\n\n      Handsontable.dom.addClass(element, ['test1', 'test2', 'test3']);\n\n      expect(element.className).toBe('test test1 test2 test3');\n\n      Handsontable.dom.addClass(element, 'test4');\n\n      expect(element.className).toBe('test test1 test2 test3 test4');\n\n      Handsontable.dom.addClass(element, '');\n\n      expect(element.className).toBe('test test1 test2 test3 test4');\n    });\n  });\n\n  //\n  // Handsontable.dom.removeClass\n  //\n  describe('removeClass', () => {\n    it('should remove class names as string from an element', () => {\n      const element = document.createElement('div');\n\n      element.className = 'test test1 test2 test3 test4';\n\n      Handsontable.dom.removeClass(element, 'not-exists');\n\n      expect(element.className).toBe('test test1 test2 test3 test4');\n\n      Handsontable.dom.removeClass(element, 'test');\n\n      expect(element.className).toBe('test1 test2 test3 test4');\n\n      Handsontable.dom.removeClass(element, 'test test1 test4');\n\n      expect(element.className).toBe('test2 test3');\n\n      Handsontable.dom.removeClass(element, '');\n\n      expect(element.className).toBe('test2 test3');\n    });\n\n    it('should remove class names as array from an element', () => {\n      const element = document.createElement('div');\n\n      element.className = 'test test1 test2 test3 test4';\n\n      Handsontable.dom.removeClass(element, ['not-exists']);\n\n      expect(element.className).toBe('test test1 test2 test3 test4');\n\n      Handsontable.dom.removeClass(element, ['test']);\n\n      expect(element.className).toBe('test1 test2 test3 test4');\n\n      Handsontable.dom.removeClass(element, ['test', 'test1', 'test4']);\n\n      expect(element.className).toBe('test2 test3');\n\n      Handsontable.dom.removeClass(element, ['test', '', '']);\n\n      expect(element.className).toBe('test2 test3');\n    });\n  });\n\n  //\n  // Handsontable.dom.hasClass\n  //\n  describe('hasClass', () => {\n    it('should checks if an element has passed class name', () => {\n      const element = document.createElement('div');\n\n      element.className = 'test test1 test2 test3 test4';\n\n      expect(Handsontable.dom.hasClass(element, 'not-exists')).toBe(false);\n      expect(Handsontable.dom.hasClass(element, 'test3')).toBe(true);\n      expect(Handsontable.dom.hasClass(element, 'test')).toBe(true);\n      expect(Handsontable.dom.hasClass(element, '')).toBe(false);\n    });\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Dom.spec.js","describe('Performance', () => {\n  const id = 'testContainer';\n\n  // this is a test suite to test if there are no redundant operations\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should call renderer once for one cell (fixed column width)', () => {\n    let count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colWidths: 100,\n      rowHeights: 23,\n      renderer(...args) {\n        Handsontable.renderers.TextRenderer.apply(this, args);\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(1); // only for master table\n  });\n\n  it('should call renderer twice for one cell (auto column width)', () => {\n    let count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      rowHeights: 23,\n      renderer(...args) {\n        Handsontable.renderers.TextRenderer.apply(this, args);\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(2); // 1 for autoColumnSize, 1 for actual cell render\n  });\n\n  it('should call renderer twice for one cell (auto row height)', () => {\n    let count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colWidths: 50,\n      renderer(...args) {\n        Handsontable.renderers.TextRenderer.apply(this, args);\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(1); // 1 for actual cell render (colWidths prevent autoColumnSize to enable)\n  });\n\n  it('should call renderer triple times for one cell (auto row height, auto column width)', () => {\n    let count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      autoRowSize: true,\n      autoColumnSize: true,\n      renderer(...args) {\n        Handsontable.renderers.TextRenderer.apply(this, args);\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(3); // 1 for autoColumnSize, 1 for autoRowSize, 1 for actual cell render\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto column width, without overlays)', () => {\n    let count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      rowHeights: 23,\n      beforeGetCellMeta() {\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(8);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto row height, without overlays)', () => {\n    let count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colWidths: 50,\n      beforeGetCellMeta() {\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(5);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto column width, with left overlay)', () => {\n    let count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colHeaders: true,\n      rowHeights: 23,\n      beforeGetCellMeta() {\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(9);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto row height, with left overlay)', () => {\n    let count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colHeaders: true,\n      colWidths: 50,\n      beforeGetCellMeta() {\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(6);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto column width, with top overlay)', () => {\n    let count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      rowHeaders: true,\n      rowHeights: 23,\n      beforeGetCellMeta() {\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(8);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto row height, with top overlay)', () => {\n    let count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      rowHeaders: true,\n      colWidths: 50,\n      beforeGetCellMeta() {\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(5);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto column width, with all overlays)', () => {\n    let count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colHeaders: true,\n      rowHeaders: true,\n      rowHeights: 23,\n      beforeGetCellMeta() {\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(9);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto row height, with all overlays)', () => {\n    let count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colHeaders: true,\n      rowHeaders: true,\n      colWidths: 50,\n      beforeGetCellMeta() {\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(6);\n  });\n\n  it('should call renderer twice for each cell (auto column width)', () => {\n    let count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      rowHeights: 23,\n      autoColumnSize: true,\n      renderer(...args) {\n        Handsontable.renderers.TextRenderer.apply(this, args);\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(28);\n  });\n\n  it('should call renderer twice for each cell (auto row height)', () => {\n    let count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      colWidths: 50,\n      autoRowSize: true,\n      renderer(...args) {\n        Handsontable.renderers.TextRenderer.apply(this, args);\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(28); // 16 in main table and 4 rows for autoRowSize\n  });\n\n  it('should call renderer twice for each cell (auto row height, auto column width)', () => {\n    let count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      autoRowSize: true,\n      autoColumnSize: true,\n      renderer(...args) {\n        Handsontable.renderers.TextRenderer.apply(this, args);\n        count += 1;\n      }\n    });\n\n    expect(count).toEqual(40); // 16x2 in main table, 4 rows for autoRowSize and 4 cols for autoColumnSize\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/Performance.spec.js","describe('PluginHooks', () => {\n\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should add a many local hooks at init (as array)', () => {\n    const handler1 = jasmine.createSpy('handler1');\n    const handler2 = jasmine.createSpy('handler2');\n    const handler3 = jasmine.createSpy('handler3');\n\n    handsontable({\n      afterInit: [handler1, handler2, handler3]\n    });\n\n    expect(handler1).toHaveBeenCalled();\n    expect(handler2).toHaveBeenCalled();\n    expect(handler3).toHaveBeenCalled();\n  });\n\n  it('should remove a global hook', () => {\n    let test = 0;\n    const hook = function() {\n      test = 5;\n    };\n\n    Handsontable.hooks.add('afterInit', hook);\n    Handsontable.hooks.remove('afterInit', hook);\n\n    handsontable();\n\n    expect(test).toEqual(0);\n  });\n\n  it('should remove a local hook', () => {\n    let test = 0;\n    const hook = function() {\n      test = 5;\n    };\n\n    handsontable();\n\n    getInstance().addHook('afterInit', hook);\n    getInstance().removeHook('afterInit', hook);\n\n    expect(test).toEqual(0);\n  });\n\n  it('should run global hook', () => {\n    let test = 0;\n\n    Handsontable.hooks.add('afterInit', () => {\n      test = 5;\n    });\n    handsontable();\n    expect(test).toEqual(5);\n  });\n\n  it('should run local hook', () => {\n    let test = 0;\n\n    handsontable();\n\n    getInstance().addHook('myHook', () => {\n      test += 5;\n    });\n    getInstance().runHooks('myHook');\n    getInstance().runHooks('myHook');\n\n    expect(test).toEqual(10);\n  });\n\n  it('should run local hook once', () => {\n    let test = 0;\n\n    handsontable();\n\n    getInstance().addHookOnce('myHook', () => {\n      test += 5;\n    });\n    getInstance().runHooks('myHook');\n    getInstance().runHooks('myHook');\n\n    expect(test).toEqual(5);\n  });\n\n  it('should run all hooks', () => {\n    let test = 0;\n\n    Handsontable.hooks.add('afterInit', () => {\n      test += 5;\n    });\n\n    handsontable({\n      afterInit() {\n        test += 5;\n      }\n    });\n\n    expect(test).toEqual(10);\n  });\n\n  it('list of all avaliable plugin hooks should be exposed as a public method', () => {\n    const hooks = Handsontable.hooks.getRegistered(); // this is used in demo/callbacks.html\n\n    expect(hooks.indexOf('beforeInit')).toBeGreaterThan(-1);\n  });\n\n  it('should add a local hook with addHooks method', () => {\n    const hot1 = handsontable();\n\n    let test = 0;\n\n    hot1.addHook('myHook', () => {\n      test += 5;\n    });\n    hot1.runHooks('myHook');\n\n    expect(test).toEqual(5);\n  });\n\n  it('should remove a local hook with removeHook method', () => {\n    const hot1 = handsontable();\n\n    let test = 0;\n    const handler = function() {\n      test += 5;\n    };\n\n    hot1.addHook('myHook', handler);\n\n    hot1.runHooks('myHook');\n    hot1.runHooks('myHook');\n    expect(test).toEqual(10);\n\n    hot1.removeHook('myHook', handler);\n    hot1.runHooks('myHook');\n\n    expect(test).toEqual(10);\n  });\n\n  it('should add a local hook with addHookOnce method and run it just once', () => {\n    const hot1 = handsontable();\n\n    let test = 0;\n    const handler = function() {\n      test += 5;\n    };\n\n    hot1.addHookOnce('myHook', handler);\n\n    hot1.runHooks('myHook');\n    hot1.runHooks('myHook');\n    expect(test).toEqual(5);\n\n  });\n\n  it('should run hook with runHooks and return value', () => {\n    const hot = handsontable();\n\n    const handler = function() {\n      return 5;\n    };\n\n    hot.addHook('myHook', handler);\n\n    expect(hot.runHooks('myHook')).toEqual(5);\n  });\n\n  it('should run two \"once\" hooks in desired order', () => {\n    const hot = handsontable();\n    const arr = [];\n\n    hot.addHookOnce('myHook', () => {\n      arr.push(1);\n    });\n\n    hot.addHookOnce('myHook', () => {\n      arr.push(2);\n    });\n\n    hot.runHooks('myHook');\n\n    expect(arr).toEqual([1, 2]);\n  });\n\n  it('should execute two \"once\" hooks in desired order', () => {\n    const hot = handsontable();\n    const str = 'a';\n\n    hot.addHookOnce('myHook', value => `${value}b`);\n\n    hot.addHookOnce('myHook', value => `${value}c`);\n\n    expect(hot.runHooks('myHook', str)).toEqual('abc');\n  });\n\n  it('adding same hook twice should register it only once (without an error)', () => {\n    let i = 0;\n    const fn = function() {\n      i += 1;\n    };\n\n    const hot = handsontable({\n      afterOnCellMouseOver: fn\n    });\n\n    hot.getInstance().updateSettings({ afterOnCellMouseOver: fn });\n    hot.runHooks('afterOnCellMouseOver');\n\n    expect(i).toEqual(1);\n  });\n\n  it('should mark the hook callbacks added with Handsontable initialization', () => {\n    const fn = function() {};\n    const fn2 = function() {};\n\n    const hot = handsontable({\n      afterChange: fn\n    });\n\n    hot.addHook('afterChange', fn2);\n\n    expect(fn.initialHook).toEqual(true);\n    expect(fn2.initialHook).toEqual(void 0);\n  });\n\n  it('should mark the hook callbacks added using the updateSettings method', () => {\n    const fn = function() {};\n    const fn2 = function() {};\n\n    const hot = handsontable();\n\n    hot.updateSettings({\n      afterChange: fn\n    });\n\n    hot.addHook('afterChange', fn2);\n\n    expect(fn.initialHook).toEqual(true);\n    expect(fn2.initialHook).toEqual(void 0);\n  });\n\n  it('should replace the existing hook callbacks, if they\\'re updated using the updateSettings method (when there was a hook ' +\n     'already declared in the initialization)', () => {\n    const fn = function() {};\n    const fn2 = function() {};\n\n    const hot = handsontable({\n      afterGetCellMeta: fn\n    });\n\n    const initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;\n\n    hot.updateSettings({\n      afterGetCellMeta() {\n        return { a: 'another function' };\n      }\n    });\n\n    hot.updateSettings({\n      afterGetCellMeta() {\n        return { a: 'yet another function' };\n      }\n    });\n\n    hot.updateSettings({\n      afterGetCellMeta: fn2\n    });\n\n    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount);\n  });\n\n  it('should replace the existing hook callbacks, if they\\'re updated using the updateSettings method', () => {\n    const fn = function() {};\n    const fn2 = function() {};\n\n    const hot = handsontable();\n\n    hot.addHook('afterGetCellMeta', () => 'doesn\\'t matter 1');\n    hot.addHook('afterGetCellMeta', () => 'doesn\\'t matter 2');\n    hot.addHook('afterGetCellMeta', () => 'doesn\\'t matter 3');\n\n    hot.updateSettings({\n      afterGetCellMeta: fn\n    });\n\n    const initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;\n\n    hot.updateSettings({\n      afterGetCellMeta() {\n        return { a: 'another function' };\n      }\n    });\n\n    hot.updateSettings({\n      afterGetCellMeta() {\n        return { a: 'yet another function' };\n      }\n    });\n\n    hot.updateSettings({\n      afterGetCellMeta: fn2\n    });\n\n    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount);\n  });\n\n  it('should NOT replace existing hook callbacks, if the\\'re added using the addHook method', () => {\n    const fn = function() {};\n    const fn2 = function() {};\n\n    const hot = handsontable();\n\n    hot.updateSettings({\n      afterGetCellMeta: fn\n    });\n\n    const initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;\n\n    hot.addHook('afterGetCellMeta', () => ({ a: 'another function' }));\n\n    hot.addHook('afterGetCellMeta', () => ({ a: 'yet another function' }));\n\n    hot.addHook('afterGetCellMeta', fn2);\n\n    // should not add this one, as it's a duplicate\n    hot.addHook('afterGetCellMeta', fn);\n\n    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount + 3);\n  });\n\n  describe('controlling handler queue execution', () => {\n    it('should execute all handlers if none of them hasn\\'t skipped', () => {\n\n      const handler1 = jasmine.createSpy('handler1');\n      const handler2 = jasmine.createSpy('handler2');\n      const handler3 = jasmine.createSpy('handler3');\n\n      const hot = handsontable();\n\n      hot.addHook('fakeEvent', handler1);\n      hot.addHook('fakeEvent', handler2);\n      hot.addHook('fakeEvent', handler3);\n\n      expect(handler1).not.toHaveBeenCalled();\n      expect(handler2).not.toHaveBeenCalled();\n      expect(handler3).not.toHaveBeenCalled();\n\n      hot.runHooks('fakeEvent');\n\n      expect(handler1).toHaveBeenCalled();\n      expect(handler2).toHaveBeenCalled();\n      expect(handler3).toHaveBeenCalled();\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/PluginHooks.spec.js","describe('RowHeader', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should not show row headers by default', () => {\n    handsontable();\n\n    expect(spec().$container.find('tbody th').length).toEqual(0);\n  });\n\n  it('should show row headers if true', () => {\n    handsontable({\n      rowHeaders: true\n    });\n\n    expect(spec().$container.find('tbody th').length).toBeGreaterThan(0);\n  });\n\n  it('should show row headers numbered 1-10 by default', () => {\n    const startRows = 5;\n    handsontable({\n      startRows,\n      rowHeaders: true\n    });\n\n    const ths = getLeftClone().find('tbody th');\n    expect(ths.length).toEqual(startRows);\n    expect($.trim(ths.eq(0).text())).toEqual('1');\n    expect($.trim(ths.eq(1).text())).toEqual('2');\n    expect($.trim(ths.eq(2).text())).toEqual('3');\n    expect($.trim(ths.eq(3).text())).toEqual('4');\n    expect($.trim(ths.eq(4).text())).toEqual('5');\n  });\n\n  it('should show row headers with custom label', () => {\n    const startRows = 5;\n    handsontable({\n      startRows,\n      rowHeaders: ['First', 'Second', 'Third']\n    });\n\n    const ths = getLeftClone().find('tbody th');\n    expect(ths.length).toEqual(startRows);\n    expect($.trim(ths.eq(0).text())).toEqual('First');\n    expect($.trim(ths.eq(1).text())).toEqual('Second');\n    expect($.trim(ths.eq(2).text())).toEqual('Third');\n    expect($.trim(ths.eq(3).text())).toEqual('4');\n    expect($.trim(ths.eq(4).text())).toEqual('5');\n  });\n\n  it('should not show row headers if false', () => {\n    handsontable({\n      rowHeaders: false\n    });\n\n    expect(getLeftClone().find('tbody th').length).toEqual(0);\n  });\n\n  it('should hide rows headers after updateSetting', () => {\n    const hot = handsontable({\n      startRows: 5,\n      rowHeaders: true\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(5);\n    expect(getLeftClone().find('tbody th').length).toEqual(5);\n\n    hot.updateSettings({\n      rowHeaders: false\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(0);\n  });\n\n  it('should show rows headers after updateSettings', () => {\n    const hot = handsontable({\n      startRows: 5,\n      rowHeaders: false\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(0);\n    expect(getLeftClone().find('tbody th').length).toEqual(0);\n\n    hot.updateSettings({\n      rowHeaders: true\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(5);\n    expect(getLeftClone().find('tbody th').length).toEqual(5);\n  });\n\n  it('should show/hide rows headers after multiple updateSettings', () => {\n    const hot = handsontable({\n      startRows: 5,\n      rowHeaders: false\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(0);\n    expect(getLeftClone().find('tbody th').length).toEqual(0);\n\n    hot.updateSettings({\n      rowHeaders: true\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(5);\n    expect(getLeftClone().width()).toBeGreaterThan(0);\n\n    hot.updateSettings({\n      rowHeaders: false\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(0);\n    expect(getLeftClone().width()).toEqual(0);\n\n    hot.updateSettings({\n      rowHeaders: true\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(5);\n    expect(getLeftClone().width()).toBeGreaterThan(0);\n  });\n\n  it('should show new rows headers after updateSettings', () => {\n    const hot = handsontable({\n      startCols: 3,\n      rowHeaders: ['A', 'B', 'C']\n    });\n\n    const leftClone = getLeftClone();\n\n    expect(leftClone.find('tbody tr:eq(0) th:eq(0)').text()).toEqual('A');\n    expect(leftClone.find('tbody tr:eq(1) th:eq(0)').text()).toEqual('B');\n    expect(leftClone.find('tbody tr:eq(2) th:eq(0)').text()).toEqual('C');\n\n    hot.updateSettings({\n      rowHeaders: ['X', 'Y', 'Z']\n    });\n\n    expect(leftClone.find('tbody tr:eq(0) th:eq(0)').text()).toEqual('X');\n    expect(leftClone.find('tbody tr:eq(1) th:eq(0)').text()).toEqual('Y');\n    expect(leftClone.find('tbody tr:eq(2) th:eq(0)').text()).toEqual('Z');\n\n  });\n\n  it('should allow defining custom row header width using the rowHeaderWidth config option', () => {\n    handsontable({\n      startCols: 3,\n      rowHeaders: true,\n      rowHeaderWidth: 150\n    });\n\n    expect(spec().$container.find('th').eq(0).outerWidth()).toEqual(150);\n    expect(spec().$container.find('col').first().css('width')).toEqual('150px');\n  });\n\n  it('should allow defining custom column header heights using the columnHeaderHeight config option, when multiple column header levels are defined', () => {\n    const hot = handsontable({\n      startCols: 3,\n      rowHeaders: true,\n      rowHeaderWidth: [66, 96],\n      afterGetRowHeaderRenderers(array) {\n        array.push((index, TH) => {\n          TH.innerHTML = '';\n\n          const div = document.createElement('div');\n          const span = document.createElement('span');\n\n          div.className = 'relative';\n          span.className = 'rowHeader';\n\n          span.innerText = index;\n\n          div.appendChild(span);\n          TH.appendChild(div);\n        });\n\n        return array;\n      }\n    });\n    hot.render();\n\n    expect(spec().$container.find('.handsontable.ht_clone_left tr:nth-child(1) th:nth-child(1)').outerWidth()).toEqual(66);\n    expect(spec().$container.find('.handsontable.ht_clone_left tr:nth-child(1) th:nth-child(2)').outerWidth()).toEqual(96);\n\n    expect(spec().$container.find('col').first().css('width')).toEqual('66px');\n    expect(spec().$container.find('col').eq(1).css('width')).toEqual('96px');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/RowHeader.spec.js","describe('cellTypes', () => {\n  const id = 'testContainer';\n  const {\n    registerCellType,\n    getCellType,\n  } = Handsontable.cellTypes;\n  const {\n    getEditor,\n    BaseEditor,\n  } = Handsontable.editors;\n  const {\n    getRenderer,\n  } = Handsontable.renderers;\n  const {\n    getValidator,\n  } = Handsontable.validators;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should register custom cell type (with custom editor, renderer and validator)', async() => {\n    class MyEditor extends BaseEditor {\n      init() {\n        this.TEXTAREA = document.createElement('TEXTAREA');\n        this.TEXTAREA_PARENT = document.createElement('DIV');\n\n        this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);\n        this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);\n      }\n      getValue() {\n        return `**${this.TEXTAREA.value}**`;\n      }\n      setValue(value) {\n        this.TEXTAREA.value = value;\n      }\n      open() {}\n      close() {}\n      focus() {\n        this.TEXTAREA.focus();\n      }\n    }\n    registerCellType('myCellType', {\n      editor: MyEditor,\n      renderer: (hot, td, row, col, prop, value) => {\n        td.innerHTML = `--${value}--`;\n      },\n      validator: (value, cb) => {\n        cb(value === 10);\n      }\n    });\n\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: [\n        [1, 6, 10],\n      ],\n      columns: [{\n        type: 'myCellType',\n      }],\n      afterValidate: onAfterValidate\n    });\n\n    hot.setDataAtCell(1, 0, 10);\n\n    await sleep(100);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(true, 10, 1, 0, undefined, undefined);\n    expect(getCell(1, 0).innerHTML).toBe('--10--');\n\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'hello';\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(false, '**hello**', 0, 0, 'edit', undefined);\n    expect(getCell(0, 0).innerHTML).toBe('--**hello**--');\n  });\n\n  it('should retrieve predefined cell types by its names', () => {\n    const { editors, renderers, validators } = Handsontable;\n\n    expect(getCellType('autocomplete').editor).toBe(editors.AutocompleteEditor);\n    expect(getCellType('autocomplete').renderer).toBe(renderers.AutocompleteRenderer);\n    expect(getCellType('autocomplete').validator).toBe(validators.AutocompleteValidator);\n\n    expect(getCellType('checkbox').editor).toBe(editors.CheckboxEditor);\n    expect(getCellType('checkbox').renderer).toBe(renderers.CheckboxRenderer);\n    expect(getCellType('checkbox').validator).not.toBeDefined();\n\n    expect(getCellType('date').editor).toBe(editors.DateEditor);\n    expect(getCellType('date').renderer).toBe(renderers.AutocompleteRenderer);\n    expect(getCellType('date').validator).toBe(validators.DateValidator);\n\n    expect(getCellType('dropdown').editor).toBe(editors.DropdownEditor);\n    expect(getCellType('dropdown').renderer).toBe(renderers.AutocompleteRenderer);\n    expect(getCellType('dropdown').validator).toBe(validators.AutocompleteValidator);\n\n    expect(getCellType('handsontable').editor).toBe(editors.HandsontableEditor);\n    expect(getCellType('handsontable').renderer).toBe(renderers.AutocompleteRenderer);\n    expect(getCellType('handsontable').validator).not.toBeDefined();\n\n    expect(getCellType('numeric').editor).toBe(editors.NumericEditor);\n    expect(getCellType('numeric').renderer).toBe(renderers.NumericRenderer);\n    expect(getCellType('numeric').validator).toBe(validators.NumericValidator);\n    expect(getCellType('numeric').dataType).toBe('number');\n\n    expect(getCellType('password').editor).toBe(editors.PasswordEditor);\n    expect(getCellType('password').renderer).toBe(renderers.PasswordRenderer);\n    expect(getCellType('password').validator).not.toBeDefined();\n    expect(getCellType('password').copyable).toBe(false);\n\n    expect(getCellType('text').editor).toBe(editors.TextEditor);\n    expect(getCellType('text').renderer).toBe(renderers.TextRenderer);\n    expect(getCellType('text').validator).not.toBeDefined();\n\n    expect(getCellType('time').editor).toBe(editors.TextEditor);\n    expect(getCellType('time').renderer).toBe(renderers.TextRenderer);\n    expect(getCellType('time').validator).toBe(validators.TimeValidator);\n  });\n\n  it('should register custom cell type into renderers, editors and validators', () => {\n    class MyEditor {}\n    function myRenderer() {}\n    function myValidator() {}\n\n    registerCellType('myCellType', {\n      editor: MyEditor,\n      renderer: myRenderer,\n      validator: myValidator,\n    });\n\n    expect(getEditor('myCellType')).toBe(MyEditor);\n    expect(getRenderer('myCellType')).toBe(myRenderer);\n    expect(getValidator('myCellType')).toBe(myValidator);\n  });\n\n  it('should overwrite cell types under the same name', () => {\n    class MyEditor {}\n    function myRenderer() {}\n    function myValidator() {}\n\n    registerCellType('myCellType', {\n      editor: MyEditor,\n      renderer: myRenderer,\n      validator: myValidator,\n    });\n\n    expect(getEditor('myCellType')).toBe(MyEditor);\n    expect(getRenderer('myCellType')).toBe(myRenderer);\n    expect(getValidator('myCellType')).toBe(myValidator);\n\n    function myRenderer2() {}\n    function myValidator2() {}\n\n    registerCellType('myCellType', {\n      renderer: myRenderer2,\n      validator: myValidator2,\n    });\n\n    expect(getEditor('myCellType')).toBe(MyEditor);\n    expect(getRenderer('myCellType')).toBe(myRenderer2);\n    expect(getValidator('myCellType')).toBe(myValidator2);\n  });\n\n  it('should retrieve custom cell type by its names', () => {\n    class MyEditor {}\n    function myRenderer() {}\n    function myValidator() {}\n\n    registerCellType('myCellType', {\n      editor: MyEditor,\n      renderer: myRenderer,\n      validator: myValidator,\n    });\n\n    expect(getCellType('myCellType').editor).toBe(MyEditor);\n    expect(getCellType('myCellType').renderer).toBe(myRenderer);\n    expect(getCellType('myCellType').validator).toBe(myValidator);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/cellTypes/index.spec.js","describe('Core.colToProp', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return the property name for the provided column number', () => {\n    handsontable({\n      data: [{\n        id: 1,\n        firstName: 'Tobias',\n        lastName: 'Forge'\n      }]\n    });\n\n    expect(colToProp(0)).toBe('id');\n    expect(colToProp(1)).toBe('firstName');\n    expect(colToProp(2)).toBe('lastName');\n  });\n\n  it('it should return the provided property name, when the user passes a property name as a column number', () => {\n    handsontable({\n      data: [{\n        id: 1,\n        sort: true,\n        length: 2\n      }]\n    });\n\n    expect(colToProp('id')).toBe('id');\n    expect(colToProp('sort')).toBe('sort');\n    expect(colToProp('length')).toBe('length');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/colToProp.spec.js","describe('Core.countSourceCols', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return properly index from ', () => {\n    const hot = handsontable({\n      data: [['', '', '', '', '', '', '', '', '', '', '', '', '', '', '']],\n      columns(column) {\n        return [1, 5, 9].indexOf(column) > -1 ? {} : null;\n      }\n    });\n\n    expect(hot.countSourceCols()).toBe(15);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/countSourceCols.spec.js","describe('Core.emptySelectedCells', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should make all selected cells empty', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(9, 8),\n      selectionMode: 'multiple',\n    });\n\n    $(getCell(5, 4)).simulate('mousedown');\n    $(getCell(1, 1)).simulate('mouseover');\n    $(getCell(1, 1)).simulate('mouseup');\n\n    keyDown('ctrl');\n\n    $(getCell(2, 2)).simulate('mousedown');\n    $(getCell(7, 2)).simulate('mouseover');\n    $(getCell(7, 2)).simulate('mouseup');\n\n    $(getCell(2, 4)).simulate('mousedown');\n    $(getCell(2, 4)).simulate('mouseover');\n    $(getCell(2, 4)).simulate('mouseup');\n\n    $(getCell(7, 6)).simulate('mousedown');\n    $(getCell(8, 7)).simulate('mouseover');\n    $(getCell(8, 7)).simulate('mouseup');\n\n    emptySelectedCells();\n\n    /* eslint-disable no-multi-spaces, comma-spacing */\n    const snapshot = [\n      ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1'],\n      ['A2',  '',   '',   '',   '',  'F2', 'G2', 'H2'],\n      ['A3',  '',   '',   '',   '',  'F3', 'G3', 'H3'],\n      ['A4',  '',   '',   '',   '',  'F4', 'G4', 'H4'],\n      ['A5',  '',   '',   '',   '',  'F5', 'G5', 'H5'],\n      ['A6',  '',   '',   '',   '',  'F6', 'G6', 'H6'],\n      ['A7', 'B7',  '',  'D7', 'E7', 'F7', 'G7', 'H7'],\n      ['A8', 'B8',  '',  'D8', 'E8', 'F8',  '',   '',],\n      ['A9', 'B9', 'C9', 'D9', 'E9', 'F9',  '',   '',],\n    ];\n    /* eslint-enable no-multi-spaces, comma-spacing */\n\n    expect(getData()).toEqual(snapshot);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/emptySelectedCells.spec.js","describe('Core.getCellMetaAtRow', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return a row of cell meta in a form of an array', () => {\n    handsontable();\n\n    const rowOfMeta = getCellMetaAtRow(0);\n    expect(rowOfMeta.length).toBe(5);\n    expect(rowOfMeta[0].row).toBe(0);\n    expect(rowOfMeta[1].row).toBe(0);\n    expect(rowOfMeta[2].row).toBe(0);\n    expect(rowOfMeta[3].row).toBe(0);\n    expect(rowOfMeta[4].row).toBe(0);\n    expect(rowOfMeta[0].col).toBe(0);\n    expect(rowOfMeta[1].col).toBe(1);\n    expect(rowOfMeta[2].col).toBe(2);\n    expect(rowOfMeta[3].col).toBe(3);\n    expect(rowOfMeta[4].col).toBe(4);\n    expect(rowOfMeta[0].prop).toBe(0);\n    expect(rowOfMeta[1].prop).toBe(1);\n    expect(rowOfMeta[2].prop).toBe(2);\n    expect(rowOfMeta[3].prop).toBe(3);\n    expect(rowOfMeta[4].prop).toBe(4);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getCellMetaAtRow.spec.js","describe('Core.getCellsMeta', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return all initialized cells meta as flatten array', () => {\n    handsontable();\n\n    const metas = getCellsMeta();\n\n    expect(metas.length).toBe(25); // default data size\n    expect(metas[0].row).toBe(0);\n    expect(metas[0].col).toBe(0);\n    expect(metas[0].prop).toBe(0);\n    expect(metas[19].row).toBe(3);\n    expect(metas[19].col).toBe(4);\n    expect(metas[19].prop).toBe(4);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getCellsMeta.spec.js","describe('Core.getCopyableData', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return copyable data when `copyable` option is enabled', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      copyable: true\n    });\n\n    expect(getCopyableData(0, 0)).toBe('A1');\n    expect(getCopyableData(1, 1)).toBe('B2');\n    expect(getCopyableData(5, 1)).toBe('B6');\n    expect(getCopyableData(8, 9)).toBe('J9');\n  });\n\n  it('should return empty string as copyable data when `copyable` option is disabled', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      copyable: false\n    });\n\n    expect(getCopyableData(0, 0)).toBe('');\n    expect(getCopyableData(1, 1)).toBe('');\n    expect(getCopyableData(5, 1)).toBe('');\n    expect(getCopyableData(8, 9)).toBe('');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getCopyableData.spec.js","describe('Core.getCopyableText', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return copyable string when `copyable` option is enabled', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      copyable: true\n    });\n\n    expect(getCopyableText(0, 0)).toBe('A1');\n    expect(getCopyableText(0, 0, 1, 2)).toBe('A1\\tB1\\tC1\\nA2\\tB2\\tC2');\n  });\n\n  it('should return empty string as copyable data when `copyable` option is disabled', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      copyable: false\n    });\n\n    expect(getCopyableText(0, 0)).toBe('');\n    expect(getCopyableText(0, 0, 1, 2)).toBe('\\t\\t\\n\\t\\t');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getCopyableText.spec.js","describe('Core.getSelected', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid coordinates', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      selectionMode: 'multiple',\n    });\n\n    const snapshot = [\n      [5, 4, 1, 1],\n      [2, 2, 7, 2],\n      [2, 4, 2, 4],\n      [7, 6, 8, 7],\n    ];\n\n    $(getCell(5, 4)).simulate('mousedown');\n    $(getCell(1, 1)).simulate('mouseover');\n    $(getCell(1, 1)).simulate('mouseup');\n\n    expect(getSelected()).toEqual([snapshot[0]]);\n\n    keyDown('ctrl');\n\n    $(getCell(2, 2)).simulate('mousedown');\n    $(getCell(7, 2)).simulate('mouseover');\n    $(getCell(7, 2)).simulate('mouseup');\n\n    expect(getSelected()).toEqual([snapshot[0], snapshot[1]]);\n\n    $(getCell(2, 4)).simulate('mousedown');\n    $(getCell(2, 4)).simulate('mouseover');\n    $(getCell(2, 4)).simulate('mouseup');\n\n    expect(getSelected()).toEqual([snapshot[0], snapshot[1], snapshot[2]]);\n\n    $(getCell(7, 6)).simulate('mousedown');\n    $(getCell(8, 7)).simulate('mouseover');\n    $(getCell(8, 7)).simulate('mouseup');\n\n    expect(getSelected()).toEqual(snapshot);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getSelected.spec.js","describe('Core.getSelectedLast', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid coordinates', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      selectionMode: 'multiple',\n    });\n\n    const snapshot = [\n      [5, 4, 1, 1],\n      [2, 2, 7, 2],\n      [2, 4, 2, 4],\n      [7, 6, 8, 7],\n    ];\n\n    $(getCell(5, 4)).simulate('mousedown');\n    $(getCell(1, 1)).simulate('mouseover');\n    $(getCell(1, 1)).simulate('mouseup');\n\n    expect(getSelectedLast()).toEqual(snapshot[0]);\n\n    keyDown('ctrl');\n\n    $(getCell(2, 2)).simulate('mousedown');\n    $(getCell(7, 2)).simulate('mouseover');\n    $(getCell(7, 2)).simulate('mouseup');\n\n    expect(getSelectedLast()).toEqual(snapshot[1]);\n\n    $(getCell(2, 4)).simulate('mousedown');\n    $(getCell(2, 4)).simulate('mouseover');\n    $(getCell(2, 4)).simulate('mouseup');\n\n    expect(getSelectedLast()).toEqual(snapshot[2]);\n\n    $(getCell(7, 6)).simulate('mousedown');\n    $(getCell(8, 7)).simulate('mouseover');\n    $(getCell(8, 7)).simulate('mouseup');\n\n    expect(getSelectedLast()).toEqual(snapshot[3]);\n  });\n\n  it('should return valid coordinates when `.getSelectedRange` and `.getSelectedRangeLast` is called', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      selectionMode: 'multiple',\n    });\n\n    const snapshot = [\n      { from: { row: 5, col: 4 }, to: { row: 1, col: 1 } },\n      { from: { row: 2, col: 2 }, to: { row: 7, col: 2 } },\n      { from: { row: 2, col: 4 }, to: { row: 2, col: 4 } },\n      { from: { row: 7, col: 6 }, to: { row: 8, col: 7 } },\n    ];\n\n    $(getCell(5, 4)).simulate('mousedown');\n    $(getCell(1, 1)).simulate('mouseover');\n    $(getCell(1, 1)).simulate('mouseup');\n\n    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[0]);\n    expect(getSelectedRange().map(cellRange => cellRange.toObject())).toEqual([snapshot[0]]);\n\n    keyDown('ctrl');\n\n    $(getCell(2, 2)).simulate('mousedown');\n    $(getCell(7, 2)).simulate('mouseover');\n    $(getCell(7, 2)).simulate('mouseup');\n\n    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[1]);\n    expect(getSelectedRange().map(cellRange => cellRange.toObject())).toEqual([snapshot[0], snapshot[1]]);\n\n    $(getCell(2, 4)).simulate('mousedown');\n    $(getCell(2, 4)).simulate('mouseover');\n    $(getCell(2, 4)).simulate('mouseup');\n\n    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[2]);\n    expect(getSelectedRange().map(cellRange => cellRange.toObject())).toEqual([snapshot[0], snapshot[1], snapshot[2]]);\n\n    $(getCell(7, 6)).simulate('mousedown');\n    $(getCell(8, 7)).simulate('mouseover');\n    $(getCell(8, 7)).simulate('mouseup');\n\n    const selectedRange = getSelectedRange().map(cellRange => cellRange.toObject());\n\n    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[3]);\n    expect(selectedRange).toEqual(snapshot);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getSelectedLast.spec.js","describe('Core.getSelectedRange', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid coordinates', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      selectionMode: 'multiple',\n    });\n\n    const snapshot = [\n      { from: { row: 5, col: 4 }, to: { row: 1, col: 1 } },\n      { from: { row: 2, col: 2 }, to: { row: 7, col: 2 } },\n      { from: { row: 2, col: 4 }, to: { row: 2, col: 4 } },\n      { from: { row: 7, col: 6 }, to: { row: 8, col: 7 } },\n    ];\n\n    $(getCell(5, 4)).simulate('mousedown');\n    $(getCell(1, 1)).simulate('mouseover');\n    $(getCell(1, 1)).simulate('mouseup');\n\n    expect(getSelectedRange().map(cellRange => cellRange.toObject())).toEqual([snapshot[0]]);\n\n    keyDown('ctrl');\n\n    $(getCell(2, 2)).simulate('mousedown');\n    $(getCell(7, 2)).simulate('mouseover');\n    $(getCell(7, 2)).simulate('mouseup');\n\n    expect(getSelectedRange().map(cellRange => cellRange.toObject())).toEqual([snapshot[0], snapshot[1]]);\n\n    $(getCell(2, 4)).simulate('mousedown');\n    $(getCell(2, 4)).simulate('mouseover');\n    $(getCell(2, 4)).simulate('mouseup');\n\n    expect(getSelectedRange().map(cellRange => cellRange.toObject())).toEqual([snapshot[0], snapshot[1], snapshot[2]]);\n\n    $(getCell(7, 6)).simulate('mousedown');\n    $(getCell(8, 7)).simulate('mouseover');\n    $(getCell(8, 7)).simulate('mouseup');\n\n    const selectedRange = getSelectedRange().map(cellRange => cellRange.toObject());\n\n    expect(selectedRange).toEqual(snapshot);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getSelectedRange.spec.js","describe('Core.getSelectedRangeLast', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid coordinates', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      selectionMode: 'multiple',\n    });\n\n    const snapshot = [\n      { from: { row: 5, col: 4 }, to: { row: 1, col: 1 } },\n      { from: { row: 2, col: 2 }, to: { row: 7, col: 2 } },\n      { from: { row: 2, col: 4 }, to: { row: 2, col: 4 } },\n      { from: { row: 7, col: 6 }, to: { row: 8, col: 7 } },\n    ];\n\n    $(getCell(5, 4)).simulate('mousedown');\n    $(getCell(1, 1)).simulate('mouseover');\n    $(getCell(1, 1)).simulate('mouseup');\n\n    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[0]);\n\n    keyDown('ctrl');\n\n    $(getCell(2, 2)).simulate('mousedown');\n    $(getCell(7, 2)).simulate('mouseover');\n    $(getCell(7, 2)).simulate('mouseup');\n\n    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[1]);\n\n    $(getCell(2, 4)).simulate('mousedown');\n    $(getCell(2, 4)).simulate('mouseover');\n    $(getCell(2, 4)).simulate('mouseup');\n\n    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[2]);\n\n    $(getCell(7, 6)).simulate('mousedown');\n    $(getCell(8, 7)).simulate('mouseover');\n    $(getCell(8, 7)).simulate('mouseup');\n\n    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[3]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getSelectedRangeLast.spec.js","describe('Core.getSourceDataArray', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return data as an array when provided data was an array of arrays', () => {\n    handsontable({\n      data: [[1, 2, 3], ['a', 'b', 'c']],\n      copyable: true\n    });\n\n    expect(getSourceDataArray()).toEqual([[1, 2, 3], ['a', 'b', 'c']]);\n    expect(getSourceDataArray(0, 1, 1, 2)).toEqual([[2, 3], ['b', 'c']]);\n  });\n\n  it('should return data as an array when provided data was an array of objects', () => {\n    handsontable({\n      data: [{ a: 1, b: 2, c: 3 }, { a: 'a', b: 'b', c: 'c' }],\n      copyable: true\n    });\n\n    expect(getSourceDataArray()).toEqual([[1, 2, 3], ['a', 'b', 'c']]);\n    expect(getSourceDataArray(0, 1, 1, 2)).toEqual([[2, 3], ['b', 'c']]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getSourceDataArray.spec.js","describe('Core.getSourceDataAtCell', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return null when is call without arguments', () => {\n    handsontable({\n      data: [[1, 2, 3], ['a', 'b', 'c']],\n    });\n\n    expect(getSourceDataAtCell()).toBeNull();\n  });\n\n  it('should return cell value when provided data was an array of arrays', () => {\n    handsontable({\n      data: [[1, 2, 3], ['a', 'b', 'c']],\n    });\n\n    expect(getSourceDataAtCell(1, 1)).toEqual('b');\n  });\n\n  it('should return cell value when provided data was an array of objects', () => {\n    handsontable({\n      data: [{ a: 1, b: 2, c: 3 }, { a: 'a', b: 'b', c: 'c' }],\n      copyable: true\n    });\n\n    expect(getSourceDataAtCell(1, 'b')).toEqual('b');\n  });\n\n  it('should return cell value when provided data was an array of objects (nested structure)', () => {\n    handsontable({\n      data: [{ a: 1, b: { a: 21, b: 22 }, c: 3 }, { a: 'a', b: { a: 'ba', b: 'bb' }, c: 'c' }],\n      columns: [\n        { data: 'a' },\n        { data: 'b.a' },\n        { data: 'b.b' },\n        { data: 'c' },\n      ]\n    });\n\n    expect(getSourceDataAtCell(1, 'b.b')).toEqual('bb');\n  });\n\n  it('should return cell value when data is provided by dataSchema', () => {\n    handsontable({\n      data: [\n        model({ id: 1, name: 'Ted Right', address: '' }),\n        model({ id: 2, name: 'Frank Honest', address: '' }),\n        model({ id: 3, name: 'Joan Well', address: '' }),\n        model({ id: 4, name: 'Gail Polite', address: '' }),\n        model({ id: 5, name: 'Michael Fair', address: '' })\n      ],\n      dataSchema: model,\n      columns: [\n        { data: property('id') },\n        { data: property('name') },\n        { data: property('address') }\n      ]\n    });\n\n    function model(opts) {\n      const _pub = {};\n      const _priv = {\n        id: undefined,\n        name: undefined,\n        address: undefined\n      };\n\n      Handsontable.helper.objectEach(opts, (value, key) => {\n        _priv[key] = value;\n      });\n\n      _pub.attr = function(attr, val) {\n        if (typeof val === 'undefined') {\n          return _priv[attr];\n        }\n        _priv[attr] = val;\n\n        return _pub;\n      };\n\n      return _pub;\n    }\n\n    function property(attr) {\n      return function(row, value) {\n        return row.attr(attr, value);\n      };\n    }\n\n    expect(getSourceDataAtCell(1, 1)).toEqual('Frank Honest');\n  });\n\n  describe('`modifyRowData` hook', () => {\n    it('should be possible to change data for row on the fly ', () => {\n      handsontable({\n        data: [\n          ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n          ['2008', 10, 11, 12, 13],\n          ['2009', 20, 11, 14, 13],\n          ['2010', 30, 15, 12, 13]\n        ],\n        modifyRowData(row) {\n          const newDataset = [];\n\n          if (row === 1) {\n            newDataset.push('2016', 0, 0, 0, 0);\n          }\n\n          return newDataset.length ? newDataset : void 0;\n        }\n      });\n\n      expect(getSourceDataAtCell(1, 0)).toEqual('2016');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getSourceDataAtCell.spec.js","describe('Core.getSourceDataAtCol', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return col values when data is provided by dataSchema', () => {\n    handsontable({\n      data: [\n        model({ id: 1, name: 'Ted Right', address: '' }),\n        model({ id: 2, name: 'Frank Honest', address: '' }),\n        model({ id: 3, name: 'Joan Well', address: '' }),\n        model({ id: 4, name: 'Gail Polite', address: '' }),\n        model({ id: 5, name: 'Michael Fair', address: '' })\n      ],\n      dataSchema: model,\n      columns: [\n        { data: property('id') },\n        { data: property('name') },\n        { data: property('address') }\n      ]\n    });\n\n    function model(opts) {\n      const _pub = {};\n      const _priv = {\n        id: undefined,\n        name: undefined,\n        address: undefined\n      };\n\n      Handsontable.helper.objectEach(opts, (value, key) => {\n        _priv[key] = value;\n      });\n\n      _pub.attr = function(attr, val) {\n        if (typeof val === 'undefined') {\n          return _priv[attr];\n        }\n        _priv[attr] = val;\n\n        return _pub;\n      };\n\n      return _pub;\n    }\n\n    function property(attr) {\n      return function(row, value) {\n        return row.attr(attr, value);\n      };\n    }\n\n    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/getSourceDataAtCol.spec.js","describe('Core.propToCol', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid index for newly added column when manualColumnMove is enabled', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      manualColumnMove: true,\n    });\n\n    hot.alter('insert_col', 5);\n\n    expect(propToCol(0)).toBe(0);\n    expect(propToCol(10)).toBe(10);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/propToCol.spec.js","describe('Core.selectAll', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should select all cells and clear previous selection', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(15, 20),\n      width: 200,\n      height: 100,\n      selectionMode: 'multiple',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([[1, 1, 2, 2], [2, 2, 4, 4]]);\n\n    hot.view.wt.wtTable.holder.scrollTop = 100;\n    hot.view.wt.wtTable.holder.scrollLeft = 100;\n\n    selectAll();\n\n    expect(`\n      |   ║ * : * : * : * : * : * |\n      |===:===:===:===:===:===:===|\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 : 0 : 0 |\n      `).toBeMatchToSelectionPattern();\n    // \"Select all\" shouldn't scroll te table.\n    expect(hot.view.wt.wtTable.holder.scrollTop).toBe(100);\n    expect(hot.view.wt.wtTable.holder.scrollLeft).toBe(100);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/selectAll.spec.js","describe('Core.selectCell', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should mark single cell visually (default selectionMode, without headers)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: false,\n      rowHeaders: false,\n    });\n\n    selectCell(2, 2);\n\n    expect(`\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   : # :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single cell visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCell(2, 2);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the cells visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCell(1, 2, 2, 3);\n\n    expect(`\n      |   ║   :   : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | - ║   :   : A : 0 |\n      | - ║   :   : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single cell visually when selectionMode is set as `single', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'single',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCell(2, 2);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not mark the range of the cells visually when selectionMode is set as `single`', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'single',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCell(1, 2, 2, 3);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single cell visually when selectionMode is set as `range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'range',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCell(2, 2);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark the range of the cells visually when selectionMode is set as `range`', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'range',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCell(1, 2, 2, 3);\n\n    expect(`\n      |   ║   :   : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | - ║   :   : A : 0 |\n      | - ║   :   : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark the headers when whole column and row is selected', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCell(0, 2, 5, 3);\n\n    expect(`\n      |   ║   :   : - : - |\n      |===:===:===:===:===|\n      | - ║   :   : A : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      `).toBeMatchToSelectionPattern();\n\n    selectCell(1, 0, 2, 3);\n\n    expect(`\n      |   ║ - : - : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | - ║ A : 0 : 0 : 0 |\n      | - ║ 0 : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not deselect current selection when sellectCell is called without arguments', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    selectCell(0, 0, 2, 2);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n\n    selectCell();\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n\n    selectCell(1);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n  });\n\n  it('should not deselect current selection when sellectCell is called with one argument', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectCell(1);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when sellectCell is called with negative values', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectCell(0, -1, 0, 0);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCell(-1, 0, 0, 0);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCell(0, 0, -1, 0);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCell(0, 0, 0, -1);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when sellectCell is called with coordinates beyond the table data range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(3, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectCell(3, 0);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCell(0, 4);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCell(0, 0, 3, 0);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCell(0, 0, 0, 4);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when sellectCell is called with undefined column property', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectCell(0, 'notExistProp');\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCell(0, 0, 0, 'notExistProp');\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should select only one cell when two arguments are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(1, 1);\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select only one cell when two arguments are passed (column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(1, 'prop1');\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when at least the three arguments are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(0, 0, 1);\n\n    expect(getSelected()).toEqual([[0, 0, 1, 0]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when at least the three arguments are passed (column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(0, 'prop0', 1);\n\n    expect(getSelected()).toEqual([[0, 0, 1, 0]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the four arguments are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(1, 1, 2, 3);\n\n    expect(getSelected()).toEqual([[1, 1, 2, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the four arguments are passed (column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(1, 'prop1', 2, 'prop3');\n\n    expect(getSelected()).toEqual([[1, 1, 2, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from right-bottom to left-top)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(2, 3, 1, 1);\n\n    expect(getSelected()).toEqual([[2, 3, 1, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from right-bottom to left-top using column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(2, 'prop3', 1, 'prop1');\n\n    expect(getSelected()).toEqual([[2, 3, 1, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from left-bottom to right-top)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(2, 1, 1, 3);\n\n    expect(getSelected()).toEqual([[2, 1, 1, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from left-bottom to right-top using column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(2, 'prop1', 1, 'prop3');\n\n    expect(getSelected()).toEqual([[2, 1, 1, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from right-top to left-bottom)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(1, 3, 2, 1);\n\n    expect(getSelected()).toEqual([[1, 3, 2, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from right-top to left-bottom using column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCell(1, 'prop3', 2, 'prop1');\n\n    expect(getSelected()).toEqual([[1, 3, 2, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should by default scroll the viewport to the selected cell (bottom of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(15, 0);\n\n    expect(getCell(15, 0)).toBeVisibleAtBottomOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell using column props (bottom of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(15, 'prop0');\n\n    expect(getCell(15, 0)).toBeVisibleAtBottomOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell (right of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(5, 15);\n\n    expect(getCell(5, 15)).toBeVisibleAtRightOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell using column props (right of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(5, 'prop15');\n\n    expect(getCell(5, 15)).toBeVisibleAtRightOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell (left of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(5, 15); // Scroll to the right of the table.\n    selectCell(5, 0);\n\n    expect(getCell(5, 0)).toBeVisibleAtLeftOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell using column props (left of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(5, 15); // Scroll to the right of the table.\n    selectCell(5, 'prop0');\n\n    expect(getCell(5, 0)).toBeVisibleAtLeftOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell (top of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(19, 0); // Scroll to the bottom of the table.\n    selectCell(1, 0);\n\n    expect(getCell(1, 0)).toBeVisibleAtTopOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell using column props (top of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(19, 0); // Scroll to the bottom of the table.\n    selectCell(1, 'prop0');\n\n    expect(getCell(1, 0)).toBeVisibleAtTopOfViewport();\n  });\n\n  it('should not the scroll the viewport when `false` argument is passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(15, 0, 15, 0, false);\n\n    expect(getCell(15, 0)).not.toBeVisibleInViewport();\n  });\n\n  it('should by default change the listener to handsontable instance from the action was triggered', () => {\n    const afterListen = jasmine.createSpy();\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterListen,\n    });\n\n    selectCell(15, 0);\n\n    expect(afterListen).toHaveBeenCalled();\n  });\n\n  it('should not change the listening state when `false` argument is passed', () => {\n    const afterListen = jasmine.createSpy();\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterListen,\n    });\n\n    selectCell(15, 0, 15, 0, true, false);\n\n    expect(afterListen).not.toHaveBeenCalled();\n  });\n\n  it('should fire hooks with proper context', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectCell(1, 2);\n\n    expect(afterSelection.calls.first().object).toBe(hot);\n    expect(afterSelectionByProp.calls.first().object).toBe(hot);\n    expect(afterSelectionEnd.calls.first().object).toBe(hot);\n    expect(afterSelectionEndByProp.calls.first().object).toBe(hot);\n    expect(beforeSetRangeStartOnly.calls.first().object).toBe(hot);\n  });\n\n  it('should fire hooks with proper arguments when a single cell is selected', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectCell(1, 2);\n\n    expect(afterSelection.calls.count()).toBe(1);\n    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 1, 2, jasmine.any(Object), 0]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(1);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 1, 'prop2', jasmine.any(Object), 0]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(1);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 1, 2, 0, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(1);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 1, 'prop2', 0, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);\n  });\n\n  it('should fire hooks with proper arguments when range of the cells are selected', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectCell(1, 2, 2, 4);\n\n    expect(afterSelection.calls.count()).toBe(1);\n    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 2, 4, jasmine.any(Object), 0]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(1);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', jasmine.any(Object), 0]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(1);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 2, 4, 0, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(1);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', 0, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/selectCell.spec.js","describe('Core.selectCells', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should mark single cell visually (default selectionMode, without headers)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: false,\n      rowHeaders: false,\n    });\n\n    selectCells([[2, 2]]);\n\n    expect(`\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   : # :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single cell visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([[2, 2]]);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the cells visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([[1, 2, 2, 3]]);\n\n    expect(`\n      |   ║   :   : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | - ║   :   : A : 0 |\n      | - ║   :   : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark non-contiguous cells visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([\n      [0, 0],\n      [5, 1, 2, 2],\n      [4, 3, 1, 2],\n      [3, 0, 3, 2],\n      [4, 2],\n      [4, 2]\n    ]);\n\n    expect(`\n      |   ║ - : - : - : - |\n      |===:===:===:===:===|\n      | - ║ 0 :   :   :   |\n      | - ║   :   : 0 : 0 |\n      | - ║   : 0 : 1 : 0 |\n      | - ║ 0 : 1 : 2 : 0 |\n      | - ║   : 0 : D : 0 |\n      | - ║   : 0 : 0 :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single cell visually when selectionMode is set as `single', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'single',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([[2, 2]]);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not mark range of the cells visually when selectionMode is set as `single', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'single',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([[1, 2, 2, 3]]);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not mark non-contiguous cells visually when selectionMode is set as `single', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'single',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([\n      [0, 0],\n      [5, 1, 2, 2],\n      [4, 3, 1, 2],\n      [3, 0, 3, 2],\n      [4, 2],\n      [4, 2]\n    ]);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single cell visually when selectionMode is set as `range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'range',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([[2, 2]]);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the cells visually when selectionMode is set as `range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'range',\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([[1, 2, 2, 3]]);\n\n    expect(`\n      |   ║   :   : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | - ║   :   : A : 0 |\n      | - ║   :   : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not mark non-contiguous cells visually when selectionMode is set as `range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      selectionMode: 'range',\n    });\n\n    selectCells([\n      [0, 0],\n      [5, 1, 2, 2],\n      [4, 3, 1, 2],\n      [3, 0, 3, 2],\n      [4, 2],\n      [4, 2]\n    ]);\n\n    expect(`\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   : # :   |\n      |   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark the headers when whole column and row is selected', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectCells([[0, 1, 5, 1], [0, 3, 5, 3]]);\n\n    expect(`\n      |   ║   : - :   : - |\n      |===:===:===:===:===|\n      | - ║   : 0 :   : A |\n      | - ║   : 0 :   : 0 |\n      | - ║   : 0 :   : 0 |\n      | - ║   : 0 :   : 0 |\n      | - ║   : 0 :   : 0 |\n      | - ║   : 0 :   : 0 |\n      `).toBeMatchToSelectionPattern();\n\n    selectCells([[1, 0, 1, 3], [3, 0, 3, 3]]);\n\n    expect(`\n      |   ║ - : - : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | - ║ 0 : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      | - ║ A : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not deselect current selection when sellectCells is called without arguments', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.\n    selectCells();\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n  });\n\n  it('should throw an exception when the coordinates are passed in invalid format', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.\n\n    expect(() => selectCells(1)).toThrow();\n    expect(() => selectCells([1])).toThrow();\n    expect(() => selectCells('prop0')).toThrow();\n    expect(() => selectCells(['prop0'])).toThrow();\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n  });\n\n  it('should not deselect current selection when sellectCells is called with one argument', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(true);\n\n    /* eslint-disable no-empty */\n    try {\n      selectCells([[1]]);\n    } catch (ex) {}\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n  });\n\n  it('should not deselect current selection when sellectCells is called with negative values', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectCells([[0, -1, 0, 0]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[-1, 0, 0, 0]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[0, 0, -1, 0]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[0, 0, 0, -1]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[0, 0, 0, 0], [0, 0, 0, -1]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when sellectCells is called with coordinates beyond the table data range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(3, 4),\n    });\n\n    let wasSelected = selectCells([[0, 0, 2, 2], [1, 1, 2, 2]]); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectCells([[3, 0]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[0, 4]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[0, 0, 3, 0]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[0, 0, 0, 4]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[0, 0], [0, 0, 0, 4]]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when sellectCells is called with undefined column property', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectCells([[0, 'notExistProp']]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[0, 0, 0, 'notExistProp']]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectCells([[1, 1], [0, 0, 0, 'notExistProp']]);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should select only one cell when two arguments are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[1, 1]]);\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select only one cell when two arguments are passed (column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[1, 'prop1']]);\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when at least the three arguments are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[0, 0, 1]]);\n\n    expect(getSelected()).toEqual([[0, 0, 1, 0]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when at least the three arguments are passed (column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[0, 'prop0', 1]]);\n\n    expect(getSelected()).toEqual([[0, 0, 1, 0]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the four arguments are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[1, 1, 2, 3]]);\n\n    expect(getSelected()).toEqual([[1, 1, 2, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the four arguments are passed (column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[1, 'prop1', 2, 'prop3']]);\n\n    expect(getSelected()).toEqual([[1, 1, 2, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select multiple cells when the multiple ranges are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([\n      [0, 0],\n      [5, 1, 2, 2],\n      [4, 3, 1, 2],\n      [3, 0, 3, 2],\n      [4, 2],\n      [4, 2]\n    ]);\n\n    expect(getSelected()).toEqual([[0, 0, 0, 0], [5, 1, 2, 2], [4, 3, 1, 2], [3, 0, 3, 2], [4, 2, 4, 2], [4, 2, 4, 2]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select multiple cells when the multiple ranges are passed (column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([\n      [0, 'prop0'],\n      [5, 'prop1', 2, 'prop2'],\n      [4, 'prop3', 1, 'prop2'],\n      [3, 'prop0', 3, 'prop2'],\n      [4, 'prop2'],\n      [4, 'prop2']\n    ]);\n\n    expect(getSelected()).toEqual([[0, 0, 0, 0], [5, 1, 2, 2], [4, 3, 1, 2], [3, 0, 3, 2], [4, 2, 4, 2], [4, 2, 4, 2]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from right-bottom to left-top)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[2, 3, 1, 1]]);\n\n    expect(getSelected()).toEqual([[2, 3, 1, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from right-bottom to left-top using column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[2, 'prop3', 1, 'prop1']]);\n\n    expect(getSelected()).toEqual([[2, 3, 1, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from left-bottom to right-top)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[2, 1, 1, 3]]);\n\n    expect(getSelected()).toEqual([[2, 1, 1, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from left-bottom to right-top using column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[2, 'prop1', 1, 'prop3']]);\n\n    expect(getSelected()).toEqual([[2, 1, 1, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from right-top to left-bottom)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[1, 3, 2, 1]]);\n\n    expect(getSelected()).toEqual([[1, 3, 2, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of cells when the coordinates are passed in reversed order (from right-top to left-bottom using column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectCells([[1, 'prop3', 2, 'prop1']]);\n\n    expect(getSelected()).toEqual([[1, 3, 2, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should by default scroll the viewport to the selected cell (bottom of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCells([[15, 0]]);\n\n    expect(getCell(15, 0)).toBeVisibleAtBottomOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell using column props (bottom of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCells([[15, 'prop0']]);\n\n    expect(getCell(15, 0)).toBeVisibleAtBottomOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell (right of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCells([[5, 15]]);\n\n    expect(getCell(5, 15)).toBeVisibleAtRightOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell using column props (right of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCells([[5, 'prop15']]);\n\n    expect(getCell(5, 15)).toBeVisibleAtRightOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell (left of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(5, 15); // Scroll to the right of the table.\n    selectCells([[5, 0]]);\n\n    expect(getCell(5, 0)).toBeVisibleAtLeftOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell using column props (left of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(5, 15); // Scroll to the right of the table.\n    selectCells([[5, 'prop0']]);\n\n    expect(getCell(5, 0)).toBeVisibleAtLeftOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell (top of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(19, 0); // Scroll to the bottom of the table.\n    selectCells([[1, 0]]);\n\n    expect(getCell(1, 0)).toBeVisibleAtTopOfViewport();\n  });\n\n  it('should by default scroll the viewport to the selected cell using column props (top of the viewport)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(19, 0); // Scroll to the bottom of the table.\n    selectCells([[1, 'prop0']]);\n\n    expect(getCell(1, 0)).toBeVisibleAtTopOfViewport();\n  });\n\n  it('should not the scroll the viewport when `false` argument is passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCells([[15, 0]], false);\n\n    expect(getCell(15, 0)).not.toBeVisibleInViewport();\n  });\n\n  it('should by default change the listener to handsontable instance from the action was triggered', () => {\n    const afterListen = jasmine.createSpy();\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterListen,\n    });\n\n    selectCells([[15, 0]]);\n\n    expect(afterListen).toHaveBeenCalled();\n  });\n\n  it('should not change the listening state when `false` argument is passed', () => {\n    const afterListen = jasmine.createSpy();\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterListen,\n    });\n\n    selectCells([[15, 0]], true, false);\n\n    expect(afterListen).not.toHaveBeenCalled();\n  });\n\n  it('should fire hooks with proper context', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectCells([[1, 2, 2, 4], [2, 1, 3, 2], [7, 7], [8, 4, 0, 4], [2, 4]]);\n\n    expect(afterSelection.calls.first().object).toBe(hot);\n    expect(afterSelectionByProp.calls.first().object).toBe(hot);\n    expect(afterSelectionEnd.calls.first().object).toBe(hot);\n    expect(afterSelectionEndByProp.calls.first().object).toBe(hot);\n    expect(beforeSetRangeStartOnly.calls.first().object).toBe(hot);\n  });\n\n  it('should fire hooks with proper arguments when a single cell is selected', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectCells([[1, 2]]);\n\n    expect(afterSelection.calls.count()).toBe(1);\n    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 1, 2, jasmine.any(Object), 0]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(1);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 1, 'prop2', jasmine.any(Object), 0]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(1);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 1, 2, 0, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(1);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 1, 'prop2', 0, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);\n  });\n\n  it('should fire hooks with proper arguments when range of the cells are selected', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectCells([[1, 2, 2, 4]]);\n\n    expect(afterSelection.calls.count()).toBe(1);\n    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 2, 4, jasmine.any(Object), 0]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(1);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', jasmine.any(Object), 0]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(1);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 2, 4, 0, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(1);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', 0, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);\n  });\n\n  it('should fire hooks with proper arguments when the non-contiguous selection is added', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectCells([[1, 2, 2, 4], [2, 1, 3, 2], [7, 7], [8, 4, 0, 4], [2, 4]]);\n\n    expect(afterSelection.calls.count()).toBe(5);\n    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 2, 4, jasmine.any(Object), 0]);\n    expect(afterSelection.calls.argsFor(1)).toEqual([2, 1, 3, 2, jasmine.any(Object), 1]);\n    expect(afterSelection.calls.argsFor(2)).toEqual([7, 7, 7, 7, jasmine.any(Object), 2]);\n    expect(afterSelection.calls.argsFor(3)).toEqual([8, 4, 0, 4, jasmine.any(Object), 3]);\n    expect(afterSelection.calls.argsFor(4)).toEqual([2, 4, 2, 4, jasmine.any(Object), 4]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(5);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', jasmine.any(Object), 0]);\n    expect(afterSelectionByProp.calls.argsFor(1)).toEqual([2, 'prop1', 3, 'prop2', jasmine.any(Object), 1]);\n    expect(afterSelectionByProp.calls.argsFor(2)).toEqual([7, 'prop7', 7, 'prop7', jasmine.any(Object), 2]);\n    expect(afterSelectionByProp.calls.argsFor(3)).toEqual([8, 'prop4', 0, 'prop4', jasmine.any(Object), 3]);\n    expect(afterSelectionByProp.calls.argsFor(4)).toEqual([2, 'prop4', 2, 'prop4', jasmine.any(Object), 4]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(5);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 2, 4, 0, void 0]);\n    expect(afterSelectionEnd.calls.argsFor(1)).toEqual([2, 1, 3, 2, 1, void 0]);\n    expect(afterSelectionEnd.calls.argsFor(2)).toEqual([7, 7, 7, 7, 2, void 0]);\n    expect(afterSelectionEnd.calls.argsFor(3)).toEqual([8, 4, 0, 4, 3, void 0]);\n    expect(afterSelectionEnd.calls.argsFor(4)).toEqual([2, 4, 2, 4, 4, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(5);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', 0, void 0]);\n    expect(afterSelectionEndByProp.calls.argsFor(1)).toEqual([2, 'prop1', 3, 'prop2', 1, void 0]);\n    expect(afterSelectionEndByProp.calls.argsFor(2)).toEqual([7, 'prop7', 7, 'prop7', 2, void 0]);\n    expect(afterSelectionEndByProp.calls.argsFor(3)).toEqual([8, 'prop4', 0, 'prop4', 3, void 0]);\n    expect(afterSelectionEndByProp.calls.argsFor(4)).toEqual([2, 'prop4', 2, 'prop4', 4, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(5);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);\n    expect(beforeSetRangeStartOnly.calls.argsFor(1)[0].row).toBe(2);\n    expect(beforeSetRangeStartOnly.calls.argsFor(1)[0].col).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(2)[0].row).toBe(7);\n    expect(beforeSetRangeStartOnly.calls.argsFor(2)[0].col).toBe(7);\n    expect(beforeSetRangeStartOnly.calls.argsFor(3)[0].row).toBe(8);\n    expect(beforeSetRangeStartOnly.calls.argsFor(3)[0].col).toBe(4);\n    expect(beforeSetRangeStartOnly.calls.argsFor(4)[0].row).toBe(2);\n    expect(beforeSetRangeStartOnly.calls.argsFor(4)[0].col).toBe(4);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/selectCells.spec.js","describe('Core.selectColumns', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should mark single column visually (default selectionMode, without headers)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: false,\n      rowHeaders: false,\n    });\n\n    selectColumns(2);\n\n    expect(`\n      |   :   : A :   |\n      |   :   : 0 :   |\n      |   :   : 0 :   |\n      |   :   : 0 :   |\n      |   :   : 0 :   |\n      |   :   : 0 :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single column visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectColumns(2);\n\n    expect(`\n      |   ║   :   : * :   |\n      |===:===:===:===:===|\n      | - ║   :   : A :   |\n      | - ║   :   : 0 :   |\n      | - ║   :   : 0 :   |\n      | - ║   :   : 0 :   |\n      | - ║   :   : 0 :   |\n      | - ║   :   : 0 :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark non-contiquous selection when CTRL key is pressed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectColumns(2);\n    keyDown('ctrl');\n    selectColumns(0);\n\n    expect(`\n      |   ║ * :   : * :   |\n      |===:===:===:===:===|\n      | - ║ A :   : 0 :   |\n      | - ║ 0 :   : 0 :   |\n      | - ║ 0 :   : 0 :   |\n      | - ║ 0 :   : 0 :   |\n      | - ║ 0 :   : 0 :   |\n      | - ║ 0 :   : 0 :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single column visually (default selectionMode, fixedColumnsLeft enabled)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n      fixedColumnsLeft: 2,\n    });\n\n    selectColumns(1, 2);\n\n    expect(`\n      |   ║   : * | * :   |\n      |===:===:===:===:===|\n      | - ║   : A | 0 :   |\n      | - ║   : 0 | 0 :   |\n      | - ║   : 0 | 0 :   |\n      | - ║   : 0 | 0 :   |\n      | - ║   : 0 | 0 :   |\n      | - ║   : 0 | 0 :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single column visually (default selectionMode) using column property', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectColumns('prop2');\n\n    expect(`\n      |   ║   :   : * :   |\n      |===:===:===:===:===|\n      | - ║   :   : A :   |\n      | - ║   :   : 0 :   |\n      | - ║   :   : 0 :   |\n      | - ║   :   : 0 :   |\n      | - ║   :   : 0 :   |\n      | - ║   :   : 0 :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the columns visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectColumns(2, 3);\n\n    expect(`\n      |   ║   :   : * : * |\n      |===:===:===:===:===|\n      | - ║   :   : A : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the columns visually (default selectionMode, reversed selection)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectColumns(3, 2);\n\n    expect(`\n      |   ║   :   : * : * |\n      |===:===:===:===:===|\n      | - ║   :   : 0 : A |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the columns visually (default selectionMode) using column property', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectColumns('prop2', 'prop3');\n\n    expect(`\n      |   ║   :   : * : * |\n      |===:===:===:===:===|\n      | - ║   :   : A : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the columns visually (default selectionMode, reversed selection) using column property', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectColumns('prop3', 'prop2');\n\n    expect(`\n      |   ║   :   : * : * |\n      |===:===:===:===:===|\n      | - ║   :   : 0 : A |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      | - ║   :   : 0 : 0 |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark only single cell visually when selectionMode is set as `single', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n      selectionMode: 'single',\n    });\n\n    selectColumns(2);\n\n    expect(`\n      |   ║   :   : - :   |\n      |===:===:===:===:===|\n      | - ║   :   : # :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark the range of the columns visually when selectionMode is set as `range`', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n      selectionMode: 'range',\n    });\n\n    selectColumns(1, 2);\n\n    expect(`\n      |   ║   : * : * :   |\n      |===:===:===:===:===|\n      | - ║   : A : 0 :   |\n      | - ║   : 0 : 0 :   |\n      | - ║   : 0 : 0 :   |\n      | - ║   : 0 : 0 :   |\n      | - ║   : 0 : 0 :   |\n      | - ║   : 0 : 0 :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not deselect current selection when selectColumns is called without arguments', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    selectCell(1, 1); // Initial selection.\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n\n    selectColumns();\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n  });\n\n  it('should not deselect current selection when selectColumns is called with negative values', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectColumns(0, -1);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectColumns(-1, 0);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectColumns(-3, -1);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectColumns(-2);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when selectColumns is called with coordinates beyond the table data range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(3, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectColumns(3, 4);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectColumns(0, 4);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectColumns(4);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectColumns(200);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when selectColumns is called with undefined column property', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectColumns(0, 'notExistProp');\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectColumns('notExistProp');\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should select only one column when two the same arguments are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectColumns(1, 1);\n\n    expect(getSelected()).toEqual([[0, 1, 5, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select only one column when two the same arguments are passed (column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectColumns(1, 'prop1');\n\n    expect(getSelected()).toEqual([[0, 1, 5, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of columns when the coordinates are passed in reversed order (from right to left)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectColumns(2, 1);\n\n    expect(getSelected()).toEqual([[0, 2, 5, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of columns when the coordinates are passed in reversed order (from right to left using column property)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectColumns('prop2', 'prop1');\n\n    expect(getSelected()).toEqual([[0, 2, 5, 1]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should not the scroll the viewport when column is selected', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(15, 1); // Scroll to the bottom of the Hot viewport.\n\n    const scrollTop = hot.view.wt.wtTable.holder.scrollTop;\n\n    selectColumns(1);\n\n    expect(hot.view.wt.wtTable.holder.scrollTop).toBe(scrollTop);\n  });\n\n  it('should fire hooks with proper context', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectColumns(1, 2);\n\n    expect(afterSelection.calls.first().object).toBe(hot);\n    expect(afterSelectionByProp.calls.first().object).toBe(hot);\n    expect(afterSelectionEnd.calls.first().object).toBe(hot);\n    expect(afterSelectionEndByProp.calls.first().object).toBe(hot);\n    expect(beforeSetRangeStartOnly.calls.first().object).toBe(hot);\n  });\n\n  it('should fire hooks with proper arguments when a single column is selected', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectColumns(1);\n\n    expect(afterSelection.calls.count()).toBe(1);\n    expect(afterSelection.calls.argsFor(0)).toEqual([0, 1, 19, 1, jasmine.any(Object), 0]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(1);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([0, 'prop1', 19, 'prop1', jasmine.any(Object), 0]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(1);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([0, 1, 19, 1, 0, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(1);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([0, 'prop1', 19, 'prop1', 0, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(0);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(1);\n  });\n\n  it('should fire hooks with proper arguments when range of the columns are selected', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectColumns(1, 2);\n\n    expect(afterSelection.calls.count()).toBe(1);\n    expect(afterSelection.calls.argsFor(0)).toEqual([0, 1, 19, 2, jasmine.any(Object), 0]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(1);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([0, 'prop1', 19, 'prop2', jasmine.any(Object), 0]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(1);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([0, 1, 19, 2, 0, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(1);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([0, 'prop1', 19, 'prop2', 0, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(0);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(1);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/selectColumns.spec.js","describe('Core.selectRows', () => {\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should mark single row visually (default selectionMode, without headers)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    selectRows(2);\n\n    expect(`\n      |   :   :   :   |\n      |   :   :   :   |\n      | A : 0 : 0 : 0 |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark single row visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectRows(2);\n\n    expect(`\n      |   ║ - : - : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | * ║ A : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark non-contiquous selection when CTRL key is pressed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectRows(2);\n    keyDown('ctrl');\n    selectRows(0);\n\n    expect(`\n      |   ║ - : - : - : - |\n      |===:===:===:===:===|\n      | * ║ A : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      | * ║ 0 : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the rows visually (default selectionMode)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectRows(2, 3);\n\n    expect(`\n      |   ║ - : - : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | * ║ A : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark range of the rows visually (default selectionMode, reversed selection)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    selectRows(3, 2);\n\n    expect(`\n      |   ║ - : - : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | * ║ 0 : 0 : 0 : 0 |\n      | * ║ A : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark only single cell visually when selectionMode is set as `single', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n      selectionMode: 'single',\n    });\n\n    selectRows(2);\n\n    expect(`\n      |   ║ - :   :   :   |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      | - ║ # :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should mark the range of the rows visually when selectionMode is set as `range`', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n      colHeaders: true,\n      rowHeaders: true,\n      selectionMode: 'range',\n    });\n\n    selectRows(1, 2);\n\n    expect(`\n      |   ║ - : - : - : - |\n      |===:===:===:===:===|\n      |   ║   :   :   :   |\n      | * ║ A : 0 : 0 : 0 |\n      | * ║ 0 : 0 : 0 : 0 |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      |   ║   :   :   :   |\n      `).toBeMatchToSelectionPattern();\n  });\n\n  it('should not deselect current selection when selectRows is called without arguments', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    selectCell(1, 1); // Initial selection.\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n\n    selectRows();\n\n    expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n  });\n\n  it('should not deselect current selection when selectRows is called with negative values', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectRows(0, -1);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectRows(-1, 0);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectRows(-3, -1);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectRows(-2);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when selectRows is called with coordinates beyond the table data range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(3, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectRows(3, 4);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectRows(0, 4);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectRows(4);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectRows(200);\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should not deselect current selection when selectRows is called with undefined column property', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    let wasSelected = selectCell(0, 0, 2, 2); // Initial selection.\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(true);\n\n    wasSelected = selectRows(0, 'notExistProp');\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n\n    wasSelected = selectRows('notExistProp');\n\n    expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    expect(wasSelected).toBe(false);\n  });\n\n  it('should select only one row when two the same arguments are passed', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectRows(1, 1);\n\n    expect(getSelected()).toEqual([[1, 0, 1, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should select range of rows when the coordinates are passed in reversed order (from right to left)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),\n    });\n\n    const wasSelected = selectRows(2, 1);\n\n    expect(getSelected()).toEqual([[2, 0, 1, 3]]);\n    expect(wasSelected).toBe(true);\n  });\n\n  it('should not the scroll the viewport when row is selected', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n    });\n\n    selectCell(1, 15); // Scroll to the bottom of the Hot viewport.\n\n    const scrollTop = hot.view.wt.wtTable.holder.scrollTop;\n\n    selectRows(1);\n\n    expect(hot.view.wt.wtTable.holder.scrollTop).toBe(scrollTop);\n  });\n\n  it('should fire hooks with proper context', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectRows(1, 2);\n\n    expect(afterSelection.calls.first().object).toBe(hot);\n    expect(afterSelectionByProp.calls.first().object).toBe(hot);\n    expect(afterSelectionEnd.calls.first().object).toBe(hot);\n    expect(afterSelectionEndByProp.calls.first().object).toBe(hot);\n    expect(beforeSetRangeStartOnly.calls.first().object).toBe(hot);\n  });\n\n  it('should fire hooks with proper arguments when a single row is selected', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectRows(1);\n\n    expect(afterSelection.calls.count()).toBe(1);\n    expect(afterSelection.calls.argsFor(0)).toEqual([1, 0, 1, 19, jasmine.any(Object), 0]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(1);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop0', 1, 'prop19', jasmine.any(Object), 0]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(1);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 0, 1, 19, 0, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(1);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop0', 1, 'prop19', 0, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(0);\n  });\n\n  it('should fire hooks with proper arguments when range of the columns are selected', () => {\n    const {\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    } = jasmine.createSpyObj('hooks', [\n      'afterSelection',\n      'afterSelectionByProp',\n      'afterSelectionEnd',\n      'afterSelectionEndByProp',\n      'beforeSetRangeStart',\n      'beforeSetRangeStartOnly',\n      'beforeSetRangeEnd',\n    ]);\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),\n      height: 300,\n      width: 300,\n      afterSelection,\n      afterSelectionByProp,\n      afterSelectionEnd,\n      afterSelectionEndByProp,\n      beforeSetRangeStart,\n      beforeSetRangeStartOnly,\n      beforeSetRangeEnd,\n    });\n\n    selectRows(1, 2);\n\n    expect(afterSelection.calls.count()).toBe(1);\n    expect(afterSelection.calls.argsFor(0)).toEqual([1, 0, 2, 19, jasmine.any(Object), 0]);\n\n    expect(afterSelectionByProp.calls.count()).toBe(1);\n    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop0', 2, 'prop19', jasmine.any(Object), 0]);\n\n    expect(afterSelectionEnd.calls.count()).toBe(1);\n    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 0, 2, 19, 0, void 0]);\n\n    expect(afterSelectionEndByProp.calls.count()).toBe(1);\n    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop0', 2, 'prop19', 0, void 0]);\n\n    expect(beforeSetRangeStart.calls.count()).toBe(0);\n\n    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);\n    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(0);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/selectRows.spec.js","describe('Core.setCellMeta', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should set correct meta className for cell', () => {\n\n    const className = 'htCenter htMiddle';\n\n    handsontable({\n      afterCellMetaReset() {\n        this.setCellMeta(0, 0, 'className', className);\n      }\n    });\n\n    const cellMeta = getCellMeta(0, 0);\n\n    expect(cellMeta.className).not.toBeUndefined();\n    expect(cellMeta.className).toEqual(className);\n  });\n\n  it('should set proper cell meta when indexes was modified', () => {\n    handsontable({\n      modifyRow(row) {\n        return row + 10;\n      },\n      modifyCol(col) {\n        return col + 10;\n      }\n    });\n\n    setCellMeta(0, 1, 'key', 'value');\n\n    expect(getCellMeta(0, 1).key).toEqual('value');\n  });\n\n  it('should set correct meta className for non existed cell', () => {\n    const className = 'htCenter htMiddle';\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      afterCellMetaReset() {\n        this.setCellMeta(100, 100, 'className', className);\n      }\n    });\n\n    const cellMeta = getCellMeta(100, 100);\n\n    expect(cellMeta.className).not.toBeUndefined();\n    expect(cellMeta.className).toEqual(className);\n  });\n\n  it('should set correct meta classNames for cells using cell in configuration', () => {\n    const classNames = [\n      'htCenter htTop',\n      'htRight htBottom'\n    ];\n\n    handsontable({\n      cell: [\n        { row: 0, col: 0, className: classNames[0] },\n        { row: 1, col: 1, className: classNames[1] }\n      ]\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[0]);\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[1]);\n  });\n\n  it('should change cell meta data with updateSettings when the cell option is defined', () => {\n    const classNames = [\n      'htCenter htTop',\n      'htRight htBottom'\n    ];\n\n    handsontable({\n      cell: [\n        { row: 0, col: 0, className: classNames[0] },\n        { row: 1, col: 1, className: classNames[1] }\n      ]\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[0]);\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[1]);\n\n    updateSettings({\n      cell: []\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual('');\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual('');\n\n    updateSettings({\n      cell: [\n        { row: 0, col: 0, className: classNames[1] },\n        { row: 1, col: 1, className: classNames[0] }\n      ]\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[1]);\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[0]);\n  });\n\n  it('should call `afterSetCellMeta` plugin hook with visual indexes as parameters', () => {\n    const className = 'htCenter htMiddle';\n    const afterSetCellMeta = jasmine.createSpy('afterSetCellMeta');\n\n    const hot = handsontable({\n      afterSetCellMeta,\n      modifyRow(row) {\n        return row + 10;\n      },\n      modifyCol(col) {\n        return col + 10;\n      }\n    });\n\n    hot.setCellMeta(0, 1, 'className', className);\n\n    expect(afterSetCellMeta).toHaveBeenCalledWith(0, 1, 'className', className, undefined, undefined);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/setCellMeta.spec.js","describe('Core.spliceCellsMeta', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should splice the cell meta array analogously to the native `splice` method', () => {\n    handsontable();\n\n    let allMeta = getCellsMeta();\n    expect(allMeta.length).toBe(25);\n    spliceCellsMeta(3, 1);\n    allMeta = getCellsMeta();\n    expect(allMeta.length).toBe(20);\n\n    let metaAtRow = getCellMetaAtRow(2);\n    expect(metaAtRow[0].row).toEqual(2);\n    metaAtRow = getCellMetaAtRow(3);\n    expect(metaAtRow[0].row).toEqual(4);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/spliceCellsMeta.spec.js","describe('Core.spliceCol', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should remove from the second column three rows starting from the beginning', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    const removedData = hot.spliceCol(1, 0, 3);\n\n    expect(removedData).toEqual(['B1', 'B2', 'B3']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B4', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B5', 'C2', 'D2', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', null, 'C3', 'D3', 'E3']);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', null, 'C4', 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', null, 'C5', 'D5', 'E5']);\n  });\n\n  it('should remove from the third column three rows starting from the second row', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    const removedData = hot.spliceCol(2, 1, 3);\n\n    expect(removedData).toEqual(['C2', 'C3', 'C4']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B2', 'C5', 'D2', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', null, 'D3', 'E3']);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', null, 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', null, 'D5', 'E5']);\n  });\n\n  it('should replace and append new rows in the second column starting from the second row', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    const removedData = hot.spliceCol(1, 1, 3, 'X1', 'X2', 'X3', 'X4', 'X5');\n\n    expect(removedData).toEqual(['B2', 'B3', 'B4']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'X1', 'C2', 'D2', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'X2', 'C3', 'D3', 'E3']);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'X3', 'C4', 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'X4', 'C5', 'D5', 'E5']);\n    expect(hot.getDataAtRow(5)).toEqual([null, 'X5', null, null, null]);\n    expect(hot.getDataAtRow(6)).toEqual([null, 'B5', null, null, null]);\n  });\n\n  it('should trigger beforeChange and afterChange hook with proper arguments', () => {\n    const spyAfter = jasmine.createSpy('after');\n    const spyBefore = jasmine.createSpy('before');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      beforeChange: spyBefore,\n      afterChange: spyAfter,\n    });\n\n    hot.spliceCol(2, 1, 3, 'X1');\n\n    expect(spyBefore.calls.argsFor(0)[0]).toEqual([[1, 2, 'C2', 'X1'], [2, 2, 'C3', 'C5'], [3, 2, 'C4', null], [4, 2, 'C5', null], [5, 2, null, null]]);\n    expect(spyBefore.calls.argsFor(0)[1]).toBe('spliceCol');\n    expect(spyAfter.calls.argsFor(1)[0]).toEqual([[1, 2, 'C2', 'X1'], [2, 2, 'C3', 'C5'], [3, 2, 'C4', null], [4, 2, 'C5', null], [5, 2, null, null]]);\n    expect(spyAfter.calls.argsFor(1)[1]).toBe('spliceCol');\n  });\n\n  it('should trigger beforeCreateRow and afterCreateRow hook with proper arguments', () => {\n    const spyAfter = jasmine.createSpy('after');\n    const spyBefore = jasmine.createSpy('before');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      beforeCreateRow: spyBefore,\n      afterCreateRow: spyAfter,\n    });\n\n    hot.spliceCol(2, 1, 3, 'X1', 'X2', 'X3', 'X4');\n\n    expect(spyBefore).toHaveBeenCalledWith(5, 1, 'spliceCol', undefined, undefined, undefined);\n    expect(spyAfter).toHaveBeenCalledWith(5, 1, 'spliceCol', undefined, undefined, undefined);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/spliceCol.spec.js","describe('Core.spliceRow', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should remove from the second row three columns starting from the beginning', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    const removedData = hot.spliceRow(1, 0, 3);\n\n    expect(removedData).toEqual(['A2', 'B2', 'C2']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['D2', 'E2', null, null, null]);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', 'C3', 'D3', 'E3']);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5']);\n  });\n\n  it('should remove from the third row three columns starting from the second column', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    const removedData = hot.spliceRow(2, 1, 3);\n\n    expect(removedData).toEqual(['B3', 'C3', 'D3']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B2', 'C2', 'D2', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'E3', null, null, null]);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5']);\n  });\n\n  it('should replace and append new columns in the second row starting from the second column', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    const removedData = hot.spliceRow(1, 1, 3, 'X1', 'X2', 'X3', 'X4', 'X5');\n\n    expect(removedData).toEqual(['B2', 'C2', 'D2']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', null, null]);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'X1', 'X2', 'X3', 'X4', 'X5', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', 'C3', 'D3', 'E3', null, null]);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4', null, null]);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5', null, null]);\n  });\n\n  it('should trigger beforeChange and afterChange hook with proper arguments', () => {\n    const spyAfter = jasmine.createSpy('after');\n    const spyBefore = jasmine.createSpy('before');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      beforeChange: spyBefore,\n      afterChange: spyAfter,\n    });\n\n    hot.spliceRow(2, 1, 3, 'X1');\n\n    expect(spyBefore.calls.argsFor(0)[0]).toEqual([[2, 1, 'B3', 'X1'], [2, 2, 'C3', 'E3'], [2, 3, 'D3', null], [2, 4, 'E3', null], [2, 5, undefined, null]]);\n    expect(spyBefore.calls.argsFor(0)[1]).toBe('spliceRow');\n    expect(spyAfter.calls.argsFor(1)[0]).toEqual([[2, 1, 'B3', 'X1'], [2, 2, 'C3', 'E3'], [2, 3, 'D3', null], [2, 4, 'E3', null], [2, 5, undefined, null]]);\n    expect(spyAfter.calls.argsFor(1)[1]).toBe('spliceRow');\n  });\n\n  it('should trigger beforeCreateCol and afterCreateCol hook with proper arguments', () => {\n    const spyAfter = jasmine.createSpy('after');\n    const spyBefore = jasmine.createSpy('before');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      beforeCreateCol: spyBefore,\n      afterCreateCol: spyAfter,\n    });\n\n    hot.spliceRow(2, 1, 3, 'X1', 'X2', 'X3', 'X4');\n\n    expect(spyBefore).toHaveBeenCalledWith(5, 1, 'spliceRow', undefined, undefined, undefined);\n    expect(spyAfter).toHaveBeenCalledWith(5, 1, 'spliceRow', undefined, undefined, undefined);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/spliceRow.spec.js","describe('Core.toPhysicalColumn', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid physical row index', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      modifyCol(column) {\n        return column + 3;\n      }\n    });\n\n    expect(hot.toPhysicalColumn(0)).toBe(3);\n    expect(hot.toPhysicalColumn(1)).toBe(4);\n    expect(hot.toPhysicalColumn(2)).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/toPhysicalColumn.spec.js","describe('Core.toPhysicalRow', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid physical row index', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      modifyRow(row) {\n        return row + 3;\n      }\n    });\n\n    expect(hot.toPhysicalRow(0)).toBe(3);\n    expect(hot.toPhysicalRow(1)).toBe(4);\n    expect(hot.toPhysicalRow(2)).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/toPhysicalRow.spec.js","describe('Core.toVisualColumn', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid visual row index', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      unmodifyCol(column) {\n        return column + 3;\n      }\n    });\n\n    expect(hot.toVisualColumn(0)).toBe(3);\n    expect(hot.toVisualColumn(1)).toBe(4);\n    expect(hot.toVisualColumn(2)).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/toVisualColumn.spec.js","describe('Core.toVisualRow', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid visual row index', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      unmodifyRow(row) {\n        return row + 3;\n      }\n    });\n\n    expect(hot.toVisualRow(0)).toBe(3);\n    expect(hot.toVisualRow(1)).toBe(4);\n    expect(hot.toVisualRow(2)).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/core/toVisualRow.spec.js","describe('AutocompleteEditor', () => {\n  const id = 'testContainer';\n  const choices = ['yellow', 'red', 'orange', 'green', 'blue', 'gray', 'black', 'white', 'purple', 'lime', 'olive', 'cyan'];\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('open editor', () => {\n    it('should display editor (after hitting ENTER)', () => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      expect(isEditorVisible()).toBe(false);\n\n      keyDownUp('enter');\n      expect(isEditorVisible()).toBe(true);\n    });\n\n    it('should display editor (after hitting F2)', () => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      expect(isEditorVisible()).toBe(false);\n\n      keyDownUp('f2');\n      expect(isEditorVisible()).toBe(true);\n    });\n\n    it('should display editor (after doubleclicking)', () => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      expect(isEditorVisible()).toBe(false);\n\n      mouseDoubleClick($(getCell(0, 0)));\n      expect(isEditorVisible()).toBe(true);\n    });\n\n    // see https://github.com/handsontable/handsontable/issues/3380\n    it('should not throw error while selecting the next cell by hitting enter key', () => {\n      const spy = jasmine.createSpyObj('error', ['test']);\n      const prevError = window.onerror;\n\n      window.onerror = function() {\n        spy.test();\n      };\n      handsontable({\n        columns: [{\n          editor: 'autocomplete',\n          source: choices\n        }]\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n      keyDownUp('enter');\n      keyDownUp('enter');\n\n      expect(spy.test.calls.count()).toBe(0);\n\n      window.onerror = prevError;\n    });\n  });\n\n  describe('choices', () => {\n    it('should display given choices (array)', (done) => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editor = $('.autocompleteEditor');\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);\n        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);\n        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);\n        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);\n        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);\n        done();\n      }, 100);\n    });\n\n    it('should call source function with context set as cellProperties', (done) => {\n      const source = jasmine.createSpy('source');\n      let context;\n\n      source.and.callFake(function(query, process) {\n        process(choices);\n        context = this;\n      });\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source\n          }\n        ]\n      });\n      selectCell(0, 0);\n      source.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(context.instance).toBe(hot);\n        expect(context.row).toBe(0);\n        expect(context.col).toBe(0);\n        done();\n      }, 200);\n    });\n\n    it('should display given choices (sync function)', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editor = $('.autocompleteEditor');\n      syncSources.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);\n        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);\n        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);\n        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);\n        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);\n        done();\n      }, 200);\n    });\n\n    it('should display given choices (async function)', (done) => {\n      const asyncSources = jasmine.createSpy('asyncSources');\n\n      asyncSources.and.callFake((process) => {\n        process(choices);\n      });\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source(query, process) {\n              setTimeout(() => {\n                asyncSources(process);\n              }, 0);\n            }\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editor = $('.autocompleteEditor');\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(asyncSources.calls.count()).toEqual(1);\n        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);\n        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);\n        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);\n        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);\n        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);\n        done();\n      }, 200);\n    });\n\n    it('should NOT update choices list, after cursor leaves and enters the list (#1330)', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();\n      const updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editor = hot.getActiveEditor();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        updateChoicesList.calls.reset();\n        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseenter();\n        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseleave();\n        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseenter();\n      }, 200);\n\n      setTimeout(() => {\n        expect(updateChoicesList).not.toHaveBeenCalled();\n        done();\n      }, 300);\n    });\n\n    it('should update choices list exactly once after a key is pressed (#1330)', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();\n      const updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editor = hot.getActiveEditor();\n      updateChoicesList.calls.reset();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        updateChoicesList.calls.reset();\n        editor.TEXTAREA.value = 'red';\n\n        $(editor.TEXTAREA).simulate('keydown', {\n          keyCode: 'd'.charCodeAt(0)\n        });\n      }, 200);\n\n      setTimeout(() => {\n        expect(updateChoicesList.calls.count()).toEqual(1);\n        done();\n      }, 100);\n    });\n\n    it('should not initialize the dropdown with unneeded scrollbars (scrollbar causing a scrollbar issue)', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();\n      const updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;\n\n      const hot = handsontable({\n        data: [\n          [\n            'blue'\n          ],\n          [],\n          [],\n          []\n        ],\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editor = hot.getActiveEditor();\n      updateChoicesList.calls.reset();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.htContainer.scrollWidth).toEqual(editor.htContainer.clientWidth);\n        done();\n      }, 200);\n    });\n\n    it('autocomplete list should have textarea dimensions', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        colWidths: [200],\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editor = $('.handsontableInputHolder');\n\n      syncSources.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        // -2 for transparent borders\n        expect(editor.find('.autocompleteEditor .htCore td').width()).toEqual(editor.find('.handsontableInput').width() - 2);\n        expect(editor.find('.autocompleteEditor .htCore td').width()).toBeGreaterThan(187);\n        done();\n      }, 200);\n    });\n\n    it('autocomplete list should have the suggestion table dimensions, when trimDropdown option is set to false', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(['long text', 'even longer text', 'extremely long text in the suggestion list', 'short text', 'text', 'another', 'yellow', 'black']);\n      });\n\n      handsontable({\n        colWidths: [200],\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ],\n        trimDropdown: false,\n      });\n\n      selectCell(0, 0);\n      const editor = $('.handsontableInputHolder');\n\n      syncSources.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('.autocompleteEditor .htCore td').eq(0).width()).toBeGreaterThan(editor.find('.handsontableInput').width());\n        done();\n      }, 200);\n    });\n\n    // TODO: This test never properly tests the case of refreshing editor after re-render the table. Previously this\n    // test passes because sleep timeout was small enough to read the valid width before the editor element was resized.\n    // Related issue #5103\n    xit('autocomplete textarea should have cell dimensions (after render)', async() => {\n      const data = [\n        ['a', 'b'],\n        ['c', 'd']\n      ];\n\n      handsontable({\n        data,\n        minRows: 4,\n        minCols: 4,\n        minSpareRows: 4,\n        minSpareCols: 4,\n        cells() {\n          return {\n            type: Handsontable.AutocompleteCell\n          };\n        }\n      });\n\n      selectCell(1, 1);\n      keyDownUp('enter');\n\n      await sleep(10);\n\n      data[1][1] = 'dddddddddddddddddddd';\n      render();\n\n      await sleep(10);\n\n      const $td = spec().$container.find('.htCore tbody tr:eq(1) td:eq(1)');\n\n      expect(autocompleteEditor().width()).toEqual($td.width());\n    });\n\n    it('should invoke beginEditing only once after doubleclicking on a cell (#1011)', () => {\n      const hot = handsontable({\n        columns: [\n          {},\n          {},\n          {\n            type: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 2);\n      spyOn(hot.getActiveEditor(), 'beginEditing');\n\n      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(0);\n\n      mouseDoubleClick(getCell(0, 2));\n\n      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(1);\n\n      mouseDoubleClick(getCell(1, 2));\n\n      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(2);\n\n      mouseDoubleClick(getCell(2, 2));\n\n      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(3);\n    });\n\n    it('should not display all the choices from a long source list and not leave any unused space in the dropdown', async() => {\n      handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source: [\n              'Acura', 'Audi', 'BMW', 'Buick', 'Cadillac', 'Chevrolet', 'Chrysler', 'Citroen', 'Dodge', 'Eagle', 'Ferrari',\n              'Ford', 'General Motors', 'GMC', 'Honda', 'Hummer', 'Hyundai', 'Infiniti', 'Isuzu', 'Jaguar', 'Jeep', 'Kia',\n              'Lamborghini', 'Land Rover', 'Lexus', 'Lincoln', 'Lotus', 'Mazda', 'Mercedes-Benz', 'Mercury', 'Mitsubishi',\n              'Nissan', 'Oldsmobile', 'Peugeot', 'Pontiac', 'Porsche', 'Regal', 'Renault', 'Saab', 'Saturn', 'Seat', 'Skoda',\n              'Subaru', 'Suzuki', 'Toyota', 'Volkswagen', 'Volvo']\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n      const $autocomplete = autocomplete();\n      const $autocompleteHolder = $autocomplete.find('.ht_master .wtHolder').first();\n      await sleep(100);\n\n      expect($autocomplete.find('td').first().text()).toEqual('Acura');\n\n      $autocompleteHolder.scrollTop($autocompleteHolder[0].scrollHeight);\n      await sleep(100);\n\n      expect($autocomplete.find('td').last().text()).toEqual('Volvo');\n    });\n\n    it('should display the choices, regardless if they\\'re declared as string or numeric', (done) => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: ['1', '2', 3, '4', 5, 6]\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n\n      const editor = $('.autocompleteEditor');\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('tbody td:eq(0)').text()).toEqual('1');\n        expect(editor.find('tbody td:eq(1)').text()).toEqual('2');\n        expect(editor.find('tbody td:eq(2)').text()).toEqual('3');\n        expect(editor.find('tbody td:eq(3)').text()).toEqual('4');\n        expect(editor.find('tbody td:eq(4)').text()).toEqual('5');\n        expect(editor.find('tbody td:eq(5)').text()).toEqual('6');\n        done();\n      }, 100);\n    });\n\n    it('should display the choices, regardless if they\\'re declared as string or numeric, when data is present', (done) => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 1),\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: ['1', '2', 3, '4', 5, 6]\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n\n      keyDownUp('backspace');\n\n      const editor = $('.autocompleteEditor');\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('tbody td:eq(0)').text()).toEqual('1');\n        expect(editor.find('tbody td:eq(1)').text()).toEqual('2');\n        expect(editor.find('tbody td:eq(2)').text()).toEqual('3');\n        expect(editor.find('tbody td:eq(3)').text()).toEqual('4');\n        expect(editor.find('tbody td:eq(4)').text()).toEqual('5');\n        expect(editor.find('tbody td:eq(5)').text()).toEqual('6');\n        done();\n      }, 100);\n    });\n\n    it('should display the dropdown above the editor, when there is not enough space below the cell AND there is more space above the cell', (done) => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}\n        ],\n        width: 400,\n        height: 400\n      });\n\n      setDataAtCell(29, 0, '');\n      selectCell(29, 0);\n\n      mouseDoubleClick($(getCell(29, 0)));\n\n      setTimeout(() => {\n        const autocompleteEditor = $('.autocompleteEditor');\n\n        expect(autocompleteEditor.css('position')).toEqual('absolute');\n        expect(autocompleteEditor.css('top')).toEqual(`${(-1) * autocompleteEditor.height()}px`);\n        done();\n      }, 200);\n    });\n\n    it('should flip the dropdown upwards when there is no more room left below the cell after filtering the choice list', async() => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}\n        ],\n        width: 400,\n        height: 400\n      });\n\n      setDataAtCell(26, 0, 'b');\n      selectCell(26, 0);\n\n      hot.view.wt.wtTable.holder.scrollTop = 999;\n      mouseDoubleClick($(getCell(26, 0)));\n\n      const autocompleteEditor = $('.autocompleteEditor');\n\n      await sleep(100);\n      expect(autocompleteEditor.css('position')).toEqual('relative');\n\n      autocompleteEditor.siblings('textarea').first().val('');\n      keyDownUp('backspace');\n      await sleep(100);\n\n      expect(autocompleteEditor.css('position')).toEqual('absolute');\n      expect(autocompleteEditor.css('top')).toEqual(`${(-1) * autocompleteEditor.height()}px`);\n    });\n  });\n\n  describe('closing editor', () => {\n    it('should destroy editor when value change with mouse click on suggestion', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(3)').simulate('mousedown');\n\n        expect(getDataAtCell(0, 0)).toEqual('green');\n        done();\n      }, 200);\n    });\n\n    it('should not change value type from `numeric` to `string` after mouse click suggestion - ' +\n      'test no. 1 #4143', (done) => {\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: [1, 2, 3, 4, 5, 11, 14]\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(0)').simulate('mousedown');\n\n        expect(typeof getDataAtCell(0, 0)).toEqual('number');\n        done();\n      }, 200);\n    });\n\n    it('should not change value type from `numeric` to `string` after mouse click on suggestion - ' +\n      'test no. 2 #4143', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n      const source = [1, 2, 3, 4, 5, 11, 14];\n\n      syncSources.and.callFake((query, process) => {\n        process(source);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(0)').simulate('mousedown');\n\n        expect(typeof getDataAtCell(0, 0)).toEqual('number');\n        done();\n      }, 200);\n    });\n\n    it('should call `afterChange` hook with proper value types - test no. 1 #4143', (done) => {\n      let changesInside;\n\n      const afterChange = (changes, source) => {\n        if (source !== 'loadData') {\n          changesInside = changes;\n        }\n      };\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: [1, 2, 3, 4, 5, 11, 14]\n          }\n        ],\n        afterChange\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(1)').simulate('mousedown');\n\n        expect(changesInside[0]).toEqual([0, 0, null, 2]);\n        done();\n      }, 200);\n    });\n\n    it('should call `afterChange` hook with proper value types - test no. 2 #4143', (done) => {\n      let changesInside;\n\n      const afterChange = (changes, source) => {\n        if (source !== 'loadData') {\n          changesInside = changes;\n        }\n      };\n\n      const syncSources = jasmine.createSpy('syncSources');\n      const source = [1, 2, 3, 4, 5, 11, 14];\n\n      syncSources.and.callFake((query, process) => {\n        process(source);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ],\n        afterChange\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(1)').simulate('mousedown');\n\n        expect(changesInside[0]).toEqual([0, 0, null, 2]);\n        done();\n      }, 200);\n    });\n\n    it('should not change value type from `numeric` to `string` when written down value from set of suggestions #4143', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n      const source = [1, 2, 3, 4, 5, 11, 14];\n\n      syncSources.and.callFake((query, process) => {\n        process(source);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n      keyDownUp('backspace');\n      document.activeElement.value = '1';\n      $(document.activeElement).simulate('keyup');\n\n      setTimeout(() => {\n        keyDownUp('enter');\n        expect(getDataAtCell(0, 0)).toEqual(1);\n\n        done();\n      }, 200);\n    });\n\n    it('should destroy editor when value change with Enter on suggestion', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n\n        expect(getDataAtCell(0, 0)).toEqual('green');\n        done();\n      }, 200);\n    });\n\n    it('should destroy editor when pressed Enter then Esc', async() => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      await sleep(200);\n\n      expect(isEditorVisible(autocompleteEditor())).toBe(true);\n\n      keyDownUp('esc');\n\n      expect(isEditorVisible(autocompleteEditor())).toBe(false);\n    });\n\n    it('should destroy editor when mouse double clicked then Esc', async() => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      mouseDoubleClick(getCell(0, 0));\n\n      await sleep(200);\n\n      expect(isEditorVisible(autocompleteEditor())).toBe(true);\n\n      keyDownUp('esc');\n\n      expect(isEditorVisible(autocompleteEditor())).toBe(false);\n    });\n\n    it('cancel editing (Esc) should restore the previous value', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n\n      setDataAtCell(0, 0, 'black');\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().siblings('.handsontableInput').val('ye');\n        keyDownUp(69); // e\n        keyDownUp('esc');\n\n        expect(getDataAtCell(0, 0)).toEqual('black');\n        done();\n      }, 200);\n    });\n\n    it('should destroy editor when clicked outside the table', async() => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      mouseDoubleClick(getCell(0, 0));\n\n      await sleep(200);\n\n      expect(isEditorVisible(autocompleteEditor())).toBe(true);\n\n      $('body').simulate('mousedown');\n\n      expect(isEditorVisible(autocompleteEditor())).toBe(false);\n    });\n\n    it('should show fillHandle element again after close editor', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.plan = function(query, process) {\n        process(choices.filter(choice => choice.indexOf(query) !== -1));\n      };\n\n      handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source: syncSources,\n            strict: false\n          },\n          {}\n        ]\n      });\n\n      selectCell(1, 0);\n      keyDownUp('x'); // Trigger quick edit mode\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect($('#testContainer.handsontable > .handsontable .wtBorder.current.corner:visible').length).toEqual(1);\n        done();\n      }, 200);\n    });\n  });\n\n  describe('non strict mode', () => {\n    it('should allow any value in non strict mode (close editor with ENTER)', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        const editor = $('.handsontableInput');\n        editor.val('foo');\n        keyDownUp('enter');\n\n        expect(getDataAtCell(0, 0)).toEqual('foo');\n        done();\n      }, 200);\n    });\n\n    it('should allow any value in non strict mode (close editor by clicking on table)', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        const editor = $('.handsontableInput');\n        editor.val('foo');\n        spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mousedown');\n\n        expect(getDataAtCell(0, 0)).toEqual('foo');\n        done();\n      }, 200);\n    });\n\n    it('should save the value from textarea after hitting ENTER', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter(choice => choice.indexOf(query) !== -1));\n      });\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['blue'],\n          ['black']\n        ]);\n\n        const selected = innerHot.getSelected();\n\n        expect(selected).toBeUndefined();\n\n        keyDownUp('enter');\n\n        expect(getDataAtCell(0, 0)).toEqual('b');\n        done();\n      }, 400);\n    });\n  });\n\n  describe('strict mode', () => {\n    it('strict mode should NOT use value if it DOES NOT match the list (sync reponse is empty)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      const onAfterChange = jasmine.createSpy('onAfterChange');\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process([]); // hardcoded empty result\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: syncSources,\n            allowInvalid: false,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      setDataAtCell(0, 0, 'unexistent');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['one', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(syncSources.calls.count()).toEqual(1);\n        expect(onAfterValidate.calls.count()).toEqual(1);\n        expect(onAfterChange.calls.count()).toEqual(1); // 1 for loadData (it is not called after failed edit)\n        done();\n      }, 200);\n    });\n\n    it('strict mode should use value if it DOES match the list (sync reponse is not empty)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      const onAfterChange = jasmine.createSpy('onAfterChange');\n      const syncSources = jasmine.createSpy('asyncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices); // hardcoded empty result\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: syncSources,\n            allowInvalid: false,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      setDataAtCell(0, 0, 'yellow');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['yellow', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(syncSources.calls.count()).toEqual(1);\n        expect(onAfterValidate.calls.count()).toEqual(1);\n        expect(onAfterChange.calls.count()).toEqual(2); // 1 for loadData and 1 for setDataAtCell\n        done();\n      }, 200);\n    });\n\n    it('strict mode should NOT use value if it DOES NOT match the list (async reponse is empty)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      const onAfterChange = jasmine.createSpy('onAfterChange');\n      const asyncSources = jasmine.createSpy('asyncSources');\n\n      asyncSources.and.callFake((query, process) => {\n        setTimeout(() => {\n          process([]); // hardcoded empty result\n        });\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: asyncSources,\n            allowInvalid: false,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      setDataAtCell(0, 0, 'unexistent');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['one', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(asyncSources.calls.count()).toEqual(1);\n        expect(onAfterValidate.calls.count()).toEqual(1);\n        expect(onAfterChange.calls.count()).toEqual(1); // 1 for loadData (it is not called after failed edit)\n        done();\n      }, 200);\n    });\n\n    it('strict mode should use value if it DOES match the list (async reponse is not empty)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      const onAfterChange = jasmine.createSpy('onAfterChange');\n      const asyncSources = jasmine.createSpy('asyncSources');\n\n      asyncSources.and.callFake((query, process) => {\n        setTimeout(() => {\n          process(choices); // hardcoded empty result\n        });\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: asyncSources,\n            allowInvalid: false,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      setDataAtCell(0, 0, 'yellow');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['yellow', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(asyncSources.calls.count()).toEqual(1);\n        expect(onAfterValidate.calls.count()).toEqual(1);\n        expect(onAfterChange.calls.count()).toEqual(2); // 1 for loadData and 1 for setDataAtCell\n        done();\n      }, 200);\n    });\n\n    it('strict mode mark value as invalid if it DOES NOT match the list (sync reponse is empty)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      const onAfterChange = jasmine.createSpy('onAfterChange');\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process([]); // hardcoded empty result\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: syncSources,\n            allowInvalid: true,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      expect(getCellMeta(0, 0).valid).not.toBe(false);\n      expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(false);\n\n      setDataAtCell(0, 0, 'unexistent');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['unexistent', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(getCellMeta(0, 0).valid).toBe(false);\n        expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(true);\n        done();\n      }, 200);\n    });\n\n    it('should select the best matching option after hitting ENTER', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter(choice => choice.indexOf(query) !== -1));\n      });\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['blue'],\n          ['black']\n        ]);\n\n        const selected = innerHot.getSelected()[0];\n        const selectedData = innerHot.getDataAtCell(selected[0], selected[1]);\n\n        expect(selectedData).toEqual('blue');\n\n        onAfterValidate.calls.reset();\n\n        keyDownUp('enter');\n      }, 400);\n\n      setTimeout(() => {\n        expect(getDataAtCell(0, 0)).toEqual('blue');\n        done();\n      }, 600);\n    });\n\n    it('should select the best matching option after hitting TAB', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter(choice => choice.indexOf(query) !== -1));\n      });\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['blue'],\n          ['black']\n        ]);\n\n        const selected = innerHot.getSelected()[0];\n        const selectedData = innerHot.getDataAtCell(selected[0], selected[1]);\n\n        expect(selectedData).toEqual('blue');\n\n        onAfterValidate.calls.reset();\n\n        keyDownUp('tab');\n      }, 400);\n\n      setTimeout(() => {\n        expect(getDataAtCell(0, 0)).toEqual('blue');\n        done();\n      }, 600);\n    });\n\n    it('should mark list item corresponding to current cell value as selected', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            strict: true\n          }\n        ],\n        data: [\n          ['yellow'],\n          ['red'],\n          ['blue']\n        ]\n      });\n\n      selectCell(0, 0);\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(autocomplete().find('.current').text()).toEqual(getDataAtCell(0, 0));\n        done();\n      }, 200);\n    });\n  });\n\n  describe('filtering', () => {\n    it('typing in textarea should filter the lookup list', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter(choice => choice.indexOf(query) !== -1));\n      });\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n        editorInput.val('e');\n        keyDownUp(69); // e\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red'],\n          ['yellow'],\n          ['green'],\n          ['blue'],\n          ['lime'],\n          ['white'],\n          ['olive'],\n          ['orange'],\n          ['purple']\n        ]);\n\n        syncSources.calls.reset();\n        editorInput.val('ed');\n        keyDownUp(68); // d\n      }, 400);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red']\n        ]);\n        done();\n      }, 600);\n    });\n    it('default filtering should be case insensitive', (done) => {\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      editorInput.val('e');\n      keyDownUp(69); // e\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red'],\n          ['yellow'],\n          ['green'],\n          ['blue'],\n          ['lime'],\n          ['white'],\n          ['olive'],\n          ['orange'],\n          ['purple']\n        ]);\n\n        editorInput.val('e');\n        keyDownUp(69); // E (same as 'e')\n      }, 50);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red'],\n          ['yellow'],\n          ['green'],\n          ['blue'],\n          ['lime'],\n          ['white'],\n          ['olive'],\n          ['orange'],\n          ['purple']\n        ]);\n        done();\n      }, 100);\n    });\n\n    it('default filtering should be case sensitive when filteringCaseSensitive is false', (done) => {\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices,\n            filteringCaseSensitive: true\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      editorInput.val('e');\n      keyDownUp(69); // e\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red'],\n          ['yellow'],\n          ['green'],\n          ['blue'],\n          ['lime'],\n          ['white'],\n          ['olive'],\n          ['orange'],\n          ['purple']\n        ]);\n\n        editorInput.val('E');\n        keyDownUp(69); // E (same as 'e')\n      }, 50);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([]);\n        expect(innerHot.getSourceData()).toEqual([]);\n        done();\n      }, 200);\n    });\n\n    it('typing in textarea should NOT filter the lookup list when filtering is disabled', (done) => {\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices,\n            filter: false\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        editorInput.val('e');\n        keyDownUp('e'.charCodeAt(0)); // e\n      }, 20);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual(Handsontable.helper.pivot([choices]));\n\n        editorInput.val('ed');\n        keyDownUp('d'.charCodeAt(0)); // d\n      }, 40);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual(Handsontable.helper.pivot([choices]));\n        done();\n      }, 60);\n    });\n\n    it('typing in textarea should highlight the matching phrase', (done) => {\n      const choicesList = ['Male', 'Female'];\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choicesList.filter(choice => choice.search(new RegExp(query, 'i')) !== -1));\n      });\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            filter: false\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n\n        editorInput.val('Male');\n        keyDownUp(69); // e\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n        const autocompleteList = $(innerHot.rootElement);\n\n        expect(autocompleteList.find('td:eq(0)').html()).toMatch(/<(strong|STRONG)>Male<\\/(strong|STRONG)>/); // IE8 makes the tag names UPPERCASE\n        expect(autocompleteList.find('td:eq(1)').html()).toMatch(/Fe<(strong|STRONG)>male<\\/(strong|STRONG)>/);\n        done();\n      }, 400);\n    });\n\n    it('text in textarea should not be interpreted as regexp', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'queryChoices').and.callThrough();\n      const queryChoices = Handsontable.editors.AutocompleteEditor.prototype.queryChoices;\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        queryChoices.calls.reset();\n        editorInput.val('yellow|red');\n        keyDownUp('d'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData().length).toEqual(0);\n        done();\n      }, 400);\n    });\n\n    it('text in textarea should not be interpreted as regexp when highlighting the matching phrase', (done) => {\n      const choicesList = ['Male', 'Female'];\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choicesList.filter(choice => choice.search(new RegExp(query, 'i')) !== -1));\n      });\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            filter: false\n          }\n        ]\n      });\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n        editorInput.val('M|F');\n        keyDownUp('F'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        const autocompleteList = $(innerHot.rootElement);\n\n        expect(autocompleteList.find('td:eq(0)').html()).toEqual('Male');\n        expect(autocompleteList.find('td:eq(1)').html()).toEqual('Female');\n        done();\n      }, 400);\n    });\n\n    it('should allow any value if filter === false and allowInvalid === true', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'queryChoices').and.callThrough();\n      const queryChoices = Handsontable.editors.AutocompleteEditor.prototype.queryChoices;\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices,\n            filter: false,\n            strict: true,\n            allowInvalid: true\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        queryChoices.calls.reset();\n        editorInput.val('foobar');\n        keyDownUp(82); // r\n      }, 200);\n\n      setTimeout(() => {\n        keyDownUp(Handsontable.helper.KEY_CODES.ENTER);\n\n        expect(getDataAtCell(0, 0)).toEqual('foobar');\n        done();\n      }, 400);\n    });\n\n    it('typing in textarea should highlight best choice, if strict === true', (done) => {\n      const choicesList = ['Male', 'Female'];\n      const syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choicesList.filter(choice => choice.search(new RegExp(query, 'i')) !== -1));\n      });\n\n      const hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            filter: false,\n            strict: true\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n        editorInput.val('e');\n        keyDownUp(69); // e\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n        done();\n      }, 400);\n    });\n  });\n\n  it('should restore the old value when hovered over a autocomplete menu item and then clicked outside of the table', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices);\n    });\n\n    handsontable({\n      columns: [\n        {\n          editor: 'autocomplete',\n          source: syncSources\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    expect(getDataAtCell(0, 0)).toBeNull();\n\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      autocomplete().find('tbody td:eq(1)').simulate('mouseenter');\n      autocomplete().find('tbody td:eq(1)').simulate('mouseleave');\n\n      spec().$container.simulate('mousedown');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n      done();\n    }, 200);\n  });\n\n  it('should be able to use empty value (\"\")', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(['', 'BMW', 'Bentley']);\n    });\n\n    handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          editor: 'autocomplete',\n          source: syncSources,\n          filter: false\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('one');\n\n      autocomplete().find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(getDataAtCell(0, 0)).toEqual('');\n      done();\n    }, 200);\n  });\n\n  describe('allow html mode', () => {\n    it('should allow inject html items (async mode)', (done) => {\n      const hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source(query, cb) {\n              cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);\n            },\n            allowHtml: true,\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['<i>bar</i>'],\n          ['<strong>baz</strong>'],\n        ]);\n\n        editorInput.val('bar');\n        keyDownUp('a'.charCodeAt(0));\n        keyDownUp('r'.charCodeAt(0));\n      }, 400);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['<i>bar</i>']\n        ]);\n\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n      }, 600);\n\n      setTimeout(() => {\n        expect(getCell(0, 0).querySelector('i').textContent).toBe('bar');\n        done();\n      }, 700);\n    });\n\n    it('should allow inject html items (sync mode)', (done) => {\n      const hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>'],\n            allowHtml: true,\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['<i>bar</i>'],\n          ['<strong>baz</strong>'],\n        ]);\n\n        editorInput.val('bar');\n        keyDownUp('a'.charCodeAt(0));\n        keyDownUp('r'.charCodeAt(0));\n      }, 400);\n\n      setTimeout(() => {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['<i>bar</i>']\n        ]);\n\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n      }, 600);\n\n      setTimeout(() => {\n        expect(getCell(0, 0).querySelector('i').textContent).toBe('bar');\n        done();\n      }, 700);\n    });\n  });\n\n  describe('disallow html mode', () => {\n    it('should be disabled by default', () => {\n      const hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source(query, cb) {\n              cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);\n            },\n            allowHtml: false,\n          }\n        ]\n      });\n\n      expect(hot.getCellMeta(0, 0).allowHtml).toBeFalsy();\n    });\n\n    it('should strip html from strings provided in source (async mode)', async() => {\n      const hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source(query, cb) {\n              cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);\n            },\n            allowHtml: false,\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n      await sleep(200);\n\n      editorInput.val('b');\n      keyDownUp('b'.charCodeAt(0));\n\n      await sleep(200);\n\n      {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['bar'],\n          ['baz'],\n        ]);\n\n        editorInput.val('bar');\n        keyDownUp('a'.charCodeAt(0));\n        keyDownUp('r'.charCodeAt(0));\n      }\n      await sleep(200);\n      {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['bar']\n        ]);\n\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n      }\n      await sleep(200);\n\n      expect(getCell(0, 0).querySelector('i')).toBeNull();\n      expect(getCell(0, 0).textContent).toMatch('bar');\n    });\n\n    it('should strip html from strings provided in source (sync mode)', async() => {\n      const hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>'],\n            allowHtml: false,\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      const editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n      await sleep(200);\n      editorInput.val('b');\n      keyDownUp('b'.charCodeAt(0));\n\n      await sleep(200);\n\n      {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['bar'],\n          ['baz'],\n        ]);\n      }\n\n      editorInput.val('bar');\n      keyDownUp('a'.charCodeAt(0));\n      keyDownUp('r'.charCodeAt(0));\n\n      await sleep(200);\n\n      {\n        const ac = hot.getActiveEditor();\n        const innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['bar']\n        ]);\n      }\n\n      keyDownUp('arrow_down');\n      keyDownUp('enter');\n\n      await sleep(100);\n\n      expect(getCell(0, 0).querySelector('i')).toBeNull();\n      expect(getCell(0, 0).textContent).toMatch('bar');\n    });\n  });\n\n  describe('Autocomplete helper functions:', () => {\n    describe('sortByRelevance', () => {\n      it('should sort the provided array, so items more relevant to the provided value are listed first', () => {\n        const choicesList = [\n          'Wayne', // 0\n          'Draven', // 1\n          'Banner', // 2\n          'Stark', // 3\n          'Parker', // 4\n          'Kent', // 5\n          'Gordon', // 6\n          'Kyle', // 7\n          'Simmons'// 8\n        ];\n        let value = 'a';\n        let sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choicesList);\n\n        expect(sorted).toEqual([0, 2, 4, 3, 1]);\n\n        value = 'o';\n        sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choicesList);\n\n        expect(sorted).toEqual([6, 8]);\n\n        value = 'er';\n        sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choicesList);\n\n        expect(sorted).toEqual([2, 4]);\n      });\n    });\n  });\n\n  it('should not modify the suggestion lists\\' order, when the sortByRelevance option is set to false', (done) => {\n    const choicesList = [\n      'Wayne', 'Draven', 'Banner', 'Stark', 'Parker', 'Kent', 'Gordon', 'Kyle', 'Simmons'\n    ];\n    handsontable({\n      columns: [\n        {\n          editor: 'autocomplete',\n          source: choicesList,\n          sortByRelevance: false\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('a');\n    keyDownUp('a'.charCodeAt(0));\n    Handsontable.dom.setCaretPosition($editorInput[0], 1);\n\n    setTimeout(() => {\n      const dropdownList = $('.autocompleteEditor tbody').first();\n      const listLength = dropdownList.find('tr').size();\n\n      expect(listLength).toBe(9);\n\n      for (let i = 1; i <= listLength; i++) {\n        expect(dropdownList.find(`tr:nth-child(${i}) td`).text()).toEqual(choicesList[i - 1]);\n      }\n      done();\n    }, 30);\n  });\n\n  it('should fire one afterChange event when value is changed', (done) => {\n    const onAfterChange = jasmine.createSpy('onAfterChange');\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices);\n    });\n\n    handsontable({\n      columns: [\n        {\n          editor: 'autocomplete',\n          source: syncSources\n        }\n      ],\n      afterChange: onAfterChange\n    });\n\n    selectCell(0, 0);\n\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      onAfterChange.calls.reset();\n      autocomplete().find('tbody td:eq(1)').simulate('mousedown');\n\n      expect(getDataAtCell(0, 0)).toEqual('red');\n      expect(onAfterChange.calls.count()).toEqual(1);\n      expect(onAfterChange).toHaveBeenCalledWith([[0, 0, null, 'red']], 'edit', undefined, undefined, undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('should not affect other cell values after clicking on autocomplete cell (#1021)', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices);\n    });\n\n    handsontable({\n      columns: [\n        {},\n        {},\n        {\n          editor: 'autocomplete',\n          source: syncSources\n        },\n        {}\n      ],\n      data: [\n        [null, null, 'yellow', null],\n        [null, null, 'red', null],\n        [null, null, 'blue', null]\n      ]\n    });\n\n    expect($(getCell(0, 2)).text()).toMatch('yellow');\n\n    mouseDoubleClick(getCell(0, 2));\n\n    expect($(getCell(1, 2)).text()).toMatch('red');\n\n    mouseDoubleClick(getCell(1, 2));\n\n    expect($(getCell(2, 2)).text()).toMatch('blue');\n\n    mouseDoubleClick(getCell(2, 2));\n\n    setTimeout(() => {\n      expect(getDataAtCol(2)).toEqual(['yellow', 'red', 'blue']);\n      done();\n    }, 200);\n  });\n\n  it('should handle editor if cell data is a function', (done) => {\n    spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();\n    const afterValidateCallback = jasmine.createSpy('afterValidateCallbak');\n\n    const hot = handsontable({\n      data: [\n        new Model({\n          id: 1,\n          name: 'Ted Right',\n          address: ''\n        }),\n        new Model({\n          id: 2,\n          name: 'Frank Honest',\n          address: ''\n        }),\n        new Model({\n          id: 3,\n          name: 'Joan Well',\n          address: ''\n        })],\n      dataSchema: Model,\n      colHeaders: ['ID', 'Name', 'Address'],\n      columns: [\n        {\n          data: createAccessorForProperty('id'),\n          type: 'autocomplete',\n          source: ['1', '2', '3'],\n          filter: false,\n          strict: true\n        },\n        {\n          data: createAccessorForProperty('name')\n        },\n        {\n          data: createAccessorForProperty('address')\n        }\n      ],\n      minSpareRows: 1,\n      afterValidate: afterValidateCallback\n    });\n    selectCell(0, 0);\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().isOpened()).toBe(true);\n      afterValidateCallback.calls.reset();\n      $(hot.getActiveEditor().htContainer).find('tr:eq(1) td:eq(0)').simulate('mousedown');\n    }, 200);\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('2');\n      done();\n    }, 400);\n  });\n\n  // Input element should be focused on cell selection othrwise it breaks IME editor functionality for Asian users.\n  it('should not lose the focus on input element while inserting new characters (#839)', async() => {\n    const focusListener = jasmine.createSpy('focus');\n    const hot = handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: choices,\n        },\n        {},\n      ],\n    });\n\n    selectCell(0, 0);\n    hot.getActiveEditor().TEXTAREA.addEventListener('focus', focusListener);\n\n    await sleep(50);\n\n    expect(focusListener).toHaveBeenCalled();\n\n    hot.getActiveEditor().TEXTAREA.removeEventListener('focus', focusListener);\n  });\n\n  it('should not lose the focus from the editor after selecting items from the choice list', async() => {\n    const hot = handsontable({\n      data: [\n        ['', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: ['brown', 'yellow', 'green'],\n        },\n        {},\n      ],\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n\n    await sleep(0);\n\n    keyDownUp('arrow_down');\n    keyDownUp('arrow_down');\n    keyDownUp('arrow_down');\n\n    hot.getActiveEditor().TEXTAREA.value = 'r';\n    keyDownUp('R'.charCodeAt(0));\n\n    await sleep(0);\n\n    // Check if ESCAPE key is responsive.\n    keyDownUp('esc');\n\n    expect(hot.isListening()).toBeTruthy();\n    expect(isEditorVisible($(hot.getActiveEditor().htEditor.rootElement))).toBeFalsy();\n  });\n\n  it('should not call the `source` has been selected', () => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process([]); // hardcoded empty result\n    });\n\n    handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          allowInvalid: false,\n          strict: true\n        },\n        {}\n      ],\n      cells(row, col) {\n        const cellProperties = {};\n\n        if (row === 0 && col === 0) {\n          cellProperties.readOnly = true;\n        }\n\n        return cellProperties;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect(syncSources).not.toHaveBeenCalled();\n\n    selectCell(0, 0);\n\n    expect(syncSources).not.toHaveBeenCalled();\n\n    expect(getCellMeta(1, 0).readOnly).toBeFalsy();\n\n    selectCell(1, 0);\n\n    expect(syncSources).not.toHaveBeenCalled();\n  });\n\n  it('should not call the `source` method if cell is read only and the arrow has been clicked', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process([]); // hardcoded empty result\n    });\n\n    handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          allowInvalid: false,\n          strict: true\n        },\n        {}\n      ],\n      cells(row, col) {\n        const cellProperties = {};\n\n        if (row === 0 && col === 0) {\n          cellProperties.readOnly = true;\n        }\n\n        return cellProperties;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect(syncSources).not.toHaveBeenCalled();\n\n    selectCell(0, 0);\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    setTimeout(() => {\n      expect(syncSources).not.toHaveBeenCalled();\n\n      syncSources.calls.reset();\n      expect(getCellMeta(1, 0).readOnly).toBeFalsy();\n\n      selectCell(1, 0);\n      $(getCell(1, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n    }, 100);\n\n    setTimeout(() => {\n      expect(syncSources).toHaveBeenCalled();\n      expect(syncSources.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should add a scrollbar to the autocomplete dropdown, only if number of displayed choices exceeds 10', async() => {\n    const hot = handsontable({\n      data: [\n        ['', 'two', 'three'],\n        ['four', 'five', 'six']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: choices,\n          allowInvalid: false,\n          strict: false\n        },\n        {},\n        {}\n      ]\n    });\n\n    spec().$container.css({\n      height: 600\n    });\n\n    expect(choices.length).toBeGreaterThan(10);\n\n    selectCell(0, 0);\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    const dropdownHolder = hot.getActiveEditor().htEditor.view.wt.wtTable.holder;\n\n    await sleep(30);\n\n    expect(dropdownHolder.scrollHeight).toBeGreaterThan(dropdownHolder.clientHeight);\n\n    keyDownUp('esc');\n\n    hot.getSettings().columns[0].source = hot.getSettings().columns[0].source.slice(0).splice(3);\n    hot.updateSettings({});\n\n    selectCell(0, 0);\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    await sleep(30);\n\n    expect(dropdownHolder.scrollHeight > dropdownHolder.clientHeight).toBe(false);\n  });\n\n  it('should not close editor on scrolling', async() => {\n    const hot = handsontable({\n      data: [\n        ['', 'two', 'three'],\n        ['four', 'five', 'six']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: choices,\n          allowInvalid: false,\n          strict: false\n        },\n        {},\n        {}\n      ]\n    });\n\n    expect(choices.length).toBeGreaterThan(10);\n\n    selectCell(0, 0);\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');\n\n    const dropdown = hot.getActiveEditor().htContainer;\n\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(1);\n\n    await sleep(50);\n\n    expect($(dropdown).is(':visible')).toBe(true);\n\n    selectCell(0, 0);\n    await sleep(50);\n\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(3);\n\n    await sleep(50);\n\n    expect($(dropdown).is(':visible')).toBe(true);\n  });\n\n  it('should keep textarea caret position, after moving the selection to the suggestion list (pressing down arrow)', async() => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    await sleep(0);\n\n    Handsontable.dom.setCaretPosition($editorInput[0], 1);\n\n    await sleep(200);\n\n    keyDownUp('arrow_down');\n\n    expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);\n\n    keyDownUp('arrow_down');\n\n    expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);\n  });\n\n  it('should keep textarea selection, after moving the selection to the suggestion list (pressing down arrow)', async() => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    await sleep(0);\n\n    Handsontable.dom.setCaretPosition($editorInput[0], 1, 2);\n\n    await sleep(200);\n\n    keyDownUp('arrow_down');\n\n    expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);\n    expect(Handsontable.dom.getSelectionEndPosition($editorInput[0])).toEqual(2);\n\n    keyDownUp('arrow_down');\n\n    expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);\n    expect(Handsontable.dom.getSelectionEndPosition($editorInput[0])).toEqual(2);\n  });\n\n  it('should jump to the sibling cell, after pressing up key in quick edit mode', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_up');\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the next cell, after pressing right key in quick edit mode', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.plan = function(query, process) {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    };\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_right');\n\n      expect(getSelected()).toEqual([[1, 1, 1, 1]]);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the next cell, after pressing left key in quick edit mode', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    handsontable({\n      columns: [\n        {},\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        }\n      ]\n    });\n\n    selectCell(1, 1);\n    keyDownUp('x'); // trigger quick edit mode\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    // put caret on the end of the text to ensure that editor will be closed after hit left arrow key\n    Handsontable.dom.setCaretPosition($editorInput[0], 2, 2);\n\n    setTimeout(() => {\n      keyDownUp('arrow_left');\n\n      expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the next cell, after pressing down key in quick edit mode', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n\n      expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the next cell, after pressing down key in quick edit mode when no matching option list found', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('anananan');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n\n      expect(getSelected()).toEqual([[2, 0, 2, 0]]);\n      done();\n    }, 200);\n  });\n\n  it('should not jump to the next cell, after pressing down key in quick edit mode when options list was opened', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    const $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n\n      expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n      done();\n    }, 200);\n  });\n\n  it('should select option in opened editor after pressing down key in quick edit mode', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    const hot = handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // Trigger quick edit mode\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n      keyDownUp('arrow_down');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[1, 0, 1, 0]]);\n\n      keyDownUp('arrow_down');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[2, 0, 2, 0]]);\n      done();\n    }, 200);\n  });\n\n  it('should select option in opened editor after pressing up key in quick edit mode', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    const hot = handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ],\n      autoWrapCol: false,\n      autoWrapRow: false\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // Trigger quick edit mode\n\n    setTimeout(() => {\n      hot.getActiveEditor().htEditor.selectCell(2, 0);\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[2, 0, 2, 0]]);\n\n      keyDownUp('arrow_up');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[1, 0, 1, 0]]);\n\n      keyDownUp('arrow_up');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n      keyDownUp('arrow_up');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[0, 0, 0, 0]]);\n      done();\n    }, 200);\n  });\n\n  it('should not close editor in quick edit mode after pressing down key when last option is selected', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    const hot = handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // Trigger quick edit mode\n\n    setTimeout(() => {\n      hot.getActiveEditor().htEditor.selectCell(7, 0);\n      hot.listen();\n\n      keyDownUp('arrow_down');\n      keyDownUp('arrow_down');\n      keyDownUp('arrow_down');\n      keyDownUp('arrow_down');\n      keyDownUp('arrow_down');\n\n      expect(hot.getActiveEditor().isOpened()).toBe(true);\n      done();\n    }, 200);\n  });\n\n  it('should close editor in quick edit mode after pressing up key when no option is selected', (done) => {\n    const syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter(choice => choice.indexOf(query) !== -1));\n    });\n\n    const hot = handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // Trigger quick edit mode\n\n    setTimeout(() => {\n      hot.getActiveEditor().htEditor.selectCell(1, 0);\n      hot.listen();\n\n      keyDownUp('arrow_up');\n      keyDownUp('arrow_up');\n      keyDownUp('arrow_up');\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      done();\n    }, 200);\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element after selecting the cell', async() => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/autocompleteEditor.spec.js","describe('BaseEditor', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('ctrl + enter when editor is active', () => {\n    it('should populate value from the currently active cell to every cell in the selected range', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(6, 6)\n      });\n\n      selectCell(1, 1, 2, 2);\n\n      expect(getDataAtCell(1, 1)).toEqual('B2');\n      expect(getDataAtCell(2, 2)).toEqual('C3');\n\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      keyDown('ctrl+enter');\n\n      expect(getDataAtCell(1, 1)).toEqual('B2');\n      expect(getDataAtCell(1, 2)).toEqual('B2');\n      expect(getDataAtCell(2, 1)).toEqual('B2');\n      expect(getDataAtCell(2, 2)).toEqual('B2');\n\n      loadData(Handsontable.helper.createSpreadsheetData(6, 6));\n\n      selectCell(1, 2, 2, 1);\n\n      expect(getDataAtCell(1, 2)).toEqual('C2');\n      expect(getDataAtCell(2, 1)).toEqual('B3');\n\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      keyDown('ctrl+enter');\n\n      expect(getDataAtCell(1, 1)).toEqual('C2');\n      expect(getDataAtCell(1, 2)).toEqual('C2');\n      expect(getDataAtCell(2, 1)).toEqual('C2');\n      expect(getDataAtCell(2, 2)).toEqual('C2');\n\n      loadData(Handsontable.helper.createSpreadsheetData(6, 6));\n      selectCell(2, 2, 1, 1);\n      expect(getDataAtCell(2, 2)).toEqual('C3');\n\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      keyDown('ctrl+enter');\n\n      expect(getDataAtCell(1, 1)).toEqual('C3');\n      expect(getDataAtCell(1, 2)).toEqual('C3');\n      expect(getDataAtCell(2, 1)).toEqual('C3');\n      expect(getDataAtCell(2, 2)).toEqual('C3');\n\n      loadData(Handsontable.helper.createSpreadsheetData(6, 6));\n      selectCell(2, 1, 1, 2);\n      expect(getDataAtCell(2, 1)).toEqual('B3');\n\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      keyDown('ctrl+enter');\n\n      expect(getDataAtCell(1, 1)).toEqual('B3');\n      expect(getDataAtCell(1, 2)).toEqual('B3');\n      expect(getDataAtCell(2, 1)).toEqual('B3');\n      expect(getDataAtCell(2, 2)).toEqual('B3');\n    });\n  });\n\n  it('should exported all editors into Handsontable.editors object', () => {\n    expect(Handsontable.editors.AutocompleteEditor).toBeDefined();\n    expect(Handsontable.editors.BaseEditor).toBeDefined();\n    expect(Handsontable.editors.CheckboxEditor).toBeDefined();\n    expect(Handsontable.editors.DateEditor).toBeDefined();\n    expect(Handsontable.editors.DropdownEditor).toBeDefined();\n    expect(Handsontable.editors.HandsontableEditor).toBeDefined();\n    expect(Handsontable.editors.NumericEditor).toBeDefined();\n    expect(Handsontable.editors.PasswordEditor).toBeDefined();\n    expect(Handsontable.editors.SelectEditor).toBeDefined();\n    expect(Handsontable.editors.TextEditor).toBeDefined();\n  });\n\n  describe('IME support', () => {\n    it('should not throw an error when composition is started in multiple instances environment', async() => {\n      const errorSpy = jasmine.createSpyObj('error', ['test']);\n      const prevError = window.onerror;\n\n      window.onerror = errorSpy.test;\n\n      const hot1 = handsontable({});\n      const container2 = $(`<div id=\"${id}2\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n      const hot2 = container2.handsontable().handsontable('getInstance');\n\n      $(hot1.getCell(1, 1)).simulate('mousedown');\n      $(hot1.getCell(1, 1)).simulate('mouseover');\n      $(hot1.getCell(1, 1)).simulate('mouseup');\n\n      document.documentElement.dispatchEvent(new CompositionEvent('compositionstart'));\n\n      $(hot2.getCell(1, 1)).simulate('mousedown');\n      $(hot2.getCell(1, 1)).simulate('mouseover');\n      $(hot2.getCell(1, 1)).simulate('mouseup');\n\n      document.documentElement.dispatchEvent(new CompositionEvent('compositionstart'));\n\n      expect(errorSpy.test).not.toHaveBeenCalled();\n\n      hot2.destroy();\n      container2.remove();\n      window.onerror = prevError;\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/baseEditor.spec.js","describe('DateEditor', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function getDates() {\n    return [\n      ['01/14/2006'],\n      ['12/01/2008'],\n      ['11/19/2011'],\n      ['02/02/2004'],\n      ['07/24/2011']\n    ];\n  }\n\n  it('should display Pikday calendar', () => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    expect($('.pika-single').is(':visible')).toBe(false);\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect($('.pika-single').is(':visible')).toBe(true);\n  });\n\n  it('should pass date picker config object to Pikday', () => {\n    const onOpenSpy = jasmine.createSpy('open');\n    const onCloseSpy = jasmine.createSpy('close');\n    const hot = handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          datePickerConfig: {\n            firstDay: 1,\n            field: 'field', // read only - shouldn't overwrite\n            trigger: 'trigger', // read only - shouldn't overwrite\n            container: 'container', // read only - shouldn't overwrite\n            bound: true, // read only - shouldn't overwrite\n            i18n: {\n              previousMonth: 'Poprzedni',\n              nextMonth: 'Następny',\n              months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n              weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n              weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n            },\n            onOpen: onOpenSpy,\n            onClose: onCloseSpy\n          }\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n    keyDown('esc');\n\n    const config = hot.getActiveEditor().$datePicker.config();\n\n    expect(config.field instanceof HTMLElement).toBe(true);\n    expect(config.trigger instanceof HTMLElement).toBe(true);\n    expect(config.container instanceof HTMLElement).toBe(true);\n    expect(config.bound).toBe(false);\n    expect(config.firstDay).toBe(1);\n    expect(config.i18n.previousMonth).toBe('Poprzedni');\n    expect(config.i18n.nextMonth).toBe('Następny');\n    expect(onOpenSpy).toHaveBeenCalled();\n    expect(onCloseSpy).toHaveBeenCalled();\n  });\n\n  it('should remove any HTML connected with Pikaday Calendar', () => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    expect($('.pika-single').length).toBe(0);\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect($('.pika-single').length).toBe(1);\n\n    destroy();\n\n    expect($('.pika-single').length).toBe(0);\n  });\n\n  it('should select date corresponding to cell value', () => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    const date = new Date(getDates()[0][0]);\n\n    expect($('.pika-single').find('.pika-select-year').find(':selected').val()).toMatch(date.getFullYear().toString());\n    expect($('.pika-single').find('.pika-select-month').find(':selected').val()).toMatch(date.getMonth().toString());\n    expect($('.pika-single').find('.pika-table .is-selected').text()).toMatch(date.getDate().toString());\n  });\n\n  it('should save new date after clicked on calendar', (done) => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    expect(getDataAtCell(0, 0)).toMatch('01/14/2006');\n\n    keyDown('enter');\n\n    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toMatch('01/01/2006');\n      done();\n    }, 150);\n  });\n\n  it('should display fill handle after selected date on calendar', (done) => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    expect(getDataAtCell(0, 0)).toMatch('01/14/2006');\n\n    keyDown('enter');\n\n    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toMatch('01/01/2006');\n      expect($('.htBorders .current.corner').is(':visible')).toBe(true);\n      done();\n    }, 150);\n  });\n\n  it('should setup in settings and display defaultDate on calendar', (done) => {\n    handsontable({\n      data: getDates(),\n      minSpareRows: 1,\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY',\n          defaultDate: '01/01/1900'\n        }\n      ]\n    });\n\n    selectCell(5, 0);\n    expect(getDataAtCell(5, 0)).toBe(null);\n\n    keyDown('enter');\n\n    const date = new Date('01/01/1900');\n\n    expect($('.pika-single').find('.pika-select-year').find(':selected').val()).toMatch(date.getFullYear().toString());\n    expect($('.pika-single').find('.pika-select-month').find(':selected').val()).toMatch(date.getMonth().toString());\n    expect($('.pika-single').find('.pika-table .is-selected').text()).toMatch(date.getDate().toString());\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(getDataAtCell(5, 0)).toMatch('01/01/1900');\n      done();\n    }, 150);\n  });\n\n  it('should close calendar after picking new date', () => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect($('.pika-single').is(':visible')).toBe(true);\n\n    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));\n\n    expect($('.pika-single').is(':visible')).toBe(false);\n  });\n\n  it('should enable to input any value in textarea', async() => {\n    const hot = handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = hot.getActiveEditor();\n\n    editor.beginEditing();\n\n    expect(editor.isOpened()).toBe(true);\n\n    editor.TEXTAREA.value = 'foo';\n    keyDownUp('o'.charCodeAt(0));\n\n    expect(editor.getValue()).toEqual('foo');\n\n    editor.finishEditing();\n\n    await sleep(30);\n\n    expect(getDataAtCell(0, 0)).toEqual('foo');\n  });\n\n  it('should not close editor when inserting wrong value and allowInvalid is set to false, (#5419)', async() => {\n    const hot = handsontable({\n      data: getDates(),\n      allowInvalid: false,\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = hot.getActiveEditor();\n\n    editor.beginEditing();\n\n    expect(editor.isOpened()).toBe(true);\n\n    editor.TEXTAREA.value = 'foo';\n\n    expect(editor.getValue()).toEqual('foo');\n\n    editor.finishEditing();\n\n    await sleep(30);\n\n    expect(editor.isOpened()).toBe(true);\n    expect(editor.getValue()).toEqual('foo');\n  });\n\n  // Input element can not lose the focus while entering new characters. It breaks IME editor functionality for Asian users.\n  it('should not lose the focus on input element while inserting new characters (#839)', async() => {\n    let blured = false;\n    const listener = () => {\n      blured = true;\n    };\n    const hot = handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          type: 'date',\n        },\n        {},\n      ],\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    hot.getActiveEditor().TEXTAREA.addEventListener('blur', listener);\n\n    await sleep(200);\n\n    hot.getActiveEditor().TEXTAREA.value = 't';\n    keyDownUp('t'.charCodeAt(0));\n    hot.getActiveEditor().TEXTAREA.value = 'te';\n    keyDownUp('e'.charCodeAt(0));\n    hot.getActiveEditor().TEXTAREA.value = 'teo';\n    keyDownUp('o'.charCodeAt(0));\n\n    expect(blured).toBeFalsy();\n\n    hot.getActiveEditor().TEXTAREA.removeEventListener('blur', listener);\n  });\n\n  it('should restore original when edited and pressed ESC ', async() => {\n    const hot = handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = hot.getActiveEditor();\n\n    editor.beginEditing();\n\n    expect(editor.isOpened()).toBe(true);\n\n    editor.TEXTAREA.value = 'foo';\n\n    expect(editor.getValue()).toEqual('foo');\n\n    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n    await sleep(30);\n\n    editor.finishEditing();\n\n    expect(getDataAtCell(0, 0)).toEqual('01/14/2006');\n  });\n\n  it('should display a calendar based on a current date, even if a date in a wrong format was entered previously', (done) => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      columns: [\n        { type: 'date' },\n        { type: 'date', dateFormat: 'YYYY-MM-DD' }\n      ],\n      minSpareRows: 1\n    });\n\n    setDataAtCell(4, 1, '15-11-11');\n\n    setTimeout(() => {\n      selectCell(5, 1);\n      keyDown('enter');\n\n      expect($('.pika-single').is(':visible')).toBe(true);\n\n      mouseDown($('.pika-single').find('.pika-table tbody tr:eq(3) td:eq(3) button'));\n    }, 150);\n\n    setTimeout(() => {\n      const resultDate = getDataAtCell(5, 1);\n\n      expect(moment(resultDate).year()).toEqual(moment().year());\n      expect(moment(resultDate).month()).toEqual(moment().month());\n      done();\n    }, 300);\n  });\n\n  it('should display Pikaday Calendar bottom of the selected cell', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      columns: [\n        { type: 'date' },\n        { type: 'date' }\n      ]\n    });\n\n    selectCell(1, 1);\n    keyDown('enter');\n\n    const cellOffset = $(hot.getActiveEditor().TD).offset();\n    const datePickerOffset = $('.pika-single').offset();\n\n    // 23 is a height of the editor cell\n    expect(cellOffset.top + 23).toBeCloseTo(datePickerOffset.top, 0);\n    expect(cellOffset.left).toBeCloseTo(datePickerOffset.left, 0);\n  });\n\n  it('should display Pikaday Calendar bottom of the selected cell when table have scrolls', () => {\n    const container = $('#testContainer');\n\n    container[0].style.height = '300px';\n    container[0].style.width = '200px';\n    container[0].style.overflow = 'hidden';\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(30, 10),\n      colWidths: 60,\n      columns: [\n        { type: 'date' },\n        { type: 'date' },\n        { type: 'date' },\n        { type: 'date' },\n        { type: 'date' },\n        { type: 'date' },\n        { type: 'date' }\n      ]\n    });\n\n    selectCell(20, 6);\n    keyDown('enter');\n\n    const cellOffset = $(hot.getActiveEditor().TD).offset();\n    const datePickerOffset = $('.pika-single').offset();\n\n    expect(cellOffset.top + 23).toBeCloseTo(datePickerOffset.top, 0);\n    expect(cellOffset.left).toBeCloseTo(datePickerOffset.left, 0);\n  });\n\n  it('should not modify the edited date and time, when opening the editor', () => {\n    const hot = handsontable({\n      data: [['02/02/2015 8:00 AM']],\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY h:mm A',\n          correctFormat: true,\n          defaultDate: '01/01/1900',\n          allowEmpty: false,\n        }\n      ]\n    });\n\n    // setDataAtCell(0, 0, '02/02/2015 8:00 AM');\n    const cellValue = getDataAtCell(0, 0);\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    const editor = hot.getActiveEditor();\n\n    expect(editor.TEXTAREA.value).toEqual(cellValue);\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element after selecting the cell', async() => {\n      handsontable({\n        columns: [\n          {\n            editor: 'date',\n          }\n        ]\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/dateEditor.spec.js","describe('DropdownEditor', () => {\n  const id = 'testContainer';\n  const choices = ['yellow', 'red', 'orange', 'green', 'blue', 'gray', 'black', 'white', 'purple', 'lime', 'olive', 'cyan'];\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('open editor', () => {\n    // see https://github.com/handsontable/handsontable/issues/3380\n    it('should not throw error while selecting the next cell by hitting enter key', () => {\n      const spy = jasmine.createSpyObj('error', ['test']);\n      const prevError = window.onerror;\n\n      window.onerror = function() {\n        spy.test();\n      };\n      handsontable({\n        columns: [{\n          editor: 'dropdown',\n          source: choices\n        }]\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n      keyDownUp('enter');\n      keyDownUp('enter');\n\n      expect(spy.test.calls.count()).toBe(0);\n\n      window.onerror = prevError;\n    });\n  });\n\n  describe('closing the editor', () => {\n    it('should not close editor on scrolling', async() => {\n      const hot = handsontable({\n        data: [\n          ['', 'two', 'three'],\n          ['four', 'five', 'six']\n        ],\n        columns: [\n          {\n            type: 'dropdown',\n            source: choices\n          },\n          {},\n          {}\n        ]\n      });\n\n      selectCell(0, 0);\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');\n\n      hot.view.wt.wtOverlays.topOverlay.scrollTo(1);\n      const dropdown = hot.getActiveEditor();\n      await sleep(50);\n\n      expect($(dropdown.htContainer).is(':visible')).toBe(true);\n\n      selectCell(0, 0);\n      await sleep(50);\n\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');\n      hot.view.wt.wtOverlays.topOverlay.scrollTo(3);\n\n      await sleep(50);\n\n      expect($(dropdown.htContainer).is(':visible')).toBe(true);\n    });\n  });\n\n  it('should mark all invalid values as invalid, after pasting them into dropdown-type cells', (done) => {\n    handsontable({\n      data: [\n        ['', 'two', 'three'],\n        ['four', 'five', 'six']\n      ],\n      columns: [\n        {\n          type: 'dropdown',\n          source: choices\n        },\n        {},\n        {}\n      ]\n    });\n\n    populateFromArray(0, 0, [['invalid'], ['input']], null, null, 'paste');\n\n    setTimeout(() => {\n      expect(Handsontable.dom.hasClass(getCell(0, 0), 'htInvalid')).toBe(true);\n      expect(Handsontable.dom.hasClass(getCell(1, 0), 'htInvalid')).toBe(true);\n      done();\n    }, 40);\n  });\n\n  // Input element can not lose the focus while entering new characters. It breaks IME editor functionality for Asian users.\n  it('should not lose the focus on input element while inserting new characters (#839)', async() => {\n    const focusListener = jasmine.createSpy('focus');\n    const hot = handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          type: 'dropdown',\n          source: choices,\n        },\n        {},\n      ],\n    });\n\n    selectCell(0, 0);\n    hot.getActiveEditor().TEXTAREA.addEventListener('focus', focusListener);\n\n    await sleep(50);\n\n    expect(focusListener).toHaveBeenCalled();\n\n    hot.getActiveEditor().TEXTAREA.removeEventListener('focus', focusListener);\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element after selecting the cell', async() => {\n      handsontable({\n        columns: [\n          {\n            type: 'dropdown',\n            source: choices,\n          }\n        ]\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/dropdownEditor.spec.js","describe('HandsontableEditor', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function getManufacturerData() {\n    return [\n      { name: 'BMW', country: 'Germany', owner: 'Bayerische Motoren Werke AG' },\n      { name: 'Chrysler', country: 'USA', owner: 'Chrysler Group LLC' },\n      { name: 'Nissan', country: 'Japan', owner: 'Nissan Motor Company Ltd' },\n      { name: 'Suzuki', country: 'Japan', owner: 'Suzuki Motor Corporation' },\n      { name: 'Toyota', country: 'Japan', owner: 'Toyota Motor Corporation' },\n      { name: 'Volvo', country: 'Sweden', owner: 'Zhejiang Geely Holding Group' }\n    ];\n  }\n\n  it('should create an editor that is a Handsontable instance', () => {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    expect(spec().$container.find('.handsontableEditor:visible').length).toEqual(1);\n  });\n\n  it('should create an editor directly below the textarea element', () => {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    expect(spec().$container.find('.handsontableEditor')[0].offsetTop).toEqual(spec().$container.find('.handsontableInput')[0].offsetHeight);\n  });\n\n  it('should prepare the editor only once per instance', () => {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n    expect(spec().$container.find('.handsontableEditor').length).toEqual(1);\n  });\n\n  it('should reuse the container and display them after select the same or different cell', () => {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n\n    let container = spec().$container.find('.handsontableEditor')[0];\n\n    expect(container.clientHeight).toBeGreaterThan(2);\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n\n    container = spec().$container.find('.handsontableEditor')[0];\n\n    expect(container.clientHeight).toBeGreaterThan(2);\n\n    selectCell(1, 0);\n    keyDownUp('enter');\n\n    container = spec().$container.find('.handsontableEditor')[0];\n\n    expect(container.clientHeight).toBeGreaterThan(2);\n\n    selectCell(1, 0);\n    keyDownUp('enter');\n\n    container = spec().$container.find('.handsontableEditor')[0];\n\n    expect(container.clientHeight).toBeGreaterThan(2);\n  });\n\n  it('should destroy the editor when Esc is pressed', () => {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    keyDownUp('esc');\n    expect(spec().$container.find('.handsontableEditor:visible').length).toEqual(0);\n  });\n\n  // see https://github.com/handsontable/handsontable/issues/3380\n  it('should not throw error while selecting the next cell by hitting enter key', () => {\n    const spy = jasmine.createSpyObj('error', ['test']);\n    const prevError = window.onerror;\n\n    window.onerror = function() {\n      spy.test();\n    };\n    handsontable({\n      columns: [{\n        type: 'handsontable',\n        handsontable: {\n          data: [['Marque'], ['Country'], ['Parent company']]\n        }\n      }]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n\n    expect(spy.test.calls.count()).toBe(0);\n\n    window.onerror = prevError;\n  });\n\n  it('Enter pressed in nested HT should set the value and hide the editor', () => {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    keyDownUp('arrow_down');\n    keyDownUp('enter');\n    expect(spec().$container.find('.handsontableEditor:visible').length).toEqual(0);\n    expect(getDataAtCell(2, 0)).toEqual('BMW');\n  });\n\n  it('should keep focus on textarea after arrow is pressed', () => {\n    const hot = handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    keyDownUp('arrow_down');\n    expect(document.activeElement).toEqual(hot.getActiveEditor().TEXTAREA);\n  });\n\n  it('should focus the TD after HT editor is prepared and destroyed', () => {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n\n    selectCell(2, 0);\n    keyDownUp('arrow_down');\n    keyDownUp('arrow_down');\n\n    expect(getSelected()).toEqual([[4, 0, 4, 0]]);\n  });\n\n  it('should focus the TD after HT editor is prepared, finished (by keyboard) and destroyed', () => {\n    const selections = [];\n\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData(),\n            afterSelection(row) {\n              selections.push(['inner', row]);\n            }\n          }\n        }\n      ],\n      afterSelection(row) {\n        selections.push(['outer', row]);\n      }\n    });\n    expect(selections.length).toBe(0);\n\n    selectCell(1, 0);\n    expect(selections[0]).toEqual(['outer', 1]);\n\n    keyDownUp('arrow_down');\n    expect(selections[1]).toEqual(['outer', 2]);\n\n    keyDownUp('enter');\n\n    keyDownUp('arrow_down');\n    expect(selections[2]).toEqual(['inner', 0]);\n\n    keyDownUp('esc');\n    keyDownUp('arrow_down');\n    expect(selections[3]).toEqual(['outer', 3]);\n\n    expect(selections.length).toBe(4);\n  });\n\n  describe('strict mode', () => {\n    it('should open editor and select cell (0, 0) in inner HOT', () => {\n      const hot = handsontable({\n        columns: [\n          {\n            type: 'handsontable',\n            handsontable: {\n              colHeaders: ['Marque', 'Country', 'Parent company'],\n              data: getManufacturerData()\n            },\n            strict: true\n          }\n        ]\n      });\n      selectCell(2, 0);\n\n      keyDownUp('enter');\n\n      const ht = hot.getActiveEditor();\n      const innerHot = ht.htEditor;\n\n      expect(innerHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n  });\n\n  describe('non strict mode', () => {\n\n    it('should open editor and DO NOT select any cell in inner HOT', () => {\n      const hot = handsontable({\n        columns: [\n          {\n            type: 'handsontable',\n            handsontable: {\n              colHeaders: ['Marque', 'Country', 'Parent company'],\n              data: getManufacturerData()\n            }\n          }\n        ]\n      });\n      selectCell(2, 0);\n\n      keyDownUp('enter');\n\n      const ht = hot.getActiveEditor();\n      const innerHot = ht.htEditor;\n\n      expect(innerHot.getSelected()).toBeUndefined();\n    });\n\n    it('should show textarea', () => {\n      const hot = handsontable({\n        columns: [\n          {\n            type: 'handsontable',\n            handsontable: {\n              colHeaders: ['Marque', 'Country', 'Parent company'],\n              data: getManufacturerData()\n            }\n          }\n        ]\n      });\n      selectCell(2, 0);\n\n      keyDownUp('enter');\n\n      expect(hot.getActiveEditor().TEXTAREA.parentElement.style.zIndex).toEqual('');\n      expect(hot.getActiveEditor().TEXTAREA.style.visibility).toEqual('');\n    });\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element after selecting the cell', async() => {\n      handsontable({\n        columns: [\n          {\n            type: 'handsontable',\n            handsontable: {\n              colHeaders: ['Marque', 'Country', 'Parent company'],\n              data: getManufacturerData()\n            }\n          }\n        ]\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/handsontableEditor.spec.js","describe('editors', () => {\n  const id = 'testContainer';\n  const {\n    registerEditor,\n    getEditor,\n  } = Handsontable.editors;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should register custom editor', () => {\n    class MyEditor extends Handsontable.editors.BaseEditor {\n      init() {\n        this.TEXTAREA = document.createElement('TEXTAREA');\n        this.TEXTAREA_PARENT = document.createElement('DIV');\n\n        this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);\n        this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);\n      }\n      getValue() {\n        return `--${this.TEXTAREA.value}--`;\n      }\n      setValue(value) {\n        this.TEXTAREA.value = value;\n      }\n      open() {}\n      close() {}\n      focus() {\n        this.TEXTAREA.focus();\n      }\n    }\n    registerEditor('myEditor', MyEditor);\n\n    handsontable({\n      data: [\n        [1, 6, 10],\n      ],\n      columns: [{\n        editor: 'myEditor',\n      }],\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'hello';\n    destroyEditor();\n\n    expect(getDataAtCell(0, 0)).toBe('--hello--');\n  });\n\n  it('should retrieve predefined editors by its names', () => {\n    expect(getEditor('autocomplete')).toBeFunction();\n    expect(getEditor('base')).toBeFunction();\n    expect(getEditor('checkbox')).toBeFunction();\n    expect(getEditor('date')).toBeFunction();\n    expect(getEditor('dropdown')).toBeFunction();\n    expect(getEditor('handsontable')).toBeFunction();\n    expect(getEditor('numeric')).toBeFunction();\n    expect(getEditor('password')).toBeFunction();\n    expect(getEditor('select')).toBeFunction();\n    expect(getEditor('text')).toBeFunction();\n  });\n\n  it('should retrieve custom editor by its names', () => {\n    class MyEditor {}\n    registerEditor('myEditor', MyEditor);\n\n    expect(getEditor('myEditor')).toBe(MyEditor);\n  });\n\n  it('should reset previous value when printable character was entered to selected, non-empty cell', async() => {\n    handsontable({\n      data: [\n        { id: 10, name: 'Cup' },\n        { id: 23, name: 'Newspaper' },\n        { id: 31, name: 'Car' }\n      ],\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('1'.charCodeAt(0));\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getCell(0, 0).innerHTML).not.toEqual('10');\n\n    selectCell(0, 1);\n    keyDownUp('a'.charCodeAt(0));\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getCell(1, 0).innerHTML).not.toEqual('Cup');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/index.spec.js","describe('noEditor', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('shouldn\\'t begin editing when enterBeginsEditing equals true', () => {\n    handsontable({\n      enterBeginsEditing: true,\n      editor: false\n    });\n    selectCell(2, 2);\n    keyDown('enter');\n\n    expect(getSelected()).toEqual([[2, 2, 2, 2]]);\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('shouldn\\'t move down after editing', () => {\n    handsontable({\n      editor: false\n    });\n    selectCell(2, 2);\n    keyDown('enter');\n    keyDown('enter');\n\n    expect(getSelected()).toEqual([[2, 2, 2, 2]]);\n  });\n\n  it('shouldn\\'t move down when enterBeginsEditing equals false', () => {\n    handsontable({\n      enterBeginsEditing: false,\n      editor: false\n    });\n    selectCell(2, 2);\n    keyDown('enter');\n\n    expect(getSelected()).toEqual([[3, 2, 3, 2]]);\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('shouldn\\'t render any value in editor', () => {\n    handsontable({\n      editor: false\n    });\n    setDataAtCell(2, 2, 'string');\n    selectCell(2, 2);\n    keyDown('enter');\n\n    expect(keyProxy().length).toEqual(0);\n  });\n\n  it('shouldn\\'t open editor after hitting F2', () => {\n    handsontable({\n      editor: false\n    });\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n\n    keyDown('f2');\n\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('shouldn\\'t open editor after hitting CapsLock', () => {\n    handsontable({\n      editor: false\n    });\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n\n    keyDown(Handsontable.helper.KEY_CODES.CAPS_LOCK);\n\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('shouldn\\'t open editor after double clicking on a cell', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      editor: false\n    });\n\n    const cell = $(getCell(0, 0));\n    let clicks = 0;\n    window.scrollTo(0, cell.offset().top);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks += 1;\n    }, 0);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks += 1;\n    }, 100);\n\n    setTimeout(() => {\n      expect(clicks).toBe(2);\n      expect(hot.getActiveEditor()).toBe(undefined);\n      expect(isEditorVisible()).toBe(false);\n      done();\n    }, 200);\n  });\n\n  it('should not open editor after pressing a printable character', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      editor: false\n    });\n    selectCell(0, 0);\n\n    expect(isEditorVisible()).toBe(false);\n\n    spec().$container.simulate('keydown', { keyCode: 'a'.charCodeAt(0) });\n\n    expect(isEditorVisible()).toBe(false);\n  });\n\n  it('should not open editor after pressing a printable character with shift key', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      editor: false\n    });\n    selectCell(0, 0);\n\n    expect(isEditorVisible()).toBe(false);\n\n    spec().$container.simulate('keydown', { keyCode: 'a'.charCodeAt(0), shiftKey: true });\n\n    expect(isEditorVisible()).toBe(false);\n  });\n\n  it('should not not open editor after hitting ALT', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      editor: false\n    });\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n\n    selectCell(0, 0);\n    keyDown(Handsontable.helper.KEY_CODES.ALT);\n\n    expect(isEditorVisible()).toBe(false);\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element (from copyPaste plugin) after selecting the cell', async() => {\n      handsontable({\n        editor: false,\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(document.querySelector('#HandsontableCopyPaste'));\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/noEditor.spec.js","describe('NumericEditor', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfObjects = function() {\n    return [\n      { id: 1, name: 'Ted', lastName: 'Right' },\n      { id: 2, name: 'Frank', lastName: 'Honest' },\n      { id: 3, name: 'Joan', lastName: 'Well' },\n      { id: 4, name: 'Sid', lastName: 'Strong' },\n      { id: 5, name: 'Jane', lastName: 'Neat' },\n      { id: 6, name: 'Chuck', lastName: 'Jackson' },\n      { id: 7, name: 'Meg', lastName: 'Jansen' },\n      { id: 8, name: 'Rob', lastName: 'Norris' },\n      { id: 9, name: 'Sean', lastName: 'O\\'Hara' },\n      { id: 10, name: 'Eve', lastName: 'Branson' }\n    ];\n  };\n\n  it('should convert \"integer like\" input value to number (object data source)', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n    document.activeElement.value = '999';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(typeof getDataAtCell(2, 0)).toEqual('number');\n    expect(getDataAtCell(2, 0)).toEqual(999);\n  });\n\n  it('should not convert formatted \"float like\" input value to number (object data source) #4706', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'price_eur', type: 'numeric' },\n        { data: 'price_pln', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'en-US' } },\n        { data: 'price_aud', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'de-DE' } }\n      ]\n    });\n\n    selectCell(0, 1);\n    keyDown('enter');\n\n    document.activeElement.value = '100.000,0';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(1, 1);\n    keyDown('enter');\n\n    document.activeElement.value = '200,000.5';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(0, 2);\n    keyDown('enter');\n\n    document.activeElement.value = '300,000.5';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(1, 2);\n    keyDown('enter');\n\n    document.activeElement.value = '300.000,5';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(0, 3);\n    keyDown('enter');\n\n    document.activeElement.value = '400.000,5';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(1, 3);\n    keyDown('enter');\n\n    document.activeElement.value = '400,000.5';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getDataAtCell(0, 1)).toEqual('100.000,0');\n    expect(getDataAtCell(1, 1)).toEqual('200,000.5');\n    expect(getDataAtCell(0, 2)).toEqual('300,000.5');\n    expect(getDataAtCell(1, 2)).toEqual('300.000,5');\n    expect(getDataAtCell(0, 3)).toEqual('400.000,5');\n    expect(getDataAtCell(1, 3)).toEqual('400,000.5');\n  });\n\n  it('should convert \"float like\" input value with dot as determiner to number (object data source)', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'price' },\n        { data: 'lastName' }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n    document.activeElement.value = '77.70';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(typeof getDataAtCell(2, 0)).toEqual('number');\n    expect(getDataAtCell(2, 0)).toEqual(77.7);\n  });\n\n  it('should convert \"float like\" input value with comma as determiner to number (object data source)', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n    document.activeElement.value = '77,70';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(typeof getDataAtCell(2, 0)).toEqual('number');\n    expect(getDataAtCell(2, 0)).toEqual(77.7);\n  });\n\n  it('should convert \"float like\" input without leading zero to a float', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ]\n    });\n\n    selectCell(2, 0);\n    keyDown('enter');\n\n    document.activeElement.value = '.74';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getDataAtCell(2, 0)).toEqual(0.74);\n  });\n\n  it('should apply changes to editor after validation', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('delete');\n\n    await sleep(100);\n\n    expect(getActiveEditor().originalValue).toEqual('');\n  });\n\n  it('should not validate string input data containing numbers ', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'price', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'de-DE' } },\n        { data: 'lastName' }\n      ]\n    });\n\n    // Column with default formatting\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = '12aaa34';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(1, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'aaa34';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(2, 0);\n    keyDown('enter');\n\n    document.activeElement.value = '12aaa';\n\n    destroyEditor();\n\n    // Column with specified formatting\n\n    await sleep(100);\n\n    selectCell(0, 1);\n    keyDown('enter');\n\n    document.activeElement.value = '12aaa34';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(1, 1);\n    keyDown('enter');\n\n    document.activeElement.value = 'aaa34';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    selectCell(2, 1);\n    keyDown('enter');\n\n    document.activeElement.value = '12aaa';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(true);\n    expect(getDataAtCell(0, 0)).toEqual('12aaa34');\n\n    expect($(getCell(1, 0)).hasClass('htInvalid')).toBe(true);\n    expect(getDataAtCell(1, 0)).toEqual('aaa34');\n\n    expect($(getCell(2, 0)).hasClass('htInvalid')).toBe(true);\n    expect(getDataAtCell(2, 0)).toEqual('12aaa');\n\n    expect($(getCell(0, 1)).hasClass('htInvalid')).toBe(true);\n    expect(getDataAtCell(0, 1)).toEqual('12aaa34');\n\n    expect($(getCell(1, 1)).hasClass('htInvalid')).toBe(true);\n    expect(getDataAtCell(1, 1)).toEqual('aaa34');\n\n    expect($(getCell(2, 1)).hasClass('htInvalid')).toBe(true);\n    expect(getDataAtCell(2, 1)).toEqual('12aaa');\n  });\n\n  it('should display a string in a format \\'$X,XXX.XX\\' when using language=en, appropriate format in column settings and \\'XXXX.XX\\' as ' +\n     'an input string', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'en-US' } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '2456.22';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getCell(2, 0).innerHTML).toEqual('$2,456.22');\n  });\n\n  it('should display a string in a format \\'X.XXX,XX €\\' when using language=de, appropriate format in column settings and \\'XXXX,XX\\' as an ' +\n     'input string (that comes from manual input)', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric', numericFormat: { pattern: '0,0.00 $', culture: 'de-DE' } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '2456,22';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');\n  });\n\n  it('should display a string in a format \\'X.XXX,XX €\\' when using language=de, appropriate format in column settings and \\'XXXX.XX\\' as an ' +\n     'input string (that comes from paste)', async() => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric', numericFormat: { pattern: '0,0.00 $', culture: 'de-DE' } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '2456.22';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');\n  });\n\n  it('should display a string in a format \\'X XXX,XX €\\' when using language=de, appropriate format in column settings and \\'XXXX,XX\\' as an ' +\n     'input string and ignore not needed zeros at the end', async() => {\n    handsontable({\n      data: [\n        { id: 1, name: 'Ted', lastName: 'Right', money: 0 },\n        { id: 2, name: 'Frank', lastName: 'Honest', money: 0 },\n        { id: 3, name: 'Joan', lastName: 'Well', money: 0 },\n        { id: 4, name: 'Sid', lastName: 'Strong', money: 0 },\n        { id: 5, name: 'Jane', lastName: 'Neat', money: 0 },\n        { id: 6, name: 'Chuck', lastName: 'Jackson', money: 0 },\n        { id: 7, name: 'Meg', lastName: 'Jansen', money: 0 },\n        { id: 8, name: 'Rob', lastName: 'Norris', money: 0 },\n        { id: 9, name: 'Sean', lastName: 'O\\'Hara', money: 0 },\n        { id: 10, name: 'Eve', lastName: 'Branson', money: 0 }\n      ],\n      columns: [\n        { data: 'id', type: 'numeric', numericFormat: { pattern: '0,0.00 $', culture: 'de-DE' } },\n        { data: 'name' },\n        { data: 'lastName' },\n        { data: 'money', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'en-US' } }\n      ]\n    });\n\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '2456,220';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');\n\n    selectCell(2, 3);\n\n    keyDown('enter');\n\n    document.activeElement.value = '2456.220';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getCell(2, 3).innerHTML).toEqual('$2,456.22');\n  });\n\n  it('should display values as \"float like\" string with dot as determiner after pressing enter ' +\n    'and not change value after closing editor', async() => {\n    handsontable({\n      data: [\n        { id: 1, price_eur: 222.5, price_pln: 1222.6, price_aud: 1333.5 }\n      ],\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'price_eur', type: 'numeric' },\n        { data: 'price_pln', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'en-US' } },\n        { data: 'price_aud', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'de-DE' } }\n      ]\n    });\n\n    selectCell(0, 1);\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(document.activeElement.value).toEqual('222.5');\n\n    // closing editor\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(getDataAtCell(0, 1)).toEqual(222.5);\n\n    selectCell(0, 2);\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(document.activeElement.value).toEqual('1222.6');\n\n    // closing editor\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(getDataAtCell(0, 2)).toEqual(1222.6);\n\n    selectCell(0, 3);\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(document.activeElement.value).toEqual('1333.5');\n\n    // closing editor\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(getDataAtCell(0, 3)).toEqual(1333.5);\n  });\n\n  it('should display values as \"float like\" string with dot as determiner after double click ' +\n    'and not change value after closing editor', async() => {\n    handsontable({\n      data: [\n        { id: 1, price_eur: 222.5, price_pln: 1222.6, price_aud: 1333.5 }\n      ],\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'price_eur', type: 'numeric' },\n        { data: 'price_pln', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'en-US' } },\n        { data: 'price_aud', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'de-DE' } }\n      ]\n    });\n\n    mouseDoubleClick(getCell(0, 1));\n\n    await sleep(100);\n\n    expect(document.activeElement.value).toEqual('222.5');\n\n    // closing editor\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(getDataAtCell(0, 1)).toEqual(222.5);\n\n    mouseDoubleClick(getCell(0, 2));\n\n    await sleep(100);\n\n    expect(document.activeElement.value).toEqual('1222.6');\n\n    // closing editor\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(getDataAtCell(0, 2)).toEqual(1222.6);\n\n    mouseDoubleClick(getCell(0, 3));\n\n    await sleep(100);\n\n    expect(document.activeElement.value).toEqual('1333.5');\n\n    // closing editor\n    keyDown('enter');\n\n    await sleep(100);\n\n    expect(getDataAtCell(0, 3)).toEqual(1333.5);\n  });\n\n  it('should mark text as invalid without removing when using `setDataAtCell`', async() => {\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n    });\n\n    hot.setDataAtCell(0, 0, 'abc');\n\n    await sleep(200);\n\n    expect(hot.getDataAtCell(0, 0)).toEqual('abc');\n    expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(true);\n  });\n\n  it('should allow custom validator', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        {\n          data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            cb(parseInt(val, 10) > 100);\n          }\n        },\n        { data: 'name' },\n        { data: 'lastName' }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n    document.activeElement.value = '99';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getDataAtCell(2, 0)).not.toEqual(99); // should be ignored\n\n    document.activeElement.value = '999';\n\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(getDataAtCell(2, 0)).toEqual(999);\n  });\n\n  // Input element can not lose the focus while entering new characters. It breaks IME editor functionality for Asian users.\n  it('should not lose the focus on input element while inserting new characters (#839)', async() => {\n    let blured = false;\n    const listener = () => {\n      blured = true;\n    };\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric', numericFormat: { pattern: '0,0.00', culture: 'en-US' } },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    hot.getActiveEditor().TEXTAREA.addEventListener('blur', listener);\n\n    await sleep(200);\n\n    hot.getActiveEditor().TEXTAREA.value = '1';\n    keyDownUp('1'.charCodeAt(0));\n    hot.getActiveEditor().TEXTAREA.value = '12';\n    keyDownUp('2'.charCodeAt(0));\n    hot.getActiveEditor().TEXTAREA.value = '123';\n    keyDownUp('3'.charCodeAt(0));\n\n    expect(blured).toBeFalsy();\n\n    hot.getActiveEditor().TEXTAREA.removeEventListener('blur', listener);\n  });\n\n  it('should not throw error on closing editor when column data is defined as \\'length\\'', () => {\n    hot = handsontable({\n      data: [\n        { length: 4 },\n        { length: 5 },\n      ],\n      columns: [\n        {\n          data: 'length', type: 'numeric'\n        },\n        {},\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDown('enter');\n    document.activeElement.value = '999';\n\n    expect(() => {\n      destroyEditor();\n    }).not.toThrow();\n  });\n\n  describe('Cell corner is showed properly when changing focused cells #3877', () => {\n    const isFocusedCellDisplayingCornerTest = function(settings) {\n      const moveFromRow = settings.moveFromRow;\n      const moveFromCol = settings.moveFromCol;\n      const moveToRow = settings.moveToRow;\n      const moveToCol = settings.moveToCol;\n      const doneFunc = settings.doneFunc;\n      const $corner = settings.$container.find('.wtBorder.current.corner');\n\n      selectCell(moveFromRow, moveFromCol);\n      keyDown('enter');\n      selectCell(moveToRow, moveToCol);\n\n      setTimeout(() => {\n        expect($corner.css('display')).toEqual('block');\n        doneFunc();\n      }, 100);\n    };\n\n    it('Moving from numeric editor to text editor', (done) => {\n      handsontable({\n        data: [\n          { id: 1, name: 'Ted', lastName: 'Right', money: 0 }\n        ],\n        columns: [\n          { data: 'id' },\n          { data: 'name' },\n          { data: 'lastName' },\n          { data: 'money', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'en-US' } }\n        ]\n      });\n\n      isFocusedCellDisplayingCornerTest({\n        moveFromRow: 0,\n        moveFromCol: 3,\n        moveToRow: 0,\n        moveToCol: 0,\n        $container: spec().$container,\n        doneFunc: done\n      });\n    });\n\n    it('Moving from text editor to numeric editor', (done) => {\n      handsontable({\n        data: [\n          { id: 1, name: 'Ted', lastName: 'Right', money: 0 }\n        ],\n        columns: [\n          { data: 'id' },\n          { data: 'name' },\n          { data: 'lastName' },\n          { data: 'money', type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'en-US' } }\n        ]\n      });\n\n      isFocusedCellDisplayingCornerTest({\n        moveFromRow: 0,\n        moveFromCol: 1,\n        moveToRow: 0,\n        moveToCol: 3,\n        $container: spec().$container,\n        doneFunc: done\n      });\n    });\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element after selecting the cell', async() => {\n      handsontable({\n        type: 'numeric', numericFormat: { pattern: '$0,0.00', culture: 'en-US' }\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/numericEditor.spec.js","describe('PasswordEditor', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 300px;\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should display editor as password field', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          editor: Handsontable.editors.PasswordEditor\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    const editor = $('.handsontableInput');\n\n    expect(editor.is(':visible')).toBe(true);\n    expect(editor.is(':password')).toBe(true);\n\n  });\n\n  it('should set passwordEditor using \\'password\\' alias', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          editor: 'password'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    const editor = $('.handsontableInput');\n\n    expect(editor.is(':visible')).toBe(true);\n    expect(editor.is(':password')).toBe(true);\n\n  });\n\n  it('should set passwordEditor using column type \\'password\\' ', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          type: 'password'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    const editorHolder = $('.handsontableInputHolder');\n    const editor = editorHolder.find('.handsontableInput');\n\n    expect(editorHolder.is(':visible')).toBe(true);\n    expect(editor.is(':password')).toBe(true);\n\n  });\n\n  it('should save values typed in passwordEditor', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          editor: 'password'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    expect(getDataAtCell(0, 0)).toMatch('Joe');\n    expect(getRenderedValue(0, 0)).toMatch('Joe');\n\n    keyDown('enter');\n\n    const editorHolder = $('.handsontableInputHolder');\n    const editor = editorHolder.find('.handsontableInput');\n\n    expect(parseInt(editorHolder.css('z-index'), 10)).toBeGreaterThan(0);\n\n    editor.val('Edgar');\n\n    selectCell(1, 0); // closes editor and saves current value\n\n    expect(editorHolder.css('z-index')).toBe('-1');\n\n    expect(getDataAtCell(0, 0)).toMatch('Edgar');\n    expect(getRenderedValue(0, 0)).toMatch('Edgar');\n  });\n\n  // Input element can not lose the focus while entering new characters. It breaks IME editor functionality for Asian users.\n  it('should not lose the focus on input element while inserting new characters (#839)', async() => {\n    let blured = false;\n    const listener = () => {\n      blured = true;\n    };\n    const hot = handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        { data: 'id', type: 'password' },\n      ],\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    hot.getActiveEditor().TEXTAREA.addEventListener('blur', listener);\n\n    await sleep(200);\n\n    hot.getActiveEditor().TEXTAREA.value = '1';\n    keyDownUp('1'.charCodeAt(0));\n    hot.getActiveEditor().TEXTAREA.value = '12';\n    keyDownUp('2'.charCodeAt(0));\n    hot.getActiveEditor().TEXTAREA.value = '123';\n    keyDownUp('3'.charCodeAt(0));\n\n    expect(blured).toBeFalsy();\n\n    hot.getActiveEditor().TEXTAREA.removeEventListener('blur', listener);\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element after selecting the cell', async() => {\n      handsontable({\n        type: 'password',\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/passwordEditor.spec.js","describe('SelectEditor', () => {\n\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should display select', () => {\n    handsontable({\n      columns: [\n        {\n          editor: 'select'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = $('.htSelectEditor');\n\n    expect(editor.length).toEqual(1);\n    expect(editor.is('select')).toBe(true);\n    expect(editor.is(':visible')).toBe(false);\n\n    keyDown('enter');\n\n    expect(editor.is(':visible')).toBe(true);\n    expect(editor.offset()).toEqual($(getCell(0, 0)).offset());\n  });\n\n  it('should display and correctly reposition select editor while scrolling', (done) => {\n    const hot = handsontable({\n      width: 200,\n      height: 200,\n      data: Handsontable.helper.createSpreadsheetData(100, 100),\n      columns: [\n        {\n          editor: 'select'\n        }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, { editor: 'select' }\n      ]\n    });\n    const mainHolder = hot.view.wt.wtTable.holder;\n\n    selectCell(0, 0);\n    keyDown('enter');\n    keyUp('enter');\n\n    mainHolder.scrollTop = 10;\n    mainHolder.scrollLeft = 20;\n    const editor = $('.htSelectEditor');\n\n    setTimeout(() => {\n      expect(editor.css('top')).toEqual('-10px');\n      expect(editor.css('left')).toEqual('-20px');\n      done();\n    }, 200);\n  });\n\n  it('should populate select with given options (array)', () => {\n    const options = [\n      'Misubishi', 'Chevrolet', 'Lamborgini'\n    ];\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    const $options = editor.find('option');\n\n    expect($options.length).toEqual(options.length);\n    expect($options.eq(0).val()).toMatch(options[0]);\n    expect($options.eq(0).html()).toMatch(options[0]);\n    expect($options.eq(1).val()).toMatch(options[1]);\n    expect($options.eq(1).html()).toMatch(options[1]);\n    expect($options.eq(2).val()).toMatch(options[2]);\n    expect($options.eq(2).html()).toMatch(options[2]);\n  });\n\n  it('should populate select with given options (object)', () => {\n    const options = {\n      mit: 'Misubishi',\n      che: 'Chevrolet',\n      lam: 'Lamborgini'\n    };\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    const $options = editor.find('option');\n\n    expect($options.eq(0).val()).toMatch('mit');\n    expect($options.eq(0).html()).toMatch(options.mit);\n    expect($options.eq(1).val()).toMatch('che');\n    expect($options.eq(1).html()).toMatch(options.che);\n    expect($options.eq(2).val()).toMatch('lam');\n    expect($options.eq(2).html()).toMatch(options.lam);\n  });\n\n  it('should populate select with given options (function:array)', () => {\n    const options = function() {\n      return [\n        'Misubishi', 'Chevrolet', 'Lamborgini'\n      ];\n    };\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    const $options = editor.find('option');\n\n    expect($options.length).toEqual(options().length);\n    expect($options.eq(0).val()).toMatch(options()[0]);\n    expect($options.eq(0).html()).toMatch(options()[0]);\n    expect($options.eq(1).val()).toMatch(options()[1]);\n    expect($options.eq(1).html()).toMatch(options()[1]);\n    expect($options.eq(2).val()).toMatch(options()[2]);\n    expect($options.eq(2).html()).toMatch(options()[2]);\n  });\n\n  it('should populate select with given options (function:object)', () => {\n    const options = function() {\n      return {\n        mit: 'Misubishi',\n        che: 'Chevrolet',\n        lam: 'Lamborgini'\n      };\n    };\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    const $options = editor.find('option');\n\n    expect($options.eq(0).val()).toMatch('mit');\n    expect($options.eq(0).html()).toMatch(options().mit);\n    expect($options.eq(1).val()).toMatch('che');\n    expect($options.eq(1).html()).toMatch(options().che);\n    expect($options.eq(2).val()).toMatch('lam');\n    expect($options.eq(2).html()).toMatch(options().lam);\n  });\n\n  it('should mark option matching cell value as selected', () => {\n    const options = [\n      'Misubishi', 'Chevrolet', 'Lamborgini'\n    ];\n\n    handsontable({\n      data: [\n        ['Misubishi'],\n        ['Lamborgini'],\n        ['Chevrolet']\n      ],\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(0, 0));\n\n    keyDown('enter');\n\n    selectCell(1, 0);\n    keyDown('enter');\n\n    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(1, 0));\n\n    keyDown('enter');\n\n    selectCell(2, 0);\n    keyDown('enter');\n\n    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(2, 0));\n\n    keyDown('enter');\n  });\n\n  it('should not prevent the default event action when select is clicked', () => {\n\n    const options = function() {\n      return [\n        'Misubishi', 'Chevrolet', 'Lamborgini'\n      ];\n    };\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    const editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    const selectMouseDownListener = jasmine.createSpy('selectMouseDownListener');\n    $('body').on('mousedown', selectMouseDownListener);\n\n    editor.mousedown();\n\n    expect(selectMouseDownListener.calls.count()).toEqual(1);\n\n    const event = selectMouseDownListener.calls.argsFor(0)[0];\n\n    expect(event).toBeDefined();\n    expect(event.isDefaultPrevented()).toBe(false);\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element (from copyPaste plugin) after selecting the cell', async() => {\n      handsontable({\n        editor: false,\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(document.querySelector('#HandsontableCopyPaste'));\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/selectEditor.spec.js","describe('TextEditor', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: hidden;\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should begin editing when enterBeginsEditing equals true', () => {\n    handsontable({\n      enterBeginsEditing: true,\n      editor: 'text'\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    const selection = getSelected();\n\n    expect(selection).toEqual([[2, 2, 2, 2]]);\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should move down after editing', () => {\n    handsontable({\n      editor: 'text'\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyDown('enter');\n\n    const selection = getSelected();\n    expect(selection).toEqual([[3, 2, 3, 2]]);\n  });\n\n  it('should move down when enterBeginsEditing equals false', () => {\n    handsontable({\n      enterBeginsEditing: false\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    const selection = getSelected();\n    expect(selection).toEqual([[3, 2, 3, 2]]);\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('should create editor holder after cell selection', () => {\n    handsontable({\n      editor: 'text',\n    });\n\n    const container = spec().$container;\n\n    expect(container.find('.handsontableInputHolder').length).toBe(0);\n\n    selectCell(0, 0);\n\n    expect(container.find('.handsontableInputHolder').length).toBe(1);\n  });\n\n  it('should prepare editor with proper styles after selection', () => {\n    handsontable({\n      editor: 'text',\n    });\n\n    selectCell(0, 0);\n\n    const { left, position, top, zIndex } = spec().$container.find('.handsontableInputHolder').css(['left', 'position', 'top', 'zIndex']);\n\n    expect(left).toBe('-9999px');\n    expect(position).toBe('fixed');\n    expect(top).toBe('-9999px');\n    expect(zIndex).toBe('-1');\n  });\n\n  it('should change editor\\'s CSS properties during switching to being visible', () => {\n    handsontable({\n      editor: 'text',\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n\n    const cell = getCell(0, 0);\n    const [cellOffsetTop, cellOffsetLeft] = [cell.offsetTop, cell.offsetLeft];\n    const { left, position, top, zIndex } = spec().$container.find('.handsontableInputHolder').css(['left', 'position', 'top', 'zIndex']);\n\n    expect(parseInt(left, 10)).toBeAroundValue(cellOffsetLeft);\n    expect(position).toBe('absolute');\n    expect(parseInt(top, 10)).toBeAroundValue(cellOffsetTop);\n    expect(zIndex).not.toBe('-1');\n  });\n\n  it('should render string in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, 'string');\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('string');\n  });\n\n  it('should render proper value after cell coords manipulation', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      modifyRow(row) { return row === 4 ? 0 : row + 1; },\n      modifyCol(column) { return column === 4 ? 0 : column + 1; },\n    });\n\n    selectCell(0, 0);\n    getActiveEditor().beginEditing();\n    getActiveEditor().refreshValue();\n\n    expect(getActiveEditor().originalValue).toEqual('B2');\n  });\n\n  it('should render textarea editor with tabindex=-1 attribute', async() => {\n    const hot = handsontable();\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    await sleep(10);\n\n    expect(hot.getActiveEditor().TEXTAREA.getAttribute('tabindex')).toBe('-1');\n  });\n\n  it('should render textarea editor in specified size at cell 0, 0 without headers', (done) => {\n    const hot = handsontable();\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      expect(hot.getActiveEditor().TEXTAREA.style.width).toBe('40px');\n      done();\n    }, 200);\n  });\n\n  it('should render textarea editor in specified size at cell 1, 0 without headers', (done) => {\n    const hot = handsontable();\n\n    selectCell(1, 1);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      done();\n    }, 200);\n  });\n\n  it('should render textarea editor in specified size at cell 0, 0 with headers', (done) => {\n    const hot = handsontable({\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      expect(hot.getActiveEditor().TEXTAREA.style.width).toBe('40px');\n      expect(hot.getActiveEditor().textareaParentStyle.top).toBe('26px');\n      done();\n    }, 200);\n  });\n\n  it('should render textarea editor in specified size at cell 0, 0 with headers defined in columns', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      columns: [{\n        data: 'prop0',\n        title: 'Prop 0'\n      }, {\n        data: 'prop1',\n        title: 'Prop 1'\n      }, {\n        data: 'prop2',\n        title: 'Prop 2'\n      }, {\n        data: 'prop3',\n        title: 'Prop 3'\n      }],\n    });\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      expect(parseInt(hot.getActiveEditor().TEXTAREA.style.width, 10)).toBeAroundValue(50, 4);\n      expect(hot.getActiveEditor().textareaParentStyle.top).toBe('26px');\n      done();\n    }, 200);\n  });\n\n  it('should hide whole editor when it is higher then header', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    setDataAtCell(2, 2, 'string\\nstring\\nstring');\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyUp('enter');\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n\n    mainHolder.scrollTop = 150;\n    mainHolder.scrollLeft = 150;\n\n    setTimeout(() => {\n      expect(parseInt(hot.getActiveEditor().textareaParentStyle.top, 10)).toBeAroundValue(-77);\n      expect(parseInt(hot.getActiveEditor().textareaParentStyle.left, 10)).toBeAroundValue(-1);\n      done();\n    }, 200);\n  });\n\n  it('should hide editor when quick navigation by click scrollbar was triggered', async() => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    setDataAtCell(2, 2, 'string\\nstring\\nstring');\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyUp('enter');\n    hot.scrollViewportTo(49);\n\n    await sleep(100);\n\n    expect(isEditorVisible()).toBe(false);\n  });\n\n  it('should render textarea editor in specified height (single line)', (done) => {\n    const hot = handsontable();\n\n    setDataAtCell(2, 2, 'first line');\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      done();\n    }, 200);\n  });\n\n  it('should render textarea editor in specified height (multi line)', (done) => {\n    const hot = handsontable();\n\n    setDataAtCell(2, 2, 'first line\\n second line\\n third line...');\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('64px');\n      done();\n    }, 200);\n  });\n\n  it('should render number in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, 13);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('13');\n  });\n\n  it('should render boolean true in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, true);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('true');\n  });\n\n  it('should render boolean false in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, false);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('false');\n  });\n\n  it('should render null in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, null);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('');\n  });\n\n  it('should render undefined in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, void 0);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('');\n  });\n\n  it('should render nested object value in textarea', () => {\n    handsontable({\n      data: [{\n        name: {\n          first: 'Tom',\n          last: 'Kowalski',\n          obj: {}\n        }\n      }, {\n        name: {\n          first: 'John',\n          last: 'Cage',\n          obj: {\n            foo: 'bar'\n          }\n        }\n      }],\n      columns: [{\n        data: 'name.last'\n      }, {\n        data: 'name.obj.foo'\n      }]\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('Kowalski');\n\n    selectCell(1, 1);\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('bar');\n  });\n\n  it('should render nested object value in textarea after change rows order', () => {\n    const hot = handsontable({\n      data: [{\n        name: {\n          first: 'Tom',\n          last: 'Kowalski',\n          obj: {}\n        }\n      }, {\n        name: {\n          first: 'John',\n          last: 'Cage',\n          obj: {\n            foo: 'bar'\n          }\n        }\n      }],\n      columns: [{\n        data: 'name.last'\n      }, {\n        data: 'name.obj.foo'\n      }],\n      manualRowMove: true\n    });\n\n    hot.getPlugin('manualRowMove').moveRow(1, 0);\n    hot.render();\n\n    selectCell(0, 0);\n    keyDown('enter');\n    expect(keyProxy().val()).toEqual('Cage');\n    keyDown('enter');\n\n    expect(hot.getDataAtCell(0, 0)).toEqual('Cage');\n\n    selectCell(1, 1);\n    keyDown('enter');\n    expect(keyProxy().val()).toEqual('');\n    keyDown('enter');\n\n    expect(hot.getDataAtCell(1, 1)).toEqual('');\n  });\n\n  it('should render nested object value in textarea after change columns order', () => {\n    const hot = handsontable({\n      data: [{\n        name: {\n          first: 'Tom',\n          last: 'Kowalski',\n          obj: {}\n        }\n      }, {\n        name: {\n          first: 'John',\n          last: 'Cage',\n          obj: {\n            foo: 'bar'\n          }\n        }\n      }],\n      columns: [{\n        data: 'name.last'\n      }, {\n        data: 'name.obj.foo'\n      }],\n      manualColumnMove: true\n    });\n\n    hot.getPlugin('manualColumnMove').moveColumn(1, 0);\n    hot.render();\n\n    selectCell(0, 0);\n    keyDown('enter');\n    expect(keyProxy().val()).toEqual('');\n    keyDown('enter');\n\n    expect(hot.getDataAtCell(0, 0)).toEqual('');\n\n    selectCell(1, 1);\n    keyDown('enter');\n    expect(keyProxy().val()).toEqual('Cage');\n    keyDown('enter');\n\n    expect(hot.getDataAtCell(1, 1)).toEqual('Cage');\n  });\n\n  it('should render array value defined by columns settings in textarea', () => {\n    handsontable({\n      data: [\n        ['', 'Kia'],\n        ['2012', 10],\n        ['2013', 10],\n      ],\n      columns: [{\n        data: '1'\n      }, {\n        data: '0'\n      }],\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('Kia');\n\n    selectCell(1, 1);\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('2012');\n  });\n\n  it('should open editor after hitting F2', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n    keyDown('f2');\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should close editor after hitting ESC', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n    keyDown('f2');\n    expect(isEditorVisible()).toEqual(true);\n    keyDown('esc');\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('should NOT open editor after hitting CapsLock', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n    keyDown(Handsontable.helper.KEY_CODES.CAPS_LOCK);\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('should open editor after cancelling edit and beginning it again', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n    keyDown('f2');\n    expect(isEditorVisible()).toEqual(true);\n    keyDown('esc');\n    expect(isEditorVisible()).toEqual(false);\n    keyDown('f2');\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('loadData should not destroy editor', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    keyDown('f2');\n    loadData(getData());\n\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('updateSettings should not destroy editor', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    keyDown('f2');\n    updateSettings({\n      data: getData()\n    });\n\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('textarea should have cell dimensions (after render)', () => {\n    const data = [\n      ['a', 'b'],\n      ['c', 'd']\n    ];\n\n    handsontable({\n      data,\n      minRows: 4,\n      minCols: 4,\n      minSpareRows: 4,\n      minSpareCols: 4,\n      enterMoves: false\n    });\n\n    selectCell(1, 1);\n    const $td = getHtCore().find('tbody tr:eq(1) td:eq(1)');\n\n    keyDownUp('enter');\n    expect(keyProxy().width()).toEqual($td.width());\n    keyDownUp('enter');\n    data[1][1] = 'dddddddddddddddddddd';\n    render();\n    keyDownUp('enter');\n\n    expect(keyProxy().width()).toEqual($td.width());\n  });\n\n  it('global shortcuts (like CTRL+A) should be blocked when cell is being edited', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    keyDownUp('enter');\n\n    keyDown(65, {\n      ctrlKey: true\n    }); // CTRL+A should NOT select all table when cell is edited\n\n    const selection = getSelected();\n    expect(selection).toEqual([[2, 2, 2, 2]]);\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should open editor after double clicking on a cell', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2)\n    });\n    const cell = $(getCell(0, 0));\n    let clicks = 0;\n\n    window.scrollTo(0, cell.offset().top);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks += 1;\n    }, 0);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks += 1;\n    }, 100);\n\n    setTimeout(() => {\n      const editor = hot.getActiveEditor();\n\n      expect(clicks).toBe(2);\n      expect(editor.isOpened()).toBe(true);\n      expect(editor.isInFullEditMode()).toBe(true);\n      done();\n    }, 200);\n  });\n\n  it('should call editor focus() method after opening an editor', () => {\n    const hot = handsontable();\n    selectCell(2, 2);\n\n    const editor = hot.getActiveEditor();\n\n    spyOn(editor, 'focus');\n\n    expect(editor.isOpened()).toEqual(false);\n    expect(editor.focus).not.toHaveBeenCalled();\n    keyDown('f2');\n    expect(editor.isOpened()).toEqual(true);\n    expect(editor.focus).toHaveBeenCalled();\n  });\n\n  it('editor size should not exceed the viewport after text edit', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 5),\n      width: 200,\n      height: 200\n    });\n\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(isEditorVisible()).toEqual(true);\n\n    document.activeElement.value = 'Very very very very very very very very very very very very very very very very very long text';\n    keyDownUp(32); // space - trigger textarea resize\n\n    const $textarea = $(document.activeElement);\n    const $wtHider = spec().$container.find('.wtHider');\n\n    expect($textarea.offset().left + $textarea.outerWidth()).not.toBeGreaterThan($wtHider.offset().left + spec().$container.outerWidth());\n    expect($textarea.offset().top + $textarea.outerHeight()).not.toBeGreaterThan($wtHider.offset().top + $wtHider.outerHeight());\n  });\n\n  it('should open editor after selecting cell in another table and hitting enter', function() {\n    spec().$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n\n    const hot1 = handsontable();\n    const hot2 = handsontable2.call(this);\n\n    spec().$container.find('tbody tr:eq(0) td:eq(0)').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(0) td:eq(0)').simulate('mouseup');\n\n    // Open editor in HOT1\n    keyDown('enter');\n\n    expect(isEditorVisible($(hot1.getActiveEditor().TEXTAREA))).toBe(true);\n\n    // Close editor in HOT1\n    keyDown('enter');\n\n    expect(isEditorVisible($(hot1.getActiveEditor().TEXTAREA))).toBe(false);\n\n    spec().$container2.find('tbody tr:eq(0) td:eq(0)').simulate('mousedown');\n    spec().$container2.find('tbody tr:eq(0) td:eq(0)').simulate('mouseup');\n\n    expect(hot1.getSelected()).toBeUndefined();\n    expect(hot2.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n    // Open editor in HOT2\n    keyDown('enter');\n\n    expect(isEditorVisible($(hot2.getActiveEditor().TEXTAREA))).toBe(true);\n\n    spec().$container2.handsontable('destroy');\n    spec().$container2.remove();\n\n    function handsontable2(options) {\n      const container = spec().$container2;\n\n      container.handsontable(options);\n      container[0].focus(); // otherwise TextEditor tests do not pass in IE8\n\n      return container.data('handsontable');\n    }\n  });\n\n  it('should open editor after pressing a printable character', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3)\n    });\n\n    selectCell(0, 0);\n\n    expect(isEditorVisible()).toBe(false);\n\n    spec().$container.simulate('keydown', {\n      keyCode: 'A'.charCodeAt(0)\n    });\n\n    expect(isEditorVisible()).toBe(true);\n  });\n\n  it('should open editor after pressing a printable character with shift key', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3)\n    });\n\n    selectCell(0, 0);\n\n    expect(isEditorVisible()).toBe(false);\n\n    spec().$container.simulate('keydown', {\n      keyCode: 'A'.charCodeAt(0),\n      shiftKey: true\n    });\n\n    expect(isEditorVisible()).toBe(true);\n  });\n\n  it('should be able to open editor after clearing cell data with DELETE', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3)\n    });\n\n    selectCell(0, 0);\n\n    expect(isEditorVisible()).toBe(false);\n\n    spec().$container.simulate('keydown', {\n      keyCode: 46\n    });\n    spec().$container.simulate('keydown', {\n      keyCode: 'A'.charCodeAt(0)\n    });\n\n    expect(isEditorVisible()).toBe(true);\n  });\n\n  it('should be able to open editor after clearing cell data with BACKSPACE', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3)\n    });\n\n    selectCell(0, 0);\n\n    expect(isEditorVisible()).toBe(false);\n\n    spec().$container.simulate('keydown', {\n      keyCode: 8 // backspace\n    });\n    spec().$container.simulate('keydown', {\n      keyCode: 'A'.charCodeAt(0)\n    });\n\n    expect(isEditorVisible()).toBe(true);\n  });\n\n  it('should scroll editor to a cell, if trying to edit cell that is outside of the viewport', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 20),\n      width: 100,\n      height: 50\n    });\n\n    selectCell(0, 0);\n\n    expect(getCell(0, 0)).not.toBeNull();\n    expect(getCell(19, 19)).toBeNull();\n\n    hot.view.scrollViewport({ row: 19, col: 19 });\n    hot.render();\n\n    expect(getCell(0, 0)).toBeNull();\n    expect(getCell(19, 19)).not.toBeNull();\n\n    keyDown('enter');\n\n    expect(getCell(0, 0)).not.toBeNull();\n    expect(getCell(19, 19)).toBeNull();\n  });\n\n  it('should open empty editor after clearing cell value width BACKSPACE', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4)\n    });\n\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n\n    selectCell(0, 0);\n\n    keyDown(Handsontable.helper.KEY_CODES.BACKSPACE);\n\n    expect(getDataAtCell(0, 0)).toEqual('');\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n    expect(hot.getActiveEditor().getValue()).toEqual('');\n  });\n\n  it('should open empty editor after clearing cell value width DELETE', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4)\n    });\n\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n\n    selectCell(0, 0);\n\n    keyDown(Handsontable.helper.KEY_CODES.DELETE);\n\n    expect(getDataAtCell(0, 0)).toEqual('');\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n    expect(hot.getActiveEditor().getValue()).toEqual('');\n  });\n\n  it('should not open editor after hitting ALT (#1239)', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4)\n    });\n\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n\n    selectCell(0, 0);\n\n    keyDown(Handsontable.helper.KEY_CODES.ALT);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n  });\n\n  it('should open editor at the same coordinates as the edited cell', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(16, 8),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n\n    // corner\n    selectCell(1, 1);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    const $inputHolder = $('.handsontableInputHolder');\n    expect($(getCell(1, 1)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(1, 1)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // top\n    selectCell(1, 4);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(1, 4)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(1, 4)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // left\n    selectCell(4, 1);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(4, 1)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(4, 1)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // non-fixed\n    selectCell(4, 4);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(4, 4)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(4, 4)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    $(mainHolder).scrollTop(1000);\n  });\n\n  it('should open editor at the same coordinates as the edited cell if preventOverflow is set as horizontal after the table had been scrolled', async() => {\n    spec().$container[0].style = 'width: 400px';\n\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(30, 30),\n      preventOverflow: 'horizontal',\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2,\n      rowHeaders: true,\n      colHeaders: true,\n    });\n\n    const $holder = $(hot.view.wt.wtTable.holder);\n    $holder.scrollTop(100);\n    $holder.scrollLeft(100);\n\n    hot.render();\n\n    await sleep(50);\n    // corner\n    selectCell(1, 1);\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER);\n    const $inputHolder = $('.handsontableInputHolder');\n    expect($(getCell(1, 1, true)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(1, 1, true)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // top\n    selectCell(1, 4);\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(1, 4, true)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(1, 4, true)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // left\n    selectCell(4, 1);\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(4, 1, true)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(4, 1, true)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // non-fixed\n    selectCell(4, 4);\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(4, 4, true)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(4, 4, true)).offset().top).toEqual($inputHolder.offset().top + 1);\n  });\n\n  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (corner)', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(16, 8),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    const $holder = $(hot.view.wt.wtTable.holder);\n\n    $holder.scrollTop(100);\n    $holder.scrollLeft(100);\n\n    hot.render();\n\n    // corner\n    selectCell(1, 1);\n    const currentCell = hot.getCell(1, 1, true);\n    const left = $(currentCell).offset().left;\n    const top = $(currentCell).offset().top;\n\n    const $inputHolder = $('.handsontableInputHolder');\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect(left).toEqual($inputHolder.offset().left + 1);\n    expect(top).toEqual($inputHolder.offset().top + 1);\n  });\n\n  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (top)', async() => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    const $holder = $(hot.view.wt.wtTable.holder);\n\n    $holder[0].scrollTop = 500;\n    await sleep(100);\n    $holder[0].scrollLeft = 500;\n\n    await sleep(100);\n    // top\n    selectCell(1, 6);\n\n    await sleep(100);\n\n    const currentCell = hot.getCell(1, 6, true);\n    const left = $(currentCell).offset().left;\n    const top = $(currentCell).offset().top;\n    const $inputHolder = $('.handsontableInputHolder');\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(left).toEqual($inputHolder.offset().left + 1);\n    expect(top).toEqual($inputHolder.offset().top + 1);\n  });\n\n  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (left)', async() => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    const $holder = $(hot.view.wt.wtTable.holder);\n\n    $holder.scrollTop(500);\n    $holder.scrollLeft(500);\n\n    await sleep(100);\n\n    selectCell(6, 1);\n\n    await sleep(100);\n\n    const currentCell = hot.getCell(6, 1, true);\n    const left = $(currentCell).offset().left;\n    const top = $(currentCell).offset().top;\n\n    const $inputHolder = $('.handsontableInputHolder');\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect(left).toEqual($inputHolder.offset().left + 1);\n    expect(top).toEqual($inputHolder.offset().top + 1);\n  });\n\n  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (non-fixed)', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    const $holder = $(hot.view.wt.wtTable.holder);\n\n    $holder.scrollTop(500);\n    $holder.scrollLeft(500);\n\n    hot.render();\n\n    // non-fixed\n    selectCell(7, 7);\n    const currentCell = hot.getCell(7, 7, true);\n    const left = $(currentCell).offset().left;\n    const top = $(currentCell).offset().top;\n\n    const $inputHolder = $('.handsontableInputHolder');\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect(left).toEqual($inputHolder.offset().left + 1);\n    expect(top).toEqual($inputHolder.offset().top + 1);\n  });\n\n  it('should open editor at the same backgroundColor as the edited cell', async() => {\n    handsontable({\n      data: [\n        ['', 5, 12, 13]\n      ],\n      renderer(instance, td, row, col, prop, value) {\n        if (!value || value === '') {\n          td.style.background = '#EEE';\n        }\n      }\n    });\n\n    mouseDoubleClick(getCell(0, 0));\n\n    await sleep(100);\n\n    expect($('.handsontableInput')[0].style.backgroundColor).toEqual('rgb(238, 238, 238)');\n\n    mouseDoubleClick(getCell(0, 1));\n\n    await sleep(100);\n\n    expect($('.handsontableInput')[0].style.backgroundColor).toEqual('');\n\n    mouseDoubleClick(getCell(0, 2));\n\n    await sleep(100);\n\n    expect($('.handsontableInput')[0].style.backgroundColor).toEqual('');\n  });\n\n  it('should display editor with the proper size, when the edited column is beyond the tables container', () => {\n    spec().$container.css('overflow', '');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 9)\n    });\n\n    selectCell(0, 7);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(Handsontable.dom.outerWidth(hot.getActiveEditor().TEXTAREA)).toBeAroundValue(Handsontable.dom.outerWidth(hot.getCell(0, 7)));\n  });\n\n  it('should display editor with the proper size, when editing a last row after the table is scrolled to the bottom', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 8),\n      minSpareRows: 1,\n      height: 100\n    });\n\n    selectCell(0, 2);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    const regularHeight = Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA);\n\n    selectCell(3, 2);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    // lame check, needs investigating why sometimes it leaves 2px error\n    if (Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA) === regularHeight) {\n      expect(Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA)).toEqual(regularHeight);\n    } else {\n      expect(Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA)).toEqual(regularHeight - 2);\n    }\n\n  });\n\n  it('should render the text without trimming out the whitespace, if trimWhitespace is set to false', () => {\n    spec().$container.css('overflow', '');\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 9),\n      trimWhitespace: false\n    });\n\n    selectCell(0, 2);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    hot.getActiveEditor().TEXTAREA.value = '       test    of    whitespace      ';\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(getDataAtCell(0, 2).length).toEqual(37);\n  });\n\n  it('should insert new line on caret position when pressing ALT + ENTER', () => {\n    const data = [\n      ['Maserati', 'Mazda'],\n      ['Honda', 'Mini']\n    ];\n\n    const hot = handsontable({\n      data\n    });\n\n    selectCell(0, 0);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    const $editorInput = $('.handsontableInput');\n\n    Handsontable.dom.setCaretPosition($editorInput[0], 2);\n\n    $editorInput.simulate('keydown', {\n      altKey: true,\n      keyCode: Handsontable.helper.KEY_CODES.ENTER\n    });\n\n    expect(hot.getActiveEditor().TEXTAREA.value).toEqual('Ma\\nserati');\n  });\n\n  it('should be displayed and resized properly, so it doesn\\'t exceed the viewport dimensions', () => {\n    const data = [\n      ['', '', '', '', ''],\n      ['', 'The Dude abides. I don\\'t know about you but I take comfort in that. It\\'s good knowin\\' he\\'s out there. The ' +\n           'Dude. Takin\\' \\'er easy for all us sinners. Shoosh. I sure hope he makes the finals.', '', '', ''],\n      ['', '', '', '', '']\n    ];\n\n    const hot = handsontable({\n      data,\n      colWidths: 40,\n      width: 300,\n      height: 200,\n      minSpareRows: 20,\n      minSpareCols: 20\n    });\n\n    selectCell(1, 1);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    const $editorInput = $('.handsontableInput');\n    const $editedCell = $(hot.getCell(1, 1));\n\n    expect($editorInput.outerWidth()).toEqual(hot.view.wt.wtTable.holder.clientWidth - $editedCell.position().left + 1);\n\n    hot.scrollViewportTo(void 0, 3);\n    hot.render();\n\n    expect($editorInput.width() + $editorInput.offset().left).toBeLessThan(hot.view.wt.wtTable.holder.clientWidth);\n  });\n\n  it('should resize editor to properly size after focus', (done) => {\n    const data = [\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', 'sadiasdoadoajdoasjdoij doi ajdoiasjdasoidasoid'],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n    ];\n    handsontable({\n      data,\n      colWidths: 40,\n      rowHeights: 25,\n      width: 500,\n      height: 220\n    });\n\n    selectCell(4, 10);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    const $editorInput = $('.handsontableInput');\n\n    setTimeout(() => {\n      expect([105, 119]).toEqual(jasmine.arrayContaining([$editorInput.height()]));\n      done();\n    }, 150);\n  });\n\n  // Input element can not lose the focus while entering new characters. It breaks IME editor functionality.\n  it('should not lose the focus on input element while inserting new characters (#839)', async() => {\n    let blured = false;\n    const listener = () => {\n      blured = true;\n    };\n    const hot = handsontable({\n      data: [['']],\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    hot.getActiveEditor().TEXTAREA.addEventListener('blur', listener);\n\n    await sleep(200);\n\n    hot.getActiveEditor().TEXTAREA.value = 'a';\n    keyDownUp('a'.charCodeAt(0));\n    hot.getActiveEditor().TEXTAREA.value = 'ab';\n    keyDownUp('b'.charCodeAt(0));\n    hot.getActiveEditor().TEXTAREA.value = 'abc';\n    keyDownUp('c'.charCodeAt(0));\n\n    expect(blured).toBeFalsy();\n\n    hot.getActiveEditor().TEXTAREA.removeEventListener('blur', listener);\n  });\n\n  it('should not throw an exception when window.attachEvent is defined but the text area does not have attachEvent', (done) => {\n    const hot = handsontable();\n    window.attachEvent = true;\n    selectCell(1, 1);\n\n    expect(() => {\n      hot.getActiveEditor().autoResize.init(hot.getActiveEditor().TEXTAREA);\n    }).not.toThrow();\n\n    done();\n  });\n\n  it('should keep editor open, focusable and with untouched value when allowInvalid is set as false', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      allowInvalid: false,\n      validator(val, cb) {\n        cb(false);\n      },\n    });\n    selectCell(0, 0);\n\n    keyDown('enter');\n    destroyEditor();\n    document.activeElement.value = '999';\n\n    await sleep(10);\n\n    expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    expect(isEditorVisible()).toBe(true);\n    expect(getActiveEditor().TEXTAREA.value).toBe('999');\n\n    keyDown('enter');\n\n    expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    expect(isEditorVisible()).toBe(true);\n    expect(getActiveEditor().TEXTAREA.value).toBe('999');\n\n    const cell = $(getCell(1, 1));\n\n    mouseDown(cell);\n    mouseUp(cell);\n    mouseDown(cell);\n    mouseUp(cell);\n\n    await sleep(10);\n\n    expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    expect(isEditorVisible()).toBe(true);\n    expect(getActiveEditor().TEXTAREA.value).toBe('999');\n  });\n\n  describe('IME support', () => {\n    it('should focus editable element after selecting the cell', async() => {\n      handsontable({\n        type: 'text',\n      });\n      selectCell(0, 0, 0, 0, true, false);\n\n      await sleep(10);\n\n      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    });\n\n    it('editor size should change after composition started', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 5),\n        width: 400,\n        height: 400,\n      });\n\n      selectCell(2, 2);\n      keyDownUp('enter');\n\n      const textarea = getActiveEditor().TEXTAREA;\n\n      textarea.value = 'test, test, test, test, test, test';\n      textarea.dispatchEvent(new CompositionEvent('compositionstart')); // Trigger textarea resize\n      textarea.dispatchEvent(new CompositionEvent('compositionupdate')); // Trigger textarea resize\n      textarea.dispatchEvent(new CompositionEvent('compositionend')); // Trigger textarea resize\n\n      await sleep(100);\n\n      expect($(textarea).width()).toBe(201);\n      expect($(textarea).height()).toBe(23);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/editors/textEditor.spec.js","describe('i18n', () => {\n  const id = 'testContainer';\n\n  const DEFAULT_LANGUAGE_CODE = 'en-US';\n  const NOT_EXISTING_LANGUAGE_CODE = 'bs-GY';\n  const NOT_EXISTING_LANGUAGE_CODE2 = 'dd-Da';\n  const POLISH_LANGUAGE_CODE = 'pl-PL';\n\n  const INSERT_ROW_ABOVE_IN_DEFAULT_LANGUAGE = 'Insert row above';\n  const INSERT_ROW_ABOVE_IN_POLISH_LANGUAGE = 'Wstaw wiersz powyżej';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should not propagate `language` key to meta of cells', () => {\n    handsontable({\n      language: POLISH_LANGUAGE_CODE\n    });\n\n    expect(getCellMeta(0, 0).language).toBeUndefined();\n  });\n\n  describe('Hook `beforeLanguageChange`', () => {\n    it('should not call the `beforeLanguageChange` at start (`language` key have not been set)', () => {\n      let beforeLanguageChangeCalled = false;\n\n      handsontable({\n        beforeLanguageChange() {\n          beforeLanguageChangeCalled = true;\n        }\n      });\n\n      expect(beforeLanguageChangeCalled).toEqual(false);\n    });\n\n    it('should not call the `beforeLanguageChange` at start (`language` key have been set)', () => {\n      let beforeLanguageChangeCalled = false;\n\n      handsontable({\n        language: POLISH_LANGUAGE_CODE,\n        beforeLanguageChange() {\n          beforeLanguageChangeCalled = true;\n        }\n      });\n\n      expect(beforeLanguageChangeCalled).toEqual(false);\n    });\n\n    it('should call the `beforeLanguageChange` before updating settings', () => {\n      let languageInsideHook;\n\n      handsontable({\n        beforeLanguageChange() {\n          const settings = this.getSettings();\n\n          languageInsideHook = settings.language;\n        }\n      });\n\n      updateSettings({\n        language: POLISH_LANGUAGE_CODE\n      });\n\n      expect(languageInsideHook).toEqual(DEFAULT_LANGUAGE_CODE);\n    });\n  });\n\n  describe('Hook `afterLanguageChange`', () => {\n    it('should not call the `afterLanguageChange` at start (`language` key have not been set)', () => {\n      let afterLanguageChangeCalled = false;\n\n      handsontable({\n        afterLanguageChange() {\n          afterLanguageChangeCalled = true;\n        }\n      });\n\n      expect(afterLanguageChangeCalled).toEqual(false);\n    });\n\n    it('should not call the `afterLanguageChange` at start (`language` key have been set)', () => {\n      let afterLanguageChangeCalled = false;\n\n      handsontable({\n        language: POLISH_LANGUAGE_CODE,\n        afterLanguageChange() {\n          afterLanguageChangeCalled = true;\n        }\n      });\n\n      expect(afterLanguageChangeCalled).toEqual(false);\n    });\n\n    it('should call the `afterLanguageChange` after updating settings', () => {\n      let languageInsideHook;\n\n      handsontable({\n        afterLanguageChange() {\n          const settings = this.getSettings();\n\n          languageInsideHook = settings.language;\n        }\n      });\n\n      updateSettings({\n        language: POLISH_LANGUAGE_CODE\n      });\n\n      expect(languageInsideHook).toEqual(POLISH_LANGUAGE_CODE);\n    });\n  });\n\n  describe('translation does not throw exceptions', () => {\n    it('should not throw error when setting not existing language code at start', async() => {\n      spyOn(console, 'error'); // overriding console.error\n      const spy = spyOn(window, 'onerror');\n\n      handsontable({\n        language: NOT_EXISTING_LANGUAGE_CODE\n      });\n\n      await sleep(100);\n\n      expect(spy).not.toHaveBeenCalled();\n    });\n\n    it('should not throw error when setting directly default language code at start', async() => {\n      const spy = spyOn(window, 'onerror');\n\n      handsontable({\n        language: DEFAULT_LANGUAGE_CODE\n      });\n\n      await sleep(100);\n\n      expect(spy).not.toHaveBeenCalled();\n    });\n\n    it('should not throw error when trying to set not existing language code by updateSettings', async() => {\n      spyOn(console, 'error'); // overriding console.error\n      const spy = spyOn(window, 'onerror');\n\n      handsontable();\n\n      updateSettings({ language: NOT_EXISTING_LANGUAGE_CODE });\n\n      await sleep(100);\n\n      expect(spy).not.toHaveBeenCalled();\n    });\n\n    it('should not throw error when trying to set directly default language code by updateSettings', async() => {\n      const spy = spyOn(window, 'onerror');\n\n      handsontable();\n\n      updateSettings({ language: DEFAULT_LANGUAGE_CODE });\n\n      await sleep(100);\n\n      expect(spy).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('translation log error when needed', () => {\n    it('should log error when setting not existing language code at start', () => {\n      const spy = spyOn(console, 'error');\n\n      handsontable({\n        language: NOT_EXISTING_LANGUAGE_CODE\n      });\n\n      expect(spy).toHaveBeenCalled();\n    });\n\n    it('should log error when trying to set not existing language code by updateSettings', () => {\n      const spy = spyOn(console, 'error');\n\n      handsontable();\n\n      updateSettings({ language: NOT_EXISTING_LANGUAGE_CODE });\n\n      expect(spy).toHaveBeenCalled();\n    });\n\n    it('should not log error when setting directly default language code at start', () => {\n      const spy = spyOn(console, 'error');\n\n      handsontable({\n        language: DEFAULT_LANGUAGE_CODE\n      });\n\n      expect(spy).not.toHaveBeenCalled();\n    });\n\n    it('should not log error when trying to set directly default language code by updateSettings', () => {\n      const spy = spyOn(console, 'error');\n      handsontable();\n\n      updateSettings({ language: DEFAULT_LANGUAGE_CODE });\n\n      expect(spy).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('settings', () => {\n    it('should set default language code at start', () => {\n      const hot = handsontable();\n\n      expect(hot.getSettings().language).toEqual(DEFAULT_LANGUAGE_CODE);\n    });\n\n    it('should not set language code as own property of settings object at start', () => {\n      const hot = handsontable();\n\n      // eslint-disable-next-line no-prototype-builtins\n      expect(hot.getSettings().hasOwnProperty('language')).toEqual(false);\n    });\n\n    it('should not set language code as own property of settings object when using updateSettings', () => {\n      const hot = handsontable();\n\n      updateSettings({ language: POLISH_LANGUAGE_CODE });\n\n      // eslint-disable-next-line no-prototype-builtins\n      expect(hot.getSettings().hasOwnProperty('language')).toEqual(false);\n    });\n\n    it('should set proper `language` key when trying to set not existing language code at start', () => {\n      spyOn(console, 'error'); // overriding console.error\n\n      const hot = handsontable({\n        language: NOT_EXISTING_LANGUAGE_CODE\n      });\n\n      expect(hot.getSettings().language).toEqual(DEFAULT_LANGUAGE_CODE);\n    });\n\n    it('should set proper `language` key when trying to set not existing language code by updateSettings #1', () => {\n      spyOn(console, 'error'); // overriding console.error\n\n      const hot = handsontable();\n\n      updateSettings({ language: NOT_EXISTING_LANGUAGE_CODE });\n\n      expect(hot.getSettings().language).toEqual(DEFAULT_LANGUAGE_CODE);\n    });\n\n    it('should set proper `language` key when trying to set not existing language code by updateSettings #2', () => {\n      spyOn(console, 'error'); // overriding console.error\n\n      const hot = handsontable({\n        language: POLISH_LANGUAGE_CODE\n      });\n\n      updateSettings({ language: NOT_EXISTING_LANGUAGE_CODE });\n\n      expect(hot.getSettings().language).toEqual(POLISH_LANGUAGE_CODE);\n    });\n\n    it('should accept not normalized language code by default #1', () => {\n      const hot = handsontable({\n        language: POLISH_LANGUAGE_CODE.toLowerCase()\n      });\n\n      expect(hot.getSettings().language).toEqual(POLISH_LANGUAGE_CODE);\n    });\n\n    it('should accept not normalized language code by default #2', () => {\n      const hot = handsontable();\n\n      updateSettings({\n        language: POLISH_LANGUAGE_CODE.toUpperCase()\n      });\n\n      expect(hot.getSettings().language).toEqual(POLISH_LANGUAGE_CODE);\n    });\n\n    it('should not change language when `language` key passed to `updateSettings` was not set', () => {\n      const hot = handsontable({\n        language: POLISH_LANGUAGE_CODE\n      });\n\n      updateSettings({\n        fillHandle: true\n      });\n\n      expect(hot.getSettings().language).toEqual(POLISH_LANGUAGE_CODE);\n    });\n  });\n\n  describe('contextMenu translation', () => {\n    it('should translate contextMenu UI when setting existing language code at start', () => {\n      handsontable({\n        language: POLISH_LANGUAGE_CODE,\n        contextMenu: ['row_above']\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_POLISH_LANGUAGE);\n    });\n\n    it('should not change default contextMenu UI when trying to set not existing language code at start', () => {\n      spyOn(console, 'error'); // overriding console.error\n\n      handsontable({\n        language: NOT_EXISTING_LANGUAGE_CODE,\n        contextMenu: ['row_above']\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_DEFAULT_LANGUAGE);\n    });\n\n    it('should translate contextMenu UI when setting existing language code by updateSettings', async() => {\n      handsontable({\n        contextMenu: ['row_above']\n      });\n\n      updateSettings({ language: POLISH_LANGUAGE_CODE });\n\n      await sleep(0);\n\n      contextMenu();\n\n      const $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_POLISH_LANGUAGE);\n    });\n\n    it('should not change default contextMenu UI when trying to set not existing language code by updateSettings #1', async() => {\n      spyOn(console, 'error'); // overriding console.error\n\n      handsontable({\n        contextMenu: ['row_above']\n      });\n\n      updateSettings({ language: NOT_EXISTING_LANGUAGE_CODE });\n\n      await sleep(0);\n\n      contextMenu();\n\n      const $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_DEFAULT_LANGUAGE);\n    });\n\n    it('should not change default contextMenu UI when trying to set not existing language code by updateSettings #2', async() => {\n      spyOn(console, 'error'); // overriding console.error\n\n      handsontable({\n        language: NOT_EXISTING_LANGUAGE_CODE,\n        contextMenu: ['row_above']\n      });\n\n      updateSettings({ language: NOT_EXISTING_LANGUAGE_CODE2 });\n\n      await sleep(0);\n\n      contextMenu();\n\n      const $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_DEFAULT_LANGUAGE);\n    });\n\n    it('should not change previously translated contextMenu UI when trying to set not existing language code by updateSettings', async() => {\n      spyOn(console, 'error'); // overriding console.error\n\n      handsontable({\n        language: POLISH_LANGUAGE_CODE,\n        contextMenu: ['row_above']\n      });\n\n      updateSettings({ language: NOT_EXISTING_LANGUAGE_CODE });\n\n      await sleep(0);\n\n      contextMenu();\n\n      const $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_POLISH_LANGUAGE);\n    });\n\n    it('should translate multi-level menu properly', async() => {\n      const ALIGN_LEFT_IN_POLISH = 'Do lewej';\n\n      handsontable({\n        language: POLISH_LANGUAGE_CODE,\n        contextMenu: ['alignment']\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $menu = $('.htSubmenu');\n\n      $menu.simulate('mouseover');\n\n      await sleep(300);\n\n      const $submenuItem = $('.htContextMenu').eq(1).find('tbody td:not(.htSeparator)').eq(0);\n\n      expect($submenuItem.text()).toEqual(ALIGN_LEFT_IN_POLISH);\n    });\n\n    it('should choose proper form of phrase when translating', () => {\n      const REMOVE_ROW_PLURAL_IN_DEFAULT_LANGUAGE = 'Remove rows';\n      const REMOVE_COLUMN_PLURAL_IN_DEFAULT_LANGUAGE = 'Remove columns';\n\n      handsontable({\n        contextMenu: ['remove_row', 'remove_col']\n      });\n\n      selectCell(0, 0, 2, 2);\n      contextMenu();\n\n      const $removeRowItem = $('.htContextMenu').eq(0).find('tbody td:not(.htSeparator)').eq(0);\n      const $removeColumnItem = $('.htContextMenu').eq(0).find('tbody td:not(.htSeparator)').eq(1);\n\n      expect($removeRowItem.text()).toEqual(REMOVE_ROW_PLURAL_IN_DEFAULT_LANGUAGE);\n      expect($removeColumnItem.text()).toEqual(REMOVE_COLUMN_PLURAL_IN_DEFAULT_LANGUAGE);\n    });\n\n    it('should translate item from enabled `freezeColumn` plugin when setting existing language code at start', () => {\n      const FREEZE_COLUMN_IN_POLISH_LANGUAGE = 'Zablokuj kolumnę';\n\n      handsontable({\n        contextMenu: ['freeze_column'],\n        manualColumnFreeze: true,\n        language: POLISH_LANGUAGE_CODE,\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $freezeColumnMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($freezeColumnMenuItem.text()).toEqual(FREEZE_COLUMN_IN_POLISH_LANGUAGE);\n    });\n\n    it('should translate item from enabled `comments` plugin when setting existing language code at start', () => {\n      const ADD_COMMENT_IN_POLISH_LANGUAGE = 'Dodaj komentarz';\n\n      handsontable({\n        contextMenu: ['commentsAddEdit'],\n        comments: true,\n        language: POLISH_LANGUAGE_CODE,\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $addCommentMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($addCommentMenuItem.text()).toEqual(ADD_COMMENT_IN_POLISH_LANGUAGE);\n    });\n\n    it('should translate item from enabled `customBorders` plugin when setting existing language code at start', () => {\n      const BORDERS_IN_POLISH = 'Obramowanie';\n\n      handsontable({\n        language: POLISH_LANGUAGE_CODE,\n        contextMenu: ['borders'],\n        customBorders: true\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $bordersMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($bordersMenuItem.text()).toEqual(BORDERS_IN_POLISH);\n    });\n\n    it('should translate item from enabled `mergeCells` plugin when setting existing language code at start', () => {\n      const MERGE_CELLS_IN_POLISH = 'Scal komórki';\n\n      handsontable({\n        language: POLISH_LANGUAGE_CODE,\n        contextMenu: ['mergeCells'],\n        mergeCells: true\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $mergeCellsMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($mergeCellsMenuItem.text()).toEqual(MERGE_CELLS_IN_POLISH);\n    });\n\n    it('should translate item from enabled `copyPaste` plugin when setting existing language code at start', () => {\n      const COPY_IN_POLISH = 'Kopiuj';\n\n      handsontable({\n        language: POLISH_LANGUAGE_CODE,\n        contextMenu: ['copy'],\n        copyPaste: true\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $copyMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');\n\n      expect($copyMenuItem.text()).toEqual(COPY_IN_POLISH);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/i18n/index.spec.js","const id = 'testContainer';\n\ndescribe('Events', () => {\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should translate tap (`touchstart`) to `mousedown`', async() => {\n    const afterOnCellMouseDown = jasmine.createSpy('onAfterOnCellMouseDown');\n\n    const hot = handsontable({\n      width: 400,\n      height: 400,\n      afterOnCellMouseDown\n    });\n\n    const cell = hot.getCell(1, 1);\n\n    expect(getSelected()).toBeUndefined();\n\n    triggerTouchEvent('touchstart', cell);\n\n    await sleep(100);\n\n    expect(getSelected()).toBeDefined();\n    expect(afterOnCellMouseDown).toHaveBeenCalled();\n  });\n\n  // Currently, this test is skipped. There is a problem for test canceling events from simulated events.\n  xit('should block default action related to link touch and translate from the touch to click on a cell', async() => {\n    const hot = handsontable({\n      data: [['<a href=\"#justForTest\">click me!</a>'], []],\n      rowHeaders: true,\n      colHeaders: true,\n      width: 600,\n      height: 400,\n      columns: [\n        {\n          renderer: 'html'\n        }\n      ]\n    });\n\n    const linkElement = hot.getCell(0, 0).firstChild;\n\n    hot.selectCell(0, 0);\n    location.hash = '';\n\n    await sleep(100);\n\n    triggerTouchEvent('touchstart', linkElement);\n    triggerTouchEvent('touchend', linkElement);\n\n    expect(location.hash).toBe('#justForTest');\n\n    await sleep(400); // To prevents double-click detection (emulation)\n\n    location.hash = '';\n    // selecting cell other than the one with link\n    hot.selectCell(1, 0);\n\n    await sleep(100);\n\n    triggerTouchEvent('touchstart', linkElement);\n    triggerTouchEvent('touchend', linkElement);\n\n    expect(location.hash).toBe('');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/mobile/events.spec.js","const id = 'testContainer';\n\ndescribe('Scrolling', () => {\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should load cells below the viewport on scroll down (dimensions of the table was set)', async() => {\n    const hot = handsontable({\n      width: 400,\n      height: 400,\n      data: Handsontable.helper.createSpreadsheetObjectData(100, 15)\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n    const $htCore = $(getHtCore());\n\n    let TRs = $htCore.find('tr');\n    let lastTR = [...TRs.toArray()].pop();\n    const lastTRTextAtStart = $(lastTR).text();\n\n    $(mainHolder).scrollTop(400);\n\n    await sleep(300);\n\n    TRs = $htCore.find('tr');\n    lastTR = [...TRs.toArray()].pop();\n    const lastTRTextLater = $(lastTR).text();\n\n    expect(lastTRTextLater).not.toEqual(lastTRTextAtStart);\n  });\n\n  it('should load cells below the viewport on scroll down (dimensions of the table was not set)', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(100, 15)\n    });\n\n    const $htCore = $(getHtCore());\n\n    let TRs = $htCore.find('tr');\n    let lastTR = [...TRs.toArray()].pop();\n    const lastTRTextAtStart = $(lastTR).text();\n\n    await sleep(300);\n\n    $(window).scrollTop(window.innerHeight);\n\n    await sleep(300);\n\n    TRs = $htCore.find('tr');\n    lastTR = [...TRs.toArray()].pop();\n    const lastTRTextLater = $(lastTR).text();\n\n    expect(lastTRTextLater).not.toEqual(lastTRTextAtStart);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/mobile/scroll.spec.js","const id = 'testContainer';\n\ndescribe('Selection', () => {\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should show selection handles', () => {\n    const hot = handsontable({\n      width: 400,\n      height: 400\n    });\n\n    hot.selectCell(1, 1);\n\n    const topLeftSelectionHandle = spec().$container.find('.ht_master .htBorders div:first-child .topLeftSelectionHandle')[0];\n    const bottomRightSelectionHandle = spec().$container.find('.ht_master .htBorders div:first-child .bottomRightSelectionHandle')[0];\n\n    expect(topLeftSelectionHandle.style.display).toEqual('block');\n    expect(bottomRightSelectionHandle.style.display).toEqual('block');\n  });\n\n  it('should show both selection handles after drag & drop', async() => {\n    const hot = handsontable({\n      width: 400,\n      height: 400\n    });\n\n    hot.selectCell(1, 1);\n\n    await sleep(100);\n\n    triggerTouchEvent('touchstart', spec().$container.find('.htBorders .bottomRightSelectionHandle-HitArea')[0]);\n    triggerTouchEvent('touchmove', spec().$container.find('tbody tr:eq(1) td:eq(2)')[0]);\n    triggerTouchEvent('touchmove', spec().$container.find('tbody tr:eq(1) td:eq(3)')[0]);\n    triggerTouchEvent('touchend', spec().$container.find('tbody tr:eq(1) td:eq(3)')[0]);\n\n    await sleep(100);\n\n    const topLeftSelectionHandle = spec().$container.find('.ht_master .htBorders div:last-child .topLeftSelectionHandle')[0];\n    const bottomRightSelectionHandle = spec().$container.find('.ht_master .htBorders div:last-child .bottomRightSelectionHandle')[0];\n\n    expect(topLeftSelectionHandle.style.display).toBe('block');\n    expect(bottomRightSelectionHandle.style.display).toBe('block');\n    expect(hot.getSelected()).toEqual([[1, 1, 1, 2]]);\n  });\n\n  it('should not call the `select` method on the \"focusable\" textarea when selecting a cell', async() => {\n    const hot = handsontable({\n      data: [['test']],\n      width: 400,\n      height: 400\n    });\n\n    hot.selectCell(0, 0);\n\n    const copyPastePlugin = hot.getPlugin('copyPaste');\n    const focusableElement = copyPastePlugin.focusableElement.getFocusableElement();\n    spyOn(focusableElement, 'select');\n\n    hot.selectCell(0, 0);\n\n    expect(focusableElement.select).not.toHaveBeenCalled();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/mobile/selection.spec.js","describe('Public API', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('Plugins', () => {\n    it('should expose static method for registering external plugins', () => {\n      expect(Handsontable.plugins.registerPlugin).toBeFunction();\n    });\n\n    it('should expose BasePlugin class', () => {\n      expect(Handsontable.plugins.BasePlugin).toBeFunction();\n    });\n\n    it('should expose all registered plugin classes', () => {\n      expect(Handsontable.plugins.AutoColumnSize).toBeFunction();\n      expect(Handsontable.plugins.AutoRowSize).toBeFunction();\n      expect(Handsontable.plugins.ColumnSorting).toBeFunction();\n      expect(Handsontable.plugins.Comments).toBeFunction();\n      expect(Handsontable.plugins.ContextMenu).toBeFunction();\n      expect(Handsontable.plugins.CopyPaste).toBeFunction();\n      expect(Handsontable.plugins.CustomBorders).toBeFunction();\n      expect(Handsontable.plugins.DragToScroll).toBeFunction();\n      expect(Handsontable.plugins.ManualColumnFreeze).toBeFunction();\n      expect(Handsontable.plugins.ManualColumnResize).toBeFunction();\n      expect(Handsontable.plugins.ManualRowResize).toBeFunction();\n      expect(Handsontable.plugins.MultipleSelectionHandles).toBeFunction();\n      expect(Handsontable.plugins.TouchScroll).toBeFunction();\n      expect(Handsontable.plugins.UndoRedo).toBeFunction();\n    });\n  });\n\n  describe('Editors', () => {\n    it('should expose static method for registering external editors', () => {\n      expect(Handsontable.editors.registerEditor).toBeFunction();\n    });\n\n    it('should expose static method for retrieving registered editors', () => {\n      expect(Handsontable.editors.getEditor).toBeFunction();\n    });\n\n    it('should expose BaseEditor class', () => {\n      expect(Handsontable.editors.BaseEditor).toBeFunction();\n    });\n\n    it('should expose all registered editor classes', () => {\n      expect(Handsontable.editors.AutocompleteEditor).toBeFunction();\n      expect(Handsontable.editors.CheckboxEditor).toBeFunction();\n      expect(Handsontable.editors.DateEditor).toBeFunction();\n      expect(Handsontable.editors.DropdownEditor).toBeFunction();\n      expect(Handsontable.editors.HandsontableEditor).toBeFunction();\n      expect(Handsontable.editors.NumericEditor).toBeFunction();\n      expect(Handsontable.editors.PasswordEditor).toBeFunction();\n      expect(Handsontable.editors.SelectEditor).toBeFunction();\n      expect(Handsontable.editors.TextEditor).toBeFunction();\n    });\n  });\n\n  describe('Renderers', () => {\n    it('should expose static method for registering external renderers', () => {\n      expect(Handsontable.renderers.registerRenderer).toBeFunction();\n    });\n\n    it('should expose static method for retrieving registered renderers', () => {\n      expect(Handsontable.renderers.getRenderer).toBeFunction();\n    });\n\n    it('should expose BaseRenderer class', () => {\n      expect(Handsontable.renderers.BaseRenderer).toBeFunction();\n    });\n\n    it('should expose all registered renderer functions', () => {\n      expect(Handsontable.renderers.AutocompleteRenderer).toBeFunction();\n      expect(Handsontable.renderers.CheckboxRenderer).toBeFunction();\n      expect(Handsontable.renderers.HtmlRenderer).toBeFunction();\n      expect(Handsontable.renderers.NumericRenderer).toBeFunction();\n      expect(Handsontable.renderers.PasswordRenderer).toBeFunction();\n      expect(Handsontable.renderers.TextRenderer).toBeFunction();\n    });\n  });\n\n  describe('Validators', () => {\n    it('should expose static method for registering external validators', () => {\n      expect(Handsontable.validators.registerValidator).toBeFunction();\n    });\n\n    it('should expose static method for retrieving registered validators', () => {\n      expect(Handsontable.validators.getValidator).toBeFunction();\n    });\n\n    it('should expose all registered validator functions', () => {\n      expect(Handsontable.validators.AutocompleteValidator).toBeFunction();\n      expect(Handsontable.validators.DateValidator).toBeFunction();\n      expect(Handsontable.validators.NumericValidator).toBeFunction();\n      expect(Handsontable.validators.TimeValidator).toBeFunction();\n    });\n  });\n\n  describe('CellTypes', () => {\n    it('should expose static method for registering external cell types', () => {\n      expect(Handsontable.cellTypes.registerCellType).toBeFunction();\n    });\n\n    it('should expose static method for retrieving registered cell types', () => {\n      expect(Handsontable.cellTypes.getCellType).toBeFunction();\n    });\n\n    it('should expose all registered cell type objects', () => {\n      expect(Handsontable.cellTypes.autocomplete.editor).toBe(Handsontable.editors.AutocompleteEditor);\n      expect(Handsontable.cellTypes.autocomplete.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);\n      expect(Handsontable.cellTypes.autocomplete.validator).toBe(Handsontable.validators.AutocompleteValidator);\n\n      expect(Handsontable.cellTypes.checkbox.editor).toBe(Handsontable.editors.CheckboxEditor);\n      expect(Handsontable.cellTypes.checkbox.renderer).toBe(Handsontable.renderers.CheckboxRenderer);\n      expect(Handsontable.cellTypes.checkbox.validator).not.toBeDefined();\n\n      expect(Handsontable.cellTypes.date.editor).toBe(Handsontable.editors.DateEditor);\n      expect(Handsontable.cellTypes.date.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);\n      expect(Handsontable.cellTypes.date.validator).toBe(Handsontable.validators.DateValidator);\n\n      expect(Handsontable.cellTypes.dropdown.editor).toBe(Handsontable.editors.DropdownEditor);\n      expect(Handsontable.cellTypes.dropdown.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);\n      expect(Handsontable.cellTypes.dropdown.validator).toBe(Handsontable.validators.AutocompleteValidator);\n\n      expect(Handsontable.cellTypes.handsontable.editor).toBe(Handsontable.editors.HandsontableEditor);\n      expect(Handsontable.cellTypes.handsontable.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);\n      expect(Handsontable.cellTypes.handsontable.validator).not.toBeDefined();\n\n      expect(Handsontable.cellTypes.numeric.editor).toBe(Handsontable.editors.NumericEditor);\n      expect(Handsontable.cellTypes.numeric.renderer).toBe(Handsontable.renderers.NumericRenderer);\n      expect(Handsontable.cellTypes.numeric.validator).toBe(Handsontable.validators.NumericValidator);\n\n      expect(Handsontable.cellTypes.password.editor).toBe(Handsontable.editors.PasswordEditor);\n      expect(Handsontable.cellTypes.password.renderer).toBe(Handsontable.renderers.PasswordRenderer);\n      expect(Handsontable.cellTypes.password.validator).not.toBeDefined();\n\n      expect(Handsontable.cellTypes.text.editor).toBe(Handsontable.editors.TextEditor);\n      expect(Handsontable.cellTypes.text.renderer).toBe(Handsontable.renderers.TextRenderer);\n      expect(Handsontable.cellTypes.text.validator).not.toBeDefined();\n\n      expect(Handsontable.cellTypes.time.editor).toBe(Handsontable.editors.TextEditor);\n      expect(Handsontable.cellTypes.time.renderer).toBe(Handsontable.renderers.TextRenderer);\n      expect(Handsontable.cellTypes.time.validator).toBe(Handsontable.validators.TimeValidator);\n    });\n  });\n\n  describe('Helpers', () => {\n    it('should expose all registered helpers', () => {\n      expect(Handsontable.dom.addClass).toBeFunction();\n      expect(Handsontable.dom.addEvent).toBeFunction();\n      expect(Handsontable.dom.closest).toBeFunction();\n      expect(Handsontable.dom.closestDown).toBeFunction();\n      expect(Handsontable.dom.empty).toBeFunction();\n      expect(Handsontable.dom.fastInnerHTML).toBeFunction();\n      expect(Handsontable.dom.fastInnerText).toBeFunction();\n      expect(Handsontable.dom.getCaretPosition).toBeFunction();\n      expect(Handsontable.dom.getComputedStyle).toBeFunction();\n      expect(Handsontable.dom.getCssTransform).toBeFunction();\n      expect(Handsontable.dom.getParent).toBeFunction();\n      expect(Handsontable.dom.getScrollLeft).toBeFunction();\n      expect(Handsontable.dom.getScrollTop).toBeFunction();\n      expect(Handsontable.dom.getScrollableElement).toBeFunction();\n      expect(Handsontable.dom.getScrollbarWidth).toBeFunction();\n      expect(Handsontable.dom.getSelectionEndPosition).toBeFunction();\n      expect(Handsontable.dom.getSelectionText).toBeFunction();\n      expect(Handsontable.dom.getStyle).toBeFunction();\n      expect(Handsontable.dom.getTrimmingContainer).toBeFunction();\n      expect(Handsontable.dom.getWindowScrollLeft).toBeFunction();\n      expect(Handsontable.dom.getWindowScrollTop).toBeFunction();\n      expect(Handsontable.dom.hasClass).toBeFunction();\n      expect(Handsontable.dom.hasHorizontalScrollbar).toBeFunction();\n      expect(Handsontable.dom.hasVerticalScrollbar).toBeFunction();\n      expect(Handsontable.dom.index).toBeFunction();\n      expect(Handsontable.dom.innerHeight).toBeFunction();\n      expect(Handsontable.dom.innerWidth).toBeFunction();\n      expect(Handsontable.dom.isChildOf).toBeFunction();\n      expect(Handsontable.dom.isChildOfWebComponentTable).toBeFunction();\n      expect(Handsontable.dom.isImmediatePropagationStopped).toBeFunction();\n      expect(Handsontable.dom.isInput).toBeFunction();\n      expect(Handsontable.dom.isLeftClick).toBeFunction();\n      expect(Handsontable.dom.isRightClick).toBeFunction();\n      expect(Handsontable.dom.isVisible).toBeFunction();\n      expect(Handsontable.dom.offset).toBeFunction();\n      expect(Handsontable.dom.outerHeight).toBeFunction();\n      expect(Handsontable.dom.outerWidth).toBeFunction();\n      expect(Handsontable.dom.overlayContainsElement).toBeFunction();\n      expect(Handsontable.dom.pageX).toBeFunction();\n      expect(Handsontable.dom.pageY).toBeFunction();\n      expect(Handsontable.dom.polymerUnwrap).toBeFunction();\n      expect(Handsontable.dom.polymerWrap).toBeFunction();\n      expect(Handsontable.dom.removeClass).toBeFunction();\n      expect(Handsontable.dom.removeEvent).toBeFunction();\n      expect(Handsontable.dom.removeTextNodes).toBeFunction();\n      expect(Handsontable.dom.resetCssTransform).toBeFunction();\n      expect(Handsontable.dom.setCaretPosition).toBeFunction();\n      expect(Handsontable.dom.setOverlayPosition).toBeFunction();\n      expect(Handsontable.dom.stopImmediatePropagation).toBeFunction();\n      expect(Handsontable.dom.stopPropagation).toBeFunction();\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/publicAPI.spec.js","describe('AutocompleteRenderer', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should contain down arrow glyph', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      type: 'autocomplete',\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 2, 'string');\n\n    setTimeout(() => {\n      const html = getCell(2, 2).innerHTML;\n\n      expect(html).toContain('string');\n      expect(html).toContain('\\u25BC');\n      done();\n    }, 100);\n  });\n\n  it('should open cell editor after clicking on arrow glyph', () => {\n    const hot = handsontable({\n      type: 'autocomplete'\n    });\n\n    selectCell(0, 0);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n  });\n\n  it('should open cell editor after clicking on arrow glyph, after the table has been destroyed and reinitialized (#1367)', () => {\n    let hot = handsontable({\n      type: 'autocomplete'\n    });\n\n    destroy();\n\n    hot = handsontable({\n      type: 'autocomplete'\n    });\n\n    selectCell(0, 0);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n  });\n\n  it('should prepend the autocomplete arrow at the start of the cell element (#5124)', () => {\n    handsontable({\n      type: 'autocomplete'\n    });\n\n    const $contents = $(getCell(0, 0)).contents();\n\n    expect($contents.eq(0).hasClass('htAutocompleteArrow')).toBe(true);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/renderers/autocompleteRenderer.spec.js","describe('CellDecorator', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfObjects = function() {\n    return [\n      { id: 1, name: 'Ted', lastName: 'Right' },\n      { id: 2, name: 'Frank', lastName: 'Honest' },\n      { id: 3, name: 'Joan', lastName: 'Well' }\n    ];\n  };\n\n  it('should add an appropriate class name to every cell, if wordWrap=false is set to the whole table', () => {\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      wordWrap: false\n    });\n\n    const cols = countCols();\n    const rows = countRows();\n\n    for (let i = 0; i < cols; i++) {\n      for (let j = 0; j < rows; j++) {\n        expect($(getCell(i, j)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);\n      }\n    }\n  });\n\n  it('should add an appropriate class name to every cell in a column, if wordWrap=false is set to the column settings', () => {\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'name', wordWrap: false },\n        { data: 'lastName' }\n      ]\n    });\n\n    const rows = countRows();\n\n    for (let i = 0; i < rows; i++) {\n      expect($(getCell(i, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);\n    }\n\n    for (let i = 0; i < rows; i++) {\n      expect($(getCell(i, 0)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false); // no class added to other columns\n      expect($(getCell(i, 2)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false);\n    }\n  });\n\n  it('should add an appropriate class to a cell, if wordWrap=false is set to a single cell', () => {\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ]\n    });\n\n    expect($(getCell(1, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false);\n\n    getCellMeta(1, 1).wordWrap = false;\n    render();\n\n    expect($(getCell(1, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);\n\n  });\n\n  it('should set \"white-space\" css parameter to \"nowrap\" if htNoWrap class is added to a cell', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ]\n    });\n\n    expect(window.getComputedStyle(getCell(1, 1)).whiteSpace).not.toEqual('nowrap');\n\n    getCellMeta(1, 1).wordWrap = false;\n    render();\n\n    expect(window.getComputedStyle(getCell(1, 1)).whiteSpace).toEqual('nowrap');\n  });\n\n  it('should not add cell `htInvalid` class when trying to add not proper value', (done) => {\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n        { data: 'salary', type: 'numeric', allowInvalid: false }\n      ]\n    });\n\n    setDataAtCell(0, 2, 'non-numeric value');\n\n    setTimeout(() => {\n      expect($(getCell(0, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);\n      done();\n    }, 200);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/renderers/cellDecorator.spec.js","describe('CheckboxRenderer', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px;\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should render values as checkboxes', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    expect($(getRenderedValue(0, 0)).is(':checkbox')).toBe(true);\n    expect($(getRenderedValue(1, 0)).is(':checkbox')).toBe(true);\n    expect($(getRenderedValue(2, 0)).is(':checkbox')).toBe(true);\n  });\n\n  it('should render check checkboxes for cell which value is true', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    expect($(getRenderedContent(0, 0)).prop('checked')).toBe(true);\n    expect($(getRenderedContent(1, 0)).prop('checked')).toBe(false);\n    expect($(getRenderedContent(2, 0)).prop('checked')).toBe(true);\n  });\n\n  it('should use templates to check appropriate checkboxes', () => {\n    handsontable({\n      data: [['yes'], ['no'], ['yes']],\n      columns: [\n        {\n          type: 'checkbox',\n          checkedTemplate: 'yes',\n          uncheckedTemplate: 'no'\n        }\n      ]\n    });\n\n    expect($(getRenderedContent(0, 0)).prop('checked')).toBe(true);\n    expect($(getRenderedContent(1, 0)).prop('checked')).toBe(false);\n    expect($(getRenderedContent(2, 0)).prop('checked')).toBe(true);\n  });\n\n  it('should select cell after checkbox click', async() => {\n    const spy = jasmine.createSpyObj('error', ['test']);\n    window.onerror = function() {\n      spy.test();\n      return false;\n    };\n\n    const hot = handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    hot.selectCell(0, 0);\n\n    spec().$container.find(':checkbox').eq(2).simulate('mousedown');\n    spec().$container.find(':checkbox').eq(2).simulate('mouseup');\n    spec().$container.find(':checkbox').eq(2).simulate('click');\n\n    await sleep(100);\n\n    expect(spy.test.calls.count()).toBe(0);\n    expect(hot.getSelected()).toEqual([[2, 0, 2, 0]]);\n  });\n\n  it('should select cell after label click', () => {\n    const hot = handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox', label: { position: 'before', value: 'Sure? ' } }\n      ]\n    });\n\n    hot.selectCell(0, 0);\n\n    spec().$container.find('td label').eq(2).simulate('mousedown');\n\n    expect(hot.getSelected()).toEqual([[2, 0, 2, 0]]);\n  });\n\n  it('should reverse selection in checkboxes', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    spec().$container.find(':checkbox').eq(0).simulate('click');\n    spec().$container.find(':checkbox').eq(1).simulate('click');\n    spec().$container.find(':checkbox').eq(2).simulate('click');\n\n    expect(getData()).toEqual([[false], [true], [false]]);\n  });\n\n  it('shouldn\\'t uncheck checkboxes', () => {\n    handsontable({\n      data: [[true], [true], [true]],\n      columns: [\n        { type: 'checkbox', readOnly: true }\n      ]\n    });\n\n    spec().$container.find(':checkbox').trigger('click');\n\n    expect(getData()).toEqual([[true], [true], [true]]);\n  });\n\n  it('should check single box after hitting space', () => {\n    handsontable({\n      data: [[true], [true], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [true], [true]]);\n\n    selectCell(0, 0);\n\n    //  spec().$container.find(':checkbox').eq(0).simulate('click');\n    //  spec().$container.simulate('keydown',{\n    //    keyCode: 32\n    //  });\n    keyDown('space');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [true], [true]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should not check single box after hitting space, if cell is readOnly', () => {\n    handsontable({\n      data: [[true], [true], [true]],\n      columns: [\n        { type: 'checkbox', readOnly: true }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [true], [true]]);\n\n    selectCell(0, 0);\n\n    keyDown('space');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [true], [true]]);\n    expect(afterChangeCallback).not.toHaveBeenCalled();\n  });\n\n  it('should not check single box after hitting space, if last column is readOnly (#3562)', () => {\n    handsontable({\n      data: [[true, true], [false, false], [true, true]],\n      columns: [\n        { type: 'checkbox' },\n        { type: 'checkbox', readOnly: true }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('space');\n    selectCell(0, 1);\n    keyDown('space');\n    selectCell(1, 0);\n    keyDown('space');\n    selectCell(1, 1);\n    keyDown('space');\n\n    const checkboxes = spec().$container.find(':checkbox');\n\n    // column 0\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(checkboxes.eq(4).prop('checked')).toBe(true);\n\n    // column 1\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(3).prop('checked')).toBe(false);\n    expect(checkboxes.eq(5).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false, true], [true, false], [true, true]]);\n  });\n\n  it('should change checkboxes values properly when data contains null or/and undefined', () => {\n    handsontable({\n      data: [[null], [undefined]],\n      colHeaders: true,\n      columns: [\n        {\n          type: 'checkbox'\n        }\n      ]\n    });\n\n    selectCell(0, 0, 1, 0);\n    keyDown('space');\n\n    expect(getDataAtCol(0)).toEqual([true, true]);\n\n    selectCell(0, 0, 1, 0);\n    keyDown('space');\n\n    expect(getDataAtCol(0)).toEqual([false, false]);\n  });\n\n  it('should change checkboxes values for cells below the viewport (hot initialized by startRows) #4037', () => {\n    handsontable({\n      startRows: 200,\n      colHeaders: true,\n      columns: [\n        {\n          type: 'checkbox'\n        }\n      ]\n    });\n\n    selectCell(0, 0, 199, 0);\n    keyDown('space');\n\n    expect(getDataAtCell(199, 0)).toEqual(true);\n  });\n\n  it('should reverse checkboxes state after hitting space, when multiple cells are selected', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(0, 0, 2, 0);\n\n    keyDown('space');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([[false], [true], [false]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false], [1, 0, false, true], [2, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should reverse checkboxes state after hitting space, when multiple cells are selected and selStart > selEnd', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(2, 0, 0, 0); // selStart = [2,0], selEnd = [0,0]\n\n    keyDown('space');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([[false], [true], [false]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false], [1, 0, false, true], [2, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should toggle checkbox even if cell value is in another datatype', () => {\n    // TODO: we MUST add additional layer in data transport, to filter stored data types into their defined data type (cellMeta.type)\n    handsontable({\n      data: [['true']],\n      columns: [\n        { type: 'checkbox' },\n      ]\n    });\n\n    selectCell(0, 0);\n\n    expect(getDataAtCell(0, 0)).toBe('true');\n\n    keyDown('space');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n  });\n\n  it('double click on checkbox cell should invert the value', () => {\n    handsontable({\n      data: [\n        [true],\n        [false],\n        [true]\n      ],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    mouseDoubleClick(getCell(0, 0));\n    expect(getDataAtCell(0, 0)).toBe(false);\n\n    mouseDoubleClick(getCell(0, 0));\n    expect(getDataAtCell(0, 0)).toBe(true);\n\n    mouseDoubleClick(getCell(0, 0));\n    expect(getDataAtCell(0, 0)).toBe(false);\n  });\n\n  it('should change checkbox state from checked to unchecked after hitting ENTER', () => {\n    handsontable({\n      data: [[true], [true], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [true], [true]]);\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [true], [true]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should move down without changing checkbox state when enterBeginsEditing equals false', () => {\n    handsontable({\n      enterBeginsEditing: false,\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    checkboxes = spec().$container.find(':checkbox');\n    const selection = getSelected();\n    expect(selection).toEqual([[1, 0, 1, 0]]);\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n    expect(afterChangeCallback.calls.count()).toEqual(0);\n  });\n\n  it('should begin editing and changing checkbox state when enterBeginsEditing equals true', () => {\n    handsontable({\n      enterBeginsEditing: true,\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    checkboxes = spec().$container.find(':checkbox');\n    const selection = getSelected();\n    expect(selection).toEqual([[0, 0, 0, 0]]);\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [false], [true]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n  });\n\n  it('should change checkbox state from checked to unchecked after hitting ENTER using custom check/uncheck templates', () => {\n    handsontable({\n      data: [['yes'], ['yes'], ['no']],\n      columns: [\n        {\n          type: 'checkbox',\n          checkedTemplate: 'yes',\n          uncheckedTemplate: 'no'\n        }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([['yes'], ['yes'], ['no']]);\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([['no'], ['yes'], ['no']]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'yes', 'no']], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox state from checked to unchecked after hitting ENTER using custom check/uncheck templates in numeric format', () => {\n    handsontable({\n      data: [[1], [1], [0]],\n      columns: [\n        {\n          type: 'checkbox',\n          checkedTemplate: 1,\n          uncheckedTemplate: 0\n        }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([[1], [1], [0]]);\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([[0], [1], [0]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 1, 0]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox state to unchecked after hitting DELETE', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(0, 0);\n    keyDown('delete');\n    selectCell(0, 1);\n    keyDown('delete');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [false], [true]]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(2);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox notte to unchecked after hitting BACKSPACE', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    let checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(0, 0);\n    keyDown('backspace');\n    selectCell(0, 1);\n    keyDown('backspace');\n\n    checkboxes = spec().$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [false], [true]]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(2);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change  notkbox state to unchecked after hitting DELETE (from #bad-value# state)', () => {\n    handsontable({\n      data: [['foo'], ['bar']],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    expect(getDataAtCell(0, 0)).toBe('foo');\n    expect(getDataAtCell(1, 0)).toBe('bar');\n\n    selectCell(0, 0);\n    keyDown('delete');\n    selectCell(1, 0);\n    keyDown('delete');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n    expect(getDataAtCell(1, 0)).toBe(false);\n    expect(getData()).toEqual([[false], [false]]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(2);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'foo', false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox  note to unchecked after hitting BACKSPACE (from #bad-value# state)', () => {\n    handsontable({\n      data: [['foo'], ['bar']],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    expect(getDataAtCell(0, 0)).toBe('foo');\n    expect(getDataAtCell(1, 0)).toBe('bar');\n\n    selectCell(0, 0);\n    keyDown('backspace');\n    selectCell(1, 0);\n    keyDown('backspace');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n    expect(getDataAtCell(1, 0)).toBe(false);\n    expect(getData()).toEqual([[false], [false]]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(2);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'foo', false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('shouldn\\'t change checkbo notate after hitting other keys then DELETE or BACKSPACE (from #bad-value# state)', () => {\n    handsontable({\n      data: [['foo'], ['bar']],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    expect(getDataAtCell(0, 0)).toBe('foo');\n\n    selectCell(0, 0);\n    keyDown('space');\n    selectCell(0, 0);\n    keyDown('c');\n\n    expect(getDataAtCell(0, 0)).toBe('foo');\n    expect(getData()).toEqual([['foo'], ['bar']]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(0);\n  });\n\n  it('should not change checkbox state after hitting F2 key', () => {\n    const onAfterChange = jasmine.createSpy('afterChangeCallback');\n\n    handsontable({\n      data: [[false], [true], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ],\n      onAfterChange\n    });\n\n    selectCell(0, 0);\n    keyDown('f2');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n\n    expect(onAfterChange.calls.count()).toEqual(0);\n  });\n\n  it('should not change checkbox state after hitting other keys then SPACE, ENTER, DELETE or BACKSPACE', () => {\n    handsontable({\n      data: [[false], [true], [true]],\n      columns: [\n        { type: 'checkbox' }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    selectCell(0, 0);\n    keyDown('space');\n\n    expect(getDataAtCell(0, 0)).toBe(true);\n\n    selectCell(0, 0);\n    keyDown('c');\n\n    expect(getDataAtCell(0, 0)).toBe(true);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n  });\n\n  it('should add label on the beginning of a checkbox element', () => {\n    handsontable({\n      data: [{ checked: true, label: 'myLabel' }, { checked: false, label: 'myLabel' }],\n      columns: [\n        { type: 'checkbox', data: 'checked', label: { position: 'before', property: 'label' } }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    selectCell(0, 0);\n    keyDown('space');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n    expect(getDataAtCell(1, 0)).toBe(false);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(getCell(0, 0).querySelector('label').firstChild.textContent).toEqual('myLabel');\n  });\n\n  it('should add label on the end of a checkbox element', () => {\n    handsontable({\n      data: [{ checked: true, label: 'myLabel' }, { checked: false, label: 'myLabel' }],\n      columns: [\n        { type: 'checkbox', data: 'checked', label: { position: 'after', property: 'label' } }\n      ]\n    });\n\n    const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    selectCell(0, 0);\n    keyDown('space');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n    expect(getDataAtCell(1, 0)).toBe(false);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');\n  });\n\n  it('should not add label when value is incorrect (#bad-value)', () => {\n    handsontable({\n      data: [{ checked: 1, label: 'myLabel' }, { checked: 0, label: 'myLabel' }],\n      columns: [\n        { type: 'checkbox', data: 'checked', label: { position: 'after', property: 'label' } }\n      ]\n    });\n\n    expect(getCell(0, 0).querySelector('label')).toBe(null);\n  });\n\n  it('by default should add label on the end of a checkbox element', () => {\n    handsontable({\n      data: [{ checked: true, label: { test: 'Baz' } }, { checked: false, label: { test: 'Baz' } }],\n      columns: [\n        { type: 'checkbox', data: 'checked', label: { property: 'label.test' } }\n      ]\n    });\n\n    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('Baz');\n  });\n\n  it('should add label with text filled from `value` label setting (passed as string)', () => {\n    handsontable({\n      data: [{ checked: true }, { checked: false }],\n      columns: [\n        { type: 'checkbox', data: 'checked', label: { value: 'myLabel' } }\n      ]\n    });\n\n    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');\n  });\n\n  it('should add label with text filled from `value` label setting (passed as function)', () => {\n    const labelFunction = jasmine.createSpy();\n\n    labelFunction.and.returnValue('myLabel');\n    handsontable({\n      autoRowSize: false,\n      autoColumnSize: false,\n      data: [{ checked: true }, { checked: false }],\n      columns: [\n        { type: 'checkbox', data: 'checked', label: { value: labelFunction } }\n      ]\n    });\n\n    expect(labelFunction.calls.count()).toBe(2);\n    expect(labelFunction.calls.argsFor(0)).toEqual([0, 0, 'checked', true]);\n    expect(labelFunction.calls.argsFor(1)).toEqual([1, 0, 'checked', false]);\n    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');\n  });\n\n  describe('CheckboxRenderer with ContextMenu', () => {\n    it('should add class name `htRight` after set align in contextMenu', (done) => {\n      handsontable({\n        startRows: 1,\n        startCols: 1,\n        contextMenu: ['alignment'],\n        cells() {\n          return {\n            type: 'checkbox'\n          };\n        },\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      contextMenu();\n\n      const menu = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator');\n\n      menu.simulate('mouseover');\n\n      setTimeout(() => {\n        const contextSubMenu = $(`.htContextMenuSub_${menu.text()}`).find('tbody td').eq(2);\n        contextSubMenu.simulate('mousedown');\n        contextSubMenu.simulate('mouseup');\n\n        expect($('.handsontable.ht_master .htRight').length).toBe(1);\n        done();\n      }, 500);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/renderers/checkboxRenderer.spec.js","describe('HTMLRenderer', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px;\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should not fill empty rows with null values', () => {\n    handsontable({\n      data: [['a', 'b', 'c', 'd', 'e', 'f']],\n      colHeaders: true,\n      rowHeaders: true,\n      minSpareRows: 5,\n      renderer: 'html'\n    });\n\n    expect($('.handsontable table tr:last-child td:eq(0)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(1)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(2)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(3)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(4)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(5)').html()).toEqual('');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/renderers/htmlRenderer.spec.js","describe('renderers', () => {\n  const id = 'testContainer';\n  const {\n    registerRenderer,\n    getRenderer,\n  } = Handsontable.renderers;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should register custom renderer', () => {\n    registerRenderer('myRenderer', (hot, td, row, col, prop, value) => {\n      td.innerHTML = `--${value}--`;\n    });\n\n    handsontable({\n      data: [\n        [1, 6, 10],\n      ],\n      columns: [{\n        renderer: 'myRenderer',\n      }],\n    });\n\n    expect(getCell(0, 0).innerHTML).toBe('--1--');\n  });\n\n  it('should retrieve predefined renderers by its names', () => {\n    expect(getRenderer('autocomplete')).toBeFunction();\n    expect(getRenderer('base')).toBeFunction();\n    expect(getRenderer('checkbox')).toBeFunction();\n    expect(getRenderer('html')).toBeFunction();\n    expect(getRenderer('numeric')).toBeFunction();\n    expect(getRenderer('password')).toBeFunction();\n    expect(getRenderer('text')).toBeFunction();\n  });\n\n  it('should retrieve custom renderer by its names', () => {\n    const spy = jasmine.createSpy();\n\n    registerRenderer('myRenderer', spy);\n    getRenderer('myRenderer')(1, 2, 3, 4, 5, 6);\n\n    expect(spy).toHaveBeenCalledWith(1, 2, 3, 4, 5, 6);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/renderers/index.spec.js","describe('NumericRenderer', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should render formatted number', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      cells() {\n        return {\n          type: 'numeric',\n          numericFormat: { pattern: '$0,0.00' }\n        };\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 2, '1000.234');\n\n    setTimeout(() => {\n      expect(getCell(2, 2).innerHTML).toEqual('$1,000.23');\n      done();\n    }, 200);\n  });\n\n  it('should render signed number', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      cells() {\n        return {\n          type: 'numeric',\n          numericFormat: { pattern: '$0,0.00' }\n        };\n      },\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 2, '-1000.234');\n\n    setTimeout(() => {\n      expect(getCell(2, 2).innerHTML).toEqual('-$1,000.23');\n      done();\n    }, 200);\n  });\n\n  it('should not try to render string as numeral', (done) => {\n    handsontable({\n      cells() {\n        return {\n          type: 'numeric',\n          numericFormat: { pattern: '$0,0.00' }\n        };\n      },\n    });\n\n    setDataAtCell(2, 2, '123 simple test');\n\n    setTimeout(() => {\n      expect(getCell(2, 2).innerHTML).toEqual('123 simple test');\n      done();\n    }, 100);\n  });\n\n  it('should add class names `htNumeric` and `htRight` to the cell if it renders a number', () => {\n    const DIV = document.createElement('DIV');\n    const instance = new Handsontable(DIV, {});\n    const TD = document.createElement('TD');\n    TD.className = 'someClass';\n    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 123, {});\n    expect(TD.className).toEqual('someClass htRight htNumeric');\n    instance.destroy();\n  });\n\n  it('should add class names `htNumeric` and `htRight` to the cell if it renders a numeric string', () => {\n    const DIV = document.createElement('DIV');\n    const instance = new Handsontable(DIV, {});\n    const TD = document.createElement('TD');\n    TD.className = 'someClass';\n    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, '123', {});\n    expect(TD.className).toEqual('someClass htRight htNumeric');\n    instance.destroy();\n  });\n\n  it('should not add class name `htNumeric` to the cell if it renders a text', () => {\n    const DIV = document.createElement('DIV');\n    const instance = new Handsontable(DIV, {});\n    const TD = document.createElement('TD');\n    TD.className = 'someClass';\n    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 'abc', {});\n    expect(TD.className).toEqual('someClass');\n    instance.destroy();\n  });\n\n  it('should add class name `htDimmed` to a read only cell', () => {\n    const DIV = document.createElement('DIV');\n    const instance = new Handsontable(DIV, {});\n    const TD = document.createElement('TD');\n    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 123, { readOnly: true, readOnlyCellClassName: 'htDimmed' });\n    expect(TD.className).toContain('htDimmed');\n    instance.destroy();\n  });\n\n  describe('NumericRenderer with ContextMenu', () => {\n    it('should change class name from default `htRight` to `htLeft` after set align in contextMenu', (done) => {\n      handsontable({\n        startRows: 1,\n        startCols: 1,\n        contextMenu: ['alignment'],\n        cells() {\n          return {\n            type: 'numeric',\n            numericFormat: { pattern: '$0,0.00' }\n          };\n        },\n        height: 100\n      });\n\n      setDataAtCell(0, 0, '1000');\n      selectCell(0, 0);\n\n      contextMenu();\n\n      const menu = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator');\n\n      menu.simulate('mouseover');\n\n      setTimeout(() => {\n        const contextSubMenu = $(`.htContextMenuSub_${menu.text()}`).find('tbody td').eq(0);\n\n        contextSubMenu.simulate('mousedown');\n        contextSubMenu.simulate('mouseup');\n\n        expect($('.handsontable.ht_master .htLeft:not(.htRight)').length).toBe(1);\n        done();\n      }, 500);\n    });\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/renderers/numericRenderer.spec.js","describe('passwordRenderer', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should render strings as a sequence of asterisks', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);\n  });\n\n  it('should render numbers as a sequence of asterisks ', () => {\n    handsontable({\n      data: [\n        [1],\n        [1234],\n        [9090],\n        [0]\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);\n  });\n\n  it('should be possible to set passwordRenderer with column \\'type\\' parameter', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          type: 'password'\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);\n  });\n\n  it('should be possible to set passwordRenderer using alias \\'password\\'', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          renderer: 'password'\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);\n  });\n\n  it('should render strings as a sequence of asterisks, of width matching the original value width', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0).length).toEqual(getDataAtCell(0, 0).length);\n    expect(getRenderedValue(1, 0).length).toEqual(getDataAtCell(1, 0).length);\n    expect(getRenderedValue(2, 0).length).toEqual(getDataAtCell(2, 0).length);\n    expect(getRenderedValue(3, 0).length).toEqual(getDataAtCell(3, 0).length);\n  });\n\n  it('should render strings as a sequence of asterisks, of fixed width', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer,\n          hashLength: 10\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0).length).toEqual(10);\n    expect(getRenderedValue(1, 0).length).toEqual(10);\n    expect(getRenderedValue(2, 0).length).toEqual(10);\n    expect(getRenderedValue(3, 0).length).toEqual(10);\n  });\n\n  it('should render strings as a sequence of custom symbols', () => {\n    handsontable({\n      data: [\n        [1, 'Joe'],\n        [2, 'Timothy'],\n        [3, 'Margaret'],\n        [4, 'Jerry']\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer,\n          hashSymbol: '#'\n        },\n        {\n          renderer: Handsontable.renderers.PasswordRenderer,\n          hashSymbol: 'x'\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[#]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[#]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[#]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[#]+$/ig);\n\n    expect(getRenderedValue(0, 1)).toMatch(/^[x]+$/ig);\n    expect(getRenderedValue(1, 1)).toMatch(/^[x]+$/ig);\n    expect(getRenderedValue(2, 1)).toMatch(/^[x]+$/ig);\n    expect(getRenderedValue(3, 1)).toMatch(/^[x]+$/ig);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/renderers/passwordRenderer.spec.js","describe('TextRenderer', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should render string', () => {\n    handsontable();\n    setDataAtCell(2, 2, 'string');\n\n    expect(getCell(2, 2).innerHTML).toEqual('string');\n  });\n\n  it('should render number', () => {\n    handsontable();\n    setDataAtCell(2, 2, 13);\n\n    expect(getCell(2, 2).innerHTML).toEqual('13');\n  });\n\n  it('should render boolean true', () => {\n    handsontable();\n    setDataAtCell(2, 2, true);\n\n    expect(getCell(2, 2).innerHTML).toEqual('true');\n  });\n\n  it('should render boolean false', () => {\n    handsontable();\n    setDataAtCell(2, 2, false);\n\n    expect(getCell(2, 2).innerHTML).toEqual('false');\n  });\n\n  it('should render null', () => {\n    handsontable();\n    setDataAtCell(2, 2, null);\n\n    expect(getCell(2, 2).innerHTML).toEqual('');\n  });\n\n  it('should render undefined', () => {\n    handsontable();\n    /* eslint-disable wrap-iife */\n    setDataAtCell(2, 2, (function() {})());\n\n    expect(getCell(2, 2).innerHTML).toEqual('');\n  });\n\n  it('should add class name `htDimmed` to a read only cell', () => {\n    const DIV = document.createElement('DIV');\n    const instance = new Handsontable.Core(DIV, {});\n\n    const TD = document.createElement('TD');\n    TD.className = 'someClass';\n    Handsontable.renderers.TextRenderer(instance, TD, 0, 0, 0, '', { readOnly: true, readOnlyCellClassName: 'htDimmed' });\n    expect(TD.className).toEqual('someClass htDimmed');\n\n    instance.destroy();\n  });\n\n  it('should render a multiline string', () => {\n    handsontable();\n    setDataAtCell(1, 2, 'a b');\n    setDataAtCell(2, 2, 'a\\nb');\n\n    expect($(getCell(2, 2)).height()).toBeGreaterThan($(getCell(1, 2)).height());\n  });\n\n  it('should wrap text when column width is limited', () => {\n    handsontable({\n      colWidths: [100]\n    });\n    setDataAtCell(0, 0, 'short text');\n    setDataAtCell(1, 0, 'long long long long long long long text');\n\n    expect($(getCell(1, 0)).height()).toBeGreaterThan($(getCell(0, 0)).height());\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/renderers/textRenderer.spec.js","describe('settings', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('autoWrapCol', () => {\n    it('should be defaults true', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5)\n      });\n\n      expect(hot.getSettings().autoWrapCol).toBe(true);\n    });\n\n    it('should move to the neighboring column when it reaches the end of the current', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        autoWrapCol: true\n      });\n\n      selectCell(4, 0);\n\n      expect(getSelected()).toEqual([[4, 0, 4, 0]]);\n\n      keyDownUp('arrow_down');\n\n      expect(getSelected()).toEqual([[0, 1, 0, 1]]);\n\n      keyDownUp('arrow_up');\n\n      expect(getSelected()).toEqual([[4, 0, 4, 0]]);\n    });\n\n    it('should move to the start of the table when it reaches the end of the table', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        autoWrapCol: true\n      });\n\n      selectCell(4, 4);\n\n      expect(getSelected()).toEqual([[4, 4, 4, 4]]);\n\n      keyDownUp('arrow_down');\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n\n      keyDownUp('arrow_up');\n\n      expect(getSelected()).toEqual([[4, 4, 4, 4]]);\n\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/autoWrapCol.spec.js","describe('settings', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('autoWrapRow', () => {\n    it('should be defaults true', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5)\n      });\n\n      expect(hot.getSettings().autoWrapRow).toBe(true);\n    });\n\n    it('should move to the neighboring row when it reaches the end of the current', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        autoWrapRow: true\n      });\n\n      selectCell(0, 4);\n\n      expect(getSelected()).toEqual([[0, 4, 0, 4]]);\n\n      keyDownUp('arrow_right');\n\n      expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n\n      keyDownUp('arrow_left');\n\n      expect(getSelected()).toEqual([[0, 4, 0, 4]]);\n    });\n\n    it('should move to the start of the table when it reaches the end of the table', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        autoWrapRow: true\n      });\n\n      selectCell(4, 4);\n\n      expect(getSelected()).toEqual([[4, 4, 4, 4]]);\n\n      keyDownUp('arrow_right');\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n\n      keyDownUp('arrow_left');\n\n      expect(getSelected()).toEqual([[4, 4, 4, 4]]);\n\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/autoWrapRow.spec.js","describe('settings', () => {\n  describe('colWidths', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should consider colWidths provided as number', () => {\n        handsontable({\n          colWidths: 123\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as string', () => {\n        handsontable({\n          colWidths: '123'\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as array of numbers', () => {\n        handsontable({\n          colWidths: [123]\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as array of strings', () => {\n        handsontable({\n          colWidths: ['123']\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidth provided as function that returns number', () => {\n        handsontable({\n          colWidths(index) {\n            if (index === 0) {\n              return 123;\n            }\n            return 50;\n          }\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidth provided as function that returns string', () => {\n        handsontable({\n          colWidths(index) {\n            if (index === 0) {\n              return '123';\n            }\n            return '50';\n          }\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n    });\n\n    describe('defined in updateSettings', () => {\n      it('should consider colWidths provided as number', () => {\n        handsontable();\n        updateSettings({\n          colWidths: 123\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as string', () => {\n        handsontable();\n        updateSettings({\n          colWidths: '123'\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as array of numbers', () => {\n        handsontable();\n        updateSettings({\n          colWidths: [123]\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as array of strings', () => {\n        handsontable();\n        updateSettings({\n          colWidths: ['123']\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidth provided as function that returns number', () => {\n        handsontable();\n        updateSettings({\n          colWidths(index) {\n            if (index === 0) {\n              return 123;\n            }\n            return 50;\n          }\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidth provided as function that returns string', () => {\n        handsontable();\n        updateSettings({\n          colWidths(index) {\n            if (index === 0) {\n              return '123';\n            }\n            return '50';\n          }\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n    });\n\n    describe('defined in columns', () => {\n      it('should consider width provided as number', () => {\n        handsontable({\n          columns: [\n            {\n              width: 123\n            }\n          ]\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as string', () => {\n        handsontable({\n          columns: [\n            {\n              width: '123'\n            }\n          ]\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as array of numbers', () => {\n        handsontable({\n          columns: [\n            {\n              width: [123]\n            }\n          ]\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as array of strings', () => {\n        handsontable({\n          columns: [\n            {\n              width: ['123']\n            }\n          ]\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as function that returns number', () => {\n        handsontable({\n          columns: [\n            {\n              width(index) {\n                if (index === 0) {\n                  return 123;\n                }\n                return 50;\n              }\n            }\n          ]\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as function that returns string', () => {\n        handsontable({\n          columns: [\n            {\n              width(index) {\n                if (index === 0) {\n                  return '123';\n                }\n                return '50';\n              }\n            }\n          ]\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n    });\n\n    describe('defined in cells', () => {\n      it('should consider width provided as number', () => {\n        handsontable({\n          cells(row, col) {\n            if (col === 0) {\n              this.width = 123;\n            }\n          }\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as string', () => {\n        handsontable({\n          cells(row, col) {\n            if (col === 0) {\n              this.width = '123';\n            }\n          }\n        });\n\n        expect(colWidth(spec().$container, 0)).toBe(123);\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/colWidths.spec.js","describe('settings', () => {\n  describe('columns', () => {\n    const id = 'testContainer';\n    const arrayOfArrays = function() {\n      return [\n        ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n        ['2008', 10, 11, 12, 13],\n        ['2009', 20, 11, 14, 13],\n        ['2010', 30, 15, 12, 13]\n      ];\n    };\n    const arrayOfObjects = function() {\n      return [\n        { id: 1, name: 'Ted', lastName: 'Right', date: '01/01/2015' },\n        { id: 2, name: 'Frank', lastName: 'Honest', date: '01/01/15' },\n        { id: 3, name: 'Joan', lastName: 'Well', date: '41/01/2015' },\n        { id: 4, name: 'Sid', lastName: 'Strong', date: '01/51/2015' },\n        { id: 5, name: 'Jane', lastName: 'Neat', date: '01/01/2015' },\n        { id: 6, name: 'Chuck', lastName: 'Jackson', date: '01/01/15' },\n        { id: 7, name: 'Meg', lastName: 'Jansen', date: '41/01/2015' },\n        { id: 8, name: 'Rob', lastName: 'Norris', date: '01/51/2015' },\n        { id: 9, name: 'Sean', lastName: 'O\\'Hara', date: '01/01/2015' },\n        { id: 10, name: 'Eve', lastName: 'Branson', date: '01/01/15' }\n      ];\n    };\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('as an array of objects', () => {\n      it('should not throw exception when passed columns array is empty (data source as array of arrays)', () => {\n        const hot = handsontable({\n          data: arrayOfArrays(),\n          columns: [\n            { data: 0 },\n            { data: 1 },\n            { data: 2 }\n          ]\n        });\n\n        expect(() => {\n          hot.updateSettings({ columns: [] });\n        }).not.toThrow();\n      });\n\n      it('should not throw exception when passed columns array is empty (data source as array of objects)', () => {\n        const hot = handsontable({\n          data: arrayOfObjects(),\n          columns: [\n            { data: 'id' },\n            { data: 'name' },\n            { data: 'lastName' }\n          ],\n        });\n\n        expect(() => {\n          hot.updateSettings({ columns: [] });\n        }).not.toThrow();\n      });\n    });\n\n    describe('as a function', () => {\n      describe('init', () => {\n        it('should render only these columns which are not `null`', () => {\n          const hot = handsontable({\n            data: arrayOfArrays(),\n            columns(column) {\n              return [1, 2].indexOf(column) > -1 ? {} : null;\n            }\n          });\n\n          expect(hot.getData()[0].length).toEqual(2);\n        });\n\n        it('should properly bind default data when is not defined (data source as array of arrays)', () => {\n          const hot = handsontable({\n            data: arrayOfArrays(),\n            columns(column) {\n              return [1, 2].indexOf(column) > -1 ? {} : null;\n            }\n          });\n\n          expect(hot.getDataAtCell(0, 0)).toEqual('');\n          expect(hot.getDataAtCell(0, 1)).toEqual('Kia');\n        });\n\n        it('should properly bind default data when is not defined (data source as array of objects)', () => {\n          const hot = handsontable({\n            data: arrayOfObjects(),\n            columns(column) {\n              return [1, 2].indexOf(column) > -1 ? {} : null;\n            }\n          });\n\n          expect(hot.getDataAtCell(0, 0)).toEqual(null);\n          expect(hot.getDataAtCell(0, 1)).toEqual(null);\n        });\n\n        it('should properly bind defined data (data source as array of arrays)', () => {\n          const hot = handsontable({\n            data: arrayOfArrays(),\n            columns(column) {\n              return [1, 2].indexOf(column) > -1 ? { data: column + 1 } : null;\n            }\n          });\n\n          expect(hot.getDataAtCell(0, 0)).toEqual('Nissan');\n          expect(hot.getDataAtCell(0, 1)).toEqual('Toyota');\n        });\n\n        it('should properly bind defined data (data source as array of objects)', () => {\n          const hot = handsontable({\n            data: arrayOfObjects(),\n            columns(column) {\n              const keys = ['id', 'name', 'lastName'];\n\n              return [1, 2].indexOf(column) > -1 ? { data: keys[column - 1] } : null;\n            }\n          });\n\n          expect(hot.getDataAtCell(0, 0)).toEqual(1);\n          expect(hot.getDataAtCell(0, 1)).toEqual('Ted');\n        });\n      });\n\n      describe('updateSettings', () => {\n        it('should not throw exception when passed columns function without return anything (data source as array of arrays) when columns is a function', () => {\n          const hot = handsontable({\n            data: arrayOfArrays(),\n            columns(column) {\n              return [0, 1, 2].indexOf(column) > -1 ? { data: column } : null;\n            }\n          });\n\n          expect(() => {\n            hot.updateSettings({ columns() {} });\n          }).not.toThrow();\n        });\n\n        it('should not throw exception when passed columns function without return anything (data source as array of objects) when columns is a function', () => {\n          const hot = handsontable({\n            data: arrayOfObjects(),\n            columns(column) {\n              const keys = ['id', 'name', 'lasName'];\n\n              return [0, 1, 2].indexOf(column) > -1 ? { data: keys[column] } : null;\n            }\n          });\n\n          expect(() => {\n            hot.updateSettings({ columns() {} });\n          }).not.toThrow();\n        });\n      });\n\n      describe('editors', () => {\n        it('should properly bind defined editors', () => {\n          handsontable({\n            data: [\n              ['Joe'],\n              ['Timothy'],\n              ['Margaret'],\n              ['Jerry']\n            ],\n            columns(column) {\n              return column === 0 ? { editor: Handsontable.editors.PasswordEditor } : null;\n            }\n          });\n\n          selectCell(0, 0);\n          keyDown('enter');\n\n          const editor = $('.handsontableInput');\n\n          expect(editor.is(':visible')).toBe(true);\n          expect(editor.is(':password')).toBe(true);\n        });\n      });\n\n      describe('renderers', () => {\n        it('should properly bind defined renderer', () => {\n          handsontable({\n            data: [[true], [false], [true]],\n            columns(column) {\n              return column === 0 ? { type: 'checkbox' } : null;\n            }\n          });\n\n          expect($(getRenderedValue(0, 0)).is(':checkbox')).toBe(true);\n          expect($(getRenderedValue(1, 0)).is(':checkbox')).toBe(true);\n          expect($(getRenderedValue(2, 0)).is(':checkbox')).toBe(true);\n        });\n      });\n\n      describe('validators', () => {\n        it('should properly bind defined validator', (done) => {\n          const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n          handsontable({\n            data: arrayOfObjects(),\n            columns(column) {\n              const settings = [\n                { data: 'date', type: 'date' },\n                { data: 'name' },\n                { data: 'lastName' }\n              ];\n              return [0, 1, 2].indexOf(column) > -1 ? settings[column] : null;\n            },\n            afterValidate: onAfterValidate\n          });\n\n          setDataAtCell(0, 0, '');\n\n          setTimeout(() => {\n            expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'date', undefined, undefined);\n            done();\n          }, 100);\n        });\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/columns.spec.js","describe('settings', () => {\n  describe('copyable', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    it('by default, CTRL+C should NOT copy the password value', () => {\n      handsontable({\n        data: [\n          ['Joe', 'Secret', 'Jack']\n        ],\n        columns: [\n          {},\n          {\n            type: 'password'\n          },\n          {}\n        ]\n      });\n\n      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\\t\\tJack');\n    });\n\n    it('with copyable=true, CTRL+C should copy the password value', () => {\n      handsontable({\n        data: [\n          ['Joe', 'Secret', 'Jack']\n        ],\n        columns: [\n          {},\n          {\n            type: 'password',\n            copyable: true\n          },\n          {}\n        ]\n      });\n\n      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\\tSecret\\tJack');\n    });\n\n    it('with copyable=false, CTRL+C should NOT copy the password value', () => {\n      handsontable({\n        data: [\n          ['Joe', 'Secret', 'Jack']\n        ],\n        columns: [\n          {},\n          {\n            type: 'password',\n            copyable: false\n          },\n          {}\n        ]\n      });\n\n      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\\t\\tJack');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/copyable.spec.js","describe('settings', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('currentHeaderClassName', () => {\n    it('should apply default currentHeaderClassName to cells in row where there is a selection', () => {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n      });\n\n      selectCell(2, 2);\n\n      expect(spec().$container.find('.ht_master th.ht__highlight').length).toEqual(2);\n    });\n\n    it('should apply default currentHeaderClassName from cells after deselection', () => {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n      });\n\n      selectCell(2, 2);\n      deselectCell();\n\n      expect(spec().$container.find('.ht_master th.ht__highlight').length).toEqual(0);\n    });\n    it('should apply custom currentHeaderClassName to cells in row where there is a selection', () => {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentHeaderClassName: 'currentHeaderClassName'\n      });\n\n      selectCell(2, 2);\n\n      expect(spec().$container.find('.ht_master th.currentHeaderClassName').length).toEqual(2);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/currentHeaderClassName.spec.js","describe('settings', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('currentRowClassName', () => {\n    it('should apply currentRowClassName to cells in row where there is a selection', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentRowClassName: 'currentRowClassName'\n      });\n\n      selectCell(2, 2);\n\n      expect(spec().$container.find('td.currentRowClassName').length).toEqual(6);\n    });\n\n    it('should apply currentRowClassName from cells after deselection', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentRowClassName: 'currentRowClassName'\n      });\n\n      selectCell(2, 2);\n      deselectCell();\n\n      expect(spec().$container.find('td.currentRowClassName').length).toEqual(0);\n    });\n  });\n\n  describe('currentColClassName', () => {\n    it('should apply currentColClassName to cells in row where there is a selection', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentColClassName: 'currentColClassName'\n      });\n\n      selectCell(2, 2);\n\n      expect(spec().$container.find('td.currentColClassName').length).toEqual(4);\n    });\n\n    it('should remove currentColClassName from cells after deselection', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentColClassName: 'currentColClassName'\n      });\n\n      selectCell(2, 2);\n      deselectCell();\n\n      expect(spec().$container.find('td.currentColClassName').length).toEqual(0);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/currentRowClassName.spec.js","describe('settings', () => {\n  describe('editor', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should use text editor by default', () => {\n        const textEditorPrototype = Handsontable.editors.TextEditor.prototype;\n\n        spyOn(textEditorPrototype, 'init').and.callThrough();\n        handsontable();\n        selectCell(0, 0);\n        expect(textEditorPrototype.init).toHaveBeenCalled();\n      });\n\n      it('should use editor from predefined string', () => {\n        const textEditorPrototype = Handsontable.editors.TextEditor.prototype;\n        const checkboxEditorPrototype = Handsontable.editors.CheckboxEditor.prototype;\n\n        spyOn(textEditorPrototype, 'init');\n        spyOn(checkboxEditorPrototype, 'init');\n        handsontable({\n          columns: [\n            {\n              editor: 'checkbox'\n            }\n          ]\n        });\n        selectCell(0, 0);\n        expect(textEditorPrototype.init).not.toHaveBeenCalled();\n        expect(checkboxEditorPrototype.init).toHaveBeenCalled();\n      });\n\n      it('should use editor from predefined string when columns is a function', () => {\n        const textEditorPrototype = Handsontable.editors.TextEditor.prototype;\n        const checkboxEditorPrototype = Handsontable.editors.CheckboxEditor.prototype;\n\n        spyOn(textEditorPrototype, 'init');\n        spyOn(checkboxEditorPrototype, 'init');\n        handsontable({\n          columns(column) {\n            return column === 0 ? { editor: 'checkbox' } : null;\n          }\n        });\n        selectCell(0, 0);\n        expect(textEditorPrototype.init).not.toHaveBeenCalled();\n        expect(checkboxEditorPrototype.init).toHaveBeenCalled();\n      });\n\n      it('should use editor class passed directly', () => {\n        const customEditor = jasmine.createSpy('customEditor');\n\n        customEditor.and.callFake(function() {\n          this.prepare = function() {};\n          this.isOpened = function() {};\n        });\n\n        handsontable({\n          columns: [\n            {\n              editor: customEditor\n            }\n          ]\n        });\n        selectCell(0, 0);\n\n        expect(customEditor).toHaveBeenCalled();\n      });\n\n      it('should use editor class passed directly when columns is a function', () => {\n        const customEditor = jasmine.createSpy('customEditor');\n\n        customEditor.and.callFake(function() {\n          this.prepare = function() {};\n          this.isOpened = function() {};\n        });\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? { editor: customEditor } : null;\n          }\n        });\n        selectCell(0, 0);\n\n        expect(customEditor).toHaveBeenCalled();\n      });\n\n      it('should use editor from custom string', () => {\n        const customEditor = jasmine.createSpy('customEditor');\n        customEditor.and.callFake(function() {\n          this.prepare = function() {};\n          this.isOpened = function() {};\n        });\n\n        Handsontable.editors.registerEditor('myEditor', customEditor);\n\n        handsontable({\n          columns: [\n            {\n              editor: 'myEditor'\n            }\n          ]\n        });\n        selectCell(0, 0);\n\n        expect(customEditor).toHaveBeenCalled();\n      });\n\n      it('should use editor from custom string when columns is a function', () => {\n        const customEditor = jasmine.createSpy('customEditor');\n\n        customEditor.and.callFake(function() {\n          this.prepare = function() {};\n          this.isOpened = function() {};\n        });\n\n        Handsontable.editors.registerEditor('myEditor', customEditor);\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? { editor: 'myEditor' } : null;\n          },\n        });\n        selectCell(0, 0);\n\n        expect(customEditor).toHaveBeenCalled();\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/editor.spec.js","describe('settings', () => {\n  describe('fixedColumnsLeft', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should show columns headers', () => {\n        handsontable({\n          fixedColumnsLeft: 3\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(3);\n      });\n\n      it('should show columns headers when headers are enabled', () => {\n        handsontable({\n          rowHeaders: true,\n          colHeaders: true,\n          fixedColumnsLeft: 2\n        });\n\n        expect(getLeftClone().find('thead tr th').length).toEqual(3);\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);\n      });\n    });\n\n    describe('defined in updateSettings', () => {\n      it('should increase fixed columns', () => {\n        handsontable({\n          fixedColumnsLeft: 2\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 4\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(4);\n      });\n\n      it('should decrease fixed columns', () => {\n        handsontable({\n          fixedColumnsLeft: 4\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 2\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);\n      });\n\n      it('should create fixed columns when they are disabled eariler', () => {\n        handsontable({\n          fixedColumnsLeft: 0\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 2\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);\n      });\n\n      it('should disable fixed columns', () => {\n        handsontable({\n          fixedColumnsLeft: 2\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 0\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);\n        expect(getLeftClone().width()).toBe(0);\n      });\n\n      it('should not throw errors while scrolling horizontally when fixed columns was set', (done) => {\n        const spy = jasmine.createSpyObj('error', ['test']);\n        const prevError = window.onerror;\n\n        window.onerror = function() {\n          spy.test();\n        };\n        const hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(50, 50),\n          width: 200,\n          height: 200,\n          colHeaders: true,\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 2\n        });\n\n        setTimeout(() => {\n          hot.scrollViewportTo(30, 30);\n        }, 100);\n\n        setTimeout(() => {\n          expect(spy.test.calls.count()).toBe(0);\n\n          done();\n          window.onerror = prevError;\n        }, 200);\n      });\n\n      it('should synchronize scroll with master table', async() => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(50, 50),\n          width: 200,\n          height: 200,\n          rowHeaders: true,\n          fixedColumnsLeft: 2,\n        });\n\n        getMaster().find('.wtHolder').scrollTop(100);\n\n        await sleep(10);\n\n        expect(getLeftClone().find('.wtHolder').scrollTop()).toBe(getMaster().find('.wtHolder').scrollTop());\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/fixedColumnsLeft.spec.js","describe('settings', () => {\n  describe('fixedRowsBottom', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should show rows headers', () => {\n        handsontable({\n          fixedRowsBottom: 3\n        });\n\n        expect(getBottomClone().find('tbody tr').length).toEqual(3);\n      });\n\n      it('should show rows headers when headers are enabled', () => {\n        handsontable({\n          rowHeaders: true,\n          colHeaders: true,\n          fixedRowsBottom: 2\n        });\n\n        expect(getBottomClone().find('thead tr').length).toEqual(1);\n        expect(getBottomClone().find('thead tr').height()).toEqual(0); // header is always invisible\n        expect(getBottomClone().find('tbody tr').length).toEqual(2);\n      });\n    });\n\n    describe('defined in updateSettings', () => {\n      it('should increase fixed rows', () => {\n        handsontable({\n          fixedRowsBottom: 2\n        });\n\n        updateSettings({\n          fixedRowsBottom: 4\n        });\n\n        expect(getBottomClone().find('tbody tr').length).toEqual(4);\n      });\n\n      it('should decrease fixed rows', () => {\n        handsontable({\n          fixedRowsBottom: 4\n        });\n\n        updateSettings({\n          fixedRowsBottom: 2\n        });\n\n        expect(getBottomClone().find('tbody tr').length).toEqual(2);\n      });\n\n      it('should create fixed rows when they are disabled eariler', () => {\n        handsontable({\n          fixedRowsBottom: 0\n        });\n\n        updateSettings({\n          fixedRowsBottom: 2\n        });\n\n        expect(getBottomClone().find('tbody tr').length).toEqual(2);\n      });\n\n      it('should disable fixed rows', () => {\n        handsontable({\n          fixedRowsBottom: 2\n        });\n\n        updateSettings({\n          fixedRowsBottom: 0\n        });\n\n        expect(getBottomClone().find('tbody tr').length).toEqual(2);\n        expect(getLeftClone().height()).toBe(0);\n      });\n\n      it('should not throw errors while scrolling vertically when fixed rows was set', async() => {\n        const spy = jasmine.createSpyObj('error', ['test']);\n        const prevError = window.onerror;\n\n        window.onerror = function() {\n          spy.test();\n        };\n        const hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(50, 50),\n          width: 200,\n          height: 200,\n          rowHeaders: true,\n        });\n\n        updateSettings({\n          fixedRowsBottom: 2\n        });\n\n        await sleep(100);\n\n        hot.scrollViewportTo(30, 30);\n\n        await sleep(100);\n\n        expect(spy.test.calls.count()).toBe(0);\n        window.onerror = prevError;\n      });\n    });\n\n    it('should synchronize scroll with master table', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(50, 50),\n        width: 200,\n        height: 200,\n        rowHeaders: true,\n        fixedRowsBottom: 2,\n      });\n\n      getMaster().find('.wtHolder').scrollLeft(100);\n\n      await sleep(10);\n\n      expect(getBottomClone().find('.wtHolder').scrollLeft()).toBe(getMaster().find('.wtHolder').scrollLeft());\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/fixedRowsBottom.spec.js","describe('settings', () => {\n  describe('fixedRowsTop', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should show rows headers', () => {\n        handsontable({\n          fixedRowsTop: 3\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(3);\n      });\n\n      it('should show rows headers when headers are enabled', () => {\n        handsontable({\n          rowHeaders: true,\n          colHeaders: true,\n          fixedRowsTop: 2\n        });\n\n        expect(getTopClone().find('thead tr').length).toEqual(1);\n        expect(getTopClone().find('tbody tr').length).toEqual(2);\n      });\n    });\n\n    describe('defined in updateSettings', () => {\n      it('should increase fixed rows', () => {\n        handsontable({\n          fixedRowsTop: 2\n        });\n\n        updateSettings({\n          fixedRowsTop: 4\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(4);\n      });\n\n      it('should decrease fixed rows', () => {\n        handsontable({\n          fixedRowsTop: 4\n        });\n\n        updateSettings({\n          fixedRowsTop: 2\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(2);\n      });\n\n      it('should create fixed rows when they are disabled eariler', () => {\n        handsontable({\n          fixedRowsTop: 0\n        });\n\n        updateSettings({\n          fixedRowsTop: 2\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(2);\n      });\n\n      it('should disable fixed rows', () => {\n        handsontable({\n          fixedRowsTop: 2\n        });\n\n        updateSettings({\n          fixedRowsTop: 0\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(2);\n        expect(getLeftClone().height()).toBe(0);\n      });\n\n      it('should not throw errors while scrolling vertically when fixed rows was set', (done) => {\n        const spy = jasmine.createSpyObj('error', ['test']);\n        const prevError = window.onerror;\n\n        window.onerror = function() {\n          spy.test();\n        };\n        const hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(50, 50),\n          width: 200,\n          height: 200,\n          rowHeaders: true,\n        });\n\n        updateSettings({\n          fixedRowsTop: 2\n        });\n\n        setTimeout(() => {\n          hot.scrollViewportTo(30, 30);\n        }, 100);\n\n        setTimeout(() => {\n          expect(spy.test.calls.count()).toBe(0);\n\n          done();\n          window.onerror = prevError;\n        }, 200);\n      });\n\n      it('should synchronize scroll with master table', async() => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(50, 50),\n          width: 200,\n          height: 200,\n          rowHeaders: true,\n          fixedRowsTop: 2,\n        });\n\n        getMaster().find('.wtHolder').scrollLeft(100);\n\n        await sleep(10);\n\n        expect(getTopClone().find('.wtHolder').scrollLeft()).toBe(getMaster().find('.wtHolder').scrollLeft());\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/fixedRowsTop.spec.js","describe('settings', () => {\n  describe('fragmentSelection', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    /**\n     * Returns current text selection or false if there is no text selection\n     * @returns {*}\n     */\n    function getSelected() {\n      /* eslint-disable no-else-return */\n      let text = '';\n\n      // IE8\n      if (window.getSelection && window.getSelection().toString() && $(window.getSelection()).attr('type') !== 'Caret') {\n        text = window.getSelection();\n\n        return text.toString();\n\n      } else { // standards\n        const selection = document.selection && document.selection.createRange();\n\n        if (!(typeof selection === 'undefined') && selection.text && selection.text.toString()) {\n          text = selection.text;\n\n          return text.toString();\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Selects a <fromEl> node at as many siblings as given in the <cells> value\n     * Note: IE8 fallback assumes that a node contains exactly one word\n     * @param fromEl\n     * @param siblings\n     */\n    function selectElementText(fromEl, siblings) {\n      const doc = window.document;\n      let element = fromEl;\n      let numOfSiblings = siblings;\n      let sel;\n      let range;\n\n      if (window.getSelection && doc.createRange) { // standards\n        sel = window.getSelection();\n        range = doc.createRange();\n        range.setStartBefore(element, 0);\n        while (numOfSiblings > 1) {\n          element = element.nextSibling;\n          numOfSiblings -= 1;\n        }\n        range.setEndAfter(element, 0);\n        sel.removeAllRanges();\n        sel.addRange(range);\n\n      } else if (doc.body.createTextRange) { // IE8\n        range = doc.body.createTextRange();\n        range.moveToElementText(element);\n        range.moveEnd('word', numOfSiblings + 1);\n        range.select();\n      }\n    }\n\n    describe('constructor', () => {\n      it('should disallow fragmentSelection when set to false', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: false\n        });\n\n        selectElementText(spec().$container.find('tr:eq(0) td:eq(1)')[0], 3);\n\n        mouseDown(spec().$container.find('tr:eq(0) td:eq(3)'));\n        mouseUp(spec().$container.find('tr:eq(0) td:eq(3)'));\n\n        const sel = getSelected();\n\n        expect(sel).toEqual(' '); // copyPaste has selected space in textarea\n      });\n\n      xit('should allow fragmentSelection when set to true', () => {\n        // We have to try another way to simulate text selection.\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: true\n        });\n        selectElementText(spec().$container.find('td')[1], 3);\n\n        mouseDown(spec().$container.find('tr:eq(0) td:eq(3)'));\n        mouseUp(spec().$container.find('tr:eq(0) td:eq(3)'));\n\n        let sel = getSelected();\n        sel = sel.replace(/\\s/g, ''); // tabs and spaces between <td>s are inconsistent in browsers, so let's ignore them\n\n        expect(sel).toEqual('B1C1D1');\n      });\n\n      xit('should allow fragmentSelection from one cell when set to `cell`', () => {\n        // We have to try another way to simulate text selection.\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: 'cell'\n        });\n        selectElementText(spec().$container.find('td')[1], 1);\n\n        mouseDown(spec().$container.find('tr:eq(0) td:eq(1)'));\n        mouseUp(spec().$container.find('tr:eq(0) td:eq(1)'));\n\n        expect(getSelected().replace(/\\s/g, '')).toEqual('B1');\n      });\n\n      it('should disallow fragmentSelection from one cell when set to `cell` and when user selects adjacent cell', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: 'cell'\n        });\n        selectElementText(spec().$container.find('td')[1], 1);\n\n        mouseDown(spec().$container.find('tr:eq(0) td:eq(1)'));\n        mouseOver(spec().$container.find('tr:eq(0) td:eq(2)'));\n        mouseMove(spec().$container.find('tr:eq(0) td:eq(2)'));\n        mouseUp(spec().$container.find('tr:eq(0) td:eq(2)'));\n\n        expect(getSelected()).toEqual(' '); // copyPaste has selected space in textarea\n      });\n\n      it('should disallow fragmentSelection of Handsontable chrome (anything that is not table) when set to false', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: false\n        });\n        const $div = $('<div style=\"position: absolute; top: 0; left: 0\">Text</div>');\n        spec().$container.append($div);\n        selectElementText($div[0], 1);\n\n        mouseDown($div);\n\n        const sel = getSelected();\n        expect(sel).toEqual(false);\n      });\n\n      it('should disallow fragmentSelection of Handsontable chrome (anything that is not table) when set to true', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: true\n        });\n        const $div = $('<div style=\"position: absolute; top: 0; left: 0\">Text</div>');\n        spec().$container.append($div);\n        selectElementText($div[0], 1);\n\n        mouseDown($div);\n\n        const sel = getSelected();\n        expect(sel).toEqual(false);\n      });\n    });\n\n    describe('dynamic', () => {\n      it('should disallow fragmentSelection when set to false', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: true\n        });\n        updateSettings({ fragmentSelection: false });\n        selectElementText(spec().$container.find('tr:eq(0) td:eq(1)')[0], 3);\n\n        mouseDown(spec().$container.find('tr:eq(0) td:eq(3)'));\n        mouseUp(spec().$container.find('tr:eq(0) td:eq(3)'));\n\n        const sel = getSelected();\n        expect(sel).toEqual(' '); // copyPaste has selected space in textarea\n      });\n\n      xit('should allow fragmentSelection when set to true', () => {\n        // We have to try another way to simulate text selection.\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: false\n        });\n        updateSettings({ fragmentSelection: true });\n        selectElementText(spec().$container.find('td')[1], 3);\n\n        mouseDown(spec().$container.find('tr:eq(0) td:eq(3)'));\n        mouseUp(spec().$container.find('tr:eq(0) td:eq(3)'));\n\n        let sel = getSelected();\n        sel = sel.replace(/\\s/g, ''); // tabs and spaces between <td>s are inconsistent in browsers, so let's ignore them\n        expect(sel).toEqual('B1C1D1');\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/fragmentSelection.spec.js","describe('settings', () => {\n  describe('maxCols', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('works on init', () => {\n      it('should show data properly when `maxCols` is set to 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 0\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData().length).toEqual(0);\n        expect(getDataAtRow(0)).toEqual([]);\n        expect(countCols()).toEqual(0);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual([]);\n        expect(getDataAtCol(1)).toEqual([]);\n      });\n\n      it('should show data properly when `maxCols` is set to value > 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 5\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(5);\n        expect(getDataAtRow(0).length).toEqual(5);\n        expect(countCols()).toEqual(5);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(6)).toEqual([]);\n      });\n\n      it('should show data properly when `maxCols` is set to infinity value', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: Infinity\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(10);\n        expect(getDataAtRow(0).length).toEqual(10);\n        expect(countCols()).toEqual(10);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);\n      });\n\n      describe('when `columns` property was set', () => {\n        it('should show data properly when `maxCols` is set to value > 0', () => {\n          handsontable({\n            columns: [\n              { type: 'text' },\n              { type: 'text' },\n              { type: 'text' },\n              { type: 'text' },\n              { type: 'text' },\n            ],\n            minRows: 10,\n            maxCols: 2\n          });\n\n          expect(getSourceDataAtRow(0).length).toEqual(5);\n          expect(countSourceCols()).toEqual(5);\n          expect(getData()[0].length).toEqual(2);\n          expect(getDataAtRow(0).length).toEqual(2);\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCol(3)).toEqual([]);\n        });\n      });\n    });\n\n    describe('update settings works', () => {\n      it('should show data properly after maxCols is updated to 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxCols: 0\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData().length).toEqual(0);\n        expect(getDataAtRow(0)).toEqual([]);\n        expect(countCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual([]);\n        expect(getDataAtCol(1)).toEqual([]);\n      });\n\n      it('should show data properly after maxCols is updated to value > 0 -> test no. 1', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxCols: 2\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(2);\n        expect(getDataAtRow(0).length).toEqual(2);\n        expect(countCols()).toEqual(2);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(3)).toEqual([]);\n      });\n\n      it('should show data properly after maxCols is updated to value > 0 -> test no. 2', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 5\n        });\n\n        updateSettings({\n          maxCols: 2\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(2);\n        expect(getDataAtRow(0).length).toEqual(2);\n        expect(countCols()).toEqual(2);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(3)).toEqual([]);\n      });\n\n      it('should show data properly after maxCols is updated to value > 0 -> test no. 3', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 2\n        });\n\n        updateSettings({\n          maxCols: 5\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(5);\n        expect(getDataAtRow(0).length).toEqual(5);\n        expect(countCols()).toEqual(5);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(6)).toEqual([]);\n      });\n\n      it('should show data properly after maxCols is updated to infinity value -> test no. 1', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxCols: Infinity\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(10);\n        expect(getDataAtRow(0).length).toEqual(10);\n        expect(countCols()).toEqual(10);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);\n      });\n\n      it('should show data properly after maxCols is updated to infinity value -> test no. 2', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 2\n        });\n\n        updateSettings({\n          maxCols: Infinity\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(10);\n        expect(getDataAtRow(0).length).toEqual(10);\n        expect(countCols()).toEqual(10);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);\n      });\n\n      describe('works when `columns` property was set', () => {\n        it('should show data properly when `maxCols` is updated to value > 0', () => {\n          handsontable({\n            columns: [\n              { type: 'text' },\n              { type: 'text' },\n              { type: 'text' },\n              { type: 'text' },\n              { type: 'text' },\n            ],\n            minRows: 10\n          });\n\n          updateSettings({\n            maxCols: 2\n          });\n\n          expect(getSourceDataAtRow(0).length).toEqual(5);\n          expect(countSourceCols()).toEqual(5);\n          expect(getData()[0].length).toEqual(2);\n          expect(getDataAtRow(0).length).toEqual(2);\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCol(0).length).toEqual(10);\n        });\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/maxCols.spec.js","describe('settings', () => {\n  describe('maxRows', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('works on init', () => {\n      it('should show data properly when `maxRows` is set to 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 0\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(0);\n        expect(getDataAtCol(0)).toEqual([]);\n        expect(countRows()).toEqual(0);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual([]);\n        expect(getDataAtRow(1)).toEqual([]);\n      });\n\n      it('should show data properly when `maxRows` is set to value > 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 5\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(5);\n        expect(getDataAtCol(0).length).toEqual(5);\n        expect(countRows()).toEqual(5);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(6)).toEqual([]);\n      });\n\n      it('should show data properly when `maxRows` is set to infinity value', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: Infinity\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(10);\n        expect(getDataAtCol(0).length).toEqual(10);\n        expect(countRows()).toEqual(10);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);\n      });\n    });\n\n    describe('update settings works', () => {\n      it('should show data properly after maxRows is updated to 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxRows: 0\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(0);\n        expect(getDataAtCol(0)).toEqual([]);\n        expect(countRows()).toEqual(0);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual([]);\n        expect(getDataAtRow(1)).toEqual([]);\n      });\n\n      it('should show data properly after maxRows is updated to value > 0 -> test no. 1', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxRows: 2\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(2);\n        expect(getDataAtCol(0).length).toEqual(2);\n        expect(countRows()).toEqual(2);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(3)).toEqual([]);\n      });\n\n      it('should show data properly after maxRows is updated to value > 0 -> test no. 2', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 5\n        });\n\n        updateSettings({\n          maxRows: 2\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(2);\n        expect(getDataAtCol(0).length).toEqual(2);\n        expect(countRows()).toEqual(2);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(3)).toEqual([]);\n      });\n\n      it('should show data properly after maxRows is updated to value > 0 -> test no. 3', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 2\n        });\n\n        updateSettings({\n          maxRows: 5\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(5);\n        expect(getDataAtCol(0).length).toEqual(5);\n        expect(countRows()).toEqual(5);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(6)).toEqual([]);\n      });\n\n      it('should show data properly after maxRows is updated to infinity value -> test no. 1', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxRows: Infinity\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(10);\n        expect(getDataAtCol(0).length).toEqual(10);\n        expect(countRows()).toEqual(10);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);\n      });\n\n      it('should show data properly after maxRows is updated to infinity value -> test no. 2', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 2\n        });\n\n        updateSettings({\n          maxRows: Infinity\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(10);\n        expect(getDataAtCol(0).length).toEqual(10);\n        expect(countRows()).toEqual(10);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/maxRows.spec.js","describe('settings', () => {\n  describe('outsideClickDeselects', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    it('should not deselect the currently selected cell after clicking on a scrollbar', () => {\n      const hot = handsontable({\n        outsideClickDeselects: false,\n        minRows: 20,\n        minCols: 2,\n        width: 400,\n        height: 100\n      });\n      selectCell(0, 0);\n\n      const holderBoundingBox = hot.view.wt.wtTable.holder.getBoundingClientRect();\n      const verticalScrollbarCoords = {\n        x: holderBoundingBox.left + holderBoundingBox.width - 3,\n        y: holderBoundingBox.top + (holderBoundingBox.height / 2)\n      };\n      const horizontalScrollbarCoords = {\n        x: holderBoundingBox.left + (holderBoundingBox.width / 2),\n        y: holderBoundingBox.top + holderBoundingBox.height - 3\n      };\n\n      $(hot.view.wt.wtTable.holder).simulate('mousedown', {\n        clientX: verticalScrollbarCoords.x,\n        clientY: verticalScrollbarCoords.y\n      });\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n\n      $(hot.view.wt.wtTable.holder).simulate('mousedown', {\n        clientX: horizontalScrollbarCoords.x,\n        clientY: horizontalScrollbarCoords.y\n      });\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n\n    it('should not deselect currently selected cell', () => {\n      handsontable({\n        outsideClickDeselects: false\n      });\n      selectCell(0, 0);\n\n      $('html').simulate('mousedown');\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n\n    it('should not deselect currently selected cell (outsideClickDeselects as function)', () => {\n      handsontable({\n        outsideClickDeselects: () => false\n      });\n      selectCell(0, 0);\n\n      $('html').simulate('mousedown');\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n\n    it('should deselect currently selected cell', () => {\n      handsontable({\n        outsideClickDeselects: true\n      });\n      selectCell(0, 0);\n\n      $('html').simulate('mousedown');\n\n      expect(getSelected()).toBeUndefined();\n    });\n\n    it('should deselect currently selected cell (outsideClickDeselects as function)', () => {\n      handsontable({\n        outsideClickDeselects: () => true\n      });\n      selectCell(0, 0);\n\n      $('html').simulate('mousedown');\n\n      expect(getSelected()).toBeUndefined();\n    });\n\n    it('should allow to focus on external input when outsideClickDeselects is set as true', async() => {\n      const textarea = $('<input type=\"text\">').prependTo($('body'));\n\n      handsontable({\n        outsideClickDeselects: true\n      });\n      selectCell(0, 0);\n\n      // It is necessary to fire event simulation in the next event loop cycle due to the autofocus editable element in setImmediate function.\n      await sleep(0);\n\n      textarea.simulate('mousedown');\n      textarea.focus();\n\n      expect(document.activeElement).toBe(textarea[0]);\n\n      await sleep(50);\n\n      expect(document.activeElement).toBe(textarea[0]);\n\n      textarea.remove();\n    });\n\n    it('should allow to focus on external input when outsideClickDeselects is set as true (outsideClickDeselects as function)', async() => {\n      const textarea = $('<input type=\"text\">').prependTo($('body'));\n\n      handsontable({\n        outsideClickDeselects: () => true\n      });\n      selectCell(0, 0);\n\n      await sleep(0);\n\n      textarea.simulate('mousedown');\n      textarea.focus();\n\n      expect(document.activeElement).toBe(textarea[0]);\n\n      await sleep(50);\n\n      expect(document.activeElement).toBe(textarea[0]);\n\n      textarea.remove();\n    });\n\n    it('should allow to focus on external input when outsideClickDeselects is set as false', async() => {\n      const textarea = $('<input type=\"text\">').prependTo($('body'));\n\n      handsontable({\n        outsideClickDeselects: false\n      });\n      selectCell(0, 0);\n\n      await sleep(0);\n\n      textarea.simulate('mousedown');\n      textarea.focus();\n\n      expect(document.activeElement).toBe(textarea[0]);\n\n      await sleep(50);\n\n      expect(document.activeElement).toBe(textarea[0]);\n\n      textarea.remove();\n    });\n\n    it('should allow to focus on external input when outsideClickDeselects is set as false (outsideClickDeselects as function)', async() => {\n      const textarea = $('<input type=\"text\">').prependTo($('body'));\n\n      handsontable({\n        outsideClickDeselects: () => false\n      });\n      selectCell(0, 0);\n\n      await sleep(0);\n\n      textarea.simulate('mousedown');\n      textarea.focus();\n\n      expect(document.activeElement).toBe(textarea[0]);\n\n      await sleep(50);\n\n      expect(document.activeElement).toBe(textarea[0]);\n\n      textarea.remove();\n    });\n\n    it('should allow to type in external input while holding current selection information', async() => {\n      const textarea = $('<textarea></textarea>').prependTo($('body'));\n      let keyPressed;\n\n      handsontable({\n        outsideClickDeselects: false\n      });\n      selectCell(0, 0);\n\n      textarea.focus();\n      textarea.simulate('mousedown');\n      textarea.simulate('mouseup');\n\n      textarea.on('keydown', (event) => {\n        keyPressed = event.keyCode;\n      });\n\n      const LETTER_A_KEY = 97;\n\n      $(document.activeElement).simulate('keydown', {\n        keyCode: LETTER_A_KEY\n      });\n\n      // textarea should receive the event and be an active element\n      expect(keyPressed).toEqual(LETTER_A_KEY);\n      expect(document.activeElement).toBe(textarea[0]);\n\n      // should preserve selection, close editor and save changes\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      await sleep(50);\n\n      $(document.activeElement).simulate('keydown', {\n        keyCode: LETTER_A_KEY\n      });\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      textarea.remove();\n    });\n\n    it('should allow to type in external input while holding current selection information (outsideClickDeselects as function)', async() => {\n      const textarea = $('<textarea></textarea>').prependTo($('body'));\n      let keyPressed;\n\n      handsontable({\n        outsideClickDeselects: () => false\n      });\n      selectCell(0, 0);\n\n      textarea.focus();\n      textarea.simulate('mousedown');\n      textarea.simulate('mouseup');\n\n      textarea.on('keydown', (event) => {\n        keyPressed = event.keyCode;\n      });\n\n      const LETTER_A_KEY = 97;\n\n      $(document.activeElement).simulate('keydown', {\n        keyCode: LETTER_A_KEY\n      });\n\n      // textarea should receive the event and be an active element\n      expect(keyPressed).toEqual(LETTER_A_KEY);\n      expect(document.activeElement).toBe(textarea[0]);\n\n      // should preserve selection, close editor and save changes\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      await sleep(50);\n\n      $(document.activeElement).simulate('keydown', {\n        keyCode: LETTER_A_KEY\n      });\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      textarea.remove();\n    });\n\n    xit('should allow to type in external input after opening cell editor', async() => {\n      const textarea = $('<textarea></textarea>').prependTo($('body'));\n      let keyPressed;\n\n      handsontable({\n        outsideClickDeselects: false\n      });\n      selectCell(0, 0);\n      keyDown('enter');\n      document.activeElement.value = 'Foo';\n\n      textarea.focus();\n      textarea.simulate('mousedown');\n      textarea.simulate('mouseup');\n\n      textarea.on('keydown', (event) => {\n        keyPressed = event.keyCode;\n      });\n\n      const LETTER_A_KEY = 97;\n\n      $(document.activeElement).simulate('keydown', {\n        keyCode: LETTER_A_KEY\n      });\n\n      // textarea should receive the event and be an active element\n      expect(keyPressed).toEqual(LETTER_A_KEY);\n      expect(document.activeElement).toBe(textarea[0]);\n\n      // should preserve selection, close editor and save changes\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      expect(getDataAtCell(0, 0)).toEqual('Foo');\n\n      await sleep(50);\n\n      $(document.activeElement).simulate('keydown', {\n        keyCode: LETTER_A_KEY\n      });\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      expect(getDataAtCell(0, 0)).toEqual('Foo');\n\n      textarea.remove();\n    });\n\n    it('should allow to type in external input after opening cell editor (outsideClickDeselects as function)', async() => {\n      const textarea = $('<textarea></textarea>').prependTo($('body'));\n      let keyPressed;\n\n      handsontable({\n        outsideClickDeselects: () => false\n      });\n      selectCell(0, 0);\n      keyDown('enter');\n      document.activeElement.value = 'Foo';\n\n      textarea.focus();\n      textarea.simulate('mousedown');\n      textarea.simulate('mouseup');\n\n      textarea.on('keydown', (event) => {\n        keyPressed = event.keyCode;\n      });\n\n      const LETTER_A_KEY = 97;\n\n      $(document.activeElement).simulate('keydown', {\n        keyCode: LETTER_A_KEY\n      });\n\n      // textarea should receive the event and be an active element\n      expect(keyPressed).toEqual(LETTER_A_KEY);\n      expect(document.activeElement).toBe(textarea[0]);\n\n      // should preserve selection, close editor and save changes\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      expect(getDataAtCell(0, 0)).toEqual('Foo');\n\n      await sleep(50);\n\n      $(document.activeElement).simulate('keydown', {\n        keyCode: LETTER_A_KEY\n      });\n\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n      expect(getDataAtCell(0, 0)).toEqual('Foo');\n\n      textarea.remove();\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/outsideClickDeselects.spec.js","describe('settings', () => {\n  describe('renderer', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should use text renderer by default', () => {\n        const originalTextRenderer = Handsontable.cellTypes.text.renderer;\n\n        spyOn(Handsontable.cellTypes.text, 'renderer');\n        Handsontable.renderers.registerRenderer('text', Handsontable.cellTypes.text.renderer);\n\n        handsontable();\n        expect(Handsontable.cellTypes.text.renderer).toHaveBeenCalled();\n\n        Handsontable.renderers.registerRenderer('text', originalTextRenderer);\n      });\n\n      it('should use renderer from predefined string', () => {\n        const originalTextRenderer = Handsontable.renderers.TextRenderer;\n        spyOn(Handsontable.renderers, 'TextRenderer');\n        Handsontable.renderers.registerRenderer('text', Handsontable.renderers.TextRenderer);\n\n        const originalCheckboxRenderer = Handsontable.renderers.CheckboxRenderer;\n        spyOn(Handsontable.renderers, 'CheckboxRenderer');\n        Handsontable.renderers.registerRenderer('checkbox', Handsontable.renderers.CheckboxRenderer);\n\n        handsontable({\n          columns: [\n            {\n              renderer: 'checkbox'\n            }\n          ]\n        });\n        expect(Handsontable.renderers.TextRenderer).not.toHaveBeenCalled();\n        expect(Handsontable.renderers.CheckboxRenderer).toHaveBeenCalled();\n\n        Handsontable.renderers.registerRenderer('text', originalTextRenderer);\n        Handsontable.renderers.registerRenderer('checkbox', originalCheckboxRenderer);\n      });\n\n      it('should use renderer from predefined string when columns is a function', () => {\n        const originalTextRenderer = Handsontable.renderers.TextRenderer;\n\n        spyOn(Handsontable.renderers, 'TextRenderer');\n        Handsontable.renderers.registerRenderer('text', Handsontable.renderers.TextRenderer);\n\n        const originalCheckboxRenderer = Handsontable.renderers.CheckboxRenderer;\n        spyOn(Handsontable.renderers, 'CheckboxRenderer');\n        Handsontable.renderers.registerRenderer('checkbox', Handsontable.renderers.CheckboxRenderer);\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? { renderer: 'checkbox' } : null;\n          }\n        });\n        expect(Handsontable.renderers.TextRenderer).not.toHaveBeenCalled();\n        expect(Handsontable.renderers.CheckboxRenderer).toHaveBeenCalled();\n\n        Handsontable.renderers.registerRenderer('text', originalTextRenderer);\n        Handsontable.renderers.registerRenderer('checkbox', originalCheckboxRenderer);\n      });\n\n      it('should use renderer from custom function', () => {\n        let called = false;\n\n        function myRenderer() {\n          called = true;\n        }\n\n        handsontable({\n          columns: [\n            {\n              renderer: myRenderer\n            }\n          ]\n        });\n\n        expect(called).toBe(true);\n      });\n\n      it('should use renderer from custom function when columns is a function', () => {\n        let called = false;\n\n        function myRenderer() {\n          called = true;\n        }\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? { renderer: myRenderer } : null;\n          }\n        });\n\n        expect(called).toBe(true);\n      });\n\n      it('should use renderer from custom string', () => {\n        const myRenderer = jasmine.createSpy('myRenderer');\n\n        Handsontable.renderers.registerRenderer('myRenderer', myRenderer);\n\n        handsontable({\n          columns: [\n            {\n              renderer: 'myRenderer'\n            }\n          ]\n        });\n\n        expect(myRenderer).toHaveBeenCalled();\n      });\n\n      it('should use renderer from custom string when columns is a function', () => {\n        const myRenderer = jasmine.createSpy('myRenderer');\n\n        Handsontable.renderers.registerRenderer('myRenderer', myRenderer);\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? { renderer: 'myRenderer' } : null;\n          }\n        });\n\n        expect(myRenderer).toHaveBeenCalled();\n      });\n    });\n\n    it('should call renderer with cellProperties.row, cellProperties.col matching row and col arguments', () => {\n      const rendererSpy = jasmine.createSpy('rendererSpy').and.callThrough();\n      const cellPropertiesCache = [];\n\n      rendererSpy.and.callFake((instance, TD, row, col, prop, value, cellProperties) => {\n        cellPropertiesCache.push({\n          row: cellProperties.row,\n          col: cellProperties.col\n        });\n      });\n\n      handsontable({\n        renderer: rendererSpy\n      });\n\n      for (let i = 0, len = rendererSpy.calls.count(); i < len; i++) {\n        const args = rendererSpy.calls.argsFor(i);\n        const row = args[2];\n        const col = args[3];\n        const cellProperties = cellPropertiesCache[i];\n\n        expect(row).toEqual(cellProperties.row);\n        expect(col).toEqual(cellProperties.col);\n      }\n    });\n\n    it('should call cells function before passing cellProperties to renderer', () => {\n      const rendererSpy = jasmine.createSpy('rendererSpy').and.callThrough();\n      const cellPropertiesCache = [];\n\n      rendererSpy.and.callFake((instance, TD, row, col, prop, value, cellProperties) => {\n        cellPropertiesCache.push({\n          cellsRow: cellProperties.cellsRow,\n          cellsCol: cellProperties.cellsCol\n        });\n      });\n\n      handsontable({\n        renderer: rendererSpy,\n        cells(row, col) {\n          return {\n            cellsRow: row,\n            cellsCol: col\n          };\n        }\n      });\n\n      for (let i = 0, len = rendererSpy.calls.count(); i < len; i++) {\n        const args = rendererSpy.calls.argsFor(i);\n        const row = args[2];\n        const col = args[3];\n        const cellProperties = cellPropertiesCache[i];\n\n        expect(row).toEqual(cellProperties.cellsRow);\n        expect(col).toEqual(cellProperties.cellsCol);\n      }\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/renderer.spec.js","describe('settings', () => {\n  describe('tableClassName', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as string, without overlays)', () => {\n      const hot = handsontable({\n        colHeaders: false,\n        rowHeaders: false,\n        tableClassName: 'foo'\n      });\n\n      const possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)\n\n      // all overlays is created anyway but without left-top corner\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as string, with overlays)', () => {\n      const hot = handsontable({\n        colHeaders: true,\n        rowHeaders: true,\n        tableClassName: 'foo'\n      });\n\n      const possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)\n\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as string with spaces, without overlays)', () => {\n      const hot = handsontable({\n        colHeaders: false,\n        rowHeaders: false,\n        tableClassName: 'foo bar'\n      });\n\n      const possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)\n\n      // all overlays is created anyway but without left-top corner\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as string with spaces, with overlays)', () => {\n      const hot = handsontable({\n        colHeaders: true,\n        rowHeaders: true,\n        tableClassName: 'foo bar'\n      });\n\n      const possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)\n\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as array, without overlays)', () => {\n      const hot = handsontable({\n        colHeaders: false,\n        rowHeaders: false,\n        tableClassName: ['foo', 'bar', 'baz']\n      });\n\n      const possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)\n\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.baz').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as array, with overlays)', () => {\n      const hot = handsontable({\n        colHeaders: true,\n        rowHeaders: true,\n        tableClassName: ['foo', 'bar', 'baz']\n      });\n\n      const possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)\n\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.baz').length)).toBeGreaterThan(-1);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/settings/tableClassName.spec.js","describe('GhostTable', () => {\n\n  const hotSettings = {\n    data: [['A', '1', 'A\\nB\\nC'], ['B', '2', 'A-----B-------C'], ['C', '3', 'A---\\n--B-------C']]\n  };\n  let gt;\n\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n    if (gt) {\n      gt.clean();\n      gt = null;\n    }\n  });\n\n  describe('row', () => {\n    it('should throw exception if we try to add column after added row', () => {\n      const hot = handsontable(hotSettings);\n      const samples = new Map();\n      let exception = false;\n      gt = new Handsontable.__GhostTable(hot);\n\n      gt.addRow(0, samples);\n\n      try {\n        gt.addColumn(0, samples);\n      } catch (ex) {\n        exception = true;\n      }\n\n      expect(exception).toBe(true);\n    });\n\n    it('should create container element only for first row', () => {\n      const hot = handsontable(hotSettings);\n      const samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      spyOn(gt, 'createContainer').and.callThrough();\n\n      gt.addRow(0, samples);\n      gt.addRow(0, samples);\n      gt.addRow(0, samples);\n      gt.addRow(1, samples);\n      gt.addRow(2, samples);\n\n      expect(gt.createContainer.calls.count()).toBe(1);\n      expect(gt.createContainer.calls.mostRecent().args).toEqual(['handsontable']);\n    });\n\n    it('should add row to rows collection after call `addRow` method', () => {\n      const hot = handsontable(hotSettings);\n      const samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      expect(gt.rows.length).toBe(0);\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Foo', row: 0 }, { value: 'Foo Bar', row: 0 }] });\n\n      gt.addRow(0, samples);\n\n      expect(gt.rows.length).toBe(1);\n      expect(gt.rows[0].row).toBe(0);\n      expect(gt.rows[0].table.className).toBe('htCore');\n      expect(gt.rows[0].table.nodeName).toBe('TABLE');\n      expect(gt.rows[0].table.querySelectorAll('colgroup > col').length).toBe(2);\n      expect(gt.rows[0].table.querySelector('tbody > tr > td').innerHTML).toBe('Foo');\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Bar', row: 1 }, { value: 'Baz1234', row: 1 }] });\n\n      gt.addRow(1, samples);\n\n      expect(gt.rows.length).toBe(2);\n      expect(gt.rows[1].row).toBe(1);\n      expect(gt.rows[1].table.className).toBe('htCore');\n      expect(gt.rows[1].table.nodeName).toBe('TABLE');\n      expect(gt.rows[1].table.querySelectorAll('colgroup > col').length).toBe(2);\n      expect(gt.rows[1].table.querySelector('tbody > tr > td').innerHTML).toBe('Bar');\n    });\n\n    it('should get valid heights', () => {\n      const hot = handsontable(hotSettings);\n      const heightSpy = jasmine.createSpy();\n      const samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Foo', row: 0 }, { value: 'Foo.....Bar', row: 0 }] });\n\n      gt.addRow(0, samples);\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Foo\\nBar\\nsqw', row: 1 }] });\n\n      gt.addRow(1, samples);\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Foo', row: 0 }, { value: 'Foo Bar', row: 0 }] });\n\n      gt.addRow(2, samples);\n      gt.getHeights(heightSpy);\n\n      expect(heightSpy.calls.count()).toBe(3);\n      expect(heightSpy.calls.argsFor(0)[0]).toBe(0);\n      expect(heightSpy.calls.argsFor(0)[1]).toBe(23);\n      expect(heightSpy.calls.argsFor(1)[0]).toBe(1);\n      expect(heightSpy.calls.argsFor(1)[1]).toBe(64);\n      expect(heightSpy.calls.argsFor(2)[0]).toBe(2);\n      expect(heightSpy.calls.argsFor(2)[1]).toBe(43);\n    });\n  });\n\n  describe('column', () => {\n    it('should throw exception if we try to add row after added column', () => {\n      const hot = handsontable(hotSettings);\n      const samples = new Map();\n      let exception = false;\n      gt = new Handsontable.__GhostTable(hot);\n\n      gt.addColumn(0, samples);\n\n      try {\n        gt.addRow(0, samples);\n      } catch (ex) {\n        exception = true;\n      }\n\n      expect(exception).toBe(true);\n    });\n\n    it('should create container element only for first column', () => {\n      const hot = handsontable(hotSettings);\n      const samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      spyOn(gt, 'createContainer').and.callThrough();\n\n      gt.addColumn(0, samples);\n      gt.addColumn(0, samples);\n      gt.addColumn(0, samples);\n      gt.addColumn(1, samples);\n      gt.addColumn(2, samples);\n\n      expect(gt.createContainer.calls.count()).toBe(1);\n      expect(gt.createContainer.calls.mostRecent().args).toEqual(['handsontable']);\n    });\n\n    it('should add column to columns collection after call `addColumn` method', () => {\n      const hot = handsontable(hotSettings);\n      const samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      expect(gt.columns.length).toBe(0);\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Foo', col: 0 }, { value: 'Foo Bar', col: 0 }] });\n\n      gt.addColumn(0, samples);\n\n      expect(gt.columns.length).toBe(1);\n      expect(gt.columns[0].col).toBe(0);\n      expect(gt.columns[0].table.className).toBe('htCore');\n      expect(gt.columns[0].table.style.width).toBe('auto');\n      expect(gt.columns[0].table.style.tableLayout).toBe('auto');\n      expect(gt.columns[0].table.nodeName).toBe('TABLE');\n      expect(gt.columns[0].table.querySelectorAll('thead > tr > th').length).toBe(1);\n      expect(gt.columns[0].table.querySelector('tbody > tr > td').innerHTML).toBe('Foo');\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Bar', row: 1 }, { value: 'Baz1234', row: 1 }] });\n\n      gt.addColumn(1, samples);\n\n      expect(gt.columns.length).toBe(2);\n      expect(gt.columns[1].col).toBe(1);\n      expect(gt.columns[1].table.className).toBe('htCore');\n      expect(gt.columns[1].table.nodeName).toBe('TABLE');\n      expect(gt.columns[1].table.querySelectorAll('thead > tr > th').length).toBe(1);\n      expect(gt.columns[1].table.querySelector('tbody > tr > td').innerHTML).toBe('Bar');\n    });\n\n    it('should get valid widths', () => {\n      const hot = handsontable(hotSettings);\n      const widthSpy = jasmine.createSpy();\n      const samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Foo', col: 0 }, { value: 'Foo.....Bar', col: 0 }] });\n\n      gt.addColumn(0, samples);\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Foo\\nBar\\nsqw', col: 1 }] });\n\n      gt.addColumn(1, samples);\n\n      samples.clear();\n      samples.set(0, { strings: [{ value: 'Foo', col: 0 }, { value: 'Foo Bar', col: 0 }] });\n\n      gt.addColumn(2, samples);\n      gt.getWidths(widthSpy);\n\n      expect(widthSpy.calls.count()).toBe(3);\n      expect(widthSpy.calls.argsFor(0)[0]).toBe(0);\n      expect(widthSpy.calls.argsFor(0)[1]).toBeAroundValue(87, 4);\n      expect(widthSpy.calls.argsFor(1)[0]).toBe(1);\n      expect(widthSpy.calls.argsFor(1)[1]).toBeAroundValue(41, 4);\n      expect(widthSpy.calls.argsFor(2)[0]).toBe(2);\n      expect(widthSpy.calls.argsFor(2)[1]).toBeAroundValue(68, 4);\n    });\n  });\n\n  it('should reset internal state after call `clean` method', () => {\n    const hot = handsontable(hotSettings);\n    const samples = new Map();\n    gt = new Handsontable.__GhostTable(hot);\n\n    gt.addColumn(0, samples);\n    gt.rows.push({});\n    gt.getWidths(() => {});\n\n    expect(gt.columns.length).toBe(1);\n    expect(gt.samples).toBeDefined();\n    expect(gt.injected).toBe(true);\n    expect(gt.container).toBeDefined();\n    expect(document.querySelector('.htGhostTable')).toBeDefined();\n\n    gt.clean();\n\n    expect(gt.columns.length).toBe(0);\n    expect(gt.samples).toBe(null);\n    expect(gt.injected).toBe(false);\n    expect(gt.container).toBe(null);\n    expect(document.querySelector('.htGhostTable')).toBe(null);\n  });\n\n  it('should be detected as vertical if at least one row is added', () => {\n    const hot = handsontable(hotSettings);\n    const samples = new Map();\n    gt = new Handsontable.__GhostTable(hot);\n\n    gt.addRow(0, samples);\n\n    expect(gt.isVertical()).toBe(true);\n    expect(gt.isHorizontal()).toBe(false);\n  });\n\n  it('should be detected as horizontal if at least one column is added', () => {\n    const hot = handsontable(hotSettings);\n    const samples = new Map();\n    gt = new Handsontable.__GhostTable(hot);\n\n    gt.addColumn(0, samples);\n\n    expect(gt.isVertical()).toBe(false);\n    expect(gt.isHorizontal()).toBe(true);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/utils/ghostTable.spec.js","describe('autocompleteValidator', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('allowEmpty', () => {\n    it('should validate empty cells positively (by default)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      handsontable({\n        data: [\n          ['some', 'sample', 'data'],\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 0, undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should validate empty cells positively when allowEmpty is set to true', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      handsontable({\n        data: [\n          ['some', 'sample', 'data'],\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        allowEmpty: true,\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 0, undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should validate empty cells negatively when allowEmpty is set to false', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      handsontable({\n        data: [\n          ['some', 'sample', 'data'],\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        allowEmpty: false,\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 0, 0, undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should respect the allowEmpty property for a single column', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      handsontable({\n        data: [\n          ['some', 'sample', 'data']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true,\n            allowEmpty: false\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, '');\n      setDataAtCell(0, 1, '');\n      setDataAtCell(0, 2, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate.calls.argsFor(0)).toEqual([true, '', 0, 0, undefined, undefined]);\n        expect(onAfterValidate.calls.argsFor(1)).toEqual([false, '', 0, 1, undefined, undefined]);\n        expect(onAfterValidate.calls.argsFor(2)).toEqual([true, '', 0, 2, undefined, undefined]);\n        done();\n      }, 100);\n    });\n\n    it('should work for null and undefined values in cells', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      handsontable({\n        data: [\n          ['some', 'sample', 'data']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true,\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        allowEmpty: false,\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, null);\n      setDataAtCell(0, 1, void 0);\n      setDataAtCell(0, 2, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate.calls.argsFor(0)).toEqual([false, null, 0, 0, undefined, undefined]);\n        expect(onAfterValidate.calls.argsFor(1)).toEqual([false, void 0, 0, 1, undefined, undefined]);\n        expect(onAfterValidate.calls.argsFor(2)).toEqual([false, '', 0, 2, undefined, undefined]);\n        done();\n      }, 100);\n    });\n  });\n  describe('strict mode', () => {\n    it('sshould validate negatively when chars have different size', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      handsontable({\n        data: [\n          ['some', 'sample', 'data'],\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, 'Some');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, 'Some', 0, 0, undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/validators/autocompleteValidator.spec.js","describe('dateValidator', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfObjects = function() {\n    return [\n      { date: '01/01/2015', name: 'Ted', lastName: 'Right' },\n      { date: '01/01/15', name: 'Frank', lastName: 'Honest' },\n      { date: '41/01/2015', name: 'Joan', lastName: 'Well' },\n      { date: '01/51/2015', name: 'Sid', lastName: 'Strong' }\n    ];\n  };\n\n  it('should validate an empty string (default behavior)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should rewrite an ISO 8601 string to the correct format if a date-string in different format is provided', async() => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '2016-03-18');\n    await sleep(200);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(true, '2016-03-18', 1, 'date', undefined, undefined);\n    expect(getDataAtCell(1, 0)).toEqual('03/18/2016');\n  });\n\n  it('should not positively validate a non-date string', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'wat');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'wat', 0, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a non-date string and rewrite to the correct format when `allowInvalid` is false', async() => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true, allowInvalid: false },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '01/01/2015 ops');\n    await sleep(200);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(false, '01/01/2015 ops', 0, 'date', undefined, undefined);\n    expect(getDataAtCell(0, 0)).toEqual('01/01/2015');\n  });\n\n  it('should not positively validate a incorrect date string', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '33/01/2014');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '33/01/2014', 0, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a date string in wrong format', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '01/01/15');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '01/01/15', 1, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a date string in wrong format (if custom format is provided)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date', dateFormat: 'DD/MM/YY' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '01/01/2015');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '01/01/2015', 1, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should positively validate a date string in correct format', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '01/01/2015');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '01/01/2015', 1, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should positively validate a date string in correct format (if custom format is provided)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'date', type: 'date', dateFormat: 'DD/MM/YY' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '23/03/15');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '23/03/15', 1, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  describe('allowEmpty', () => {\n    it('should not validate an empty string when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'date', type: 'date', dateFormat: 'DD/MM/YY', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `null` when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'date', type: 'date', dateFormat: 'DD/MM/YY', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, null);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `undefined` when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'date', type: 'date', dateFormat: 'DD/MM/YY', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, void 0);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n\n  describe('correctFormat', () => {\n    it('should not make any changes to entered string if correctFormat is not set', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'date', type: 'date', dateFormat: 'MM/DD/YY' },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '11/23/2013');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '11/23/2013', 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not make any changes to entered string if correctFormat is set to false', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'date', type: 'date', dateFormat: 'MM/DD/YY', correctFormat: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '11/23/2013');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '11/23/2013', 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should rewrite the string to the correct format if a date-string in different format is provided', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'date', type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '1/10/15');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '1/10/15', 1, 'date', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('01/10/2015');\n        done();\n      }, 130);\n    });\n\n    it('should rewrite the string to the correct format if a date-string in different format is provided (for non-default format)', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'date', type: 'date', dateFormat: 'DD.MM.YYYY', correctFormat: true },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '5.3.2016');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '5.3.2016', 1, 'date', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('05.03.2016');\n        done();\n      }, 130);\n    });\n\n    it('should not try to correct format of non-date strings', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'date', type: 'date', dateFormat: 'DD/MM/YY', correctFormat: true },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, 'test non-date string');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, 'test non-date string', 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/validators/dateValidator.spec.js","describe('validators', () => {\n  const id = 'testContainer';\n  const {\n    registerValidator,\n    getValidator,\n  } = Handsontable.validators;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should register custom validator', async() => {\n    registerValidator('myValidator', (value, cb) => {\n      cb(value === 10);\n    });\n\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: [\n        [1, 6, 10],\n      ],\n      columns: [{\n        validator: 'myValidator',\n      }],\n      afterValidate: onAfterValidate\n    });\n\n    hot.setDataAtCell(1, 0, 10);\n\n    await sleep(100);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(true, 10, 1, 0, undefined, undefined);\n\n    hot.setDataAtCell(2, 0, 2);\n\n    await sleep(100);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(false, 2, 2, 0, undefined, undefined);\n  });\n\n  it('should retrieve predefined validators by its names', () => {\n    expect(getValidator('autocomplete')).toBeFunction();\n    expect(getValidator('date')).toBeFunction();\n    expect(getValidator('numeric')).toBeFunction();\n    expect(getValidator('time')).toBeFunction();\n  });\n\n  it('should retrieve custom validator by its names', () => {\n    registerValidator('myValidator', (value, cb) => {\n      cb(value === 10);\n    });\n\n    getValidator('myValidator')(2, (isValid) => {\n      expect(isValid).toBe(false);\n    });\n\n    getValidator('myValidator')('10', (isValid) => {\n      expect(isValid).toBe(false);\n    });\n\n    getValidator('myValidator')(10, (isValid) => {\n      expect(isValid).toBe(true);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/validators/index.spec.js","describe('numericValidator', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfObjects = function() {\n    return [\n      { id: 1, name: 'Ted', lastName: 'Right' },\n      { id: 2, name: 'Frank', lastName: 'Honest' },\n      { id: 3, name: 'Joan', lastName: 'Well' },\n      { id: 4, name: 'Sid', lastName: 'Strong' },\n      { id: 5, name: 'Jane', lastName: 'Neat' },\n      { id: 6, name: 'Chuck', lastName: 'Jackson' },\n      { id: 7, name: 'Meg', lastName: 'Jansen' },\n      { id: 8, name: 'Rob', lastName: 'Norris' },\n      { id: 9, name: 'Sean', lastName: 'O\\'Hara' },\n      { id: 10, name: 'Eve', lastName: 'Branson' }\n    ];\n  };\n\n  it('should validate an empty string (default behavior)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, '');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not validate non numeric string', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should validate numeric string', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, '123');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should validate signed numeric string', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, '-123');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, -123, 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should validate large-number scientific notation', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, '1e+23');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, 1e+23, 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should validate small-number scientific notation', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'id', type: 'numeric' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, '1e-23');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, 1e-23, 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  describe('allowEmpty', () => {\n    it('should not validate an empty string when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'id', type: 'numeric', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(2, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 2, 'id', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `null` when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'id', type: 'numeric', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(2, 0, null);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 2, 'id', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `undefined` when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'id', type: 'numeric', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(2, 0, void 0);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 2, 'id', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should validate 0 when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'id', type: 'numeric', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(2, 0, 0);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, 0, 2, 'id', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should add / remove `htInvalid` class properly when validating non-numeric data', (done) => {\n      const hot = handsontable({\n        data: [\n          { id: 1, name: 'Ted', salary: 10000 },\n          { id: 2, name: 'Frank', salary: '5300' },\n          { id: 3, name: 'Joan', salary: 'non-numeric value' }\n        ],\n        columns: [\n          { data: 'id' },\n          { data: 'name' },\n          { data: 'salary', type: 'numeric', allowInvalid: false }\n        ]\n      });\n\n      hot.validateCells();\n\n      setTimeout(() => {\n        expect($(getCell(1, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);\n        expect($(getCell(2, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(true);\n\n        setDataAtCell(2, 2, 8000);\n      }, 200);\n\n      setTimeout(() => {\n        expect($(getCell(2, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);\n        done();\n      }, 400);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/validators/numericValidator.spec.js","describe('timeValidator', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfObjects = function() {\n    return [\n      { time: '4:10:05 am', name: 'Ted', lastName: 'Right' },\n      { time: '17:15:25', name: 'Frank', lastName: 'Honest' },\n      { time: '14:65:45 am', name: 'Joan', lastName: 'Well' },\n      { time: '33:25:05', name: 'Sid', lastName: 'Strong' }\n    ];\n  };\n\n  it('should validate an empty string (default behavior)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'time', type: 'time' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a non-date format', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'time', type: 'time' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'nd');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'nd', 0, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a incorrect time string', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'time', type: 'time' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '30:10:25');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '30:10:25', 0, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a time string in not default format', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'time', type: 'time' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '20:20:01');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '20:20:01', 1, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a time string in wrong format (if custom format is provided)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'time', type: 'time', timeFormat: 'HH:mm:ss' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '5:10:15 am');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '5:10:15 am', 1, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should positively validate a date string in correct format (if custom format is provided)', (done) => {\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        { data: 'time', type: 'time', timeFormat: 'HH:mm:ss' },\n        { data: 'name' },\n        { data: 'lastName' }\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '16:32:03');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '16:32:03', 1, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  describe('allowEmpty', () => {\n    it('should not validate an empty string when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', dateFormat: 'HH:mm', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `null` when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', dateFormat: 'HH:mm', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, null);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `undefined` when allowEmpty is set as `false`', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', dateFormat: 'HH:mm', allowEmpty: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, void 0);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n\n  describe('correctFormat', () => {\n    it('should not make any changes to entered string if correctFormat is not set', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', timeFormat: 'h:mm:ss a' },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '13:00:00');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '13:00:00', 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not make any changes to entered string if correctFormat is set to false', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', timeFormat: 'h:mm:ss a', correctFormat: false },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '13:00:00');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '13:00:00', 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should rewrite the string to the correct format if a time-string in different format is provided', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', timeFormat: 'h:mm:ss a', correctFormat: true },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '16:35:01');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '16:35:01', 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('4:35:01 pm');\n        done();\n      }, 130);\n    });\n\n    it('should rewrite the string to the correct format if a time in micro-timestamp format is provided', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', timeFormat: 'HH:mm:ss', correctFormat: true },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      const currentDateTime = new Date();\n\n      setDataAtCell(1, 0, currentDateTime.getTime()); // timestamp in milliseconds\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, currentDateTime.getTime(), 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        const addLeadingZero = function(number) {\n          return number < 10 ? `0${number}` : number;\n        };\n        expect(getDataAtCell(1, 0)).toEqual(`${addLeadingZero(currentDateTime.getHours())}:${addLeadingZero(currentDateTime.getMinutes())}:${\n          addLeadingZero(currentDateTime.getSeconds())}`);\n        done();\n      }, 130);\n    });\n\n    it('should rewrite the string to the correct format if a time in ISO8601 format is provided', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', timeFormat: 'HH:mm:ss', correctFormat: true },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      const currentDateTime = new Date();\n\n      setDataAtCell(1, 0, currentDateTime.toISOString()); // ISO-formatted datetime, sth like '2016-02-19T12:40:04.983Z'\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, currentDateTime.toISOString(), 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        const addLeadingZero = function(number) {\n          return number < 10 ? `0${number}` : number;\n        };\n\n        expect(getDataAtCell(1, 0)).toEqual(`${addLeadingZero(currentDateTime.getHours())}:${addLeadingZero(currentDateTime.getMinutes())}:${\n          addLeadingZero(currentDateTime.getSeconds())}`);\n        done();\n      }, 130);\n    });\n\n    it('should rewrite one and two-digit number to the correct format at hours', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', timeFormat: 'hh:mm:ss a', correctFormat: true },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '19');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '19', 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('07:00:00 pm');\n        done();\n      }, 130);\n    });\n\n    it('should rewrite one and two-digit number to the correct format at minutes', async() => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', timeFormat: 'mm:ss', correctFormat: true },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '57');\n      await sleep(100);\n\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '57', 1, 'time', undefined, undefined);\n\n      await sleep(100);\n\n      expect(getDataAtCell(1, 0)).toEqual('57:00');\n    });\n\n    it('should not try to correct format of non-date strings', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          { data: 'time', type: 'time', timeFormat: 'HH:mm:ss', correctFormat: true },\n          { data: 'name' },\n          { data: 'lastName' }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, 'test non-time string');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, 'test non-time string', 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/validators/timeValidator.spec.js","var map = {\n\t\"./autoColumnSize/test/autoColumnSize.e2e.js\": 406,\n\t\"./autoRowSize/test/autoRowSize.e2e.js\": 407,\n\t\"./autofill/test/autofill.e2e.js\": 408,\n\t\"./columnSorting/test/columnSorting.e2e.js\": 409,\n\t\"./comments/test/comments.e2e.js\": 410,\n\t\"./contextMenu/test/contextMenu.e2e.js\": 411,\n\t\"./contextMenu/test/predefinedItems/alignment.e2e.js\": 412,\n\t\"./contextMenu/test/predefinedItems/readOnly.e2e.js\": 413,\n\t\"./contextMenu/test/predefinedItems/removeColumn.e2e.js\": 414,\n\t\"./contextMenu/test/predefinedItems/removeRow.e2e.js\": 415,\n\t\"./copyPaste/test/copyPaste.e2e.js\": 416,\n\t\"./customBorders/test/customBorders.e2e.js\": 417,\n\t\"./dragToScroll/test/dragToScroll.e2e.js\": 418,\n\t\"./manualColumnFreeze/test/manualColumnFreeze.e2e.js\": 419,\n\t\"./manualColumnMove/test/manualColumnMove.e2e.js\": 420,\n\t\"./manualColumnMove/test/manualColumnMoveUI.e2e.js\": 421,\n\t\"./manualColumnResize/test/manualColumnResize.e2e.js\": 422,\n\t\"./manualRowMove/test/manualRowMove.e2e.js\": 423,\n\t\"./manualRowMove/test/manualRowMoveUI.e2e.js\": 424,\n\t\"./manualRowResize/test/manualRowResize.e2e.js\": 425,\n\t\"./mergeCells/test/mergeCells.e2e.js\": 426,\n\t\"./mergeCells/test/selection.e2e.js\": 427,\n\t\"./observeChanges/test/observeChanges.e2e.js\": 428,\n\t\"./persistentState/test/persistentState.e2e.js\": 429,\n\t\"./search/test/search.e2e.js\": 430,\n\t\"./undoRedo/test/UndoRedo.e2e.js\": 431\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 405;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/plugins \\.e2e\\.js$\n// module id = 405\n// module chunks = 0","describe('AutoColumnSize', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfObjects = function() {\n    return [\n      { id: 'Short', name: 'Somewhat long', lastName: 'The very very very longest one', nestedData: [{ id: 1000 }] }\n    ];\n  };\n\n  it('should apply auto size by default', () => {\n    handsontable({\n      data: arrayOfObjects()\n    });\n\n    const width0 = colWidth(spec().$container, 0);\n    const width1 = colWidth(spec().$container, 1);\n    const width2 = colWidth(spec().$container, 2);\n\n    expect(width0).toBeLessThan(width1);\n    expect(width1).toBeLessThan(width2);\n  });\n\n  it('should update column width after update value in cell (array of objects)', async() => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n        { data: 'lastName' },\n      ]\n    });\n\n    expect(colWidth(spec().$container, 0)).toBeAroundValue(50, 3);\n    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));\n    expect([216, 229, 247, 260, 261]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 2)]));\n\n    setDataAtRowProp(0, 'id', 'foo bar foo bar foo bar');\n    setDataAtRowProp(0, 'name', 'foo');\n\n    await sleep(50);\n\n    expect([165, 168, 169, 189, 191]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n    expect(colWidth(spec().$container, 1)).toBeAroundValue(50, 3);\n    expect([216, 229, 247, 260, 261]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 2)]));\n  });\n\n  it('should correctly detect column widths with colHeaders', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: ['Identifier Longer text'],\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n      ]\n    });\n\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n  });\n\n  it('should correctly detect column widths after update colHeaders when headers were passed as an array', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: true,\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n      ]\n    });\n\n    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n\n    updateSettings({ colHeaders: ['Identifier Longer text', 'Identifier Longer and longer text'] });\n\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n    expect([226, 235, 263, 270]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));\n  });\n\n  it('should correctly detect column widths after update colHeaders when headers were passed as a string', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: true,\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n      ]\n    });\n\n    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n\n    updateSettings({ colHeaders: 'Identifier Longer text' });\n\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));\n  });\n\n  it('should correctly detect column widths after update colHeaders when headers were passed as a function', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: true,\n      columns: [\n        { data: 'id' },\n        { data: 'name' },\n      ]\n    });\n\n    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n\n    updateSettings({\n      colHeaders(index) {\n        return index === 0 ? 'Identifier Longer text' : 'Identifier Longer and longer text';\n      },\n    });\n\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n    expect([226, 235, 263, 270]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));\n  });\n\n  it('should correctly detect column width with colHeaders and the useHeaders option set to false (not taking the header widths into calculation)', () => {\n    handsontable({\n      data: [\n        { id: 'ab' }\n      ],\n      autoColumnSize: {\n        useHeaders: false\n      },\n      colHeaders: ['Identifier'],\n      columns: [\n        { data: 'id' }\n      ]\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(50);\n  });\n\n  it('should correctly detect column width with columns.title', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        { data: 'id', title: 'Identifier' }\n      ]\n    });\n\n    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n  });\n\n  it('should correctly detect column widths after update columns.title', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        { data: 'id', title: 'Identifier' }\n      ]\n    });\n\n    updateSettings({\n      columns: [\n        { data: 'id', title: 'Identifier with longer text' },\n      ],\n    });\n\n    expect([174, 182, 183, 208, 213]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n  });\n\n  // https://github.com/handsontable/handsontable/issues/2684\n  it('should correctly detect column width when table is hidden on init (display: none)', async() => {\n    spec().$container.css('display', 'none');\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: ['Identifier', 'First Name']\n    });\n\n    await sleep(200);\n\n    spec().$container.css('display', 'block');\n    hot.render();\n\n    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n  });\n\n  it('should not wrap the cell values when the whole column has values with the same length', () => {\n    handsontable({\n      data: [\n        {\n          units: 'EUR / USD'\n        },\n        {\n          units: 'JPY / USD'\n        },\n        {\n          units: 'GBP / USD'\n        },\n        {\n          units: 'MXN / USD'\n        },\n        {\n          units: 'ARS / USD'\n        }\n      ],\n      autoColumnSize: {\n        samplingRatio: 5,\n      },\n      columns: [\n        { data: 'units' },\n      ]\n    });\n\n    expect([93]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n    expect(rowHeight(spec().$container, 0)).toBe(24);\n    expect(rowHeight(spec().$container, 1)).toBe(23);\n    expect(rowHeight(spec().$container, 2)).toBe(23);\n    expect(rowHeight(spec().$container, 3)).toBe(23);\n    expect(rowHeight(spec().$container, 4)).toBe(23);\n  });\n\n  it('should keep last columns width unchanged if all rows was removed', async() => {\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        { data: 'id', title: 'Identifier' },\n        { data: 'name', title: 'Name' },\n        { data: 'lastName', title: 'Last Name' },\n      ]\n    });\n\n    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));\n    expect([216, 229, 247, 260, 261]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 2)]));\n\n    hot.alter('remove_row', 0);\n    await sleep(50);\n\n    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));\n    expect([216, 229, 247, 260, 261]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 2)]));\n  });\n\n  it('should be possible to disable plugin using updateSettings', () => {\n    handsontable({\n      data: arrayOfObjects()\n    });\n\n    let width0 = colWidth(spec().$container, 0);\n    let width1 = colWidth(spec().$container, 1);\n    let width2 = colWidth(spec().$container, 2);\n\n    expect(width0).toBeLessThan(width1);\n    expect(width1).toBeLessThan(width2);\n\n    updateSettings({\n      autoColumnSize: false\n    });\n\n    width0 = colWidth(spec().$container, 0);\n    width1 = colWidth(spec().$container, 1);\n    width2 = colWidth(spec().$container, 2);\n\n    expect(width0).toEqual(width1);\n    expect(width0).toEqual(width2);\n    expect(width1).toEqual(width2);\n  });\n\n  it('should apply disabling/enabling plugin using updateSettings, only to a particular HOT instance', () => {\n    spec().$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n\n    handsontable({\n      data: arrayOfObjects()\n    });\n\n    spec().$container2.handsontable({\n      data: arrayOfObjects()\n    });\n\n    const widths = {\n      1: [],\n      2: []\n    };\n\n    widths[1][0] = colWidth(spec().$container, 0);\n    widths[1][1] = colWidth(spec().$container, 1);\n    widths[1][2] = colWidth(spec().$container, 2);\n\n    widths[2][0] = colWidth(spec().$container2, 0);\n    widths[2][1] = colWidth(spec().$container2, 1);\n    widths[2][2] = colWidth(spec().$container2, 2);\n\n    expect(widths[1][0]).toBeLessThan(widths[1][1]);\n    expect(widths[1][1]).toBeLessThan(widths[1][2]);\n\n    expect(widths[2][0]).toBeLessThan(widths[2][1]);\n    expect(widths[2][1]).toBeLessThan(widths[2][2]);\n\n    updateSettings({\n      autoColumnSize: false\n    });\n\n    widths[1][0] = colWidth(spec().$container, 0);\n    widths[1][1] = colWidth(spec().$container, 1);\n    widths[1][2] = colWidth(spec().$container, 2);\n\n    widths[2][0] = colWidth(spec().$container2, 0);\n    widths[2][1] = colWidth(spec().$container2, 1);\n    widths[2][2] = colWidth(spec().$container2, 2);\n\n    expect(widths[1][0]).toEqual(widths[1][1]);\n    expect(widths[1][0]).toEqual(widths[1][2]);\n    expect(widths[1][1]).toEqual(widths[1][2]);\n\n    expect(widths[2][0]).toBeLessThan(widths[2][1]);\n    expect(widths[2][1]).toBeLessThan(widths[2][2]);\n\n    spec().$container2.handsontable('destroy');\n    spec().$container2.remove();\n  });\n\n  it('should be possible to enable plugin using updateSettings', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: false\n    });\n\n    let width0 = colWidth(spec().$container, 0);\n    let width1 = colWidth(spec().$container, 1);\n    let width2 = colWidth(spec().$container, 2);\n\n    expect(width0).toEqual(width1);\n    expect(width0).toEqual(width2);\n    expect(width1).toEqual(width2);\n\n    updateSettings({\n      autoColumnSize: true\n    });\n\n    width0 = colWidth(spec().$container, 0);\n    width1 = colWidth(spec().$container, 1);\n    width2 = colWidth(spec().$container, 2);\n\n    expect(width0).toBeLessThan(width1);\n    expect(width1).toBeLessThan(width2);\n  });\n\n  it('should consider CSS style of each instance separately', () => {\n    const $style = $('<style>.big .htCore td {font-size: 40px; line-height: 1.1;}</style>').appendTo('head');\n    const $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable({\n      data: arrayOfObjects()\n    });\n    const $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable({\n      data: arrayOfObjects()\n    });\n    const hot1 = $container1.handsontable('getInstance');\n    const hot2 = $container2.handsontable('getInstance');\n\n    expect(colWidth($container1, 0)).toEqual(colWidth($container2, 0));\n\n    $container1.addClass('big');\n    hot1.render();\n    hot2.render();\n    expect(colWidth($container1, 0)).toBeGreaterThan(colWidth($container2, 0));\n\n    $container1.removeClass('big').handsontable('render');\n    $container2.addClass('big').handsontable('render');\n    expect(colWidth($container1, 0)).toBeLessThan(colWidth($container2, 0));\n\n    $style.remove();\n    $container1.handsontable('destroy');\n    $container1.remove();\n    $container2.handsontable('destroy');\n    $container2.remove();\n  });\n\n  it('should consider CSS class of the <table> element (e.g. when used with Bootstrap)', () => {\n    const $style = $('<style>.htCore.big-table td {font-size: 32px}</style>').appendTo('head');\n\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true\n    });\n\n    const width = colWidth(spec().$container, 0);\n\n    spec().$container.find('table').addClass('big-table');\n    render();\n    expect(colWidth(spec().$container, 0)).toBeGreaterThan(width);\n\n    $style.remove();\n  });\n\n  it('should destroy temporary element', () => {\n    handsontable({\n      autoColumnSize: true\n    });\n\n    expect(document.querySelector('.htAutoSize')).toBe(null);\n  });\n\n  it('should not trigger autoColumnSize when column width is defined (through colWidths)', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colWidths: [70, 70, 70],\n      width: 500,\n      height: 100,\n      rowHeaders: true\n    });\n\n    setDataAtCell(0, 0, 'LongLongLongLong');\n\n    expect(colWidth(spec().$container, 0)).toBe(70);\n  });\n\n  it('should not trigger autoColumnSize when column width is defined (through columns.width)', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colWidth: 77,\n      columns: [\n        { width: 70 },\n        { width: 70 },\n        { width: 70 }\n      ],\n      width: 500,\n      height: 100,\n      rowHeaders: true\n    });\n\n    setDataAtCell(0, 0, 'LongLongLongLong');\n\n    expect(colWidth(spec().$container, 0)).toBe(70);\n  });\n\n  it('should consider renderer that uses conditional formatting for specific row & column index', () => {\n    const data = arrayOfObjects();\n    data.push({ id: '2', name: 'Rocket Man', lastName: 'In a tin can' });\n    handsontable({\n      data,\n      columns: [\n        { data: 'id' },\n        { data: 'name' }\n      ],\n      autoColumnSize: true,\n      renderer(instance, td, row, col, ...args) {\n        // taken from demo/renderers.html\n        Handsontable.renderers.TextRenderer.apply(this, [instance, td, row, col, ...args]);\n        if (row === 1 && col === 0) {\n          td.style.padding = '100px';\n        }\n      }\n    });\n\n    expect(colWidth(spec().$container, 0)).toBeGreaterThan(colWidth(spec().$container, 1));\n  });\n\n  it('should\\'t serialize value if it is array (nested data sources)', () => {\n    const spy = jasmine.createSpy('renderer');\n\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        { data: 'nestedData' }\n      ],\n      renderer: spy\n    });\n\n    expect(spy.calls.mostRecent().args[5]).toEqual([{ id: 1000 }]);\n  });\n\n  it('should not change width after select/click cell', async() => {\n    handsontable({\n      data: [\n        ['Canceled'],\n        ['Processing'],\n        ['Processing'],\n        ['Created'],\n        ['Processing'],\n        ['Completed']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n    });\n\n    await sleep(300);\n\n    const cloneTopHider = spec().$container.find('.ht_clone_top .wtHider');\n\n    expect(cloneTopHider.width()).toEqual(140);\n\n    selectCell(0, 0);\n\n    await sleep(300);\n\n    expect(cloneTopHider.width()).toEqual(140);\n  });\n\n  it('should not calculate any column widths, if there are no columns in the dataset', () => {\n    handsontable({\n      data: [[1, 2]],\n      colHeaders: true,\n    });\n\n    spyOn(getPlugin('autoColumnSize'), 'calculateColumnsWidth').and.callThrough();\n    const calculateColumnsWidth = getPlugin('autoColumnSize').calculateColumnsWidth;\n\n    loadData([[]]);\n\n    expect(calculateColumnsWidth).not.toHaveBeenCalled();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/autoColumnSize/test/autoColumnSize.e2e.js","describe('AutoRowSize', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function arrayOfObjects() {\n    return [\n      { id: 'Short' },\n      { id: 'Somewhat\\nlong' },\n      { id: 'The\\nvery\\nvery\\nvery\\nlongest one' }\n    ];\n  }\n  function arrayOfObjects2() {\n    return [\n      { id: 'Short', name: 'Somewhat long' },\n      { id: 'Somewhat long', name: 'The very very longest one' },\n      { id: 'The very very very longest one', name: 'Short' }\n    ];\n  }\n\n  it('should apply auto size by default', () => {\n    handsontable({\n      data: arrayOfObjects()\n    });\n\n    const height0 = rowHeight(spec().$container, 0);\n    const height1 = rowHeight(spec().$container, 1);\n    const height2 = rowHeight(spec().$container, 2);\n\n    expect(height0).toBeLessThan(height1);\n    expect(height1).toBeLessThan(height2);\n  });\n\n  it('should draw scrollbar correctly (proper height) after calculation when autoRowSize option is set (long text in row) #4000', (done) => {\n    const row = ['This is very long text which will break this cell text into two lines'];\n    const data = [];\n    const nrOfRows = 200;\n    const columnWidth = 100;\n\n    for (let i = 0; i < nrOfRows; i += 1) {\n      data.push(row);\n    }\n\n    handsontable({\n      data,\n      colWidths() {\n        return columnWidth;\n      },\n      autoRowSize: true\n    });\n\n    const oldHeight = spec().$container[0].scrollHeight;\n\n    setTimeout(() => {\n      const newHeight = spec().$container[0].scrollHeight;\n      expect(oldHeight).toBeLessThan(newHeight);\n      done();\n    }, 200);\n  });\n\n  describe('should draw scrollbar correctly (proper height) after calculation when autoRowSize option is set (`table td` element height set by CSS) #4000', () => {\n    const cellHeightInPx = 100;\n    const nrOfColumns = 200;\n    let nrOfRows = null;\n    let style;\n\n    const SYNC_CALCULATION_LIMIT = Handsontable.plugins.AutoRowSize.SYNC_CALCULATION_LIMIT;\n    const CALCULATION_STEP = Handsontable.plugins.AutoRowSize.CALCULATION_STEP;\n\n    beforeEach(function() {\n      if (!this.$container) {\n        this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n      }\n\n      const css = `.handsontable table td { height: ${cellHeightInPx}px !important }`;\n      const head = document.head;\n\n      style = document.createElement('style');\n      style.type = 'text/css';\n\n      if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n      } else {\n        style.appendChild(document.createTextNode(css));\n      }\n\n      $(head).append(style);\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n\n      if (style) {\n        $(style).remove();\n      }\n    });\n\n    it('(SYNC_CALCULATION_LIMIT - 1 rows)', (done) => {\n      nrOfRows = SYNC_CALCULATION_LIMIT - 1;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),\n        autoRowSize: true\n      });\n\n      setTimeout(() => {\n        const newHeight = spec().$container[0].scrollHeight;\n\n        expect(newHeight).toEqual((((cellHeightInPx + 1) * nrOfRows) + 1));\n        done();\n      }, 200);\n    });\n\n    it('(SYNC_CALCULATION_LIMIT + 1 rows)', (done) => {\n      nrOfRows = SYNC_CALCULATION_LIMIT + 1;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),\n        autoRowSize: true\n      });\n\n      setTimeout(() => {\n        const newHeight = spec().$container[0].scrollHeight;\n\n        expect(newHeight).toEqual((((cellHeightInPx + 1) * nrOfRows) + 1));\n        done();\n      }, 200);\n    });\n\n    it('(SYNC_CALCULATION_LIMIT + CALCULATION_STEP - 1 rows)', (done) => {\n\n      nrOfRows = SYNC_CALCULATION_LIMIT + CALCULATION_STEP - 1;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),\n        autoRowSize: true\n      });\n\n      setTimeout(() => {\n        const newHeight = spec().$container[0].scrollHeight;\n\n        expect(newHeight).toEqual((((cellHeightInPx + 1) * nrOfRows) + 1));\n        done();\n      }, 200);\n    });\n\n    it('(SYNC_CALCULATION_LIMIT + CALCULATION_STEP + 1 rows)', (done) => {\n\n      nrOfRows = SYNC_CALCULATION_LIMIT + CALCULATION_STEP + 1;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),\n        autoRowSize: true\n      });\n\n      setTimeout(() => {\n        const newHeight = spec().$container[0].scrollHeight;\n\n        expect(newHeight).toEqual((((cellHeightInPx + 1) * nrOfRows) + 1));\n        done();\n      }, 200);\n    });\n  });\n\n  it('should correctly detect row height when table is hidden on init (display: none)', async() => {\n    spec().$container.css('display', 'none');\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      rowHeaders: true,\n      autoRowSize: true\n    });\n\n    await sleep(200);\n    spec().$container.css('display', 'block');\n    hot.render();\n\n    expect(rowHeight(spec().$container, 0)).toBe(24);\n    expect(rowHeight(spec().$container, 1)).toBe(43);\n    expect([106, 127]).toEqual(jasmine.arrayContaining([rowHeight(spec().$container, 2)]));\n  });\n\n  it('should be possible to disable plugin using updateSettings', () => {\n    const hot = handsontable({\n      data: arrayOfObjects()\n    });\n\n    const height0 = rowHeight(spec().$container, 0);\n    const height1 = rowHeight(spec().$container, 1);\n    const height2 = rowHeight(spec().$container, 2);\n\n    expect(height0).toBeLessThan(height1);\n    expect(height1).toBeLessThan(height2);\n\n    updateSettings({\n      autoRowSize: false\n    });\n    hot.setDataAtCell(0, 0, 'A\\nB\\nC');\n\n    const height4 = rowHeight(spec().$container, 0);\n\n    expect(height4).toBeGreaterThan(height0);\n  });\n\n  it('should be possible to enable plugin using updateSettings', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: false\n    });\n\n    let height0 = parseInt(getCell(0, 0).style.height, 10);\n    let height1 = parseInt(getCell(1, 0).style.height, 10);\n    let height2 = parseInt(getCell(2, 0).style.height, 10);\n\n    expect(height0).toEqual(height1);\n    expect(height0).toEqual(height2);\n    expect(height1).toEqual(height2);\n\n    updateSettings({\n      autoRowSize: true\n    });\n\n    height0 = parseInt(getCell(0, 0).style.height, 10);\n    height1 = parseInt(getCell(1, 0).style.height, 10);\n    height2 = parseInt(getCell(2, 0).style.height, 10);\n\n    expect(height0).toBeLessThan(height1);\n    expect(height1).toBeLessThan(height2);\n  });\n\n  it('should consider CSS style of each instance separately', () => {\n    const $style = $('<style>.big .htCore td {font-size: 40px;line-height: 1.1}</style>').appendTo('head');\n    const $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true\n    });\n    const $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true\n    });\n    const hot1 = $container1.handsontable('getInstance');\n    const hot2 = $container2.handsontable('getInstance');\n\n    expect(parseInt(hot1.getCell(0, 0).style.height, 10)).toEqual(parseInt(hot2.getCell(0, 0).style.height, 10));\n\n    $container1.addClass('big');\n    hot1.render();\n    hot2.render();\n\n    expect(parseInt(hot1.getCell(2, 0).style.height, 10)).toBeGreaterThan(parseInt(hot2.getCell(2, 0).style.height, 10));\n\n    $container1.removeClass('big');\n    hot1.render();\n    $container2.addClass('big');\n    hot2.render();\n\n    expect(parseInt(hot1.getCell(2, 0).style.height, 10)).toBeLessThan(parseInt(hot2.getCell(2, 0).style.height, 10));\n\n    $style.remove();\n    $container1.handsontable('destroy');\n    $container1.remove();\n    $container2.handsontable('destroy');\n    $container2.remove();\n  });\n\n  it('should consider CSS class of the <table> element (e.g. when used with Bootstrap)', () => {\n    const $style = $('<style>.htCore.big-table td {font-size: 32px;line-height: 1.1}</style>').appendTo('head');\n\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true\n    });\n    const height = parseInt(hot.getCell(2, 0).style.height, 10);\n\n    spec().$container.find('table').addClass('big-table');\n    hot.getPlugin('autoRowSize').clearCache();\n    render();\n    expect(parseInt(hot.getCell(2, 0).style.height, 10)).toBeGreaterThan(height);\n\n    $style.remove();\n  });\n\n  it('should not trigger autoColumnSize when column width is defined (through colWidths)', () => {\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true,\n      rowHeights: [70, 70, 70],\n      width: 500,\n      height: 100,\n      rowHeaders: true\n    });\n\n    setDataAtCell(0, 0, 'LongLongLongLong');\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(69); // -1px of cell border\n  });\n\n  // Currently columns.height is not supported\n  xit('should not trigger autoRowSize when column height is defined (through columns.height)', () => {\n    const hot = handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true,\n      rowHeights: 77,\n      columns: [\n        { height: 70 },\n        { height: 70 },\n        { height: 70 }\n      ],\n      width: 500,\n      height: 100,\n      rowHeaders: true\n    });\n\n    setDataAtCell(0, 0, 'LongLongLongLong');\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(69); // -1px of cell border\n  });\n\n  it('should consider renderer that uses conditional formatting for specific row & column index', () => {\n    const data = arrayOfObjects();\n    data.push({ id: '2', name: 'Rocket Man', lastName: 'In a tin can' });\n\n    const hot = handsontable({\n      data,\n      columns: [\n        { data: 'id' },\n        { data: 'name' }\n      ],\n      autoRowSize: true,\n      renderer(instance, td, row, col, ...args) {\n        // taken from demo/renderers.html\n        Handsontable.renderers.TextRenderer.apply(this, [instance, td, row, col, ...args]);\n\n        if (row === 1 && col === 0) {\n          td.style.padding = '100px';\n        }\n      }\n    });\n\n    expect(parseInt(hot.getCell(1, 0).style.height || 0, 10)).toBe(242);\n  });\n\n  it('should destroy temporary element', () => {\n    handsontable({\n      autoRowSize: true\n    });\n\n    expect(document.querySelector('.htAutoSize')).toBe(null);\n  });\n\n  it('should recalculate heights after column resize', function() {\n    const hot = handsontable({\n      data: arrayOfObjects2(),\n      colWidths: 250,\n      manualColumnResize: true,\n      autoRowSize: true,\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22); // -1px of cell border\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n\n    resizeColumn.call(this, 1, 100);\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);\n    expect([63, 84]).toEqual(jasmine.arrayContaining([parseInt(hot.getCell(2, -1).style.height, 10)]));\n\n    resizeColumn.call(this, 1, 50);\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(126);\n\n    resizeColumn.call(this, 1, 200);\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(42);\n  });\n\n  it('should recalculate heights after column moved', () => {\n    const hot = handsontable({\n      data: arrayOfObjects2(),\n      colWidths: [250, 50],\n      manualColumnMove: true,\n      autoRowSize: true,\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    const plugin = hot.getPlugin('manualColumnMove');\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(42); // -1px of cell border\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(105); // -1px of cell border\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n\n    plugin.moveColumn(0, 2);\n    hot.render();\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(126);\n  });\n\n  it('should recalculate heights with manualRowResize when changing text to multiline', () => {\n    const hot = handsontable({\n      data: arrayOfObjects2(),\n      colWidths: 250,\n      manualRowResize: [23, 50],\n      autoRowSize: true,\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(49); // -1px of cell border\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n\n    hot.setDataAtCell(1, 0, 'A\\nB\\nC\\nD\\nE');\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(105);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]);\n  });\n\n  it('should recalculate heights after moved row', () => {\n    const hot = handsontable({\n      data: arrayOfObjects2(),\n      colWidths: 250,\n      manualRowResize: [23, 50],\n      manualRowMove: true,\n      autoRowSize: true,\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(49); // -1px of cell border\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n\n    const plugin = hot.getPlugin('manualRowMove');\n    plugin.moveRow(1, 0);\n    hot.render();\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(49);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n  });\n\n  it('should resize the column headers properly, according the their content sizes', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(30, 30),\n      colHeaders(index) {\n        if (index === 22) {\n          return 'a<br>much<br>longer<br>label';\n        }\n        return 'test';\n      },\n      autoRowSize: true,\n      rowHeaders: true,\n      width: 300,\n      height: 300\n    });\n\n    expect(rowHeight(spec().$container, -1)).toBe(75);\n  });\n\n  it('should properly count height', async() => {\n    handsontable({\n      data: [['Tomek', 'Tomek\\nTomek', 'Romek\\nRomek']],\n      rowHeaders: true,\n      colHeaders: true,\n      autoRowSize: true,\n    });\n\n    await sleep(300);\n\n    const cloneLeft = spec().$container.find('.handsontable.ht_clone_left .wtHider');\n\n    expect(cloneLeft.height()).toEqual(70);\n  });\n\n  it('should not calculate any row heights, if there are no rows in the dataset', () => {\n    handsontable({\n      data: [[1, 2]],\n      colHeaders: true,\n      autoRowSize: true,\n    });\n\n    spyOn(getPlugin('autoRowSize'), 'calculateRowsHeight').and.callThrough();\n    const calculateColumnsWidth = getPlugin('autoRowSize').calculateRowsHeight;\n\n    loadData([]);\n\n    expect(calculateColumnsWidth).not.toHaveBeenCalled();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/autoRowSize/test/autoRowSize.e2e.js","describe('AutoFill', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should appear when fillHandle equals true', () => {\n    handsontable({\n      fillHandle: true\n    });\n\n    selectCell(2, 2);\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should appear when fillHandle is enabled as `string` value', () => {\n    handsontable({\n      fillHandle: 'horizontal'\n    });\n\n    selectCell(2, 2);\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should render selection borders with set proper z-indexes', () => {\n    const hot = handsontable({\n      width: 200,\n      height: 200,\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    hot.selectCell(1, 1, 2, 2);\n\n    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .current')).zIndex).toBe('10');\n    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .area')).zIndex).toBe('8');\n    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .fill')).zIndex).toBe('6');\n  });\n\n  it('should not change cell value (drag vertically when fillHandle option is set to `horizontal`)', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: 'horizontal'\n    });\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(1, 0)).toEqual(7);\n  });\n\n  it('should not change cell value (drag horizontally when fillHandle option is set to `vertical`)', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: 'vertical'\n    });\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n  });\n\n  it('should work properly when fillHandle option is set to object with property `direction` set to `vertical`)', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'vertical'\n      }\n    });\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(1, 0)).toEqual(1);\n  });\n\n  it('should work properly when fillHandle option is set to object with property `direction` set to `horizontal`)', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'horizontal'\n      }\n    });\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(1);\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(1, 0)).toEqual(7);\n  });\n\n  it('should not change cell value (drag when fillHandle is set to `false`)', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: false\n    });\n\n    // checking drag vertically - should not change cell value\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n\n    // checking drag horizontally - should not change cell value\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n  });\n\n  it('should work properly when using updateSettings', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: 'horizontal'\n    });\n\n    updateSettings({ fillHandle: 'vertical' });\n\n    // checking drag vertically - should change cell value\n\n    selectCell(0, 0);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n\n    updateSettings({ fillHandle: false });\n\n    // checking drag vertically - should not change cell value\n\n    selectCell(0, 1);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(1) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(1, 1)).toEqual(8);\n\n    // checking drag horizontally - should not change cell value\n\n    selectCell(0, 1);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tbody tr:eq(0) td:eq(2)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 2)).toEqual(3);\n  });\n\n  it('should appear when fillHandle is enabled as `object` value', () => {\n    handsontable({\n      fillHandle: {\n        allowInsertRow: true\n      }\n    });\n\n    selectCell(2, 2);\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should not appear when fillHandle equals false', () => {\n    handsontable({\n      fillHandle: false\n    });\n    selectCell(2, 2);\n\n    expect(isFillHandleVisible()).toBe(false);\n  });\n\n  it('should disappear when beginediting is triggered', () => {\n    handsontable({\n      fillHandle: true\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(isFillHandleVisible()).toBe(false);\n  });\n\n  it('should appear when finishediting is triggered', () => {\n    handsontable({\n      fillHandle: true\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyDown('enter');\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should not appear when fillHandle equals false and finishediting is triggered', () => {\n    handsontable({\n      fillHandle: false\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyDown('enter');\n\n    expect(isFillHandleVisible()).toBe(false);\n  });\n\n  it('should appear when editor is discarded using the ESC key', () => {\n    handsontable({\n      fillHandle: true\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyDown('esc');\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should add custom value after autofill', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      beforeAutofill(start, end, data) {\n        data[0][0] = 'test';\n      }\n    });\n    selectCell(0, 0);\n\n    spec().$container.find('.wtBorder.corner').simulate('mousedown');\n    spec().$container.find('tr:eq(1) td:eq(0)').simulate('mouseover');\n    spec().$container.find('tr:eq(2) td:eq(0)').simulate('mouseover');\n    spec().$container.find('.wtBorder.corner').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[0, 0, 2, 0]]);\n    expect(getDataAtCell(1, 0)).toEqual('test');\n  });\n\n  it('should use correct cell coordinates also when Handsontable is used inside a TABLE (#355)', () => {\n    const $table = $('<table><tr><td></td></tr></table>').appendTo('body');\n    spec().$container.appendTo($table.find('td'));\n\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      beforeAutofill(start, end, data) {\n        data[0][0] = 'test';\n      }\n    });\n    selectCell(1, 1);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:eq(1) td:eq(0)').simulate('mouseover');\n    spec().$container.find('tr:eq(2) td:eq(0)').simulate('mouseover');\n    spec().$container.find('tr:eq(2) td:eq(0)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([[1, 1, 2, 1]]);\n    expect(getDataAtCell(2, 1)).toEqual('test');\n\n    document.body.removeChild($table[0]);\n  });\n\n  it('should fill cells below until the end of content in the neighbouring column with current cell\\'s data', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, null, null, null, null],\n        [1, 2, null, null, null, null]\n      ]\n    });\n\n    selectCell(1, 3);\n    const fillHandle = spec().$container.find('.wtBorder.current.corner')[0];\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(2, 3)).toEqual(null);\n    expect(getDataAtCell(3, 3)).toEqual(null);\n\n    selectCell(1, 2);\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(2, 2)).toEqual(3);\n    expect(getDataAtCell(3, 2)).toEqual(3);\n  });\n\n  it('should fill cells below until the end of content in the neighbouring column with the currently selected area\\'s data', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, null, null, null, null],\n        [1, 2, null, null, null, null]\n      ]\n    });\n\n    selectCell(1, 3, 1, 4);\n    const fillHandle = spec().$container.find('.wtBorder.area.corner')[0];\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(2, 3)).toEqual(null);\n    expect(getDataAtCell(3, 3)).toEqual(null);\n    expect(getDataAtCell(2, 4)).toEqual(null);\n    expect(getDataAtCell(3, 4)).toEqual(null);\n\n    selectCell(1, 2, 1, 3);\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(2, 2)).toEqual(3);\n    expect(getDataAtCell(3, 2)).toEqual(3);\n    expect(getDataAtCell(2, 3)).toEqual(4);\n    expect(getDataAtCell(3, 3)).toEqual(4);\n  });\n\n  it('shouldn\\'t fill cells left #5023', () => {\n    handsontable({\n      data: [\n        ['1', '2', '', '3', '4'],\n        ['1', '', '', '', ''],\n        ['1', '', '', '', ''],\n        ['', '', '', '', ''],\n        ['', '', '', '', '']\n      ]\n    });\n\n    selectCell(0, 3);\n    const fillHandle = spec().$container.find('.wtBorder.current.corner')[0];\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(0, 3)).toEqual('3');\n    expect(getDataAtCell(0, 2)).toEqual('');\n    expect(getDataAtCell(0, 1)).toEqual('2');\n    expect(getDataAtCell(0, 0)).toEqual('1');\n  });\n\n  it('should add new row after dragging the handle to the last table row', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: true\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    await sleep(300);\n    expect(hot.countRows()).toBe(5);\n\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    await sleep(300);\n    expect(hot.countRows()).toBe(6);\n  });\n\n  it('should add new row after dragging the handle to the last table row (autoInsertRow as true)', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        autoInsertRow: true,\n      }\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    await sleep(300);\n    expect(hot.countRows()).toBe(5);\n\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    await sleep(300);\n    expect(hot.countRows()).toBe(6);\n  });\n\n  it('should add new row after dragging the handle to the last table row (autoInsertRow as true, vertical)', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'vertical',\n        autoInsertRow: true,\n      }\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    await sleep(300);\n    expect(hot.countRows()).toBe(5);\n\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    await sleep(300);\n    expect(hot.countRows()).toBe(6);\n  });\n\n  it('should not add new row after dragging the handle to the last table row (autoInsertRow as true, horizontal)', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'horizontal',\n        autoInsertRow: true,\n      }\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(4);\n\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(4);\n  });\n\n  it('should not add new row after dragging the handle below the viewport when `autoInsertRow` is disabled', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        autoInsertRow: false\n      }\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    const ev = {};\n    const $lastRow = spec().$container.find('tr:last-child td:eq(2)');\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientX = $lastRow.offset().left / 2;\n    ev.clientY = $lastRow.offset().top + 50;\n\n    $(document.documentElement).simulate('mousemove', ev);\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientY = $lastRow.offset().top + 150;\n    $(document.documentElement).simulate('mousemove', ev);\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(4);\n  });\n\n  it('should not add new rows if the current number of rows reaches the maxRows setting', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        autoInsertRow: true\n      },\n      maxRows: 5\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    await sleep(200);\n\n    expect(hot.countRows()).toBe(5);\n\n    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    await sleep(200);\n\n    expect(hot.countRows()).toBe(5);\n  });\n\n  it('should add new row after dragging the handle below the viewport', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        autoInsertRow: true\n      },\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    const ev = {};\n    const $lastRow = spec().$container.find('tr:last-child td:eq(2)');\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientX = $lastRow.offset().left / 2;\n    ev.clientY = $lastRow.offset().top + 50;\n\n    $(document.documentElement).simulate('mousemove', ev);\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(5);\n\n    ev.clientY = $lastRow.offset().top + 150;\n    $(document.documentElement).simulate('mousemove', ev);\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(6);\n  });\n\n  it('should fill cells when dragging the handle to the headers', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 7, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    // col headers:\n\n    selectCell(2, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n\n    let errors = 0;\n\n    try {\n      spec().$container.find('thead tr:first-child th:eq(2)').simulate('mouseover').simulate('mouseup');\n    } catch (err) {\n      errors += 1;\n    }\n\n    expect(errors).toEqual(0);\n    expect(getDataAtCell(1, 2)).toEqual(7);\n    expect(getDataAtCell(0, 2)).toEqual(7);\n\n    expect($('.fill').filter(function() { return $(this).css('display') !== 'none'; }).length).toEqual(0); // check if fill selection is refreshed\n\n    // row headers:\n    selectCell(2, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n\n    errors = 0;\n\n    try {\n      spec().$container.find('tbody tr:nth(2) th:first-child').simulate('mouseover').simulate('mouseup');\n    } catch (err) {\n      errors += 1;\n    }\n\n    expect(errors).toEqual(0);\n    expect(getDataAtCell(2, 1)).toEqual(7);\n    expect(getDataAtCell(2, 0)).toEqual(7);\n    expect($('.fill').filter(function() { return $(this).css('display') !== 'none'; }).length).toEqual(0); // check if fill selection is refreshed\n  });\n\n  it('should not add a new row if dragging from the last row upwards or sideways', async() => {\n    const mouseOverSpy = jasmine.createSpy('mouseOverSpy');\n    const hot = handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      afterOnCellMouseOver: mouseOverSpy\n    });\n\n    selectCell(3, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:nth-child(3) td:eq(2)').simulate('mouseover');\n\n    await sleep(300);\n    expect(hot.countRows()).toBe(4);\n\n    selectCell(3, 2);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:nth-child(4) td:eq(3)').simulate('mouseover');\n\n    await sleep(200);\n\n    expect(hot.countRows()).toBe(4);\n\n    selectCell(3, 2);\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    spec().$container.find('tr:nth-child(4) td:eq(1)').simulate('mouseover');\n\n    await sleep(200);\n\n    expect(hot.countRows()).toBe(4);\n  });\n\n  it('should add new row after dragging the handle below the viewport', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        autoInsertRow: true\n      },\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    const ev = {};\n    const $lastRow = spec().$container.find('tr:last-child td:eq(2)');\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientX = $lastRow.offset().left / 2;\n    ev.clientY = $lastRow.offset().top + 50;\n\n    $(document.documentElement).simulate('mousemove', ev);\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(5);\n\n    ev.clientY = $lastRow.offset().top + 150;\n    $(document.documentElement).simulate('mousemove', ev);\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(6);\n  });\n\n  it('should not add new row after dragging the handle below the viewport (direction is set to horizontal)', async() => {\n    const hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'horizontal',\n        autoInsertRow: true\n      }\n    });\n\n    selectCell(0, 2);\n\n    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n    const ev = {};\n    const $lastRow = spec().$container.find('tr:last-child td:eq(2)');\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientX = $lastRow.offset().left / 2;\n    ev.clientY = $lastRow.offset().top + 50;\n\n    $(document.documentElement).simulate('mousemove', ev);\n\n    await sleep(300);\n\n    expect(hot.countRows()).toBe(4);\n  });\n\n  it('should populate the filled data in the correct order, when dragging the fill handle upwards', () => {\n    handsontable({\n      data: [\n        [null, null, null, null],\n        [null, null, null, null],\n        [null, null, null, null],\n        [null, null, null, null],\n        [null, 2, 3, null],\n        [null, 1, 4, null],\n        [null, 0, 5, null],\n        [null, null, null, null],\n      ]\n    });\n\n    expect(JSON.stringify(getData(0, 1, 3, 2))).toEqual(JSON.stringify([[null, null], [null, null], [null, null], [null, null]]));\n\n    selectCell(4, 1, 6, 2);\n    spec().$container.find('.wtBorder.area.corner').simulate('mousedown');\n    $(getCell(0, 2, true)).simulate('mouseover').simulate('mouseup');\n\n    expect(JSON.stringify(getData(0, 1, 3, 2))).toEqual(JSON.stringify([[0, 5], [2, 3], [1, 4], [0, 5]]));\n  });\n\n  it('should populate the filled data in the correct order, when dragging the fill handle towards left', () => {\n    handsontable({\n      data: [\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, 0, 1, 2],\n        [null, null, null, null, null, 3, 4, 5],\n        [null, null, null, null, null, null, null, null],\n      ]\n    });\n\n    expect(JSON.stringify(getData(1, 1, 2, 4))).toEqual(JSON.stringify([[null, null, null, null], [null, null, null, null]]));\n\n    selectCell(1, 5, 2, 7);\n    spec().$container.find('.wtBorder.area.corner').simulate('mousedown');\n    $(getCell(2, 1, true)).simulate('mouseover').simulate('mouseup');\n\n    expect(JSON.stringify(getData(1, 1, 2, 4))).toEqual(JSON.stringify([[2, 0, 1, 2], [5, 3, 4, 5]]));\n  });\n\n  describe('should works properly when two or more instances of Handsontable was initialized with other settings (#3257)', () => {\n    let getData;\n    let $container1;\n    let $container2;\n\n    beforeAll(() => {\n      getData = () => [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ];\n\n      $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable({\n        data: getData(),\n        fillHandle: true\n      });\n\n      $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable({\n        data: getData(),\n        fillHandle: 'horizontal'\n      });\n    });\n\n    it('checking drag vertically on 1. instance of Handsontable - should change cell value', () => {\n      $container1.handsontable('selectCell', 0, 0);\n      $container1.find('.wtBorder.current.corner').simulate('mousedown');\n      $container1.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');\n\n      expect($container1.handsontable('getDataAtCell', 1, 0)).toEqual(1);\n    });\n\n    describe('-> updating settings on 2. instance of Handsontable', () => {\n      beforeAll(() => {\n        $container2.handsontable('updateSettings', { fillHandle: 'vertical' });\n      });\n\n      it('checking drag vertically on 2. instance of Handsontable - should change cell value', () => {\n        $container2.handsontable('selectCell', 0, 2);\n        $container2.find('.wtBorder.current.corner').simulate('mousedown');\n        $container2.find('tbody tr:eq(1) td:eq(2)').simulate('mouseover').simulate('mouseup');\n\n        expect($container2.handsontable('getDataAtCell', 1, 2)).toEqual(3);\n      });\n    });\n\n    afterAll(() => {\n      // destroing containers\n\n      $container1.handsontable('destroy');\n      $container1.remove();\n\n      $container2.handsontable('destroy');\n      $container2.remove();\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/autofill/test/autofill.e2e.js","describe('ColumnSorting', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"overflow: auto; width: 300px; height: 200px;\"></div>`).appendTo('body');\n\n    this.sortByClickOnColumnHeader = (columnIndex) => {\n      const hot = this.$container.data('handsontable');\n      const $columnHeader = $(hot.view.wt.wtTable.getColumnHeader(columnIndex));\n      const $spanInsideHeader = $columnHeader.find('.columnSorting');\n\n      if ($spanInsideHeader.length === 0) {\n        throw Error('Please check the test scenario. The header doesn\\'t exist.');\n      }\n\n      $spanInsideHeader.simulate('mousedown');\n      $spanInsideHeader.simulate('mouseup');\n      $spanInsideHeader.simulate('click');\n    };\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfObjects = () => [\n    { id: 1, name: 'Ted', lastName: 'Right' },\n    { id: 2, name: 'Frank', lastName: 'Honest' },\n    { id: 3, name: 'Joan', lastName: 'Well' },\n    { id: 4, name: 'Sid', lastName: 'Strong' },\n    { id: 5, name: 'Jane', lastName: 'Neat' },\n    { id: 6, name: 'Chuck', lastName: 'Jackson' },\n    { id: 7, name: 'Meg', lastName: 'Jansen' },\n    { id: 8, name: 'Rob', lastName: 'Norris' },\n    { id: 9, name: 'Sean', lastName: 'O\\'Hara' },\n    { id: 10, name: 'Eve', lastName: 'Branson' }\n  ];\n\n  const arrayOfArrays = () => [\n    ['Mary', 'Brown', '01/14/2017', 6999.95, 'aa'],\n    ['Henry', 'Jones', '12/01/2018', 8330, 'aaa'],\n    ['Ann', 'Evans', '07/24/2021', 30500, null],\n    ['Robert', 'Evans', '07/24/2019', 12464, 'abaa'],\n    ['Ann', 'Williams', '01/14/2017', 33.9, 'aab'],\n    ['David', 'Taylor', '02/02/2020', 7000, 'bbbb'],\n    ['John', 'Brown', '07/24/2020', 2984, null],\n    ['Mary', 'Brown', '01/14/2017', 4000, ''],\n    ['Robert', 'Evans', '07/24/2020', 30500, undefined]\n  ];\n\n  it('should sort table by first visible column', () => {\n    handsontable({\n      data: [\n        [1, 9, 3, 4, 5, 6, 7, 8, 9],\n        [9, 8, 7, 6, 5, 4, 3, 2, 1],\n        [8, 7, 6, 5, 4, 3, 3, 1, 9],\n        [0, 3, 0, 5, 6, 7, 8, 9, 1]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    const htCore = getHtCore();\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(0) td:eq(3)').text()).toEqual('5');\n  });\n\n  it('should not change row indexes in the sorted table after using `disablePlugin` until next render is called', () => {\n    handsontable({\n      data: [\n        [1, 9, 3, 4, 5, 6, 7, 8, 9],\n        [9, 8, 7, 6, 5, 4, 3, 2, 1],\n        [8, 7, 6, 5, 4, 3, 3, 1, 9],\n        [0, 3, 0, 5, 6, 7, 8, 9, 1]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    const htCore = getHtCore();\n\n    spec().sortByClickOnColumnHeader(0);\n\n    getPlugin('columnSorting').disablePlugin();\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(0) td:eq(3)').text()).toEqual('5');\n\n    render();\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('9');\n    expect(htCore.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(0) td:eq(3)').text()).toEqual('4');\n  });\n\n  it('should clear the sort performed on the table by the `clearSort` method', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    getPlugin('columnSorting').clearSort();\n\n    expect(getData()).toEqual(arrayOfArrays());\n  });\n\n  it('should return sorting state with visual column index under `column` key by the `getSortConfig` method', () => {\n    const predefinedSortQueue = [{\n      column: 0,\n      sortOrder: 'asc'\n    }];\n\n    const modification = (column) => {\n      if (column === 0) {\n        return 1;\n\n      } else if (column === 1) {\n        return 0;\n      }\n\n      return column;\n    };\n\n    handsontable({\n      data: arrayOfArrays(),\n      columns: [\n        {},\n        {},\n        { type: 'date', dateFormat: 'MM/DD/YYYY' },\n        { type: 'numeric' },\n        {}\n      ],\n      columnSorting: {\n        initialConfig: predefinedSortQueue\n      }\n    });\n\n    expect(getPlugin('columnSorting').getSortConfig()).toEqual(predefinedSortQueue);\n    expect(getPlugin('columnSorting').getSortConfig(0)).toEqual({ column: 0, sortOrder: 'asc' });\n\n    // changing column sequence: 0 <-> 1\n    updateSettings({ modifyCol: modification, unmodifyCol: modification });\n\n    expect(getPlugin('columnSorting').getSortConfig()).toEqual([{\n      column: 1,\n      sortOrder: 'asc'\n    }]);\n\n    expect(getPlugin('columnSorting').getSortConfig(1)).toEqual({ column: 1, sortOrder: 'asc' });\n  });\n\n  it('should set properly sort config by the `setSortConfig` method', () => {\n    const sortQueue = [{\n      column: 0,\n      sortOrder: 'asc'\n    }];\n\n    const modification = (column) => {\n      if (column === 0) {\n        return 1;\n\n      } else if (column === 1) {\n        return 0;\n      }\n\n      return column;\n    };\n\n    handsontable({\n      data: arrayOfArrays(),\n      columns: [\n        {},\n        {},\n        { type: 'date', dateFormat: 'MM/DD/YYYY' },\n        { type: 'numeric' },\n        {}\n      ],\n      columnSorting: true\n    });\n\n    getPlugin('columnSorting').setSortConfig(sortQueue);\n\n    expect(getPlugin('columnSorting').getSortConfig()).toEqual(sortQueue);\n    expect(getPlugin('columnSorting').getSortConfig(0)).toEqual({ column: 0, sortOrder: 'asc' });\n\n    // changing column sequence: 0 <-> 1\n    updateSettings({ modifyCol: modification, unmodifyCol: modification });\n\n    expect(getPlugin('columnSorting').getSortConfig()).toEqual([{\n      column: 1,\n      sortOrder: 'asc'\n    }]);\n\n    expect(getPlugin('columnSorting').getSortConfig(1)).toEqual({ column: 1, sortOrder: 'asc' });\n  });\n\n  it('should display indicator properly after changing sorted column sequence', () => {\n    const modification = (column) => {\n      if (column === 0) {\n        return 1;\n\n      } else if (column === 1) {\n        return 0;\n      }\n\n      return column;\n    };\n\n    handsontable({\n      data: [\n        [1, 9, 3, 4, 5, 6, 7, 8, 9],\n        [9, 8, 7, 6, 5, 4, 3, 2, 1],\n        [8, 7, 6, 5, 4, 3, 3, 1, 9],\n        [0, 3, 0, 5, 6, 7, 8, 9, 1]\n      ],\n      colHeaders: true,\n      columnSorting: {\n        indicator: true\n      }\n    });\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n\n    // changing column sequence: 0 <-> 1\n    updateSettings({ modifyCol: modification, unmodifyCol: modification });\n\n    const sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n  });\n\n  it('should clear indicator after disabling plugin', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      colHeaders: true,\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        },\n        indicator: true\n      }\n    });\n\n    updateSettings({ columnSorting: false });\n\n    const sortedColumn = spec().$container.find('th span')[0];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);\n  });\n\n  it('should render a correct number of TD elements after sorting', async() => {\n    handsontable({\n      data: [\n        ['1\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'],\n        ['2']\n      ],\n      height: 100,\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    const htCore = getHtCore();\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'desc' });\n\n    await sleep(300);\n\n    expect(htCore.find('td').length).toEqual(2);\n  });\n\n  it('should apply stable sort function #3606', () => {\n    handsontable({\n      data: [\n        ['mercedes1', 'Mercedes', 'A 160', '01/14/2007'],\n        ['citroen1', 'Citroen', 'C4 Coupe', '12/01/2007'],\n        ['opel1', 'Opel', 'Astra', '02/02/2006'],\n        ['bmw1', 'BMW', '320i Coupe', '07/24/2009'],\n        ['citroen2', 'Citroen', 'C4 Coupe', '12/01/2012'],\n        ['opel2', 'Opel', 'Astra', '02/02/2004'],\n        ['mercedes2', 'Mercedes', 'A 160', '01/14/2008'],\n        ['citroen3', 'Citroen', 'C4 Coupe', '12/01/2007'],\n        ['mercedes3', 'Mercedes', 'A 160', '01/14/2009'],\n        ['opel3', 'Opel', 'Astra', '02/02/2006'],\n        ['bmw2', 'BMW', '320i Coupe', '07/24/2013'],\n        ['bmw3', 'BMW', '320i Coupe', '07/24/2012'],\n      ],\n      columns: [\n        {},\n        {},\n        {\n          type: 'date',\n          dateFormat: 'mm/dd/yy'\n        },\n        {\n          type: 'numeric'\n        }\n      ],\n      columnSorting: true\n    });\n\n    getPlugin('columnSorting').sort({ column: 1, sortOrder: 'asc' }); // ASC\n\n    expect(getDataAtCol(0)).toEqual([\n      'bmw1', 'bmw2', 'bmw3',\n      'citroen1', 'citroen2', 'citroen3',\n      'mercedes1', 'mercedes2', 'mercedes3',\n      'opel1', 'opel2', 'opel3'\n    ]);\n\n    getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' }); // DESC\n\n    expect(getDataAtCol(0)).toEqual([\n      'opel1', 'opel2', 'opel3',\n      'mercedes1', 'mercedes2', 'mercedes3',\n      'citroen1', 'citroen2', 'citroen3',\n      'bmw1', 'bmw2', 'bmw3'\n    ]);\n  });\n\n  it('should not throw an exception when clicked on the top-left corner', async() => {\n    const onErrorSpy = spyOn(window, 'onerror');\n\n    handsontable({\n      colHeaders: true,\n      rowHeaders: true,\n      data: arrayOfObjects(),\n      columnSorting: true\n    });\n\n    $('.ht_clone_top_left_corner .htCore span').simulate('mousedown');\n    $('.ht_clone_top_left_corner .htCore span').simulate('click');\n    $('.ht_clone_top_left_corner .htCore span').simulate('mouseup');\n\n    expect(onErrorSpy).not.toHaveBeenCalled();\n  });\n\n  it('should not throw error when trying run handsontable with columnSorting and autoRowSize in the same time.', () => {\n    let errors = 0;\n\n    try {\n      handsontable({\n        data: arrayOfObjects(),\n        autoRowSize: true,\n        columnSorting: true\n      });\n    } catch (e) {\n      errors += 1;\n    }\n\n    expect(errors).toBe(0);\n  });\n\n  it('should sort numbers descending after 2 clicks on table header', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(spec().$container.find('tr td').first().html()).toEqual('10');\n  });\n\n  it('should place empty strings, null and undefined values at proper position (stability of default comparing function)', () => {\n    handsontable({\n      data: [\n        [null, 'Ted Right'],\n        [undefined, 'Jane Neat'],\n        [null, 'Meg Jansen'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson'],\n        [6, 'Frank Honest'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [9, 'Chuck Jackson'],\n        [10, 'Rob Norris'],\n        [11, 'Eve Well']\n      ],\n      columnSorting: true\n    });\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' }); // ASC\n\n    expect(getDataAtCol(1)).toEqual([\n      'Frank Honest',\n      'Joan Well',\n      'Sid Strong',\n      'Chuck Jackson',\n      'Rob Norris',\n      'Eve Well',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'desc' }); // DESC\n\n    expect(getDataAtCol(1)).toEqual([\n      'Eve Well',\n      'Rob Norris',\n      'Chuck Jackson',\n      'Sid Strong',\n      'Joan Well',\n      'Frank Honest',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n  });\n\n  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` option is enabled ' +\n    '(API call, data type: default)', () => {\n    handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columnSorting: {\n        sortEmptyCells: true\n      }\n    });\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' }); // ASC\n\n    expect(getDataAtCol(1)).toEqual([\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n      // empty cells above\n      'Frank Honest',\n      'Joan Well',\n      'Sid Strong',\n      'Chuck Jackson',\n      'Rob Norris'\n    ]);\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'desc' }); // DESC\n\n    expect(getDataAtCol(1)).toEqual([\n      'Rob Norris',\n      'Chuck Jackson',\n      'Sid Strong',\n      'Joan Well',\n      'Frank Honest',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n  });\n\n  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' +\n    'option is enabled and `column` property of `columnSorting` option is set (data type: default)', () => {\n    handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columnSorting: {\n        sortEmptyCells: true,\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    // ASC\n\n    expect(getDataAtCol(1)).toEqual([\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n      // empty cells above\n      'Frank Honest',\n      'Joan Well',\n      'Sid Strong',\n      'Chuck Jackson',\n      'Rob Norris'\n    ]);\n\n    if (spec().$container) {\n      destroy();\n      spec().$container.remove();\n    }\n\n    handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columnSorting: {\n        sortEmptyCells: true,\n        initialConfig: {\n          column: 0,\n          sortOrder: 'desc'\n        }\n      }\n    });\n\n    // DESC\n\n    expect(getDataAtCol(1)).toEqual([\n      'Rob Norris',\n      'Chuck Jackson',\n      'Sid Strong',\n      'Joan Well',\n      'Frank Honest',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n  });\n\n  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' +\n    'option is enabled and `column` property of `columnSorting` option is set (data type: numeric)', () => {\n    handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columns: [\n        {\n          type: 'numeric'\n        },\n        {}\n      ],\n      columnSorting: {\n        sortEmptyCells: true,\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    // ASC\n\n    expect(getDataAtCol(1)).toEqual([\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n      // empty cells above\n      'Frank Honest',\n      'Joan Well',\n      'Sid Strong',\n      'Chuck Jackson',\n      'Rob Norris'\n    ]);\n\n    if (spec().$container) {\n      destroy();\n      spec().$container.remove();\n    }\n\n    handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columnSorting: {\n        sortEmptyCells: true,\n        initialConfig: {\n          column: 0,\n          sortOrder: 'desc'\n        }\n      }\n    });\n\n    // DESC\n\n    expect(getDataAtCol(1)).toEqual([\n      'Rob Norris',\n      'Chuck Jackson',\n      'Sid Strong',\n      'Joan Well',\n      'Frank Honest',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n  });\n\n  it('should clear and generate a new column meta cache after calling `updateSettings` with a new set of data', async() => {\n    handsontable({\n      data: [['test']],\n      columnSorting: true,\n      colHeaders: true\n    });\n\n    const plugin = getPlugin('columnSorting');\n\n    expect(plugin.columnMetaCache.size).toEqual(1);\n\n    updateSettings({\n      data: [['first columns', 'second column', 'third column']]\n    });\n\n    expect(plugin.columnMetaCache.size).toEqual(3);\n  });\n\n  describe('isSorted', () => {\n    it('should return `false` when plugin is disabled', () => {\n      handsontable();\n\n      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();\n    });\n\n    it('should return `false` when plugin has been disabled by the `disablePlugin` method', () => {\n      handsontable({\n        columnSorting: {\n          initialConfig: {\n            column: 1,\n            sortOrder: 'asc'\n          }\n        }\n      });\n\n      getPlugin('columnSorting').disablePlugin();\n\n      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();\n    });\n\n    it('should return `false` when plugin is enabled and the table was not sorted #1', () => {\n      handsontable({\n        columnSorting: true\n      });\n\n      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();\n    });\n\n    it('should return `false` when plugin is enabled and the table was not sorted #2', () => {\n      handsontable({\n        data: [\n          ['Citroen1', 'C4 Coupe', null],\n          ['Mercedes1', 'A 160', '12/01/2008'],\n          ['Mercedes2', 'A 160', '01/14/2006'],\n        ],\n        columnSorting: {\n          indicator: true\n        }\n      });\n\n      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();\n    });\n\n    it('should return `true` when plugin is enabled and the table was sorted', () => {\n      handsontable({\n        data: [\n          ['Citroen1', 'C4 Coupe', null],\n          ['Mercedes1', 'A 160', '12/01/2008'],\n          ['Mercedes2', 'A 160', '01/14/2006'],\n        ],\n        columnSorting: {\n          initialConfig: {\n            column: 1,\n            sortOrder: 'asc'\n          }\n        }\n      });\n\n      expect(getPlugin('columnSorting').isSorted()).toBeTruthy();\n    });\n\n    it('should be handled properly when using the `updateSettings`', () => {\n      handsontable({\n        data: [\n          ['Citroen1', 'C4 Coupe', null],\n          ['Mercedes1', 'A 160', '12/01/2008'],\n          ['Mercedes2', 'A 160', '01/14/2006'],\n        ],\n        columnSorting: {\n          initialConfig: {\n            column: 1,\n            sortOrder: 'asc'\n          }\n        }\n      });\n\n      updateSettings({\n        columnSorting: true\n      });\n\n      expect(getPlugin('columnSorting').isSorted()).toBeTruthy();\n\n      updateSettings({\n        columnSorting: {\n          initialConfig: {\n            column: 1,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      expect(getPlugin('columnSorting').isSorted()).toBeTruthy();\n\n      updateSettings({\n        columnSorting: false\n      });\n\n      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();\n    });\n  });\n\n  describe('data type: date', () => {\n    it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' +\n      'option is enabled and `column` property of `columnSorting` option is set', () => {\n      handsontable({\n        data: [\n          ['Citroen1', 'C4 Coupe', null],\n          ['Mercedes1', 'A 160', '12/01/2008'],\n          ['Mercedes2', 'A 160', '01/14/2006'],\n          ['Citroen2', 'C4 Coupe', undefined],\n          ['Audi1', 'A4 Avant', '11/19/2011'],\n          ['Opel1', 'Astra', '02/02/2004'],\n          ['Citroen3', 'C4 Coupe', null],\n          ['BMW1', '320i Coupe', '07/24/2011'],\n          ['Citroen4', 'C4 Coupe', ''],\n          ['Citroen5', 'C4 Coupe', ''],\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'MM/DD/YYYY'\n          }\n        ],\n        columnSorting: {\n          sortEmptyCells: true,\n          initialConfig: {\n            column: 2,\n            sortOrder: 'asc'\n          }\n        }\n      });\n\n      // ASC\n\n      expect(getDataAtCol(0)).toEqual([\n        'Citroen1',\n        'Citroen2',\n        'Citroen3',\n        'Citroen4',\n        'Citroen5',\n        // empty cells above\n        'Opel1',\n        'Mercedes2',\n        'Mercedes1',\n        'BMW1',\n        'Audi1'\n      ]);\n\n      if (spec().$container) {\n        destroy();\n        spec().$container.remove();\n      }\n\n      handsontable({\n        data: [\n          ['Citroen1', 'C4 Coupe', null],\n          ['Mercedes1', 'A 160', '12/01/2008'],\n          ['Mercedes2', 'A 160', '01/14/2006'],\n          ['Citroen2', 'C4 Coupe', undefined],\n          ['Audi1', 'A4 Avant', '11/19/2011'],\n          ['Opel1', 'Astra', '02/02/2004'],\n          ['Citroen3', 'C4 Coupe', null],\n          ['BMW1', '320i Coupe', '07/24/2011'],\n          ['Citroen4', 'C4 Coupe', ''],\n          ['Citroen5', 'C4 Coupe', ''],\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'MM/DD/YYYY'\n          }\n        ],\n        columnSorting: {\n          sortEmptyCells: true,\n          initialConfig: {\n            column: 2,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      // DESC\n\n      expect(getDataAtCol(0)).toEqual([\n        'Audi1',\n        'BMW1',\n        'Mercedes1',\n        'Mercedes2',\n        'Opel1',\n        // empty cells below\n        'Citroen1',\n        'Citroen2',\n        'Citroen3',\n        'Citroen4',\n        'Citroen5'\n      ]);\n    });\n\n    it('should sort date columns (MM/DD/YYYY)', () => {\n      handsontable({\n        data: [\n          ['Mercedes', 'A 160', '01/14/2006', 6999.9999],\n          ['Citroen', 'C4 Coupe', '12/01/2008', 8330],\n          ['Audi', 'A4 Avant', '11/19/2011', 33900],\n          ['Opel', 'Astra', '02/02/2004', 7000],\n          ['BMW', '320i Coupe', '07/24/2011', 30500]\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'MM/DD/YYYY'\n          },\n          {\n            type: 'numeric'\n          }\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      getPlugin('columnSorting').sort({ column: 2, sortOrder: 'asc' }); // ASC\n\n      expect(getDataAtRow(0)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);\n      expect(getDataAtRow(1)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);\n      expect(getDataAtRow(2)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);\n      expect(getDataAtRow(3)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);\n      expect(getDataAtRow(4)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);\n\n      getPlugin('columnSorting').sort({ column: 2, sortOrder: 'desc' }); // DESC\n\n      expect(getDataAtRow(0)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);\n      expect(getDataAtRow(1)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);\n      expect(getDataAtRow(2)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);\n      expect(getDataAtRow(3)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);\n      expect(getDataAtRow(4)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);\n    });\n\n    it('should sort date columns (DD/MM/YYYY)', () => {\n      handsontable({\n        data: [\n          ['Mercedes', 'A 160', '01/12/2012', 6999.9999],\n          ['Citroen', 'C4 Coupe', '12/01/2013', 8330],\n          ['Audi', 'A4 Avant', '11/10/2014', 33900],\n          ['Opel', 'Astra', '02/02/2015', 7000],\n          ['BMW', '320i Coupe', '07/02/2013', 30500]\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'DD/MM/YYYY'\n          },\n          {\n            type: 'numeric'\n          }\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      getPlugin('columnSorting').sort({ column: 2, sortOrder: 'asc' }); // ASC\n\n      expect(getDataAtRow(0)).toEqual(['Mercedes', 'A 160', '01/12/2012', 6999.9999]);\n      expect(getDataAtRow(1)).toEqual(['Citroen', 'C4 Coupe', '12/01/2013', 8330]);\n      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/02/2013', 30500]);\n      expect(getDataAtRow(3)).toEqual(['Audi', 'A4 Avant', '11/10/2014', 33900]);\n      expect(getDataAtRow(4)).toEqual(['Opel', 'Astra', '02/02/2015', 7000]);\n\n      getPlugin('columnSorting').sort({ column: 2, sortOrder: 'desc' }); // DESC\n\n      expect(getDataAtRow(0)).toEqual(['Opel', 'Astra', '02/02/2015', 7000]);\n      expect(getDataAtRow(1)).toEqual(['Audi', 'A4 Avant', '11/10/2014', 33900]);\n      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/02/2013', 30500]);\n      expect(getDataAtRow(3)).toEqual(['Citroen', 'C4 Coupe', '12/01/2013', 8330]);\n      expect(getDataAtRow(4)).toEqual(['Mercedes', 'A 160', '01/12/2012', 6999.9999]);\n    });\n\n    it('should sort date columns (MMMM Do YYYY)', () => {\n      handsontable({\n        data: [\n          ['Mercedes', 'A 160', 'October 28th 2016', 6999.9999],\n          ['Citroen', 'C4 Coupe', 'October 27th 2001', 8330],\n          ['Audi', 'A4 Avant', 'July 8th 1999', 33900],\n          ['Opel', 'Astra', 'June 1st 2001', 7000],\n          ['BMW', '320i Coupe', 'August 3rd 2001', 30500]\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'MMMM Do YYYY'\n          },\n          {\n            type: 'numeric'\n          }\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      getPlugin('columnSorting').sort({ column: 2, sortOrder: 'asc' }); // ASC\n\n      expect(getDataAtRow(0)).toEqual(['Audi', 'A4 Avant', 'July 8th 1999', 33900]);\n      expect(getDataAtRow(1)).toEqual(['Opel', 'Astra', 'June 1st 2001', 7000]);\n      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', 'August 3rd 2001', 30500]);\n      expect(getDataAtRow(3)).toEqual(['Citroen', 'C4 Coupe', 'October 27th 2001', 8330]);\n      expect(getDataAtRow(4)).toEqual(['Mercedes', 'A 160', 'October 28th 2016', 6999.9999]);\n\n      getPlugin('columnSorting').sort({ column: 2, sortOrder: 'desc' }); // DESC\n\n      expect(getDataAtRow(0)).toEqual(['Mercedes', 'A 160', 'October 28th 2016', 6999.9999]);\n      expect(getDataAtRow(1)).toEqual(['Citroen', 'C4 Coupe', 'October 27th 2001', 8330]);\n      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', 'August 3rd 2001', 30500]);\n      expect(getDataAtRow(3)).toEqual(['Opel', 'Astra', 'June 1st 2001', 7000]);\n      expect(getDataAtRow(4)).toEqual(['Audi', 'A4 Avant', 'July 8th 1999', 33900]);\n    });\n\n    it('should sort date columns along with empty and null values', () => {\n      handsontable({\n        data: [\n          ['Mercedes', 'A 160', '01/14/2006', 6999.9999],\n          ['Citroen', 'C4 Coupe', '12/01/2008', 8330],\n          ['Citroen', 'C4 Coupe null', null, 8330],\n          ['Citroen', 'C4 Coupe empty', '', 8330],\n          ['Audi', 'A4 Avant', '11/19/2011', 33900],\n          ['Opel', 'Astra', '02/02/2004', 7000],\n          ['BMW', '320i Coupe', '07/24/2011', 30500]\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'mm/dd/yy'\n          },\n          {\n            type: 'numeric'\n          }\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      getPlugin('columnSorting').sort({ column: 2, sortOrder: 'asc' }); // ASC\n\n      expect(getDataAtRow(0)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);\n      expect(getDataAtRow(1)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);\n      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);\n      expect(getDataAtRow(3)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);\n      expect(getDataAtRow(4)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);\n\n      getPlugin('columnSorting').sort({ column: 2, sortOrder: 'desc' }); // DESC\n\n      expect(getDataAtRow(0)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);\n      expect(getDataAtRow(1)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);\n      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);\n      expect(getDataAtRow(3)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);\n      expect(getDataAtRow(4)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);\n    });\n  });\n\n  describe('data type: time', () => {\n    it('should properly rewrite time into correct format after sort', async() => {\n      handsontable({\n        data: [\n          ['0:00:01 am'],\n          ['5:30:14 pm'],\n          ['8:00:00 pm'],\n          ['11:15:05 am'],\n          ['4:07:48 am']\n        ],\n        columns: [\n          {\n            type: 'time',\n            dateFormat: 'h:mm:ss a',\n            correctFormat: true\n          }\n        ],\n        colHeaders: true,\n        columnSorting: {\n          initialConfig: {\n            column: 0,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      await sleep(100);\n\n      setDataAtCell(0, 0, '19:55', 'edit');\n\n      await sleep(100);\n\n      expect(getDataAtCell(0, 0)).toEqual('7:55:00 pm');\n    });\n  });\n\n  it('should properly sort numeric data', () => {\n    handsontable({\n      data: [\n        ['Mercedes', 'A 160', '01/14/2006', '6999.9999'],\n        ['Citroen', 'C4 Coupe', '12/01/2008', 8330],\n        ['Citroen', 'C4 Coupe null', null, '8330'],\n        ['Citroen', 'C4 Coupe empty', '', 8333],\n        ['Audi', 'A4 Avant', '11/19/2011', '33900'],\n        ['Opel', 'Astra', '02/02/2004', '7000'],\n        ['BMW', '320i Coupe', '07/24/2011', 30500]\n      ],\n      columns: [\n        {},\n        {},\n        {},\n        {\n          type: 'numeric'\n        }\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(3);\n\n    expect(getDataAtCol(3)).toEqual(['6999.9999', '7000', 8330, '8330', 8333, 30500, '33900']);\n\n    spec().sortByClickOnColumnHeader(3);\n\n    expect(getDataAtCol(3)).toEqual(['33900', 30500, 8333, 8330, '8330', '7000', '6999.9999']);\n\n    spec().sortByClickOnColumnHeader(3);\n\n    expect(getDataAtCol(3)).toEqual(['6999.9999', 8330, '8330', 8333, '33900', '7000', 30500]);\n  });\n\n  it('should sort table with multiple row headers', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columns: [\n        {},\n        {},\n        {\n          type: 'date',\n          dateFormat: 'mm/dd/yy'\n        },\n        {\n          type: 'numeric'\n        }\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n\n    spec().sortByClickOnColumnHeader(0); // sort by first column\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');\n\n    spec().sortByClickOnColumnHeader(1); // sort by second column\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A');\n  });\n\n  it('should allow to define sorting column and order during initialization', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');\n  });\n\n  it('should allow to change sorting column with updateSettings', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');\n\n    updateSettings({\n      columnSorting: {\n        initialConfig: {\n          column: 1,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A');\n  });\n\n  it('should allow to change sort order with updateSettings', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n\n    updateSettings({\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'desc'\n        }\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n  });\n\n  it('should allow to change if sorting empty cells with updateSettings', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [2, ''],\n        [3, 'A'],\n        [4, ''],\n        [6, 'E'],\n        [7, ''],\n        [8, 'F'],\n      ],\n      colHeaders: true,\n      columnSorting: {\n        sortEmptyCells: false,\n        initialConfig: {\n          column: 1,\n          sortOrder: 'desc'\n        }\n      }\n    });\n\n    updateSettings({\n      columnSorting: {\n        sortEmptyCells: true,\n        initialConfig: {\n          column: 1,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    // ASC with empty cells sorting\n    expect(getDataAtCol(0)).toEqual([2, 4, 7, 3, 1, 6, 8]);\n\n    updateSettings({\n      columnSorting: {\n        sortEmptyCells: false,\n        initialConfig: {\n          column: 1,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    // ASC without empty cells sorting\n    expect(getDataAtCol(0)).toEqual([3, 1, 6, 8, 2, 4, 7]);\n  });\n\n  it('should NOT sort spare rows', () => {\n    const myData = [\n      { a: 'aaa', b: 2, c: 3 },\n      { a: 'z', b: 11, c: -4 },\n      { a: 'dddd', b: 13, c: 13 },\n      { a: 'bbbb', b: 10, c: 11 }\n    ];\n\n    function customIsEmptyRow(row) {\n      const data = this.getSourceData();\n      return data[row].isNew;\n    }\n\n    handsontable({\n      data: myData,\n      rowHeaders: true,\n      colHeaders: ['A', 'B', 'C'],\n      columns: [\n        { data: 'a', type: 'text' },\n        { data: 'b', type: 'text' },\n        { data: 'c', type: 'text' }\n      ],\n      dataSchema: { isNew: true, a: false }, // default for a to avoid #bad value#\n      columnSorting: true,\n      minSpareRows: 3,\n      isEmptyRow: customIsEmptyRow\n    });\n\n    // ASC\n\n    updateSettings({\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    expect(getData()).toEqual([\n      ['aaa', 2, 3],\n      ['bbbb', 10, 11],\n      ['dddd', 13, 13],\n      ['z', 11, -4],\n      [false, null, null],\n      [false, null, null],\n      [false, null, null]\n    ]);\n\n    updateSettings({\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'desc'\n        }\n      }\n    });\n\n    expect(getData()).toEqual([\n      ['z', 11, -4],\n      ['dddd', 13, 13],\n      ['bbbb', 10, 11],\n      ['aaa', 2, 3],\n      [false, null, null],\n      [false, null, null],\n      [false, null, null]\n    ]);\n  });\n\n  it('should reset column sorting with updateSettings', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        initialConfig: {\n          column: 0,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n\n    updateSettings({\n      columnSorting: void 0\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n  });\n\n  it('should sort table using plugin API method', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: true\n    });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('0');\n    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    expect(spec().$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('2');\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n\n    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(spec().$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n  });\n\n  it('should fire beforeColumnSort event before sorting data', () => {\n    handsontable({\n      data: [\n        [2],\n        [4],\n        [1],\n        [3]\n      ],\n      columnSorting: true\n    });\n\n    const beforeColumnSortHandler = jasmine.createSpy('beforeColumnSortHandler');\n\n    addHook('beforeColumnSort', beforeColumnSortHandler);\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n\n    expect(beforeColumnSortHandler.calls.count()).toEqual(1);\n    expect(beforeColumnSortHandler).toHaveBeenCalledWith([], [{\n      column: 0,\n      sortOrder: 'asc'\n    }], true, void 0, void 0, void 0);\n  });\n\n  it('should not sorting column when beforeColumnSort returns false', (done) => {\n    handsontable({\n      data: [\n        [2],\n        [4],\n        [1],\n        [3]\n      ],\n      columnSorting: true,\n      beforeColumnSort() {\n        return false;\n      }\n    });\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n\n    setTimeout(() => {\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('4');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n      done();\n    }, 200);\n  });\n\n  it('should add beforeColumnSort event listener in constructor', () => {\n    const beforeColumnSortCallback = jasmine.createSpy('beforeColumnSortHandler');\n\n    handsontable({\n      data: [[2], [4], [1], [3]],\n      columnSorting: true,\n      beforeColumnSort: beforeColumnSortCallback\n    });\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n\n    expect(beforeColumnSortCallback.calls.count()).toEqual(1);\n    expect(beforeColumnSortCallback).toHaveBeenCalledWith([], [{\n      column: 0,\n      sortOrder: 'asc'\n    }], true, void 0, void 0, void 0);\n  });\n\n  it('should fire afterColumnSort event after data has been sorted', () => {\n    handsontable({\n      data: [\n        [2],\n        [4],\n        [1],\n        [3]\n      ],\n      columnSorting: true\n    });\n\n    const afterColumnSortHandler = jasmine.createSpy('afterColumnSortHandler');\n\n    addHook('afterColumnSort', afterColumnSortHandler);\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n\n    expect(afterColumnSortHandler.calls.count()).toBe(1);\n    expect(afterColumnSortHandler).toHaveBeenCalledWith([], [{\n      column: 0,\n      sortOrder: 'asc'\n    }], true, void 0, void 0, void 0);\n  });\n\n  it('should add afterColumnSort event listener in constructor', () => {\n    const afterColumnSortCallback = jasmine.createSpy('afterColumnSortHandler');\n\n    handsontable({\n      data: [[2], [4], [1], [3]],\n      columnSorting: true,\n      afterColumnSort: afterColumnSortCallback\n    });\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n\n    expect(afterColumnSortCallback.calls.count()).toEqual(1);\n    expect(afterColumnSortCallback).toHaveBeenCalledWith([], [{\n      column: 0,\n      sortOrder: 'asc'\n    }], true, void 0, void 0, void 0);\n  });\n\n  it('should fire hooks with proper hook argument when sorting is not possible', () => {\n    const beforeColumnSortCallback = jasmine.createSpy('beforeColumnSort');\n    const afterColumnSortCallback = jasmine.createSpy('afterColumnSort');\n\n    handsontable({\n      data: [[2], [4], [1], [3]],\n      columnSorting: true,\n      beforeColumnSort: beforeColumnSortCallback,\n      afterColumnSort: afterColumnSortCallback\n    });\n\n    getPlugin('columnSorting').sort({ column: 1000, sortOrder: 'asc' });\n    expect(beforeColumnSortCallback).toHaveBeenCalledWith([], [{\n      column: 1000,\n      sortOrder: 'asc'\n    }], false, void 0, void 0, void 0);\n\n    // \"After\" hook always run! Team decision.\n\n    expect(afterColumnSortCallback).toHaveBeenCalledWith([], [], false, void 0, void 0, void 0);\n  });\n\n  it('should insert row when plugin is enabled, but table hasn\\'t been sorted', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: true\n    });\n\n    expect(countRows()).toEqual(4);\n\n    alter('insert_row');\n\n    expect(countRows()).toEqual(5);\n  });\n\n  it('should apply sorting when there are two tables and only one has sorting enabled and has been already sorted (#1020)', () => {\n    handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: {\n        initialConfig: {\n          column: 1,\n          sortOrder: 'asc'\n        }\n      }\n    });\n\n    spec().$container2 = $(`<div id='${id}-2'></div>`).appendTo('body');\n    spec().$container2.handsontable();\n\n    selectCell(0, 1);\n    keyDown('enter');\n    expect($('.handsontableInput').val()).toEqual('A');\n\n    spec().$container2.handsontable('destroy');\n    spec().$container2.remove();\n  });\n\n  it('should return updated data at specyfied row after sorted', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, 'Frank', 'Honest'],\n        [3, 'Joan', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtRow(0)).toEqual([5, 'Jane', 'Neat']);\n    expect(getDataAtRow(4)).toEqual([1, 'Ted', 'Right']);\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n  });\n\n  it('should return updated data at specyfied col after sorted', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, 'Frank', 'Honest'],\n        [3, 'Joan', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtCol(0)).toEqual([5, 4, 3, 2, 1]);\n    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Joan', 'Frank', 'Ted']);\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n  });\n\n  it('should return original data source at specified row after sorted', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, 'Frank', 'Honest'],\n        [3, 'Joan', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n\n    expect(getSourceDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getSourceDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtRow(0)).toEqual([5, 'Jane', 'Neat']);\n    expect(getDataAtRow(4)).toEqual([1, 'Ted', 'Right']);\n\n    expect(getSourceDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getSourceDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n\n  });\n\n  it('should return original data source at specified col after sorted', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, 'Frank', 'Honest'],\n        [3, 'Joan', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtCol(0)).toEqual([5, 4, 3, 2, 1]);\n    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Joan', 'Frank', 'Ted']);\n\n    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n  });\n\n  it('should ignore case when sorting', () => {\n    handsontable({\n      data: [\n        [1, 'albuquerque'],\n        [2, 'Alabama'],\n        [3, 'Missouri']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(1);\n    expect(getDataAtCol(0)).toEqual([2, 1, 3]);\n    expect(getDataAtCol(1)).toEqual(['Alabama', 'albuquerque', 'Missouri']);\n\n    spec().sortByClickOnColumnHeader(1);\n    expect(getDataAtCol(0)).toEqual([3, 1, 2]);\n    expect(getDataAtCol(1)).toEqual(['Missouri', 'albuquerque', 'Alabama']);\n\n  });\n\n  it('should push empty cells to the end of sorted column', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true,\n      minSpareRows: 1\n    });\n\n    spec().sortByClickOnColumnHeader(1);\n    expect(getDataAtCol(0)).toEqual([5, 4, 1, 2, 3, null]);\n    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Ted', '', '', null]);\n\n    spec().sortByClickOnColumnHeader(1);\n    expect(getDataAtCol(0)).toEqual([1, 4, 5, 2, 3, null]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Sid', 'Jane', '', '', null]);\n\n  });\n\n  it('should push numeric values before non-numeric values, when sorting ascending using the default sorting function', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 123],\n        [2, '', 'Some'],\n        [3, '', 321],\n        [4, 'Sid', 'String'],\n        [5, 'Jane', 46]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(2);\n    expect(getDataAtCol(2)).toEqual([46, 123, 321, 'Some', 'String']);\n\n    spec().sortByClickOnColumnHeader(2);\n    expect(getDataAtCol(2)).toEqual(['String', 'Some', 321, 123, 46]);\n\n  });\n\n  it('should add a sorting indicator to the column header after it\\'s been sorted, if indicator property is set to true (by default)', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(1);\n\n    let sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    // ---------------------------------\n    // INDICATOR SET FOR THE WHOLE TABLE\n    // ---------------------------------\n\n    updateSettings({\n      columns() {\n        return {\n          columnSorting: {\n            indicator: true\n          }\n        };\n      },\n    });\n\n    spec().sortByClickOnColumnHeader(1);\n\n    // descending (updateSettings doesn't reset sorting stack)\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    spec().sortByClickOnColumnHeader(1);\n\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);\n\n    spec().sortByClickOnColumnHeader(1);\n\n    // ascending\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    // ---------------------------------\n    // INDICATOR SET FOR A SINGLE COLUMN\n    // ---------------------------------\n\n    updateSettings({\n      columns(column) {\n        if (column === 2) {\n          return {\n            columnSorting: {\n              indicator: false\n            }\n          };\n        }\n\n        return {};\n      }\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n\n    sortedColumn = spec().$container.find('th span.columnSorting')[0];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    spec().sortByClickOnColumnHeader(1);\n\n    // descending\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    spec().sortByClickOnColumnHeader(2);\n\n    sortedColumn = spec().$container.find('th span.columnSorting')[2];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);\n  });\n\n  it('should change sorting indicator state on every plugin API method (calling for different columns)', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      columnSorting: {\n        indicator: true\n      },\n    });\n\n    getPlugin('columnSorting').sort({ column: 1, sortOrder: 'asc' });\n\n    // ascending\n    let sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    getPlugin('columnSorting').sort({ column: 2, sortOrder: 'asc' });\n\n    // ascending\n    sortedColumn = spec().$container.find('th span.columnSorting')[2];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    getPlugin('columnSorting').sort({ column: 1, sortOrder: 'asc' });\n\n    // ascending\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    getPlugin('columnSorting').sort({ column: 2, sortOrder: 'desc' });\n\n    // descending\n    sortedColumn = spec().$container.find('th span.columnSorting')[2];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    getPlugin('columnSorting').sort({ column: 2, sortOrder: 'desc' });\n\n    // descending\n    sortedColumn = spec().$container.find('th span.columnSorting')[2];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    getPlugin('columnSorting').sort({ column: 2, sortOrder: 'asc' });\n\n    // ascending\n    sortedColumn = spec().$container.find('th span.columnSorting')[2];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n  });\n\n  it('should change sorting indicator state when initial column sorting was provided', () => {\n    handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      columnSorting: {\n        indicator: true,\n        initialConfig: {\n          column: 1,\n          sortOrder: 'desc'\n        }\n      },\n    });\n\n    // descending\n    let sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    getPlugin('columnSorting').sort();\n\n    // default\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);\n\n    getPlugin('columnSorting').sort({ column: 1, sortOrder: 'asc' });\n\n    // ascending\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n\n    // descending\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);\n\n    getPlugin('columnSorting').sort();\n\n    // default\n    sortedColumn = spec().$container.find('th span.columnSorting')[1];\n    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);\n  });\n\n  it('should properly sort the table, when it\\'s scrolled to the far right', () => {\n    const data = [\n      ['Jasmine Ferguson', 'Britney Carey', 'Kelly Decker', 'Lacey Mcleod', 'Leona Shaffer', 'Kelli Ochoa',\n        'Adele Roberson', 'Viola Snow', 'Barron Cherry', 'Calhoun Lane', 'Elvia Andrews', 'Katheryn Dale', 'Dorthy Hale',\n        'Munoz Randall', 'Fields Morse', 'Hubbard Nichols', 'Chang Yang', 'Osborn Anthony', 'Owens Warner', 'Gloria Hampton'],\n      ['Lane Hill', 'Belinda Mathews', 'York Gray', 'Celina Stone', 'Victoria Mays', 'Angelina Lott', 'Joyce Mason', 'Shawn Rodriguez',\n        'Susanna Mayo', 'Wolf Fuller', 'Long Hester', 'Dudley Doyle', 'Wilder Sutton', 'Oneal Avery', 'James Mclaughlin',\n        'Lenora Guzman', 'Mcmahon Sullivan', 'Abby Weeks', 'Beverly Joseph', 'Rosalind Church'],\n      ['Myrtle Landry', 'Hays Huff', 'Hernandez Benjamin', 'Mclaughlin Garza', 'Franklin Barton', 'Lara Buchanan', 'Ratliff Beck',\n        'Rosario Munoz', 'Isabelle Dalton', 'Smith Woodard', 'Marjorie Marshall', 'Spears Stein', 'Brianna Bowman',\n        'Marci Clay', 'Palmer Harrell', 'Ball Levy', 'Shelley Mendoza', 'Morrow Glass', 'Baker Knox', 'Adrian Holman'],\n      ['Trisha Howell', 'Brooke Harrison', 'Anthony Watkins', 'Ellis Cobb', 'Sheppard Dillon', 'Mathis Bray',\n        'Foreman Burns', 'Lina Glenn', 'Giles Pollard', 'Weiss Ballard', 'Lynnette Smith', 'Flores Kline', 'Graciela Singleton',\n        'Santiago Mcclure', 'Claudette Battle', 'Nita Holloway', 'Eula Wolfe', 'Pruitt Stokes', 'Felicia Briggs', 'Melba Bradshaw']\n    ];\n\n    const hot = handsontable({\n      data,\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    hot.view.wt.wtOverlays.leftOverlay.scrollTo(15);\n    render();\n    getPlugin('columnSorting').sort({ column: 15, sortOrder: 'asc' });\n\n    expect(getDataAtCell(0, 15)).toEqual('Ball Levy');\n    expect(getDataAtCell(1, 15)).toEqual('Hubbard Nichols');\n    expect(getDataAtCell(2, 15)).toEqual('Lenora Guzman');\n    expect(getDataAtCell(3, 15)).toEqual('Nita Holloway');\n\n    getPlugin('columnSorting').sort({ column: 15, sortOrder: 'desc' });\n\n    expect(getDataAtCell(3, 15)).toEqual('Ball Levy');\n    expect(getDataAtCell(2, 15)).toEqual('Hubbard Nichols');\n    expect(getDataAtCell(1, 15)).toEqual('Lenora Guzman');\n    expect(getDataAtCell(0, 15)).toEqual('Nita Holloway');\n\n    getPlugin('columnSorting').sort();\n\n    expect(getDataAtCell(0, 15)).toEqual('Hubbard Nichols');\n    expect(getDataAtCell(1, 15)).toEqual('Lenora Guzman');\n    expect(getDataAtCell(2, 15)).toEqual('Ball Levy');\n    expect(getDataAtCell(3, 15)).toEqual('Nita Holloway');\n  });\n\n  it('should allow specifiyng a custom sorting function', () => {\n    const data = [['1 inch'], ['1 yard'], ['2 feet'], ['0.2 miles']];\n    const compareFunctionFactory = function(sortOrder) {\n      return function(value, nextValue) {\n        const unitsRatios = {\n          inch: 1,\n          yard: 36,\n          feet: 12,\n          miles: 63360\n        };\n\n        Handsontable.helper.objectEach(unitsRatios, (val, prop) => {\n          if (value.indexOf(prop) > -1) {\n            value = parseFloat(value.replace(prop, '')) * val;\n\n            return false;\n          }\n        });\n\n        Handsontable.helper.objectEach(unitsRatios, (val, prop) => {\n          if (nextValue.indexOf(prop) > -1) {\n            nextValue = parseFloat(nextValue.replace(prop, '')) * val;\n\n            return false;\n          }\n        });\n\n        if (value < nextValue) {\n          return sortOrder === 'asc' ? -1 : 1;\n\n        } else if (value > nextValue) {\n          return sortOrder === 'asc' ? 1 : -1;\n        }\n\n        return 0;\n      };\n    };\n\n    handsontable({\n      data,\n      columns: [{\n        columnSorting: {\n          compareFunctionFactory\n        }\n      }],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    expect(getDataAtCell(0, 0)).toEqual('1 inch');\n    expect(getDataAtCell(1, 0)).toEqual('1 yard');\n    expect(getDataAtCell(2, 0)).toEqual('2 feet');\n    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n\n    expect(getDataAtCell(0, 0)).toEqual('1 inch');\n    expect(getDataAtCell(1, 0)).toEqual('2 feet');\n    expect(getDataAtCell(2, 0)).toEqual('1 yard');\n    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');\n\n    getPlugin('columnSorting').sort({ column: 0, sortOrder: 'desc' });\n\n    expect(getDataAtCell(0, 0)).toEqual('0.2 miles');\n    expect(getDataAtCell(1, 0)).toEqual('1 yard');\n    expect(getDataAtCell(2, 0)).toEqual('2 feet');\n    expect(getDataAtCell(3, 0)).toEqual('1 inch');\n\n    getPlugin('columnSorting').sort();\n\n    expect(getDataAtCell(0, 0)).toEqual('1 inch');\n    expect(getDataAtCell(1, 0)).toEqual('1 yard');\n    expect(getDataAtCell(2, 0)).toEqual('2 feet');\n    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');\n  });\n\n  it('should properly sort integers with nulls', () => {\n    handsontable({\n      data: [\n        ['12'],\n        [null],\n        ['10'],\n        ['-5'],\n        [null],\n        ['1000']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n    expect(getDataAtCol(0)).toEqual(['-5', '10', '12', '1000', null, null]);\n\n    spec().sortByClickOnColumnHeader(0);\n    expect(getDataAtCol(0)).toEqual(['1000', '12', '10', '-5', null, null]);\n  });\n\n  it('should properly sort floating points', () => {\n    handsontable({\n      data: [\n        ['0.0561'],\n        ['-10.67'],\n        ['-4.1'],\n        ['-0.01'],\n        ['-127'],\n        ['1000']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000']);\n\n    spec().sortByClickOnColumnHeader(0);\n    expect(getDataAtCol(0)).toEqual(['1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127']);\n  });\n\n  it('should properly sort floating points with nulls', () => {\n    handsontable({\n      data: [\n        ['0.0561'],\n        ['-10.67'],\n        [null],\n        ['-4.1'],\n        ['-0.01'],\n        [null],\n        ['-127'],\n        ['1000'],\n        [null]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000', null, null, null]);\n\n    spec().sortByClickOnColumnHeader(0);\n    expect(getDataAtCol(0)).toEqual(['1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127', null, null, null]);\n  });\n\n  it('should properly sort floating points with non-numerical values', () => {\n    handsontable({\n      data: [\n        ['0.0561'],\n        ['-10.67'],\n        ['a'],\n        ['-4.1'],\n        ['-0.01'],\n        ['b'],\n        ['-127'],\n        ['1000'],\n        ['hello']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000', 'a', 'b', 'hello']);\n\n    spec().sortByClickOnColumnHeader(0);\n    expect(getDataAtCol(0)).toEqual(['hello', 'b', 'a', '1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127']);\n  });\n\n  it('should modify row translating process when soring is applied (visual to physical and vice versa)', () => {\n    const hot = handsontable({\n      data: [\n        [2],\n        [4],\n        [1],\n        [3]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    spec().sortByClickOnColumnHeader(0);\n\n    expect(hot.toPhysicalRow(0)).toBe(2);\n    expect(hot.toPhysicalRow(1)).toBe(0);\n    expect(hot.toPhysicalRow(2)).toBe(3);\n    expect(hot.toPhysicalRow(3)).toBe(1);\n    expect(hot.toVisualRow(0)).toBe(1);\n    expect(hot.toVisualRow(1)).toBe(3);\n    expect(hot.toVisualRow(2)).toBe(0);\n    expect(hot.toVisualRow(3)).toBe(2);\n  });\n\n  describe('should return sorted properly data when maxRows or / and minSpareRow options are set', () => {\n    it('maxRows < data.length', () => {\n      handsontable({\n        data: createSpreadsheetData(9, 9),\n        maxRows: 6,\n        columnSorting: {\n          initialConfig: {\n            column: 0,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      expect(getDataAtCol(0)).toEqual(['A6', 'A5', 'A4', 'A3', 'A2', 'A1']);\n    });\n\n    it('maxRows > data.length', () => {\n      handsontable({\n        data: createSpreadsheetData(9, 9),\n        maxRows: 20,\n        columnSorting: {\n          initialConfig: {\n            column: 0,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      expect(getDataAtCol(0)).toEqual(['A9', 'A8', 'A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1']);\n    });\n\n    it('minSpareRows is set; maxRows < data.length', () => {\n      handsontable({\n        data: createSpreadsheetData(9, 9),\n        maxRows: 5,\n        minSpareRows: 3,\n        columnSorting: {\n          initialConfig: {\n            column: 0,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      expect(getDataAtCol(0)).toEqual(['A5', 'A4', 'A3', 'A2', 'A1']);\n    });\n\n    it('minSpareRows is set; maxRows === data.length', () => {\n      handsontable({\n        data: createSpreadsheetData(6, 6),\n        maxRows: 9,\n        minSpareRows: 3,\n        columnSorting: {\n          initialConfig: {\n            column: 0,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      expect(getDataAtCol(0)).toEqual(['A6', 'A5', 'A4', 'A3', 'A2', 'A1', null, null, null]);\n    });\n\n    it('minSpareRows is set; maxRows > data.length', () => {\n      handsontable({\n        data: createSpreadsheetData(9, 9),\n        maxRows: 15,\n        minSpareRows: 2,\n        columnSorting: {\n          initialConfig: {\n            column: 0,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      expect(getDataAtCol(0)).toEqual(['A9', 'A8', 'A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', null, null]);\n    });\n  });\n\n  // DIFF - MultiColumnSorting & ColumnSorting: removed group of tests named: \"Sorting by multiple columns should reorganize sequence of rows properly\".\n  // DIFF - MultiColumnSorting & ColumnSorting: removed group of tests named: \"Numbers presenting sorting sequence\".\n\n  describe('Sorting configuration validation', () => {\n    describe('should not change internal state of sorting when wrong configuration was provided', () => {\n      // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.\n      it('when too low column index was passed to the initial config', () => {\n        handsontable({\n          data: createSpreadsheetData(10, 10),\n          colHeaders: true,\n          columnSorting: {\n            indicator: true,\n            initialConfig: {\n              column: -1,\n              sortOrder: 'asc'\n            }\n          }\n        });\n\n        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);\n      });\n\n      // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.\n      it('when too high column index was passed to the initial config', () => {\n        handsontable({\n          data: createSpreadsheetData(10, 10),\n          colHeaders: true,\n          columnSorting: {\n            indicator: true,\n            initialConfig: {\n              column: 100,\n              sortOrder: 'asc'\n            }\n          }\n        });\n\n        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);\n      });\n\n      // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.\n      it('when not proper sort order was passed to the initial config', () => {\n        handsontable({\n          data: createSpreadsheetData(10, 10),\n          colHeaders: true,\n          columnSorting: {\n            indicator: true,\n            initialConfig: {\n              column: 1,\n              sortOrder: 'unknown'\n            }\n          }\n        });\n\n        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);\n      });\n\n      // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.\n      it('when missed sort order was passed to the initial config', () => {\n        handsontable({\n          data: createSpreadsheetData(10, 10),\n          colHeaders: true,\n          columnSorting: {\n            indicator: true,\n            initialConfig: {\n              column: 1\n            }\n          }\n        });\n\n        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);\n      });\n\n      // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.\n      it('when missed column index was passed to the initial config', () => {\n        handsontable({\n          data: createSpreadsheetData(10, 10),\n          colHeaders: true,\n          columnSorting: {\n            indicator: true,\n            initialConfig: {\n              sortOrder: 'desc'\n            }\n          }\n        });\n\n        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);\n      });\n\n      // DIFF - MultiColumnSorting & ColumnSorting: removed test named: \"when the same column index was passed twice to the initial config\".\n    });\n  });\n\n  // DIFF - MultiColumnSorting & ColumnSorting: removed group of tests named: \"Sorting more than one column by clicks\".\n\n  describe('Click on the header sort data', () => {\n    const HEADER_ACTION_CLASS = 'sortAction';\n\n    it('should block action for specific configuration', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        columns: [\n          { columnSorting: { headerAction: false } },\n          {},\n          { type: 'date', dateFormat: 'MM/DD/YYYY' },\n          { type: 'numeric' },\n          {}\n        ],\n        colHeaders: true,\n        columnSorting: {\n          headerAction: true\n        }\n      });\n\n      const $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');\n\n      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeFalsy();\n\n      spec().sortByClickOnColumnHeader(0);\n\n      expect(getDataAtCol(0)).toEqual(['Mary', 'Henry', 'Ann', 'Robert', 'Ann', 'David', 'John', 'Mary', 'Robert']);\n    });\n\n    it('should not sort table by right click', () => {\n      const hot = handsontable({\n        data: arrayOfArrays(),\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      const $columnHeader = $(hot.view.wt.wtTable.getColumnHeader(0));\n      const $spanInsideHeader = $columnHeader.find('.columnSorting');\n\n      $spanInsideHeader.simulate('mousedown', { button: 2 });\n      $spanInsideHeader.simulate('click');\n      $spanInsideHeader.simulate('mouseup', { button: 2 });\n\n      expect(getData()).toEqual(arrayOfArrays());\n    });\n\n    it('should not block action for specific configuration updated by `updateSettings`', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        columns: [\n          { columnSorting: { headerAction: false } },\n          {},\n          { type: 'date', dateFormat: 'MM/DD/YYYY' },\n          { type: 'numeric' },\n          {}\n        ],\n        colHeaders: true,\n        columnSorting: {\n          headerAction: true\n        }\n      });\n\n      let $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');\n\n      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeFalsy();\n\n      updateSettings({ columns: () => ({ type: 'text' }) });\n\n      $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');\n\n      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeTruthy();\n\n      spec().sortByClickOnColumnHeader(0);\n\n      expect(getDataAtCol(0)).toEqual(['Ann', 'Ann', 'David', 'Henry', 'John', 'Mary', 'Mary', 'Robert', 'Robert']);\n    });\n\n    it('should block action for specific configuration updated by `updateSettings`', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        columns: [\n          {},\n          {},\n          { type: 'date', dateFormat: 'MM/DD/YYYY' },\n          { type: 'numeric' },\n          {}\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      let $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');\n\n      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeTruthy();\n\n      updateSettings({ columnSorting: { headerAction: false } });\n\n      $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');\n\n      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeFalsy();\n\n      spec().sortByClickOnColumnHeader(0);\n\n      expect(getDataAtCol(0)).toEqual(['Mary', 'Henry', 'Ann', 'Robert', 'Ann', 'David', 'John', 'Mary', 'Robert']);\n    });\n  });\n\n  describe('rendering headers', () => {\n    it('should change width of multi-line headers when plugin is enabled / disabled by `updateSettings` and sort indicator is enabled', () => {\n      handsontable({\n        colHeaders: ['AAA<br>BB']\n      });\n\n      const headerWidthAtStart = spec().$container.find('th').eq(0).width();\n\n      updateSettings({ columnSorting: true });\n\n      let newHeaderWidth = spec().$container.find('th').eq(0).width();\n\n      expect(headerWidthAtStart).toBeLessThan(newHeaderWidth);\n\n      updateSettings({ columnSorting: false });\n\n      newHeaderWidth = spec().$container.find('th').eq(0).width();\n\n      expect(headerWidthAtStart).toBe(newHeaderWidth);\n\n      updateSettings({ columnSorting: { initialConfig: { column: 0, sortOrder: 'asc' } } });\n\n      newHeaderWidth = spec().$container.find('th').eq(0).width();\n\n      expect(headerWidthAtStart).toBeLessThan(newHeaderWidth);\n    });\n\n    it('should work properly also when `rowHeaders` option is set to `true`', () => {\n      handsontable({\n        colHeaders: ['AAA<br>BB'],\n        rowHeaders: true\n      });\n\n      spec().$container[0].style.width = 'auto';\n      spec().$container[0].style.height = 'auto';\n\n      const wtHiderWidthAtStart = spec().$container.find('.wtHider').eq(0).width();\n      const htCoreWidthAtStart = spec().$container.find('.htCore').eq(0).width();\n\n      updateSettings({ columnSorting: true });\n\n      let newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();\n      let newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();\n\n      expect(wtHiderWidthAtStart).toBeLessThan(newWtHiderWidth);\n      expect(htCoreWidthAtStart).toBeLessThan(newHtCoreWidth);\n      expect(newWtHiderWidth).toBe(newHtCoreWidth);\n\n      updateSettings({ columnSorting: false });\n\n      newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();\n      newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();\n\n      expect(wtHiderWidthAtStart).toBe(newWtHiderWidth);\n      expect(htCoreWidthAtStart).toBe(newHtCoreWidth);\n      expect(newWtHiderWidth).toBe(newHtCoreWidth);\n\n      updateSettings({ columnSorting: { initialConfig: { column: 0, sortOrder: 'asc' } } });\n\n      newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();\n      newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();\n\n      expect(wtHiderWidthAtStart).toBeLessThan(newWtHiderWidth);\n      expect(htCoreWidthAtStart).toBeLessThan(newHtCoreWidth);\n      expect(newWtHiderWidth).toBe(newHtCoreWidth);\n    });\n\n    it('should not change width of multi-line headers when plugin is enabled / disabled and sort indicator is disabled', async() => {\n      handsontable({\n        colHeaders: ['AAA<br>BB']\n      });\n\n      const headerWidthAtStart = spec().$container.find('th').eq(0).width();\n      const wtHiderWidthAtStart = spec().$container.find('.wtHider').eq(0).width();\n      const htCoreWidthAtStart = spec().$container.find('.htCore').eq(0).width();\n\n      updateSettings({ columnSorting: { indicator: false } });\n\n      await sleep(100);\n\n      let newHeaderWidth = spec().$container.find('th').eq(0).width();\n      let newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();\n      let newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();\n\n      expect(headerWidthAtStart).toBe(newHeaderWidth);\n      expect(wtHiderWidthAtStart).toBe(newWtHiderWidth);\n      expect(htCoreWidthAtStart).toBe(newHtCoreWidth);\n\n      updateSettings({ columnSorting: false });\n\n      await sleep(100);\n\n      newHeaderWidth = spec().$container.find('th').eq(0).width();\n      newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();\n      newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();\n\n      expect(headerWidthAtStart).toBe(newHeaderWidth);\n      expect(wtHiderWidthAtStart).toBe(newWtHiderWidth);\n      expect(htCoreWidthAtStart).toBe(newHtCoreWidth);\n    });\n  });\n\n  describe('index mappers', () => {\n    it('should not map indexes when already sorted column was set to not sorted', () => {\n      const hot = handsontable({\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        columnSorting: {\n          initialConfig: {\n            column: 0,\n            sortOrder: 'desc'\n          }\n        }\n      });\n\n      updateSettings({ columnSorting: { initialConfig: [] } });\n\n      expect(hot.toVisualRow(0)).toEqual(0);\n    });\n  });\n\n  // TODO: Remove tests when workaround will be removed.\n  describe('workaround regression check', () => {\n    it('should not break the dataset when inserted new row', () => {\n      handsontable({\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        columnSorting: true\n      });\n\n      alter('insert_row', 2);\n\n      expect(getData()).toEqual([\n        ['A1', 'B1', 'C1'],\n        ['A2', 'B2', 'C2'],\n        [null, null, null],\n        ['A3', 'B3', 'C3']\n      ]);\n    });\n\n    it('should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)', () => {\n      spec().$container[0].style.width = 'auto';\n      spec().$container[0].style.height = 'auto';\n\n      handsontable({\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        columnSorting: true\n      });\n\n      alter('insert_col', 2, 5);\n\n      expect(getHtCore().find('tbody tr:eq(0) td').length).toEqual(7);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/columnSorting/test/columnSorting.e2e.js","describe('Comments', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('Enabling the plugin', () => {\n    it('should enable the plugin in the initial config', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true\n      });\n\n      expect(hot.getPlugin('comments').isEnabled()).toBe(true);\n    });\n\n    it('should enable the plugin using updateSettings', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4)\n      });\n\n      expect(hot.getPlugin('comments').isEnabled()).toBe(false);\n\n      updateSettings({\n        comments: true\n      });\n\n      expect(hot.getPlugin('comments').isEnabled()).toBe(true);\n    });\n  });\n\n  describe('updateSettings', () => {\n    it('should change delay, after which comment is showed #4323', async() => {\n      const rows = 10;\n      const columns = 10;\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(rows, columns),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: true,\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        }\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n\n      updateSettings({\n        comments: {\n          displayDelay: 100\n        }\n      });\n\n      $(getCell(1, 1)).simulate('mouseover', {\n        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,\n        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5,\n      });\n\n      await sleep(300);\n\n      expect(editor.parentNode.style.display).toEqual('block');\n    });\n  });\n\n  describe('Styling', () => {\n    it('should display comment indicators in the appropriate cells', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        cell: [\n          { row: 1, col: 1, comment: { value: 'test' } },\n          { row: 2, col: 2, comment: { value: 'test' } }\n        ]\n      });\n\n      expect(getCell(1, 1).className.indexOf('htCommentCell')).toBeGreaterThan(-1);\n      expect(getCell(2, 2).className.indexOf('htCommentCell')).toBeGreaterThan(-1);\n    });\n  });\n\n  describe('Displaying comment after `mouseover` event', () => {\n    it('should display comment after predefined delay when custom `displayDelay` ' +\n      'option of `comments` plugin wasn\\'t set', (done) => {\n      const rows = 10;\n      const columns = 10;\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(rows, columns),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: true,\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        }\n      });\n\n      $(getCell(1, 1)).simulate('mouseover', {\n        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,\n        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5,\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n\n      setTimeout(() => {\n        expect(editor.parentNode.style.display).toEqual('block');\n        done();\n      }, 300);\n    });\n\n    it('should display comment after defined delay when custom `displayDelay` ' +\n      'option of `comments` plugin was set', (done) => {\n      const rows = 10;\n      const columns = 10;\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(rows, columns),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: {\n          displayDelay: 400\n        },\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        }\n      });\n\n      $(getCell(1, 1)).simulate('mouseover', {\n        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,\n        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5,\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n\n      setTimeout(() => {\n        expect(editor.parentNode.style.display).toEqual('none');\n      }, 300);\n\n      setTimeout(() => {\n        expect(editor.parentNode.style.display).toEqual('block');\n        done();\n      }, 450);\n    });\n  });\n\n  describe('API', () => {\n    it('should return the comment from a proper cell, when using the getCommentAtCell method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: {\n          displayDelay: 400\n        },\n        cell: [\n          { row: 1, col: 1, comment: { value: 'test' } },\n          { row: 2, col: 2, comment: { value: 'another test' } }\n        ]\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      expect(plugin.getCommentAtCell(1, 1)).toEqual('test');\n      expect(plugin.getCommentAtCell(2, 2)).toEqual('another test');\n    });\n\n    it('should return the comment from a proper cell, when using the setRange and getComment methods', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        cell: [\n          { row: 1, col: 1, comment: { value: 'test' } },\n          { row: 2, col: 2, comment: { value: 'another test' } }\n        ]\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      plugin.setRange({ from: { row: 1, col: 1 } });\n      expect(plugin.getComment()).toEqual('test');\n      plugin.setRange({ from: { row: 2, col: 2 } });\n      expect(plugin.getComment()).toEqual('another test');\n    });\n\n    it('should allow inserting comments using the `setCommentAtCell` method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      expect(getCellMeta(1, 1).comment).toEqual(void 0);\n\n      plugin.setCommentAtCell(1, 1, 'test comment');\n\n      expect(getCellMeta(1, 1).comment.value).toEqual('test comment');\n    });\n\n    it('should trigger `afterSetCellMeta` callback when `setCommentAtCell` function is invoked', () => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      plugin.setCommentAtCell(1, 1, 'Added comment');\n      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', { value: 'Added comment' }, undefined, undefined);\n    });\n\n    it('should allow removing comments using the `removeCommentAtCell` method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        cell: [\n          { row: 1, col: 1, comment: { value: 'test' } }\n        ]\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      expect(getCellMeta(1, 1).comment.value).toEqual('test');\n\n      plugin.removeCommentAtCell(1, 1);\n\n      expect(getCellMeta(1, 1).comment).toEqual(void 0);\n    });\n\n    it('should trigger `afterSetCellMeta` callback when `removeCommentAtCell` function is invoked', () => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        cell: [\n          { row: 1, col: 1, comment: { value: 'test' } }\n        ],\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      plugin.removeCommentAtCell(1, 1);\n      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', undefined, undefined, undefined);\n    });\n\n    it('should allow opening the comment editor using the `showAtCell` method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n\n      expect(editor.parentNode.style.display).toEqual('none');\n\n      plugin.showAtCell(1, 1);\n\n      expect(editor.parentNode.style.display).toEqual('block');\n    });\n\n    it('should allow closing the comment editor using the `hide` method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n      plugin.showAtCell(1, 1);\n      expect(editor.parentNode.style.display).toEqual('block');\n\n      plugin.hide();\n\n      expect(editor.parentNode.style.display).toEqual('none');\n    });\n  });\n\n  it('`updateCommentMeta` & `setComment` functions should extend cellMetaObject properly', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      comments: true\n    });\n    const plugin = hot.getPlugin('comments');\n    let readOnly;\n    let comment;\n\n    setCellMeta(0, 0, 'comment', { readOnly: true });\n    plugin.updateCommentMeta(0, 0, { value: 'Test' });\n\n    comment = getCellMeta(0, 0).comment;\n    readOnly = comment && comment.readOnly;\n\n    expect(readOnly).toEqual(true);\n\n    plugin.setRange({ from: { row: 0, col: 0 }, to: { row: 0, col: 0 } });\n    plugin.setComment('Test2');\n\n    comment = getCellMeta(0, 0).comment;\n    readOnly = comment && comment.readOnly;\n\n    expect(readOnly).toEqual(true);\n  });\n\n  it('should not close the comment editor immediately after opening #4323', async() => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      comments: {\n        displayDelay: 0\n      }\n    });\n\n    selectCell(1, 1);\n    contextMenu();\n\n    const addCommentButton = $('.htItemWrapper').filter(function() {\n      return $(this).text() === 'Add comment';\n    })[0];\n\n    $(addCommentButton).simulate('mouseover', {\n      clientX: Handsontable.dom.offset(addCommentButton).left + 5,\n      clientY: Handsontable.dom.offset(addCommentButton).top + 5,\n    });\n\n    $(addCommentButton).simulate('mousedown');\n\n    const editor = hot.getPlugin('comments').editor.getInputElement();\n\n    await sleep(300);\n\n    expect($(editor).parents('.htComments')[0].style.display).toEqual('block');\n  });\n\n  describe('Using the Context Menu', () => {\n    it('should open the comment editor when clicking the \"Add comment\" entry', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        comments: true\n      });\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const addCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Add comment';\n      })[0];\n\n      $(addCommentButton).simulate('mousedown');\n\n      const editor = hot.getPlugin('comments').editor.getInputElement();\n\n      expect($(editor).parents('.htComments')[0].style.display).toEqual('block');\n    });\n\n    it('should remove the comment from a cell after clicking the \"Delete comment\" entry', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        comments: true,\n        cell: [\n          { row: 1, col: 1, comment: { value: 'Test comment' } }\n        ]\n      });\n\n      expect(getCellMeta(1, 1).comment.value).toEqual('Test comment');\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const deleteCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Delete comment';\n      })[0];\n\n      $(deleteCommentButton).simulate('mousedown');\n\n      expect(getCellMeta(1, 1).comment).toEqual(void 0);\n    });\n\n    it('should remove comments from a selected group of cells after clicking the \"Delete comment\" entry', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        comments: true,\n        cell: [\n          { row: 1, col: 1, comment: { value: 'Test comment' } },\n          { row: 2, col: 2, comment: { value: 'Test comment 2' } }\n        ]\n      });\n\n      expect(getCellMeta(1, 1).comment.value).toEqual('Test comment');\n      expect(getCellMeta(2, 2).comment.value).toEqual('Test comment 2');\n\n      selectCell(1, 1, 2, 2);\n      contextMenu();\n\n      const deleteCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Delete comment';\n      })[0];\n\n      $(deleteCommentButton).simulate('mousedown');\n\n      expect(getCellMeta(1, 1).comment).toEqual(void 0);\n      expect(getCellMeta(2, 2).comment).toEqual(void 0);\n    });\n\n    it('should make the comment editor\\'s textarea read-only after clicking the \"Read-only comment\" entry', (done) => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        comments: true,\n        cell: [\n          { row: 1, col: 1, comment: { value: 'Test comment' } }\n        ]\n      });\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const editor = hot.getPlugin('comments').editor.getInputElement();\n\n      expect($(editor)[0].readOnly).toBe(false);\n\n      const readOnlyComment = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Read-only comment';\n      })[0];\n\n      $(readOnlyComment).simulate('mousedown');\n      $(document).simulate('mouseup');\n\n      $(getCell(1, 1)).simulate('mouseover', {\n        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,\n        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5,\n      });\n\n      setTimeout(() => {\n        expect($(editor)[0].readOnly).toBe(true);\n        done();\n      }, 550);\n    });\n  });\n\n  describe('Hooks invoked after changing cell meta', () => {\n    it('should trigger `afterSetCellMeta` callback after deleting comment by context menu', () => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: true,\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        },\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      expect(afterSetCellMetaCallback).not.toHaveBeenCalled();\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const deleteCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Delete comment';\n      })[0];\n\n      $(deleteCommentButton).simulate('mousedown');\n\n      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', undefined, undefined, undefined);\n    });\n\n    it('should trigger `afterSetCellMeta` callback after editing comment by context menu', async() => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: true,\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        },\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const editCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Edit comment';\n      })[0];\n\n      $(editCommentButton).simulate('mousedown');\n      $(editCommentButton).simulate('mouseup');\n\n      const textarea = spec().$container[0].parentNode.querySelector('.htCommentTextArea');\n      textarea.focus();\n      textarea.value = 'Edited comment';\n\n      await sleep(100);\n\n      $('body').simulate('mousedown');\n      $('body').simulate('mouseup');\n      textarea.blur();\n\n      await sleep(400);\n\n      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(0, 0, 'comment', { value: 'Edited comment' }, undefined, undefined);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/comments/test/comments.e2e.js","describe('ContextMenu', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should update context menu items by calling `updateSettings` method', async() => {\n    handsontable({\n      contextMenu: ['row_above', 'row_below', '---------', 'remove_row'],\n      height: 100\n    });\n\n    contextMenu();\n\n    let items = $('.htContextMenu tbody td');\n    let actions = items.not('.htSeparator');\n    let separators = items.filter('.htSeparator');\n\n    expect(actions.length).toEqual(3);\n    expect(separators.length).toEqual(1);\n\n    expect(actions.text()).toEqual([\n      'Insert row above',\n      'Insert row below',\n      'Remove row',\n    ].join(''));\n\n    updateSettings({\n      contextMenu: ['remove_row']\n    });\n\n    await sleep(300);\n\n    contextMenu();\n\n    items = $('.htContextMenu tbody td');\n    actions = items.not('.htSeparator');\n    separators = items.filter('.htSeparator');\n\n    expect(actions.length).toEqual(1);\n    expect(separators.length).toEqual(0);\n\n    expect(actions.text()).toEqual([\n      'Remove row',\n    ].join(''));\n\n    updateSettings({\n      contextMenu: {\n        items: {\n          remove_col: true,\n          hsep1: '---------',\n          custom: { name: 'My custom item' },\n        }\n      }\n    });\n\n    await sleep(300);\n\n    contextMenu();\n\n    items = $('.htContextMenu tbody td');\n    actions = items.not('.htSeparator');\n    separators = items.filter('.htSeparator');\n\n    expect(actions.length).toEqual(2);\n    expect(separators.length).toEqual(1);\n\n    expect(actions.text()).toEqual([\n      'Remove column',\n      'My custom item',\n    ].join(''));\n  });\n\n  describe('menu width', () => {\n    it('should display the menu with the minimum width', async() => {\n      handsontable({\n        contextMenu: {\n          items: {\n            custom1: {\n              name: 'a'\n            },\n            custom2: {\n              name: 'b'\n            },\n          }\n        }\n      });\n\n      const $menu = $('.htContextMenu');\n\n      contextMenu();\n\n      await sleep(300);\n\n      expect($menu.find('.wtHider').width()).toEqual(215);\n    });\n\n    it('should expand menu when one of items is wider then default width of the menu', async() => {\n      handsontable({\n        contextMenu: {\n          items: {\n            custom1: {\n              name: 'a'\n            },\n            custom2: {\n              name: 'This is very long text which should expand the context menu...'\n            },\n          }\n        }\n      });\n\n      const $menu = $('.htContextMenu');\n\n      contextMenu();\n\n      await sleep(300);\n\n      expect($menu.find('.wtHider').width()).toBeGreaterThan(215);\n    });\n\n    it('should display a submenu with the minimum width', async() => {\n      handsontable({\n        contextMenu: {\n          items: {\n            custom1: {\n              name: 'a'\n            },\n            custom2: {\n              name() {\n                return 'Menu';\n              },\n              submenu: {\n                items: [{ name: () => 'Submenu' }]\n              }\n            }\n          }\n        }\n      });\n\n      contextMenu();\n\n      await sleep(300);\n\n      const $item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(1);\n\n      $item.simulate('mouseover');\n\n      await sleep(300);\n\n      const $contextSubMenu = $(`.htContextMenuSub_${$item.text()}`);\n\n      expect($contextSubMenu.find('.wtHider').width()).toEqual(215);\n    });\n  });\n\n  describe('menu opening', () => {\n    it('should open menu after right click on table cell', () => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should finish selection after right click on table cell', () => {\n      const hot = handsontable({\n        contextMenu: true,\n      });\n\n      const cell = getCell(0, 0);\n      const cellOffset = $(cell).offset();\n\n      $(cell).simulate('mousedown', { button: 2 });\n      $(cell).simulate('contextmenu', {\n        clientX: cellOffset.left - Handsontable.dom.getWindowScrollLeft(),\n        clientY: cellOffset.top - Handsontable.dom.getWindowScrollTop(),\n      });\n\n      expect(hot.selection.isInProgress()).toBe(false);\n    });\n\n    it('should call every selection hooks after right click on table cell', () => {\n      handsontable({\n        contextMenu: true,\n      });\n\n      const afterSelectionCallback = jasmine.createSpy('afterSelectionCallback');\n      const afterSelectionByPropCallback = jasmine.createSpy('afterSelectionByPropCallback');\n      const afterSelectionEndCallback = jasmine.createSpy('afterSelectionEndCallback');\n      const afterSelectionEndByPropCallback = jasmine.createSpy('afterSelectionEndByPropCallback');\n\n      addHook('afterSelection', afterSelectionCallback);\n      addHook('afterSelectionByProp', afterSelectionByPropCallback);\n      addHook('afterSelectionEnd', afterSelectionEndCallback);\n      addHook('afterSelectionEndByProp', afterSelectionEndByPropCallback);\n\n      const cell = getCell(0, 0);\n      const cellOffset = $(cell).offset();\n\n      $(cell).simulate('mousedown', { button: 2 });\n      $(cell).simulate('contextmenu', {\n        clientX: cellOffset.left - Handsontable.dom.getWindowScrollLeft(),\n        clientY: cellOffset.top - Handsontable.dom.getWindowScrollTop(),\n      });\n\n      expect(afterSelectionCallback.calls.count()).toEqual(1);\n      expect(afterSelectionByPropCallback.calls.count()).toEqual(1);\n      expect(afterSelectionEndCallback.calls.count()).toEqual(1);\n      expect(afterSelectionEndByPropCallback.calls.count()).toEqual(1);\n      expect(afterSelectionCallback).toHaveBeenCalledWith(0, 0, 0, 0, jasmine.any(Object), 0);\n      expect(afterSelectionByPropCallback).toHaveBeenCalledWith(0, 0, 0, 0, jasmine.any(Object), 0);\n      expect(afterSelectionEndCallback).toHaveBeenCalledWith(0, 0, 0, 0, 0, void 0);\n      expect(afterSelectionEndByPropCallback).toHaveBeenCalledWith(0, 0, 0, 0, 0, void 0);\n    });\n\n    it('should not open the menu after clicking an open editor', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(2, 2);\n      keyDownUp('enter');\n\n      expect(getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu(getActiveEditor().TEXTAREA);\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should open menu after right click on header cell when only header cells are visible', () => {\n      const hot = handsontable({\n        data: [],\n        colHeaders: ['Year', 'Kia'],\n        columns: [{ data: 0 }, { data: 1 }],\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu(hot.rootElement.querySelector('.ht_clone_top thead th'));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should open menu after right click on selected column header (the current selection should not be changed)', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(5, 10),\n        colHeaders: true,\n        rowHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      selectColumns(1, 4);\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu(hot.rootElement.querySelector('.ht_clone_top thead th:nth-child(4)'));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n      expect(`\n        |   ║   : * : * : * : * :   :   :   :   :   |\n        |===:===:===:===:===:===:===:===:===:===:===|\n        | - ║   : A : 0 : 0 : 0 :   :   :   :   :   |\n        | - ║   : 0 : 0 : 0 : 0 :   :   :   :   :   |\n        | - ║   : 0 : 0 : 0 : 0 :   :   :   :   :   |\n        | - ║   : 0 : 0 : 0 : 0 :   :   :   :   :   |\n        | - ║   : 0 : 0 : 0 : 0 :   :   :   :   :   |\n        `).toBeMatchToSelectionPattern();\n    });\n\n    it('should open menu after right click on selected row header (the current selection should not be changed)', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(5, 10),\n        colHeaders: true,\n        rowHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      selectRows(1, 3);\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu(hot.rootElement.querySelector('.ht_clone_left tbody tr:nth-child(3) th'));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n      expect(`\n        |   ║ - : - : - : - : - : - : - : - : - : - |\n        |===:===:===:===:===:===:===:===:===:===:===|\n        |   ║   :   :   :   :   :   :   :   :   :   |\n        | * ║ A : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 |\n        | * ║ 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 |\n        | * ║ 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 |\n        |   ║   :   :   :   :   :   :   :   :   :   |\n        `).toBeMatchToSelectionPattern();\n    });\n\n    it('should open menu after right click on header corner', () => {\n      const hot = handsontable({\n        data: [],\n        colHeaders: true,\n        rowHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu(hot.rootElement.querySelector('.ht_clone_top_left_corner thead th'));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should open menu after right click active cell border', () => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      selectCell(0, 0);\n\n      spec().$container.find('.wtBorder.current:eq(0)').simulate('contextmenu');\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n  });\n\n  describe('menu closing', () => {\n    it('should close menu after click', () => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      mouseDown(spec().$container);\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should close menu after click under the menu', () => {\n      handsontable({\n        data: createSpreadsheetData(500, 10),\n        contextMenu: true,\n        height: 500\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      const rect = $('.htContextMenu')[0].getBoundingClientRect();\n      const x = parseInt(rect.left + (rect.width / 2), 10);\n      const y = parseInt(rect.top + rect.height, 10);\n      mouseDown(document.elementFromPoint(x, y));\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n  });\n\n  describe('menu disabled', () => {\n    it('should not open menu after right click', () => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      getPlugin('contextMenu').disablePlugin();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should not create context menu if it\\'s disabled in constructor options', () => {\n      handsontable({\n        contextMenu: false,\n        height: 100\n      });\n\n      expect(getPlugin('contextMenu').isEnabled()).toBe(false);\n    });\n\n    it('should reenable menu', async() => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      const plugin = getPlugin('contextMenu');\n\n      plugin.disablePlugin();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      plugin.enablePlugin();\n\n      await sleep(300);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should reenable menu with updateSettings when it was disabled in constructor', () => {\n      handsontable({\n        contextMenu: false,\n        height: 100\n      });\n\n      const plugin = getPlugin('contextMenu');\n\n      expect(plugin.isEnabled()).toBe(false);\n\n      updateSettings({\n        contextMenu: true\n      });\n\n      expect(plugin.isEnabled()).toBe(true);\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu();\n\n      setTimeout(() => {\n        expect($('.htContextMenu').is(':visible')).toBe(true);\n      }, 300);\n    });\n\n    it('should disable menu with updateSettings when it was enabled in constructor', () => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      const plugin = getPlugin('contextMenu');\n\n      expect(plugin.isEnabled()).toBe(true);\n\n      updateSettings({\n        contextMenu: false\n      });\n\n      expect(plugin.isEnabled()).toBe(false);\n    });\n\n    it('should work properly (remove row) after destroy and new init', () => {\n      const test = function() {\n        handsontable({\n          startRows: 5,\n          contextMenu: ['remove_row'],\n          height: 100\n        });\n        selectCell(0, 0);\n        contextMenu();\n\n        const action = $('.htContextMenu .ht_master .htCore tbody').find('td').not('.htSeparator').eq(0);\n\n        action.simulate('mousedown');\n\n        expect(getData().length).toEqual(4);\n      };\n      test();\n\n      destroy();\n\n      test();\n    });\n  });\n\n  describe('menu hidden items', () => {\n    it('should remove separators from top, bottom and duplicated', () => {\n      handsontable({\n        contextMenu: [\n          '---------',\n          '---------',\n          'row_above',\n          '---------',\n          '---------',\n          'row_below',\n          '---------',\n          'remove_row'\n        ],\n        height: 100\n      });\n\n      contextMenu();\n\n      const items = $('.htContextMenu tbody td');\n      const actions = items.not('.htSeparator');\n      const separators = items.filter('.htSeparator');\n\n      expect(actions.length).toEqual(3);\n      expect(separators.length).toEqual(2);\n    });\n\n    it('should hide option if hidden function return true', () => {\n      handsontable({\n        startCols: 5,\n        colHeaders: true,\n        contextMenu: [\n          {\n            key: '',\n            name: 'Custom option',\n            hidden() {\n              return !this.selection.isSelectedByColumnHeader();\n            }\n          }\n        ]\n      });\n\n      contextMenu();\n      let items = $('.htContextMenu tbody td');\n      let actions = items.not('.htSeparator');\n\n      expect(actions.length).toEqual(0);\n\n      const header = $('.ht_clone_top thead th').eq(1);\n\n      header.simulate('mousedown');\n      header.simulate('mouseup');\n      contextMenu();\n\n      items = $('.htContextMenu tbody td');\n      actions = items.not('.htSeparator');\n      expect(actions.length).toEqual(1);\n    });\n  });\n\n  describe('menu destroy', () => {\n    it('should close context menu when HOT is being destroyed', () => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      destroy();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n  });\n\n  describe('subMenu', () => {\n    it('should not open subMenu immediately', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`).find('tbody td');\n\n      expect(contextSubMenu.length).toEqual(0);\n    });\n\n    it('should open subMenu with delay', async() => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n\n      item.simulate('mouseover');\n\n      await sleep(300);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(contextSubMenu.length).toEqual(1);\n    });\n\n    it('should NOT open subMenu if there is no subMenu for item', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(8);\n\n      item.simulate('mouseover');\n\n      expect(item.hasClass('htSubmenu')).toBe(false);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(contextSubMenu.length).toEqual(0);\n    });\n\n    it('should not throw error when opening multi-level menu with name declared as `function` #4550', async() => {\n      const spy = spyOn(window, 'onerror');\n\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: {\n          items: {\n            alignment: {\n              name() {\n                return 'Alignment';\n              },\n              submenu: {\n                items: [\n                  { key: 'alignment:left', name: 'Align to LEFT' }\n                ]\n              }\n            }\n          }\n        }\n      });\n\n      contextMenu();\n\n      const $submenu = $('.htSubmenu');\n\n      $submenu.simulate('mouseover');\n\n      await sleep(350);\n\n      expect(spy).not.toHaveBeenCalled();\n    });\n\n    it('should not throw error when opening multi-level menu with name declared as `function` which return value not castable to string', async() => {\n      const spy = spyOn(window, 'onerror');\n\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: {\n          items: {\n            alignment: {\n              name() {\n                return void 0;\n              },\n              submenu: {\n                items: [\n                  { key: 'alignment:left', name: 'Align to LEFT' }\n                ]\n              }\n            },\n            custom1: {\n              name() {\n                return null;\n              },\n              submenu: {\n                items: [\n                  { key: 'custom1:test', name: 'Test1' }\n                ]\n              }\n            },\n            custom2: {\n              name() {\n                return 0;\n              },\n              submenu: {\n                items: [\n                  { key: 'custom2:test', name: 'Test2' }\n                ]\n              }\n            }\n          }\n        }\n      });\n\n      contextMenu();\n\n      const $submenu1 = $('.htSubmenu').eq(0);\n\n      $submenu1.simulate('mouseover');\n\n      await sleep(350);\n\n      const $submenu2 = $('.htSubmenu').eq(1);\n\n      $submenu2.simulate('mouseover');\n\n      await sleep(350);\n\n      const $submenu3 = $('.htSubmenu').eq(2);\n\n      $submenu3.simulate('mouseover');\n\n      await sleep(350);\n\n      expect(spy).not.toHaveBeenCalled();\n    });\n\n    it('should open subMenu on the left of main menu if on the right there\\'s no space left', () => {\n      handsontable({\n        data: createSpreadsheetData(4, Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        width: window.innerWidth\n      });\n\n      selectCell(0, countCols() - 1);\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      const contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      expect(item.text()).toBe('Alignment');\n      expect(item.hasClass('htSubmenu')).toBe(true);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(contextSubMenu.offset().left).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll\n    });\n\n    it('should open subMenu on the right of main menu if there\\'s free space', async() => {\n      handsontable({\n        data: createSpreadsheetData(4, Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        width: window.innerWidth\n      });\n\n      selectCell(0, countCols() - 10);\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      const contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      await sleep(300);\n\n      expect(item.text()).toBe('Alignment');\n      expect(item.hasClass('htSubmenu')).toBe(true);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(contextSubMenu.offset().left).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll\n    });\n\n    it('should open subMenu on the left-bottom of main menu if there\\'s free space', async() => {\n      handsontable({\n        data: createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        height: window.innerHeight,\n      });\n\n      window.scrollTo(0, document.body.clientHeight);\n      selectCell(0, countCols() - 1);\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      const contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      await sleep(300);\n\n      expect(item.text()).toBe('Alignment');\n      expect(item.hasClass('htSubmenu')).toBe(true);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(parseInt(contextSubMenu.offset().top, 10)).toBeAroundValue(parseInt(item.offset().top, 10) - 1);\n      expect(parseInt(contextSubMenu.offset().left, 10)).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll\n    });\n\n    it('should open subMenu on the right-bottom of main menu if there\\'s free space', async() => {\n      handsontable({\n        data: createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        height: window.innerHeight\n      });\n\n      window.scrollTo(0, document.body.clientHeight);\n      selectCell(0, countCols() - 10);\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      const contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      await sleep(300);\n\n      expect(item.text()).toBe('Alignment');\n      expect(item.hasClass('htSubmenu')).toBe(true);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(parseInt(contextSubMenu.offset().top, 10)).toBeAroundValue(parseInt(item.offset().top, 10) - 1);\n      expect(parseInt(contextSubMenu.offset().left, 10)).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll\n    });\n\n    it('should open subMenu on the left-top of main menu if there\\'s no free space on bottom', async() => {\n      handsontable({\n        data: createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        height: window.innerHeight\n      });\n\n      selectCell(countRows() - 1, countCols() - 1);\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      const contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      await sleep(300);\n\n      expect(item.text()).toBe('Alignment');\n      expect(item.hasClass('htSubmenu')).toBe(true);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(contextSubMenu.offset().top + contextSubMenu.height() - 28).toBeAroundValue(item.offset().top);\n      expect(contextSubMenu.offset().left).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll\n    });\n\n    it('should open subMenu on the right-top of main menu if there\\'s no free space on bottom', async() => {\n      handsontable({\n        data: createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        height: window.innerHeight\n      });\n\n      selectCell(countRows() - 1, countCols() - 10);\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      const contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      await sleep(300);\n\n      expect(item.text()).toBe('Alignment');\n      expect(item.hasClass('htSubmenu')).toBe(true);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(contextSubMenu.offset().top + contextSubMenu.height() - 28).toBeAroundValue(item.offset().top);\n      expect(contextSubMenu.offset().left).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll\n    });\n  });\n\n  describe('default context menu actions', () => {\n    it('should display the default set of actions', () => {\n      handsontable({\n        contextMenu: true,\n        comments: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const items = $('.htContextMenu tbody td');\n      const actions = items.not('.htSeparator');\n      const separators = items.filter('.htSeparator');\n\n      expect(actions.length).toEqual(15);\n      expect(separators.length).toEqual(7);\n\n      expect(actions.text()).toEqual([\n        'Insert row above',\n        'Insert row below',\n        'Insert column left',\n        'Insert column right',\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n        'Add comment',\n        'Delete comment',\n        'Read-only comment',\n        'Copy',\n        'Cut',\n      ].join(''));\n    });\n\n    it('should disable column manipulation when row header selected', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        colHeaders: true,\n        rowHeaders: true,\n        height: 100\n      });\n\n      $('.ht_clone_left .htCore')\n        .eq(0)\n        .find('tbody')\n        .find('th')\n        .eq(0)\n        .simulate('mousedown', { which: 3 });\n      contextMenu();\n\n      expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n        'Insert column left',\n        'Insert column right',\n        'Remove columns',\n        'Undo',\n        'Redo',\n      ].join(''));\n    });\n\n    it('should disable row manipulation when column header selected', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        colHeaders: true,\n        rowHeaders: true,\n        height: 100\n      });\n\n      const header = $('.ht_clone_top .htCore').find('thead').find('th').eq(2);\n\n      header.simulate('mousedown', { which: 3 });\n      contextMenu();\n\n      expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n        'Insert row above',\n        'Insert row below',\n        'Remove rows',\n        'Undo',\n        'Redo',\n      ].join(''));\n    });\n\n    it('should disable cells manipulation when corner header selected', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        colHeaders: true,\n        rowHeaders: true,\n        height: 100\n      });\n\n      $('.ht_clone_top_left_corner .htCore')\n        .find('thead')\n        .find('th')\n        .eq(0)\n        .simulate('mousedown', { which: 3 });\n      contextMenu();\n\n      expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n      ].join(''));\n    });\n\n    it('should insert row above selection', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 400\n      });\n\n      const afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n      addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(0)\n        .simulate('mousedown'); // Insert row above\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.rowAbove', void 0, void 0, void 0);\n      expect(countRows()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert row above selection when initial data is empty', () => {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: [],\n        dataSchema: [],\n        contextMenu: true,\n        height: 400\n      });\n\n      const afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n\n      addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(0);\n\n      const cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);\n\n      cell.simulate('mousedown', { which: 3 });\n      contextMenu(cell[0]);\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(0)\n        .simulate('mousedown'); // Insert row above\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.rowAbove', void 0, void 0, void 0);\n      expect(countRows()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should NOT display insert row selection', () => {\n      handsontable({\n        contextMenu: true,\n        allowInsertRow: false\n      });\n\n      contextMenu();\n\n      const items = $('.htContextMenu tbody td');\n      const actions = items.not('.htSeparator');\n      const separators = items.filter('.htSeparator');\n\n      expect(actions.length).toEqual(10);\n      expect(separators.length).toEqual(5);\n\n      expect(actions.text()).toEqual([\n        'Insert column left',\n        'Insert column right',\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n        'Copy',\n        'Cut'\n      ].join(''));\n    });\n\n    it('should NOT display insert column selection', () => {\n      handsontable({\n        contextMenu: true,\n        allowInsertColumn: false\n      });\n\n      contextMenu();\n\n      const items = $('.htContextMenu tbody td');\n      const actions = items.not('.htSeparator');\n\n      expect(actions.length).toEqual(10);\n\n      expect(actions.text()).toEqual([\n        'Insert row above',\n        'Insert row below',\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n        'Copy',\n        'Cut'\n      ].join(''));\n    });\n\n    it('should insert row above selection (reverse selection)', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n\n      addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(3, 0, 1, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(0)\n        .simulate('mousedown'); // Insert row above\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.rowAbove', void 0, void 0, void 0);\n      expect(countRows()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert row below selection', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n\n      addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(1)\n        .simulate('mousedown'); // Insert row above\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.rowBelow', void 0, void 0, void 0);\n      expect(countRows()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert row below selection when initial data is empty', () => {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: [],\n        dataSchema: [],\n        contextMenu: true,\n        height: 400\n      });\n\n      const afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n\n      addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(0);\n\n      const cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);\n\n      cell.simulate('mousedown', { which: 3 });\n      contextMenu(cell[0]);\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(1)\n        .simulate('mousedown'); // Insert row below\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.rowBelow', void 0, void 0, void 0);\n      expect(countRows()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert row below selection (reverse selection)', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n\n      addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(3, 0, 1, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(1)\n        .simulate('mousedown'); // Insert row below\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.rowBelow', void 0, void 0, void 0);\n      expect(countRows()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should Insert column left of selection', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        width: 400,\n        height: 400\n      });\n\n      const afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n\n      addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 1, 0, 3);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(2)\n        .simulate('mousedown'); // Insert col left\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', void 0, void 0, void 0);\n      expect(countCols()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should Insert column left of selection when initial data is empty', () => {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: [],\n        dataSchema: [],\n        contextMenu: true,\n        height: 400\n      });\n\n      const afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n\n      addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(0);\n\n      const cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);\n\n      cell.simulate('mousedown', { which: 3 });\n      contextMenu(cell[0]);\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(3)\n        .simulate('mousedown'); // Insert column left\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.columnRight', void 0, void 0, void 0);\n      expect(countCols()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should Insert column left of selection (reverse selection)', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n\n      addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 3, 0, 1);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(2)\n        .simulate('mousedown'); // Insert col left\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', void 0, void 0, void 0);\n      expect(countCols()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should Insert column right of selection', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n\n      addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 1, 0, 3);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(2)\n        .simulate('mousedown'); // Insert col right\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', void 0, void 0, void 0);\n      expect(countCols()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should Insert column right of selection when initial data is empty', () => {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: [],\n        dataSchema: [],\n        contextMenu: true,\n        height: 400\n      });\n\n      const afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n\n      addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(0);\n\n      const cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);\n\n      cell.simulate('mousedown', { which: 3 });\n      contextMenu(cell[0]);\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(3)\n        .simulate('mousedown'); // Insert column right\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.columnRight', void 0, void 0, void 0);\n      expect(countCols()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should Insert column right of selection (reverse selection)', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n\n      addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 3, 0, 1);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(3)\n        .simulate('mousedown'); // Insert col right\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.columnRight', void 0, void 0, void 0);\n      expect(countCols()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should remove selected rows', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n\n      addHook('afterRemoveRow', afterRemoveRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(4)\n        .simulate('mousedown'); // Remove row\n\n      expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeRow', void 0, void 0);\n      expect(countRows()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should allow to remove the latest row', () => {\n      handsontable({\n        data: createSpreadsheetData(1, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n\n      addHook('afterRemoveRow', afterRemoveRowCallback);\n\n      expect(countRows()).toBe(1);\n\n      selectCell(0, 0, 0, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(4)\n        .simulate('mousedown'); // Remove row\n\n      expect(afterRemoveRowCallback).toHaveBeenCalledWith(0, 1, [0], 'ContextMenu.removeRow', void 0, void 0);\n      expect(countRows()).toBe(0);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should remove selected rows (reverse selection)', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n\n      addHook('afterRemoveRow', afterRemoveRowCallback);\n\n      expect(countRows()).toBe(4);\n\n      selectCell(3, 0, 1, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(4)\n        .simulate('mousedown'); // Remove row\n\n      expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeRow', void 0, void 0);\n      expect(countRows()).toBe(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should remove selected columns', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n\n      addHook('afterRemoveCol', afterRemoveColCallback);\n\n      expect(countCols()).toBe(4);\n\n      selectCell(0, 1, 0, 3);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(5)\n        .simulate('mousedown'); // Remove col\n\n      expect(afterRemoveColCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeColumn', void 0, void 0);\n      expect(countCols()).toBe(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should allow to remove the latest column', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 1),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n\n      addHook('afterRemoveCol', afterRemoveColCallback);\n\n      expect(countCols()).toBe(1);\n\n      selectCell(0, 0, 0, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(5)\n        .simulate('mousedown'); // Remove column\n\n      expect(afterRemoveColCallback).toHaveBeenCalledWith(0, 1, [0], 'ContextMenu.removeColumn', void 0, void 0);\n      expect(countCols()).toBe(0);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should remove selected columns (reverse selection)', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      const afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n\n      addHook('afterRemoveCol', afterRemoveColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 3, 0, 1);\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(5)\n        .simulate('mousedown'); // Remove col\n\n      expect(afterRemoveColCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeColumn', void 0, void 0);\n      expect(countCols()).toEqual(1);\n    });\n\n    it('should undo changes', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n\n      setDataAtCell(0, 0, 'XX');\n\n      expect(getDataAtCell(0, 0)).toEqual('XX');\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(6)\n        .simulate('mousedown'); // Undo\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n    });\n\n    it('should redo changes', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n\n      setDataAtCell(0, 0, 'XX');\n\n      expect(getDataAtCell(0, 0)).toEqual('XX');\n\n      undo();\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(7)\n        .simulate('mousedown'); // Redo\n\n      expect(getDataAtCell(0, 0)).toEqual('XX');\n    });\n\n    it('should display only the specified actions', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: ['remove_row', 'undo'],\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);\n    });\n\n    it('should make a single selected cell read-only', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n      expect(getCellMeta(0, 0).readOnly).toBe(false);\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const menu = $('.htContextMenu .ht_master .htCore tbody');\n\n      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown'); // Make read-only\n\n      expect(getCellMeta(0, 0).readOnly).toBe(true);\n    });\n\n    it('should make a single selected cell writable, when it\\'s set to read-only', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n\n      getCellMeta(0, 0).readOnly = true;\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const menu = $('.htContextMenu .ht_master .htCore tbody');\n\n      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown');\n\n      expect(getCellMeta(0, 0).readOnly).toBe(false);\n    });\n\n    it('should make a range of selected cells read-only, if all of them are writable', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getCellMeta(0, 0).readOnly).toEqual(false);\n      expect(hot.getCellMeta(0, 1).readOnly).toEqual(false);\n      expect(hot.getCellMeta(1, 0).readOnly).toEqual(false);\n      expect(hot.getCellMeta(1, 1).readOnly).toEqual(false);\n\n      selectCell(0, 0, 2, 2);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore tbody')\n        .find('td')\n        .not('.htSeparator')\n        .eq(8)\n        .simulate('mousedown');\n\n      expect(hot.getCellMeta(0, 0).readOnly).toEqual(true);\n      expect(hot.getCellMeta(0, 1).readOnly).toEqual(true);\n      expect(hot.getCellMeta(1, 0).readOnly).toEqual(true);\n      expect(hot.getCellMeta(1, 1).readOnly).toEqual(true);\n      expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    });\n\n    it('should make a multiple of selected cells read-only, if all of them are writable', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);\n\n      selectCell(0, 0, 2, 2);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore tbody')\n        .find('td')\n        .not('.htSeparator')\n        .eq(8)\n        .simulate('mousedown');\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(true);\n      expect(hot.getCellMeta(0, 1).readOnly).toBe(true);\n      expect(hot.getCellMeta(1, 0).readOnly).toBe(true);\n      expect(hot.getCellMeta(1, 1).readOnly).toBe(true);\n    });\n\n    it('should not close menu after clicking on submenu root item', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: ['row_above', 'remove_row', '---------', 'alignment'],\n        height: 400\n      });\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(2)\n        .simulate('mousedown'); // Alignment\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should make a group of selected cells read-only, if all of them are writable (reverse selection)', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);\n\n      selectCell(2, 2, 0, 0);\n\n      contextMenu();\n\n      const menu = $('.htContextMenu .ht_master .htCore tbody');\n\n      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown'); // Make read-only\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(true);\n      expect(hot.getCellMeta(0, 1).readOnly).toBe(true);\n      expect(hot.getCellMeta(1, 0).readOnly).toBe(true);\n      expect(hot.getCellMeta(1, 1).readOnly).toBe(true);\n    });\n\n    it('should make a group of selected cells writable if at least one of them is read-only', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);\n\n      hot.getCellMeta(1, 1).readOnly = true;\n\n      selectCell(0, 0, 2, 2);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(8)\n        .simulate('mousedown'); // Make writable\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);\n    });\n\n    it('should make a group of selected cells writable if at least one of them is read-only (reverse selection)', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);\n\n      hot.getCellMeta(1, 1).readOnly = true;\n\n      selectCell(2, 2, 0, 0);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(8)\n        .simulate('mousedown'); // Make writable\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);\n      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);\n    });\n  });\n\n  describe('disabling actions', () => {\n    it('should not close menu after clicking on disabled item', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: ['undo', 'redo'],\n        height: 400\n      });\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(0)\n        .simulate('mousedown'); // Undo\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should disable undo and redo action if undoRedo plugin is not enabled ', () => {\n      handsontable({\n        contextMenu: true,\n        undoRedo: false,\n        height: 100\n      });\n\n      contextMenu();\n\n      const $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(9)').text()).toEqual('Undo');\n      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(true);\n      expect($menu.find('tbody td:eq(10)').text()).toEqual('Redo');\n      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(true);\n    });\n\n    it('should disable undo when there is nothing to undo ', () => {\n      const hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      let $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect(hot.undoRedo.isUndoAvailable()).toBe(false);\n      expect($menu.find('tbody td:eq(9)').text()).toEqual('Undo');\n      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(true);\n\n      closeContextMenu();\n\n      setDataAtCell(0, 0, 'foo');\n\n      contextMenu();\n      $menu = $('.htContextMenu .ht_master .htCore');\n      expect(hot.undoRedo.isUndoAvailable()).toBe(true);\n      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(false);\n    });\n\n    it('should disable redo when there is nothing to redo ', () => {\n      const hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      let $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect(hot.undoRedo.isRedoAvailable()).toBe(false);\n      expect($menu.find('tbody td:eq(10)').text()).toEqual('Redo');\n      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(true);\n\n      closeContextMenu();\n\n      setDataAtCell(0, 0, 'foo');\n      undo();\n\n      contextMenu();\n      $menu = $('.htContextMenu .ht_master .htCore');\n      expect(hot.undoRedo.isRedoAvailable()).toBe(true);\n      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(false);\n    });\n\n    it('should disable Insert row in context menu when maxRows is reached', () => {\n      handsontable({\n        contextMenu: true,\n        maxRows: 6,\n        height: 100\n      });\n\n      contextMenu();\n\n      let $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(0)').text()).toEqual('Insert row above');\n      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(false);\n      expect($menu.find('tbody td:eq(1)').text()).toEqual('Insert row below');\n      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(false);\n\n      closeContextMenu();\n\n      alter('insert_row');\n\n      contextMenu();\n      $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(true);\n      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(true);\n    });\n\n    it('should disable Insert col in context menu when maxCols is reached', () => {\n      handsontable({\n        contextMenu: true,\n        maxCols: 6,\n        height: 100\n      });\n\n      contextMenu();\n\n      let $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(3)').text()).toEqual('Insert column left');\n      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(false);\n      expect($menu.find('tbody td:eq(4)').text()).toEqual('Insert column right');\n      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(false);\n\n      closeContextMenu();\n\n      alter('insert_col');\n\n      contextMenu();\n      $menu = $('.htContextMenu .ht_master .htCore');\n      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(true);\n      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(true);\n    });\n\n    it('should NOT disable Insert col in context menu when only one column exists', () => {\n      handsontable({\n        data: [['single col']],\n        contextMenu: true,\n        maxCols: 10,\n        height: 100\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(3)').text()).toEqual('Insert column left');\n      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(false);\n      expect($menu.find('tbody td:eq(4)').text()).toEqual('Insert column right');\n      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(false);\n    });\n\n    it('should disable Remove col in context menu when rows are selected by headers', () => {\n      handsontable({\n        contextMenu: ['remove_col', 'remove_row'],\n        height: 100,\n        colHeaders: true,\n        rowHeaders: true\n      });\n\n      const $rowsHeaders = spec().$container.find('.ht_clone_left tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(2).simulate('mouseover');\n      $rowsHeaders.eq(3).simulate('mouseover');\n      $rowsHeaders.eq(3).simulate('mousemove');\n      $rowsHeaders.eq(3).simulate('mouseup');\n\n      contextMenu();\n\n      const $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(0)').text()).toEqual('Remove columns');\n      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(true);\n    });\n\n    it('should disable Remove row in context menu when columns are selected by headers', () => {\n      handsontable({\n        contextMenu: ['remove_col', 'remove_row'],\n        height: 100,\n        colHeaders: true,\n        rowHeaders: true\n      });\n\n      spec().$container.find('thead tr:eq(0) th:eq(1)').simulate('mousedown');\n      spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseover');\n      spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseover');\n      spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mousemove');\n      spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseup');\n\n      contextMenu();\n\n      const $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(1)').text()).toEqual('Remove rows');\n      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(true);\n    });\n  });\n\n  describe('custom options', () => {\n    it('should have custom items list', () => {\n      const callback1 = jasmine.createSpy('callback1');\n      const callback2 = jasmine.createSpy('callback2');\n\n      handsontable({\n        contextMenu: {\n          items: {\n            cust1: {\n              name: 'CustomItem1',\n              callback: callback1\n            },\n            cust2: {\n              name: 'CustomItem2',\n              callback: callback2\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual(['CustomItem1', 'CustomItem2'].join(''));\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(callback1.calls.count()).toEqual(1);\n      expect(callback2.calls.count()).toEqual(0);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');\n\n      expect(callback1.calls.count()).toEqual(1);\n      expect(callback2.calls.count()).toEqual(1);\n\n    });\n\n    it('should have custom items list (defined as a function)', () => {\n      let enabled = false;\n\n      handsontable({\n        contextMenu: {\n          items: {\n            cust1: {\n              name() {\n                return !enabled ? 'Enable my custom option' : 'Disable my custom option';\n              },\n              callback() { }\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual('Enable my custom option');\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      enabled = true;\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual('Disable my custom option');\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n    });\n\n    it('should bind HOT instace to menu\\'s `name` function', () => {\n      let thisInsideFunction;\n\n      const hot = handsontable({\n        contextMenu: {\n          items: {\n            cust1: {\n              name() {\n                thisInsideFunction = this;\n\n                return 'Example';\n              },\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      expect(thisInsideFunction).toEqual(hot);\n    });\n\n    it('should enable to define item options globally', () => {\n      const callback = jasmine.createSpy('callback');\n\n      handsontable({\n        contextMenu: {\n          callback,\n          items: {\n            cust1: {\n              name: 'CustomItem1'\n            },\n            cust2: {\n              name: 'CustomItem2'\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(callback.calls.count()).toEqual(1);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');\n\n      expect(callback.calls.count()).toEqual(2);\n    });\n\n    it('should override default items options', () => {\n      const callback = jasmine.createSpy('callback');\n\n      handsontable({\n        contextMenu: {\n          items: {\n            remove_row: {\n              callback\n            },\n            remove_col: {\n              name: 'Delete column'\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual(['Remove row', 'Delete column'].join(''));\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(callback.calls.count()).toEqual(1);\n\n      expect(countCols()).toEqual(5);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');\n\n      expect(countCols()).toEqual(4);\n    });\n\n    it('should fire item callback after item has been clicked', () => {\n      const customItem = {\n        name: 'Custom item',\n        callback() {}\n      };\n\n      spyOn(customItem, 'callback');\n\n      handsontable({\n        contextMenu: {\n          items: {\n            customItemKey: customItem\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(customItem.callback.calls.count()).toEqual(1);\n      expect(customItem.callback.calls.argsFor(0)[0]).toEqual('customItemKey');\n    });\n  });\n\n  describe('keyboard navigation', () => {\n    describe('no item selected', () => {\n      it('should select the first item in menu, when user hits ARROW_DOWN', () => {\n        handsontable({\n          contextMenu: true,\n          height: 100\n        });\n\n        contextMenu();\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n      });\n\n      it('should scroll down, when user hits ARROW_DOWN for item in menu below the viewport', () => {\n        handsontable({\n          height: 100,\n          contextMenu: {\n            items: {\n              item1: { name: 'Item1' },\n              item2: { name: 'Item2' },\n              item3: { name: 'Item3' },\n              item4: { name: 'Item4' },\n              item5: { name: 'Item5' },\n              item6: { name: 'Item6' },\n              item7: { name: 'Item7' },\n              item8: { name: 'Item8' },\n              item9: { name: 'Item9' },\n              item10: { name: 'Item10' },\n              item11: { name: 'Item11' },\n              item12: { name: 'Item12' },\n              item13: { name: 'Item13' },\n              item14: { name: 'Item14' },\n              item15: { name: 'Item15' },\n              item16: { name: 'Item16' },\n              item17: { name: 'Item17' },\n              item18: { name: 'Item18' },\n              item19: { name: 'Item19' },\n              item20: { name: 'Item20' },\n              item21: { name: 'Item21' },\n              item22: { name: 'Item22' },\n              item23: { name: 'Item23' },\n              item24: { name: 'Item24' },\n              item25: { name: 'Item25' },\n              item26: { name: 'Item26' },\n              item27: { name: 'Item27' },\n              item28: { name: 'Item28' },\n              item29: { name: 'Item29' },\n              item30: { name: 'Item30' },\n              item31: { name: 'Item31' },\n              item32: { name: 'Item32' },\n              item33: { name: 'Item33' },\n              item34: { name: 'Item34' },\n              item35: { name: 'Item35' },\n              item36: { name: 'Item36' },\n              item37: { name: 'Item37' },\n              item38: { name: 'Item38' },\n              item39: { name: 'Item39' },\n              item40: { name: 'Item40' }\n            }\n          }\n        });\n\n        contextMenu();\n\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n\n        const scrollHeight = typeof window.scrollY !== 'undefined' ? window.scrollY : document.documentElement.scrollTop;\n\n        expect(scrollHeight).not.toBe(0);\n      });\n\n      it('should select the first NOT DISABLED item in menu, when user hits ARROW_DOWN', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                disabled: true\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n      });\n\n      it('should NOT select any items in menu, when user hits ARROW_DOWN and there is no items enabled', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                disabled: true\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3',\n                disabled: true\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toBeUndefined();\n      });\n\n      it('should select the last item in menu, when user hits ARROW_UP', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: 'Item1',\n              item2: 'Item2',\n              item3: 'Item3'\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n      });\n\n      it('should select the last NOT DISABLED item in menu, when user hits ARROW_UP', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3',\n                disabled: true\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n      });\n\n      it('should NOT select any items in menu, when user hits ARROW_UP and there is no items enabled', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                disabled: true\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3',\n                disabled: true\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toBeUndefined();\n      });\n    });\n\n    describe('item selected', () => {\n\n      it('should select next item when user hits ARROW_DOWN', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n      });\n\n      it('should select next item (skipping disabled items) when user hits ARROW_DOWN', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n      });\n\n      it('should select next item (skipping separators) when user hits ARROW_DOWN', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              sep1: Handsontable.plugins.ContextMenu.SEPARATOR,\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[3, 0, 3, 0]]);\n      });\n\n      it('should not change selection when last item is selected and user hits ARROW_DOWN', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n      });\n\n      it('should not change selection when last enabled item is selected and user hits ARROW_DOWN', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3',\n                disabled: true\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n      });\n\n      it('should select next item when user hits ARROW_UP', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n      });\n\n      it('should select next item (skipping disabled items) when user hits ARROW_UP', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n      });\n\n      it('should select next item (skipping separators) when user hits ARROW_UP', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              sep1: Handsontable.plugins.ContextMenu.SEPARATOR,\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[3, 0, 3, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n      });\n\n      it('should not change selection when first item is selected and user hits ARROW_UP', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n      });\n\n      it('should not change selection when first enabled item is selected and user hits ARROW_UP', () => {\n        handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                disabled: true\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);\n      });\n\n      it('should perform a selected item action, when user hits ENTER', () => {\n        const itemAction = jasmine.createSpy('itemAction');\n        const hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                callback: itemAction\n              },\n              item2: 'Item2'\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        const menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);\n\n        expect(itemAction).not.toHaveBeenCalled();\n\n        keyDownUp('enter');\n\n        expect(itemAction).toHaveBeenCalled();\n        expect($(hot.getPlugin('contextMenu').menu).is(':visible')).toBe(false);\n      });\n    });\n\n    it('should close menu when user hits ESC', () => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      keyDownUp('esc');\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should close sub-menu and parent menu in proper order when user hits ESC twice', async() => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n\n      item.simulate('mouseover');\n\n      await sleep(300);\n\n      expect($('.htContextMenuSub_Alignment').is(':visible')).toBe(true);\n\n      keyDownUp('esc');\n\n      expect($('.htContextMenuSub_Alignment').is(':visible')).toBe(false);\n\n      keyDownUp('esc');\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n  });\n\n  describe('mouse navigation', () => {\n    it('should not scroll window position after fireing mouseenter on menu item', () => {\n      handsontable({\n        data: createSpreadsheetData(1000, 5),\n        contextMenu: true,\n      });\n\n      selectCell(100, 0);\n      contextMenu();\n      window.scrollTo(0, 0);\n      $('.htContextMenu .ht_master .htCore').find('tr td:eq(\"0\")').simulate('mouseenter');\n\n      const scrollHeight = typeof window.scrollY !== 'undefined' ? window.scrollY : document.documentElement.scrollTop;\n\n      expect(scrollHeight).toBe(0);\n    });\n\n    it('should not scroll window position after fireing click on menu', () => {\n      handsontable({\n        data: createSpreadsheetData(1000, 5),\n        contextMenu: {\n          items: {\n            item1: {\n              name: 'Item1'\n            },\n            sep1: Handsontable.plugins.ContextMenu.SEPARATOR,\n            item2: {\n              name: 'Item2'\n            },\n            item3: {\n              name: 'Item3'\n            }\n          }\n        }\n      });\n\n      selectCell(100, 0);\n      contextMenu();\n      window.scrollTo(0, 0);\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(0)\n        .simulate('mousedown');\n\n      const scrollHeight = typeof window.scrollY !== 'undefined' ? window.scrollY : document.documentElement.scrollTop;\n\n      expect(scrollHeight).toBe(0);\n    });\n  });\n\n  describe('selection', () => {\n    it('should not be cleared when a context menu is triggered on a selected single cell', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n      expect(getSelected()).toEqual([[0, 0, 0, 0]]);\n    });\n\n    it('should not be cleared when a context menu is triggered on a range of selected cells', () => {\n      handsontable({\n        data: createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0, 2, 2);\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n      expect(getSelected()).toEqual([[0, 0, 2, 2]]);\n    });\n\n    it('should not be cleared when a context menu is triggered on the first layer of the non-contiguous selection', () => {\n      handsontable({\n        data: createSpreadsheetData(10, 10),\n        contextMenu: true,\n        height: 200\n      });\n\n      $(getCell(0, 0)).simulate('mousedown');\n      $(getCell(2, 2)).simulate('mouseover');\n      $(getCell(2, 2)).simulate('mouseup');\n\n      keyDown('ctrl');\n\n      $(getCell(2, 2)).simulate('mousedown');\n      $(getCell(7, 2)).simulate('mouseover');\n      $(getCell(7, 2)).simulate('mouseup');\n\n      $(getCell(2, 4)).simulate('mousedown');\n      $(getCell(2, 4)).simulate('mouseover');\n      $(getCell(2, 4)).simulate('mouseup');\n\n      keyUp('ctrl');\n      contextMenu(getCell(0, 0));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n      expect(getSelected()).toEqual([[0, 0, 2, 2], [2, 2, 7, 2], [2, 4, 2, 4]]);\n    });\n\n    it('should not be cleared when a context menu is triggered on the second layer of the non-contiguous selection', () => {\n      handsontable({\n        data: createSpreadsheetData(10, 10),\n        contextMenu: true,\n        height: 200\n      });\n\n      $(getCell(0, 0)).simulate('mousedown');\n      $(getCell(2, 2)).simulate('mouseover');\n      $(getCell(2, 2)).simulate('mouseup');\n\n      keyDown('ctrl');\n\n      $(getCell(2, 2)).simulate('mousedown');\n      $(getCell(7, 2)).simulate('mouseover');\n      $(getCell(7, 2)).simulate('mouseup');\n\n      $(getCell(2, 4)).simulate('mousedown');\n      $(getCell(2, 4)).simulate('mouseover');\n      $(getCell(2, 4)).simulate('mouseup');\n\n      keyUp('ctrl');\n      contextMenu(getCell(2, 2));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n      expect(getSelected()).toEqual([[0, 0, 2, 2], [2, 2, 7, 2], [2, 4, 2, 4]]);\n    });\n\n    it('should not be cleared when a context menu is triggered on the last layer of the non-contiguous selection', () => {\n      handsontable({\n        data: createSpreadsheetData(10, 10),\n        contextMenu: true,\n        height: 200\n      });\n\n      $(getCell(0, 0)).simulate('mousedown');\n      $(getCell(2, 2)).simulate('mouseover');\n      $(getCell(2, 2)).simulate('mouseup');\n\n      keyDown('ctrl');\n\n      $(getCell(2, 2)).simulate('mousedown');\n      $(getCell(7, 2)).simulate('mouseover');\n      $(getCell(7, 2)).simulate('mouseup');\n\n      $(getCell(2, 4)).simulate('mousedown');\n      $(getCell(2, 4)).simulate('mouseover');\n      $(getCell(2, 4)).simulate('mouseup');\n\n      keyUp('ctrl');\n      contextMenu(getCell(2, 4));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n      expect(getSelected()).toEqual([[0, 0, 2, 2], [2, 2, 7, 2], [2, 4, 2, 4]]);\n    });\n  });\n\n  describe('working with multiple tables', () => {\n    beforeEach(function() {\n      this.$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container2) {\n        this.$container2.handsontable('destroy');\n        this.$container2.remove();\n      }\n    });\n\n    it('should apply enabling/disabling contextMenu using updateSetting only to particular instance of HOT ', () => {\n      const hot1 = handsontable({\n        contextMenu: false,\n        height: 100\n      });\n      const hot2 = spec().$container2.handsontable({\n        contextMenu: true,\n        height: 100\n      }).handsontable('getInstance');\n      const contextMenuContainer = $('.htContextMenu');\n\n      contextMenu();\n      expect(hot1.getPlugin('contextMenu').isEnabled()).toBe(false);\n      expect(contextMenuContainer.is(':visible')).toBe(false);\n\n      contextMenu2();\n      expect(hot2.getPlugin('contextMenu').isEnabled()).toBe(true);\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      mouseDown(hot2.rootElement); // close menu\n\n      hot1.updateSettings({\n        contextMenu: true\n      });\n      hot2.updateSettings({\n        contextMenu: false\n      });\n\n      contextMenu2();\n      expect(hot2.getPlugin('contextMenu').isEnabled()).toBe(false);\n\n      contextMenu();\n\n      setTimeout(() => {\n        expect($('.htContextMenu').is(':visible')).toBe(true);\n      }, 1100);\n\n      function contextMenu2() {\n        const hot = spec().$container2.data('handsontable');\n        let selected = hot.getSelected();\n\n        if (!selected) {\n          hot.selectCell(0, 0);\n          selected = hot.getSelected();\n        }\n\n        const cell = hot.getCell(selected[0][0], selected[0][1]);\n        const cellOffset = $(cell).offset();\n\n        $(cell).simulate('contextmenu', {\n          pageX: cellOffset.left,\n          pageY: cellOffset.top\n        });\n      }\n    });\n\n    it('should perform a contextMenu action only for particular instance of HOT ', () => {\n      const hot1 = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      const hot2 = spec().$container2.handsontable({\n        contextMenu: true,\n        height: 100\n      }).handsontable('getInstance');\n\n      hot1.selectCell(0, 0);\n      contextMenu();\n\n      expect(hot1.countRows()).toEqual(5);\n      expect(hot2.countRows()).toEqual(5);\n\n      $('.htContextMenu .ht_master .htCore').find('tr td:eq(\"0\")').simulate('mousedown'); // insert row above\n\n      expect(hot1.countRows()).toEqual(6);\n      expect(hot2.countRows()).toEqual(5);\n\n      hot2.selectCell(0, 0);\n      contextMenu2();\n\n      expect(hot1.countRows()).toEqual(6);\n      expect(hot2.countRows()).toEqual(5);\n\n      $('.htContextMenu .ht_master .htCore').find('tr td:eq(\"0\")').simulate('mousedown'); // insert row above\n\n      expect(hot1.countRows()).toEqual(6);\n      expect(hot2.countRows()).toEqual(6);\n\n      function contextMenu2() {\n        const hot = spec().$container2.data('handsontable');\n        let selected = hot.getSelected();\n\n        if (!selected) {\n          hot.selectCell(0, 0);\n          selected = hot.getSelected();\n        }\n\n        const cell = hot.getCell(selected[0][0], selected[0][1]);\n        const cellOffset = $(cell).offset();\n\n        $(cell).simulate('contextmenu', {\n          pageX: cellOffset.left,\n          pageY: cellOffset.top\n        });\n      }\n    });\n  });\n\n  describe('context menu with disabled `allowInvalid`', () => {\n    it('should not close invalid cell', async() => {\n      handsontable({\n        data: createSpreadsheetData(10, 10),\n        contextMenu: true,\n        validator: (value, callback) => callback(false),\n        allowInvalid: false\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      contextMenu(getCell(2, 2));\n\n      await sleep(100);\n\n      contextMenu(getCell(2, 2));\n\n      await sleep(100);\n\n      expect(getActiveEditor().isOpened()).toBe(true);\n    });\n  });\n\n  describe('context menu with native scroll', () => {\n    beforeEach(function() {\n      const wrapper = $('<div></div>').css({\n        width: 400,\n        height: 200,\n        overflow: 'scroll'\n      });\n\n      this.$wrapper = this.$container.wrap(wrapper).parent();\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n      this.$wrapper.remove();\n    });\n\n    it('should display menu table is not scrolled', () => {\n      handsontable({\n        data: createSpreadsheetData(40, 30),\n        colWidths: 50, // can also be a number or a function\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should display menu table is scrolled', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(40, 30),\n        colWidths: 50, // can also be a number or a function\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      const mainHolder = hot.view.wt.wtTable.holder;\n\n      $(mainHolder).scrollTop(300);\n      $(mainHolder).scroll();\n\n      selectCell(15, 3);\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should not close the menu, when table is scrolled', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(40, 30),\n        colWidths: 50, // can also be a number or a function\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      const $mainHolder = $(hot.view.wt.wtTable.holder);\n\n      selectCell(15, 3);\n      const scrollTop = $mainHolder.scrollTop();\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      $mainHolder.scrollTop(scrollTop + 60).scroll();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      $mainHolder.scrollTop(scrollTop + 100).scroll();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should not attempt to close menu, when table is scrolled and the menu is already closed', () => {\n      const hot = handsontable({\n        data: createSpreadsheetData(40, 30),\n        colWidths: 50, // can also be a number or a function\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      const mainHolder = $(hot.view.wt.wtTable.holder);\n\n      selectCell(15, 3);\n\n      const scrollTop = mainHolder.scrollTop();\n\n      contextMenu();\n\n      spyOn(hot.getPlugin('contextMenu'), 'close');\n\n      mainHolder.scrollTop(scrollTop + 100).scroll();\n\n      expect(hot.getPlugin('contextMenu').close).not.toHaveBeenCalled();\n    });\n\n    it('should not scroll the window when hovering over context menu items (#1897 reopen)', () => {\n      spec().$wrapper.css('overflow', 'visible');\n\n      handsontable({\n        data: createSpreadsheetData(403, 303),\n        colWidths: 50, // can also be a number or a function\n        contextMenu: true\n      });\n\n      const beginningScrollX = window.scrollX;\n\n      selectCell(2, 4);\n      contextMenu();\n\n      const cmInstance = getPlugin('contextMenu').menu.hotMenu;\n\n      cmInstance.selectCell(3, 0);\n\n      expect(window.scrollX).toBe(beginningScrollX);\n\n      cmInstance.selectCell(4, 0);\n\n      expect(window.scrollX).toBe(beginningScrollX);\n\n      cmInstance.selectCell(6, 0);\n\n      expect(window.scrollX).toBe(beginningScrollX);\n    });\n  });\n\n  describe('afterContextMenuDefaultOptions hook', () => {\n    it('should call afterContextMenuDefaultOptions hook with context menu options as the first param', async() => {\n      const cb = jasmine.createSpy();\n\n      cb.and.callFake((options) => {\n        options.items.cust1 = {\n          name: 'My custom item',\n          callback() {}\n        };\n      });\n\n      Handsontable.hooks.add('afterContextMenuDefaultOptions', cb);\n\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      await sleep(200);\n\n      const $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td').text()).toContain('My custom item');\n      expect(cb.calls.count()).toBe(1);\n      expect(cb.calls.argsFor(0)[0].items.cust1.key).toBe('cust1');\n      expect(cb.calls.argsFor(0)[0].items.cust1.name).toBe('My custom item');\n\n      Handsontable.hooks.remove('afterContextMenuDefaultOptions', cb);\n    });\n  });\n\n  describe('beforeContextMenuSetItems hook', () => {\n    it('should add new menu item even when item is excluded from plugin settings', async() => {\n      const hookListener = function(options) {\n        options.push({\n          key: 'test',\n          name: 'Test'\n        });\n      };\n\n      Handsontable.hooks.add('beforeContextMenuSetItems', hookListener);\n\n      handsontable({\n        contextMenu: ['make_read_only'],\n        height: 100\n      });\n\n      contextMenu();\n\n      await sleep(200);\n\n      const items = $('.htContextMenu tbody td');\n      const actions = items.not('.htSeparator');\n\n      expect(actions.text()).toEqual([\n        'Read only',\n        'Test',\n      ].join(''));\n\n      Handsontable.hooks.remove('beforeContextMenuSetItems', hookListener);\n    });\n\n    it('should be called only with items selected in plugin settings', async() => {\n      let keys = [];\n      const hookListener = function(items) {\n        keys = items.map(v => v.key);\n      };\n\n      Handsontable.hooks.add('beforeContextMenuSetItems', hookListener);\n\n      handsontable({\n        contextMenu: ['make_read_only', 'col_left'],\n        height: 100\n      });\n\n      contextMenu();\n\n      await sleep(200);\n\n      expect(keys).toEqual(['make_read_only', 'col_left']);\n\n      Handsontable.hooks.remove('beforeContextMenuSetItems', hookListener);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/contextMenu/test/contextMenu.e2e.js","describe('ContextMenu', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('alignment', () => {\n    it('should align text left', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      await sleep(350);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);\n      button.simulate('mousedown'); // Text left\n\n      expect(getCellMeta(0, 0).className).toEqual('htLeft');\n      expect(getCell(0, 0).className).toContain('htLeft');\n    });\n\n    it('should align text center', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      await sleep(350);\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(1);\n\n      button.simulate('mousedown'); // Text center\n      expect(getCellMeta(0, 0).className).toEqual('htCenter');\n      expect(getCell(0, 0).className).toContain('htCenter');\n    });\n\n    it('should align text right', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      await sleep(350);\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);\n\n      button.simulate('mousedown'); // Text right\n      expect(getCellMeta(0, 0).className).toEqual('htRight');\n      expect(getCell(0, 0).className).toContain('htRight');\n    });\n\n    it('should justify text', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      await sleep(350);\n\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(3);\n\n      button.simulate('mousedown'); // Text justify\n      deselectCell();\n      expect(getCellMeta(0, 0).className).toEqual('htJustify');\n      expect(getCell(0, 0).className).toContain('htJustify');\n    });\n\n    it('should vertical align text top', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      await sleep(350);\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(4);\n\n      button.simulate('mousedown'); // Text top\n      deselectCell();\n      expect(getCellMeta(0, 0).className).toEqual('htTop');\n      expect(getCell(0, 0).className).toContain('htTop');\n    });\n\n    it('should vertical align text middle', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      await sleep(350);\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(5);\n\n      button.simulate('mousedown'); // Text middle\n      deselectCell();\n      expect(getCellMeta(0, 0).className).toEqual('htMiddle');\n      expect(getCell(0, 0).className).toContain('htMiddle');\n    });\n\n    it('should vertical align text bottom', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      await sleep(350);\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(6);\n      button.simulate('mousedown'); // Text bottom\n      deselectCell();\n      expect(getCellMeta(0, 0).className).toEqual('htBottom');\n      expect(getCell(0, 0).className).toContain('htBottom');\n    });\n\n    it('should trigger `afterSetCellMeta` callback after changing alignment by context menu', async() => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      selectCell(2, 3);\n      contextMenu();\n      const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      await sleep(350);\n      const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);\n      button.simulate('mousedown'); // Text bottom\n      deselectCell();\n      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(2, 3, 'className', 'htRight', undefined, undefined);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/contextMenu/test/predefinedItems/alignment.e2e.js","describe('ContextMenuReadOnly', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should trigger `afterSetCellMeta` callback after changing cell to read only by context menu', () => {\n    const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n    const rows = 5;\n    const columns = 5;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(rows, columns),\n      rowHeaders: true,\n      colHeaders: true,\n      contextMenu: true,\n      afterSetCellMeta: afterSetCellMetaCallback\n    });\n\n    selectCell(2, 3);\n    contextMenu();\n\n    const changeToReadOnluButton = $('.htItemWrapper').filter(function() {\n      return $(this).text() === 'Read only';\n    })[0];\n\n    $(changeToReadOnluButton).simulate('mousedown');\n    expect(afterSetCellMetaCallback).toHaveBeenCalledWith(2, 3, 'readOnly', true, undefined, undefined);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/contextMenu/test/predefinedItems/readOnly.e2e.js","describe('ContextMenu', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('remove columns', () => {\n    it('should execute action when single cell is selected', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        contextMenu: true,\n      });\n\n      selectCell(2, 2);\n      contextMenu();\n\n      // \"Remove column\" item\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(5)\n        .simulate('mousedown');\n\n      expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'D1', 'E1']);\n    });\n\n    it('should execute action when range of the cells are selected', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        contextMenu: true,\n      });\n\n      selectCell(2, 2, 4, 4);\n      contextMenu();\n\n      // \"Remove column\" item\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(5)\n        .simulate('mousedown');\n\n      expect(getDataAtRow(0)).toEqual(['A1', 'B1']);\n    });\n\n    it('should execute action when multiple cells are selected', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(8, 5),\n        contextMenu: true,\n      });\n\n      $(getCell(0, 0)).simulate('mousedown');\n      $(getCell(1, 0)).simulate('mouseover');\n      $(getCell(1, 0)).simulate('mouseup');\n\n      keyDown('ctrl');\n\n      $(getCell(2, 1)).simulate('mousedown');\n      $(getCell(2, 1)).simulate('mouseover');\n      $(getCell(2, 1)).simulate('mouseup');\n\n      $(getCell(0, 3)).simulate('mousedown');\n      $(getCell(5, 3)).simulate('mouseover');\n      $(getCell(5, 3)).simulate('mouseup');\n\n      $(getCell(7, 4)).simulate('mousedown');\n      $(getCell(7, 4)).simulate('mouseover');\n      $(getCell(7, 4)).simulate('mouseup');\n\n      contextMenu();\n\n      // \"Remove column\" item\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(5)\n        .simulate('mousedown');\n\n      expect(getDataAtRow(0)).toEqual(['C1']);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/contextMenu/test/predefinedItems/removeColumn.e2e.js","describe('ContextMenu', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('remove rows', () => {\n    it('should execute action when single cell is selected', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        contextMenu: true,\n      });\n\n      selectCell(2, 2);\n      contextMenu();\n\n      // \"Remove row\" item\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(4)\n        .simulate('mousedown');\n\n      expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A4', 'A5']);\n    });\n\n    it('should execute action when range of the cells are selected', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        contextMenu: true,\n      });\n\n      selectCell(2, 2, 4, 4);\n      contextMenu();\n\n      // \"Remove row\" item\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(4)\n        .simulate('mousedown');\n\n      expect(getDataAtCol(0)).toEqual(['A1', 'A2']);\n    });\n\n    it('should execute action when multiple cells are selected', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(8, 5),\n        contextMenu: true,\n      });\n\n      $(getCell(0, 0)).simulate('mousedown');\n      $(getCell(1, 0)).simulate('mouseover');\n      $(getCell(1, 0)).simulate('mouseup');\n\n      keyDown('ctrl');\n\n      $(getCell(2, 1)).simulate('mousedown');\n      $(getCell(2, 1)).simulate('mouseover');\n      $(getCell(2, 1)).simulate('mouseup');\n\n      $(getCell(0, 3)).simulate('mousedown');\n      $(getCell(5, 3)).simulate('mouseover');\n      $(getCell(5, 3)).simulate('mouseup');\n\n      $(getCell(5, 0)).simulate('mousedown');\n      $(getCell(5, 4)).simulate('mouseover');\n      $(getCell(5, 4)).simulate('mouseup');\n\n      $(getCell(7, 4)).simulate('mousedown');\n      $(getCell(7, 4)).simulate('mouseover');\n      $(getCell(7, 4)).simulate('mouseup');\n\n      contextMenu();\n\n      // \"Remove row\" item\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(4)\n        .simulate('mousedown');\n\n      expect(getDataAtCol(0)).toEqual(['A7']);\n    });\n\n    it('should not shift invalid row when removing a single row', async() => {\n      const hot = handsontable({\n        data: [\n          ['aaa', 2],\n          ['bbb', 3],\n          ['ccc', 4],\n          ['ddd', 'string'],\n          ['eee', 6],\n        ],\n        contextMenu: true,\n        columns(column) {\n          if (column === 1) {\n            return {\n              column,\n              type: 'numeric'\n            };\n          }\n\n          return {};\n        }\n      });\n\n      hot.validateCells();\n\n      await sleep(100);\n\n      selectCell(1, 1);\n      contextMenu();\n\n      // \"Remove row\" item\n      $('.htContextMenu .ht_master .htCore')\n        .find('tbody td')\n        .not('.htSeparator')\n        .eq(4)\n        .simulate('mousedown');\n\n      expect($(hot.getCell(2, 1)).hasClass('htInvalid')).toBeTruthy();\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/contextMenu/test/predefinedItems/removeRow.e2e.js","describe('CopyPaste', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  class DataTransferObject {\n    constructor() {\n      this.data = {\n        'text/plain': '',\n        'text/html': ''\n      };\n    }\n    getData(type = 'text/plain') {\n      return this.data[type];\n    }\n    setData(type = 'text/plain', value) {\n      this.data[type] = value;\n    }\n  }\n\n  function getClipboardEvent() {\n    const event = {};\n\n    event.clipboardData = new DataTransferObject();\n    event.preventDefault = () => {};\n\n    return event;\n  }\n\n  const arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  describe('enabling/disabing plugin', () => {\n    it('should copyPaste be set enabled as default', () => {\n      const hot = handsontable();\n\n      expect(hot.getSettings().copyPaste).toBeTruthy();\n      expect(hot.getPlugin('CopyPaste').focusableElement).toBeDefined();\n    });\n\n    it('should do not create textarea element if copyPaste is disabled on initialization', () => {\n      handsontable({\n        copyPaste: false\n      });\n\n      expect($('#HandsontableCopyPaste').length).toEqual(0);\n    });\n  });\n\n  it('should reuse focusable element by borrowing an element from cell editor', async() => {\n    handsontable();\n    selectCell(0, 0);\n\n    await sleep(10);\n\n    expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);\n    expect($('#HandsontableCopyPaste').length).toBe(0);\n  });\n\n  it('should create focusable element when cell editor doesn\\'t exist', () => {\n    handsontable({\n      editor: false,\n    });\n    selectCell(0, 0);\n\n    expect($('#HandsontableCopyPaste').length).toEqual(1);\n  });\n\n  it('should keep focusable element if updateSettings occurred after the end of the selection', () => {\n    handsontable();\n    selectCell(0, 0, 2, 2);\n    updateSettings({});\n\n    expect(getPlugin('CopyPaste').focusableElement.mainElement).not.toBe(null);\n  });\n\n  describe('working with multiple tables', () => {\n    beforeEach(function() {\n      this.$container2 = $(`<div id=\"${id}2\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container2) {\n        this.$container2.handsontable('destroy');\n        this.$container2.remove();\n      }\n    });\n\n    it('should disable copyPaste only in particular table', () => {\n      const hot1 = handsontable();\n      const hot2 = spec().$container2.handsontable({ copyPaste: false }).handsontable('getInstance');\n\n      expect(hot1.getPlugin('CopyPaste').focusableElement).toBeDefined();\n      expect(hot2.getPlugin('CopyPaste').focusableElement).toBeUndefined();\n    });\n\n    it('should not create HandsontableCopyPaste element until the table will be selected', () => {\n      handsontable();\n      spec().$container2.handsontable();\n\n      expect($('#HandsontableCopyPaste').length).toBe(0);\n    });\n\n    it('should use focusable element from cell editor of the lastly selected table', async() => {\n      const hot1 = handsontable();\n      const hot2 = spec().$container2.handsontable().handsontable('getInstance');\n\n      hot1.selectCell(0, 0);\n      hot2.selectCell(1, 1);\n\n      await sleep(0);\n\n      expect($('#HandsontableCopyPaste').length).toBe(0);\n      expect(document.activeElement).toBe(hot2.getActiveEditor().TEXTAREA);\n    });\n\n    it('should destroy HandsontableCopyPaste element as long as at least one table has copyPaste enabled', () => {\n      const hot1 = handsontable({ editor: false });\n      const hot2 = spec().$container2.handsontable({ editor: false }).handsontable('getInstance');\n\n      hot1.selectCell(0, 0);\n      hot2.selectCell(0, 0);\n\n      expect($('#HandsontableCopyPaste').length).toBe(1);\n\n      hot1.updateSettings({ copyPaste: false });\n\n      expect($('#HandsontableCopyPaste').length).toBe(1);\n\n      hot2.updateSettings({ copyPaste: false });\n\n      expect($('#HandsontableCopyPaste').length).toBe(0);\n    });\n\n    it('should not touch focusable element borrowed from cell editors', () => {\n      const hot1 = handsontable();\n      const hot2 = spec().$container2.handsontable().handsontable('getInstance');\n\n      hot1.selectCell(0, 0);\n      hot2.selectCell(0, 0);\n\n      expect($('.handsontableInput').length).toBe(2);\n\n      hot1.updateSettings({ copyPaste: false });\n\n      expect($('.handsontableInput').length).toBe(2);\n\n      hot2.updateSettings({ copyPaste: false });\n\n      expect($('.handsontableInput').length).toBe(2);\n    });\n  });\n\n  describe('copy', () => {\n    xit('should be possible to copy data by keyboard shortcut', () => {\n      // simulated keyboard shortcuts doesn't run the true events\n    });\n\n    xit('should be possible to copy data by contextMenu option', () => {\n      // simulated mouse events doesn't run the true browser event\n    });\n\n    it('should be possible to copy data by API', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = hot.getPlugin('CopyPaste');\n\n      selectCell(1, 0);\n\n      plugin.onCopy(copyEvent);\n\n      expect(copyEvent.clipboardData.getData('text/plain')).toBe('A2');\n      expect(copyEvent.clipboardData.getData('text/html')).toBe('<table><tbody><tr><td>A2</td></tr></tbody></table>');\n    });\n\n    it('should call beforeCopy and afterCopy during copying operation', () => {\n      const beforeCopySpy = jasmine.createSpy('beforeCopy');\n      const afterCopySpy = jasmine.createSpy('afterCopy');\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCopy: beforeCopySpy,\n        afterCopy: afterCopySpy,\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = hot.getPlugin('CopyPaste');\n\n      selectCell(0, 0);\n\n      plugin.onCopy(copyEvent);\n\n      expect(beforeCopySpy.calls.count()).toEqual(1);\n      expect(beforeCopySpy).toHaveBeenCalledWith([['A1']], [{ startRow: 0, startCol: 0, endRow: 0, endCol: 0 }], void 0, void 0, void 0, void 0);\n      expect(afterCopySpy.calls.count()).toEqual(1);\n      expect(afterCopySpy).toHaveBeenCalledWith([['A1']], [{ startRow: 0, startCol: 0, endRow: 0, endCol: 0 }], void 0, void 0, void 0, void 0);\n    });\n\n    it('should be possible to block copying', () => {\n      const beforeCopySpy = jasmine.createSpy('beforeCopy');\n      const afterCopySpy = jasmine.createSpy('afterCopy');\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCopy() {\n          beforeCopySpy();\n          return false;\n        },\n        afterCopy: afterCopySpy,\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = hot.getPlugin('CopyPaste');\n\n      selectCell(0, 0);\n\n      plugin.onCopy(copyEvent);\n\n      expect(beforeCopySpy.calls.count()).toEqual(1);\n      expect(afterCopySpy.calls.count()).toEqual(0);\n    });\n\n    it('should be possible modification of changes during copying', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCopy(changes) {\n          changes.splice(0, 1);\n        },\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = hot.getPlugin('CopyPaste');\n      selectCell(0, 0, 1, 0);\n\n      plugin.onCopy(copyEvent);\n\n      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('A2');\n      expect(copyEvent.clipboardData.getData('text/html')).toEqual('<table><tbody><tr><td>A2</td></tr></tbody></table>');\n    });\n\n    it('should be possible to copy multiline text', () => {\n      handsontable({\n        data: [\n          ['A\\nB', 'C']\n        ],\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = getPlugin('CopyPaste');\n\n      selectCell(0, 0, 0, 1);\n\n      plugin.onCopy(copyEvent);\n\n      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('\"A\\nB\"\\tC');\n      expect(copyEvent.clipboardData.getData('text/html')).toEqual('<table><tbody><tr><td>A<br>B</td><td>C</td></tr></tbody></table>');\n    });\n\n    it('should be possible to copy special chars', () => {\n      handsontable({\n        data: [\n          ['!@#$%^&*()_+-={[', ']};:\\'\"\\\\|,<.>/?~']\n        ],\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = getPlugin('CopyPaste');\n\n      selectCell(0, 0, 0, 1);\n\n      plugin.onCopy(copyEvent);\n\n      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('!@#$%^&*()_+-={[\\t]};:\\'\"\\\\|,<.>/?~');\n      expect(copyEvent.clipboardData.getData('text/html')).toEqual([\n        '<table><tbody><tr><td>!@#$%^&amp;*()_+-={[</td>',\n        '<td>]};:\\'\"\\\\|,&lt;.&gt;/?~</td></tr></tbody></table>'\n      ].join(''));\n    });\n\n    it('should be possible to copy text in quotes', () => {\n      handsontable({\n        data: [\n          ['{\"test\": \"value\"}'],\n          ['{\"test2\": {\"testtest\": \"\"}}'],\n          ['{\"test3\": \"\"}'],\n        ],\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = getPlugin('CopyPaste');\n\n      selectCell(0, 0, 2, 0);\n\n      plugin.onCopy(copyEvent);\n\n      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('{\"test\": \"value\"}\\n{\"test2\": {\"testtest\": \"\"}}\\n{\"test3\": \"\"}');\n      expect(copyEvent.clipboardData.getData('text/html')).toEqual([\n        '<table><tbody><tr><td>{\"test\": \"value\"}</td></tr><tr><td>{\"test2\": {\"testtest\": \"\"}}</td>',\n        '</tr><tr><td>{\"test3\": \"\"}</td></tr></tbody></table>'\n      ].join(''));\n    });\n\n    it('should be possible to copy 0 and false', () => {\n      handsontable({\n        data: [\n          [''],\n          [0],\n          [false],\n          [undefined],\n          [null],\n        ],\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = getPlugin('CopyPaste');\n\n      selectCell(0, 0, 4, 0);\n\n      plugin.onCopy(copyEvent);\n\n      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('\\n0\\nfalse\\n\\n');\n      expect(copyEvent.clipboardData.getData('text/html')).toEqual([\n        '<table><tbody><tr><td></td></tr><tr><td>0</td></tr><tr><td>false</td></tr>',\n        '<tr><td></td></tr><tr><td></td></tr></tbody></table>'\n      ].join(''));\n    });\n  });\n\n  describe('cut', () => {\n    xit('should be possible to cut data by keyboard shortcut', () => {\n      // simulated keyboard shortcuts doesn't run the true events\n    });\n\n    xit('should be possible to cut data by contextMenu option', () => {\n      // simulated mouse events doesn't run the true browser event\n    });\n\n    it('should be possible to cut data by API', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n      const cutEvent = getClipboardEvent('cut');\n      const plugin = hot.getPlugin('CopyPaste');\n\n      selectCell(1, 0);\n\n      plugin.onCut(cutEvent);\n\n      expect(cutEvent.clipboardData.getData('text/plain')).toBe('A2');\n      expect(cutEvent.clipboardData.getData('text/html')).toEqual('<table><tbody><tr><td>A2</td></tr></tbody></table>');\n\n      expect(hot.getDataAtCell(1, 0)).toBe('');\n    });\n\n    it('should call beforeCut and afterCut during cutting out operation', () => {\n      const beforeCutSpy = jasmine.createSpy('beforeCut');\n      const afterCutSpy = jasmine.createSpy('afterCut');\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCut: beforeCutSpy,\n        afterCut: afterCutSpy\n      });\n      const cutEvent = getClipboardEvent('cut');\n      const plugin = hot.getPlugin('CopyPaste');\n\n      selectCell(0, 0);\n\n      plugin.onCut(cutEvent);\n\n      expect(beforeCutSpy.calls.count()).toEqual(1);\n      expect(beforeCutSpy).toHaveBeenCalledWith([['A1']], [{ startRow: 0, startCol: 0, endRow: 0, endCol: 0 }], void 0, void 0, void 0, void 0);\n      expect(afterCutSpy.calls.count()).toEqual(1);\n      expect(afterCutSpy).toHaveBeenCalledWith([['A1']], [{ startRow: 0, startCol: 0, endRow: 0, endCol: 0 }], void 0, void 0, void 0, void 0);\n    });\n  });\n\n  describe('paste', () => {\n    it('should not create new rows or columns when allowInsertRow and allowInsertColumn equal false', async() => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_down',\n        },\n        allowInsertRow: false,\n        allowInsertColumn: false\n      });\n\n      selectCell(3, 4); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      await sleep(60);\n\n      const expected = arrayOfArrays();\n      expected[3][4] = 'Kia';\n      expect(getData()).toEqual(expected);\n    });\n\n    it('should shift data down instead of overwrite when paste (when allowInsertRow = false)', async() => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_down',\n        },\n        allowInsertRow: false\n      });\n\n      selectCell(1, 0); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      await sleep(60);\n\n      expect(getData().length).toEqual(4);\n      expect(getData(0, 0, 2, 4)).toEqual([['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['Kia', 'Nissan', 'Toyota', 12, 13], ['2008', 10, 11, 14, 13]]);\n    });\n\n    it('should shift data down instead of overwrite when paste (minSpareRows > 0)', async() => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_down'\n        },\n        minSpareRows: 1\n      });\n\n      selectCell(1, 0); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      await sleep(60);\n\n      expect(getData().length).toEqual(6);\n      expect(getData(0, 0, 2, 4)).toEqual([['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['Kia', 'Nissan', 'Toyota', 12, 13], ['2008', 10, 11, 14, 13]]);\n    });\n\n    it('should shift right insert instead of overwrite when paste', async() => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_right'\n        },\n        allowInsertColumn: false\n      });\n\n      selectCell(1, 0); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      await sleep(60);\n\n      expect(getData()[0].length).toEqual(5);\n      expect(getDataAtRow(1)).toEqual(['Kia', 'Nissan', 'Toyota', '2008', 10]);\n    });\n\n    it('should shift right insert instead of overwrite when paste (minSpareCols > 0)', (done) => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_right'\n        },\n        minSpareCols: 1\n      });\n\n      selectCell(1, 0); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      setTimeout(() => {\n        expect(getData()[0].length).toEqual(9);\n        expect(getDataAtRow(1)).toEqual(['Kia', 'Nissan', 'Toyota', '2008', 10, 11, 12, 13, null]);\n        done();\n      }, 60);\n    });\n\n    it('should not throw an error when changes are null in `once` hook', async() => {\n      let errors = 0;\n\n      try {\n        handsontable({\n          data: arrayOfArrays(),\n          afterChange(changes, source) {\n            if (source === 'loadData') {\n              return;\n            }\n\n            loadData(arrayOfArrays());\n          }\n        });\n\n        selectCell(1, 0); // selectAll\n        triggerPaste('Kia\\tNissan\\tToyota');\n\n      } catch (e) {\n        errors += 1;\n      }\n\n      await sleep(60);\n\n      expect(errors).toEqual(0);\n    });\n\n    it('should not paste any data, if no cell is selected', (done) => {\n      const copiedData1 = 'foo';\n      const copiedData2 = 'bar';\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 1)\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');\n      expect(getSelected()).toBeUndefined();\n\n      triggerPaste(copiedData1);\n\n      setTimeout(() => {\n        expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n        expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n        expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');\n      }, 100);\n\n      setTimeout(() => {\n        selectCell(1, 0, 2, 0);\n\n        triggerPaste(copiedData2);\n      }, 200);\n\n      setTimeout(() => {\n        expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n        expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual(copiedData2);\n        expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual(copiedData2);\n        done();\n      }, 300);\n    });\n\n    it('should not paste any data, if no cell is selected (select/deselect cell using mouse)', async() => {\n      const copiedData = 'foo';\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 1)\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');\n\n      spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseup');\n\n      expect(getSelected()).toEqual([[1, 0, 1, 0]]);\n\n      $('html').simulate('mousedown').simulate('mouseup');\n\n      expect(getSelected()).toBeUndefined();\n\n      triggerPaste(copiedData);\n\n      await sleep(100);\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');\n    });\n\n    it('should call beforePaste and afterPaste during pasting operation', async() => {\n      const beforePasteSpy = jasmine.createSpy('beforePaste');\n      const afterPasteSpy = jasmine.createSpy('afterPaste');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforePaste: beforePasteSpy,\n        afterPaste: afterPasteSpy\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      triggerPaste('Kia');\n\n      await sleep(60);\n\n      expect(beforePasteSpy.calls.count()).toEqual(1);\n      expect(beforePasteSpy).toHaveBeenCalledWith([['Kia']], [{ startRow: 0, startCol: 0, endRow: 0, endCol: 0 }], void 0, void 0, void 0, void 0);\n\n      expect(afterPasteSpy.calls.count()).toEqual(1);\n      expect(afterPasteSpy).toHaveBeenCalledWith([['Kia']], [{ startRow: 0, startCol: 0, endRow: 0, endCol: 0 }], void 0, void 0, void 0, void 0);\n    });\n\n    it('should be possible to block pasting', async() => {\n      const afterPasteSpy = jasmine.createSpy('afterPaste');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforePaste() {\n          return false;\n        },\n        afterPaste: afterPasteSpy\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      triggerPaste('Kia');\n\n      await sleep(60);\n\n      expect(afterPasteSpy.calls.count()).toEqual(0);\n    });\n\n    it('should be possible modification of changes', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforePaste(changes) {\n          changes.splice(0, 1);\n        }\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      triggerPaste('Kia\\nToyota');\n\n      await sleep(60);\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('Toyota');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n    });\n\n    it('should be possible to paste copied data from the same instance', async() => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n      });\n\n      expect(getDataAtCell(3, 1, 3, 1)).toEqual('B4');\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = getPlugin('CopyPaste');\n\n      selectCell(0, 0, 1, 4);\n\n      plugin.onCopy(copyEvent);\n\n      selectCell(4, 1);\n\n      plugin.onPaste(copyEvent);\n\n      expect(getDataAtCell(4, 1)).toEqual('A1');\n      expect(countCols()).toEqual(6);\n      expect(countRows()).toEqual(6);\n    });\n\n    it('should properly paste empty cells', async() => {\n      handsontable({\n        data: [\n          ['A', ''],\n          ['B', ''],\n          ['C', ''],\n          ['D', ''],\n        ],\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = getPlugin('CopyPaste');\n\n      selectCell(0, 1, 2, 1);\n\n      plugin.onCopy(copyEvent);\n\n      selectCell(2, 0);\n\n      plugin.onPaste(copyEvent);\n\n      expect(getDataAtCol(0)).toEqual(['A', 'B', '', '', '']);\n    });\n\n    it('should properly paste data with special chars', async() => {\n      handsontable({\n        data: [\n          ['{\"\"\"\"}', ''],\n          ['{\"\"\"\"}{\"\"\"\"}', ''],\n          ['{\"\"\"\"}{\"\"\"\"}{\"\"\"\"}', ''],\n        ],\n      });\n\n      const copyEvent = getClipboardEvent('copy');\n      const plugin = getPlugin('CopyPaste');\n\n      selectCell(0, 0, 2, 0);\n\n      plugin.onCopy(copyEvent);\n\n      selectCell(0, 1);\n\n      plugin.onPaste(copyEvent);\n\n      expect(getDataAtCol(1)).toEqual(['{\"\"\"\"}', '{\"\"\"\"}{\"\"\"\"}', '{\"\"\"\"}{\"\"\"\"}{\"\"\"\"}']);\n    });\n\n    it('should properly parse newline in text/plain on Windows', () => {\n      const afterChangeSpy = jasmine.createSpy('afterChange');\n\n      handsontable({\n        afterChange: afterChangeSpy,\n      });\n\n      selectCell(0, 0);\n\n      triggerPaste('Kia\\r\\nNissan\\r\\nToyota');\n\n      expect(afterChangeSpy)\n        .toHaveBeenCalledWith([[0, 0, null, 'Kia'], [1, 0, null, 'Nissan'], [2, 0, null, 'Toyota']], 'CopyPaste.paste', void 0, void 0, void 0, void 0);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/copyPaste/test/copyPaste.e2e.js","describe('CustomBorders', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    const wrapper = $('<div></div>').css({\n      width: 400,\n      height: 200,\n      overflow: 'scroll'\n    });\n\n    this.$wrapper = this.$container.wrap(wrapper).parent();\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n    this.$wrapper.remove();\n  });\n\n  describe('enabling/disabling plugin', () => {\n    it('should be disabled by default', () => {\n      const hot = handsontable();\n\n      expect(hot.getPlugin('customBorders').isEnabled()).toBe(false);\n    });\n\n    it('should disable plugin using updateSettings', () => {\n      const hot = handsontable({\n        customBorders: true\n      });\n\n      hot.updateSettings({\n        customBorders: false\n      });\n\n      expect(hot.getPlugin('customBorders').isEnabled()).toBe(false);\n    });\n\n    it('should enable plugin using updateSettings', () => {\n      const hot = handsontable({\n        customBorders: false\n      });\n\n      hot.updateSettings({\n        customBorders: true\n      });\n\n      expect(hot.getPlugin('customBorders')).toBeDefined();\n    });\n  });\n\n  it('should throw an exception `Unsupported selection ranges schema type was provided.` after calling setBorder method without parameter', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: true\n    });\n\n    const customBorders = hot.getPlugin('customBorders');\n    let errors = 0;\n\n    try {\n      customBorders.setBorders();\n    } catch (err) {\n      errors += 1;\n    }\n\n    expect(errors).toEqual(1);\n  });\n\n  it('should draw borders by use setBorders method', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: true\n    });\n\n    const redBorder = { color: 'red', width: 2 };\n    const empty = { hide: true };\n    const customBorders = hot.getPlugin('customBorders');\n\n    selectCells([[1, 1, 2, 2]]);\n\n    customBorders.setBorders(getSelected(), {\n      top: {\n        width: 2,\n        color: 'red'\n      },\n      bottom: {\n        width: 2,\n        color: 'red'\n      }\n    });\n\n    expect(getCellMeta(1, 1).borders.top).toEqual(redBorder);\n    expect(getCellMeta(1, 1).borders.left).toEqual(empty);\n    expect(getCellMeta(1, 1).borders.bottom).toEqual(redBorder);\n    expect(getCellMeta(1, 1).borders.right).toEqual(empty);\n\n    expect(getCellMeta(1, 2).borders.top).toEqual(redBorder);\n    expect(getCellMeta(1, 2).borders.left).toEqual(empty);\n    expect(getCellMeta(1, 2).borders.bottom).toEqual(redBorder);\n    expect(getCellMeta(1, 2).borders.right).toEqual(empty);\n\n    expect(getCellMeta(2, 1).borders.top).toEqual(redBorder);\n    expect(getCellMeta(2, 1).borders.left).toEqual(empty);\n    expect(getCellMeta(2, 1).borders.bottom).toEqual(redBorder);\n    expect(getCellMeta(2, 1).borders.right).toEqual(empty);\n\n    expect(getCellMeta(2, 2).borders.top).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.left).toEqual(empty);\n    expect(getCellMeta(2, 2).borders.bottom).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.right).toEqual(empty);\n  });\n\n  it('should redraw borders by use setBorders method', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: [{\n        row: 2,\n        col: 2,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 1,\n          color: 'green'\n        },\n        top: {\n          width: 2,\n          color: 'green'\n        }\n      }]\n    });\n\n    const redBorder = { color: 'red', width: 2 };\n    const greenBorder = { color: 'green', width: 1 };\n    const customBorders = hot.getPlugin('customBorders');\n\n    selectCell(2, 2);\n\n    customBorders.setBorders(getSelectedRange(), {\n      top: {\n        width: 2,\n        color: 'red'\n      },\n      bottom: {\n        width: 2,\n        color: 'red'\n      }\n    });\n\n    expect(getCellMeta(2, 2).borders.top).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.bottom).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.right).toEqual(greenBorder);\n  });\n\n  it('should hide only specific border by use setBorders method with {hide: true}', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: [{\n        row: 2,\n        col: 2,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 2,\n          color: 'red'\n        },\n        top: {\n          width: 1,\n          color: 'green'\n        }\n      }]\n    });\n\n    const greenBorder = { color: 'green', width: 1 };\n    const redBorder = { color: 'red', width: 2 };\n    const empty = { hide: true };\n    const customBorders = hot.getPlugin('customBorders');\n\n    expect(getCellMeta(2, 2).borders.top).toEqual(greenBorder);\n    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.bottom).toEqual(empty);\n    expect(getCellMeta(2, 2).borders.right).toEqual(redBorder);\n\n    selectCell(2, 2);\n\n    customBorders.setBorders(getSelected(), {\n      top: {\n        hide: true\n      }\n    });\n\n    expect(getCellMeta(2, 2).borders.top).toEqual(empty);\n    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.bottom).toEqual(empty);\n    expect(getCellMeta(2, 2).borders.right).toEqual(redBorder);\n  });\n\n  it('should hide all border by use setBorders method with eg. {top: false}', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: [{\n        row: 2,\n        col: 2,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 2,\n          color: 'red'\n        },\n        top: {\n          width: 1,\n          color: 'green'\n        }\n      }]\n    });\n\n    const greenBorder = { color: 'green', width: 1 };\n    const redBorder = { color: 'red', width: 2 };\n    const empty = { hide: true };\n    const customBorders = hot.getPlugin('customBorders');\n\n    expect(getCellMeta(2, 2).borders.top).toEqual(greenBorder);\n    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.bottom).toEqual(empty);\n    expect(getCellMeta(2, 2).borders.right).toEqual(redBorder);\n\n    expect(getCellMeta(0, 0).borders).toBeUndefined();\n    expect(getCellMeta(0, 1).borders).toBeUndefined();\n    expect(getCellMeta(0, 2).borders).toBeUndefined();\n    expect(getCellMeta(0, 3).borders).toBeUndefined();\n\n    expect(getCellMeta(1, 0).borders).toBeUndefined();\n    expect(getCellMeta(1, 1).borders).toBeUndefined();\n    expect(getCellMeta(1, 2).borders).toBeUndefined();\n    expect(getCellMeta(1, 3).borders).toBeUndefined();\n\n    expect(getCellMeta(2, 0).borders).toBeUndefined();\n    expect(getCellMeta(2, 1).borders).toBeUndefined();\n    expect(getCellMeta(2, 3).borders).toBeUndefined();\n\n    expect(getCellMeta(3, 0).borders).toBeUndefined();\n    expect(getCellMeta(3, 1).borders).toBeUndefined();\n    expect(getCellMeta(3, 2).borders).toBeUndefined();\n    expect(getCellMeta(3, 3).borders).toBeUndefined();\n\n    selectCell(2, 2);\n\n    customBorders.setBorders(getSelected(), {\n      top: false\n    });\n\n    expect(getCellMeta(2, 2).borders.top).toEqual(empty);\n    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);\n    expect(getCellMeta(2, 2).borders.bottom).toEqual(empty);\n    expect(getCellMeta(2, 2).borders.right).toEqual(redBorder);\n\n    expect(getCellMeta(0, 0).borders).toBeUndefined();\n    expect(getCellMeta(0, 1).borders).toBeUndefined();\n    expect(getCellMeta(0, 2).borders).toBeUndefined();\n    expect(getCellMeta(0, 3).borders).toBeUndefined();\n\n    expect(getCellMeta(1, 0).borders).toBeUndefined();\n    expect(getCellMeta(1, 1).borders).toBeUndefined();\n    expect(getCellMeta(1, 2).borders).toBeUndefined();\n    expect(getCellMeta(1, 3).borders).toBeUndefined();\n\n    expect(getCellMeta(2, 0).borders).toBeUndefined();\n    expect(getCellMeta(2, 1).borders).toBeUndefined();\n    expect(getCellMeta(2, 3).borders).toBeUndefined();\n\n    expect(getCellMeta(3, 0).borders).toBeUndefined();\n    expect(getCellMeta(3, 1).borders).toBeUndefined();\n    expect(getCellMeta(3, 2).borders).toBeUndefined();\n    expect(getCellMeta(3, 3).borders).toBeUndefined();\n  });\n\n  it('should return borders from the selected area by use getBorders method', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: [{\n        row: 2,\n        col: 2,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 1,\n          color: 'green'\n        },\n        top: {\n          width: 1,\n          color: 'green'\n        }\n      }]\n    });\n\n    const redBorder = { color: 'red', width: 2 };\n    const greenBorder = { color: 'green', width: 1 };\n    const empty = { hide: true };\n    const customBorders = hot.getPlugin('customBorders');\n\n    hot.selectCells([[1, 1, 2, 2]]);\n\n    const borders = customBorders.getBorders(getSelected());\n\n    expect(borders.length).toEqual(1);\n    expect(borders[0].top).toEqual(greenBorder);\n    expect(borders[0].left).toEqual(redBorder);\n    expect(borders[0].bottom).toEqual(empty);\n    expect(borders[0].right).toEqual(greenBorder);\n  });\n\n  it('should return all borders by use getBorders method without parameter', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: [{\n        range: {\n          from: {\n            row: 1,\n            col: 1\n          },\n          to: {\n            row: 3,\n            col: 3\n          }\n        },\n        top: {\n          width: 2,\n          color: 'blue'\n        },\n        left: {\n          width: 2,\n          color: 'orange'\n        },\n        bottom: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 2,\n          color: 'magenta'\n        }\n      },\n      {\n        row: 2,\n        col: 2,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 1,\n          color: 'green'\n        },\n        top: {\n          width: 2,\n          color: 'green'\n        }\n      }]\n    });\n\n    const customBorders = hot.getPlugin('customBorders');\n\n    const borders = customBorders.getBorders();\n\n    expect(borders.length).toEqual(9);\n  });\n\n  it('should clear borders from the selected area by use clearBorders method', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: [{\n        range: {\n          from: {\n            row: 1,\n            col: 1\n          },\n          to: {\n            row: 3,\n            col: 3\n          }\n        },\n        top: {\n          width: 2,\n          color: 'blue'\n        },\n        left: {\n          width: 2,\n          color: 'orange'\n        },\n        bottom: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 2,\n          color: 'magenta'\n        }\n      },\n      {\n        row: 2,\n        col: 2,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 1,\n          color: 'green'\n        },\n        top: {\n          width: 2,\n          color: 'green'\n        }\n      }]\n    });\n\n    const magentaBorder = { color: 'magenta', width: 2 };\n    const blueBorder = { color: 'blue', width: 2 };\n    const orangeBorder = { color: 'orange', width: 2 };\n    const redBorder = { color: 'red', width: 2 };\n    const customBorders = hot.getPlugin('customBorders');\n\n    selectCells([[0, 0, 2, 2]]);\n\n    customBorders.clearBorders(getSelectedRange());\n\n    expect(getCellMeta(1, 1).borders).toBeUndefined();\n    expect(getCellMeta(1, 2).borders).toBeUndefined();\n    expect(getCellMeta(2, 1).borders).toBeUndefined();\n    expect(getCellMeta(2, 2).borders).toBeUndefined();\n\n    expect(getCellMeta(1, 3).borders.top).toEqual(blueBorder);\n    expect(getCellMeta(1, 3).borders.right).toEqual(magentaBorder);\n    expect(getCellMeta(2, 3).borders.right).toEqual(magentaBorder);\n    expect(getCellMeta(3, 1).borders.left).toEqual(orangeBorder);\n    expect(getCellMeta(3, 1).borders.bottom).toEqual(redBorder);\n    expect(getCellMeta(3, 2).borders.bottom).toEqual(redBorder);\n    expect(getCellMeta(3, 3).borders.right).toEqual(magentaBorder);\n    expect(getCellMeta(3, 3).borders.bottom).toEqual(redBorder);\n  });\n\n  it('should clear all borders by use clearBorders method without parameter', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      customBorders: [{\n        range: {\n          from: {\n            row: 1,\n            col: 1\n          },\n          to: {\n            row: 3,\n            col: 3\n          }\n        },\n        top: {\n          width: 2,\n          color: 'blue'\n        },\n        left: {\n          width: 2,\n          color: 'orange'\n        },\n        bottom: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 2,\n          color: 'magenta'\n        }\n      },\n      {\n        row: 2,\n        col: 2,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 1,\n          color: 'green'\n        },\n        top: {\n          width: 2,\n          color: 'green'\n        }\n      }]\n    });\n\n    const customBorders = hot.getPlugin('customBorders');\n\n    customBorders.clearBorders();\n\n    expect(getCellMeta(1, 1).borders).toBeUndefined();\n    expect(getCellMeta(1, 2).borders).toBeUndefined();\n    expect(getCellMeta(2, 1).borders).toBeUndefined();\n    expect(getCellMeta(2, 2).borders).toBeUndefined();\n\n    expect(getCellMeta(1, 3).borders).toBeUndefined();\n    expect(getCellMeta(2, 3).borders).toBeUndefined();\n    expect(getCellMeta(3, 1).borders).toBeUndefined();\n    expect(getCellMeta(3, 2).borders).toBeUndefined();\n    expect(getCellMeta(3, 3).borders).toBeUndefined();\n  });\n\n  it('should draw borders from context menu options when was first cleared borders by the clearBorders method', async() => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: [{\n        row: 0,\n        col: 0,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 1,\n          color: 'green'\n        },\n        top: {\n          width: 2,\n          color: 'green'\n        }\n      }]\n    });\n\n    const defaultBorder = { color: '#000', width: 1 };\n    const empty = { hide: true };\n    const customBorders = hot.getPlugin('customBorders');\n\n    selectCell(0, 0);\n\n    customBorders.clearBorders(getSelectedRange());\n\n    expect(getCellMeta(0, 0).borders).toBeUndefined();\n\n    contextMenu();\n    const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);\n    item.simulate('mouseover');\n\n    await sleep(300);\n\n    const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n    const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);\n\n    button.simulate('mousedown');\n\n    expect(getCellMeta(0, 0).borders.top).toEqual(defaultBorder);\n    expect(getCellMeta(0, 0).borders.left).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.right).toEqual(empty);\n  });\n\n  it('should clear all borders when first was cleared borders by the clearBorders method with selections,' +\n  'then draw borders from context menu options, and then was cleared borders by the clearBorders method without selections', async() => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: [{\n        row: 0,\n        col: 0,\n        left: {\n          width: 2,\n          color: 'red'\n        },\n        right: {\n          width: 1,\n          color: 'green'\n        },\n        top: {\n          width: 2,\n          color: 'green'\n        }\n      }]\n    });\n\n    const defaultBorder = { color: '#000', width: 1 };\n    const empty = { hide: true };\n    const customBorders = hot.getPlugin('customBorders');\n\n    selectCell(0, 0);\n\n    customBorders.clearBorders(getSelectedRange());\n\n    expect(getCellMeta(0, 0).borders).toBeUndefined();\n\n    contextMenu();\n    const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);\n    item.simulate('mouseover');\n\n    await sleep(300);\n\n    const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n    const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);\n\n    button.simulate('mousedown');\n\n    expect(getCellMeta(0, 0).borders.top).toEqual(defaultBorder);\n    expect(getCellMeta(0, 0).borders.left).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.right).toEqual(empty);\n\n    customBorders.clearBorders();\n    expect(getCellMeta(0, 0).borders).toBeUndefined();\n  });\n\n  it('should draw top border from context menu options', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: true\n    });\n\n    const defaultBorder = { color: '#000', width: 1 };\n    const empty = { hide: true };\n\n    contextMenu();\n    const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);\n    item.simulate('mouseover');\n\n    await sleep(300);\n\n    const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n    const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);\n\n    button.simulate('mousedown');\n\n    // expect(getCellMeta(0,0).borders.hasOwnProperty('top')).toBe(true);\n    expect(getCellMeta(0, 0).borders.top).toEqual(defaultBorder);\n    expect(getCellMeta(0, 0).borders.left).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.right).toEqual(empty);\n  });\n\n  it('should draw left border from context menu options', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: true\n    });\n\n    const defaultBorder = { color: '#000', width: 1 };\n    const empty = { hide: true };\n\n    contextMenu();\n    const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);\n    item.simulate('mouseover');\n\n    await sleep(300);\n\n    const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n    const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(3);\n\n    button.simulate('mousedown');\n\n    /* eslint-disable no-prototype-builtins */\n    expect(getCellMeta(0, 0).borders.hasOwnProperty('left')).toBe(true);\n    expect(getCellMeta(0, 0).borders.top).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.left).toEqual(defaultBorder);\n    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.right).toEqual(empty);\n  });\n\n  it('should draw right border from context menu options', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: true\n    });\n\n    const defaultBorder = { color: '#000', width: 1 };\n    const empty = { hide: true };\n\n    contextMenu();\n    const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);\n    item.simulate('mouseover');\n\n    await sleep(300);\n\n    const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n    const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(1);\n\n    button.simulate('mousedown');\n\n    /* eslint-disable no-prototype-builtins */\n    expect(getCellMeta(0, 0).borders.hasOwnProperty('right')).toBe(true);\n    expect(getCellMeta(0, 0).borders.top).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.left).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.right).toEqual(defaultBorder);\n  });\n\n  it('should draw bottom border from context menu options', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: true\n    });\n\n    const defaultBorder = { color: '#000', width: 1 };\n    const empty = { hide: true };\n\n    contextMenu();\n    const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);\n    item.simulate('mouseover');\n\n    await sleep(300);\n\n    const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n    const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);\n\n    button.simulate('mousedown');\n\n    /* eslint-disable no-prototype-builtins */\n    expect(getCellMeta(0, 0).borders.hasOwnProperty('right')).toBe(true);\n    expect(getCellMeta(0, 0).borders.top).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.left).toEqual(empty);\n    expect(getCellMeta(0, 0).borders.bottom).toEqual(defaultBorder);\n    expect(getCellMeta(0, 0).borders.right).toEqual(empty);\n  });\n\n  it('should remove all bottoms border from context menu options', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: [\n        {\n          row: 0,\n          col: 0,\n          left: {\n            width: 2,\n            color: 'red'\n          },\n          right: {\n            width: 1,\n            color: 'green'\n          }\n        }]\n    });\n\n    contextMenu();\n    const item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);\n    item.simulate('mouseover');\n\n    await sleep(300);\n\n    const contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n    const button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(4);\n\n    button.simulate('mousedown');\n\n    expect(getCellMeta(0, 0).borders).toBeUndefined();\n  });\n\n  it('should disable `Borders` context menu item when menu was triggered from corner header', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n      rowHeaders: true,\n      colHeaders: true,\n      contextMenu: true,\n      customBorders: true,\n    });\n\n    $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0).simulate('mousedown', { which: 3 });\n    contextMenu();\n\n    expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n      'Insert column left',\n      'Insert column right',\n      'Remove row',\n      'Remove column',\n      'Undo',\n      'Redo',\n      'Read only',\n      'Alignment',\n      'Borders',\n    ].join(''));\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/customBorders/test/customBorders.e2e.js","describe('DragToScroll', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function createBoundaries() {\n    return {\n      top: 100,\n      left: 100,\n      width: 900,\n      height: 900,\n      bottom: 1000,\n      right: 1000\n    };\n  }\n\n  it('exact top, exact left should be in boundaries', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      dragToScroll: true\n    });\n\n    const dragToScroll = hot.getPlugin('dragToScroll');\n\n    dragToScroll.setBoundaries(createBoundaries());\n\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(0);\n      expect(scrollY).toEqual(0);\n    });\n\n    dragToScroll.check(100, 100);\n  });\n\n  it('exact bottom, exact right should be in boundaries', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      dragToScroll: true\n    });\n\n    const dragToScroll = hot.getPlugin('dragToScroll');\n\n    dragToScroll.setBoundaries(createBoundaries());\n\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(0);\n      expect(scrollY).toEqual(0);\n    });\n\n    dragToScroll.check(1000, 1000);\n  });\n\n  it('less than top, less than left should be out in \"top\" direction', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      dragToScroll: true\n    });\n\n    const dragToScroll = hot.getPlugin('dragToScroll');\n\n    dragToScroll.setBoundaries(createBoundaries());\n\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(-1);\n      expect(scrollY).toEqual(-1);\n    });\n\n    dragToScroll.check(99, 99);\n  });\n\n  it('exact top, less than left should be out in \"left\" direction', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      dragToScroll: true\n    });\n\n    const dragToScroll = hot.getPlugin('dragToScroll');\n\n    dragToScroll.setBoundaries(createBoundaries());\n\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(-1);\n      expect(scrollY).toEqual(0);\n    });\n\n    dragToScroll.check(99, 100);\n  });\n\n  it('less than top, more than right should be out in \"top\" direction', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      dragToScroll: true\n    });\n\n    const dragToScroll = hot.getPlugin('dragToScroll');\n\n    dragToScroll.setBoundaries(createBoundaries());\n\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(1);\n      expect(scrollY).toEqual(-1);\n    });\n\n    dragToScroll.check(1001, 99);\n  });\n\n  it('more than bottom, more than right should be out in \"bottom\" direction', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      dragToScroll: true\n    });\n\n    const dragToScroll = hot.getPlugin('dragToScroll');\n\n    dragToScroll.setBoundaries(createBoundaries());\n\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(1);\n      expect(scrollY).toEqual(1);\n    });\n\n    dragToScroll.check(1001, 1001);\n  });\n\n  it('exact bottom, more than right should be out in \"right\" direction', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      dragToScroll: true\n    });\n\n    const dragToScroll = hot.getPlugin('dragToScroll');\n\n    dragToScroll.setBoundaries(createBoundaries());\n\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(1);\n      expect(scrollY).toEqual(0);\n    });\n\n    dragToScroll.check(1001, 1000);\n  });\n\n  it('more than bottom, less than left should be out in \"bottom\" direction', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      dragToScroll: true\n    });\n\n    const dragToScroll = hot.getPlugin('dragToScroll');\n\n    dragToScroll.setBoundaries(createBoundaries());\n\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(-1);\n      expect(scrollY).toEqual(1);\n    });\n\n    dragToScroll.check(99, 1001);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/dragToScroll/test/dragToScroll.e2e.js","describe('manualColumnFreeze', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('freezeColumn', () => {\n    it('should increase fixedColumnsLeft setting', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true\n      });\n      const plugin = hot.getPlugin('manualColumnFreeze');\n      plugin.freezeColumn(4);\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n    });\n\n    it('should freeze (make fixed) the column provided as an argument', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true\n      });\n\n      const plugin = hot.getPlugin('manualColumnFreeze');\n      const movePlugin = hot.getPlugin('manualColumnMove');\n\n      plugin.freezeColumn(5);\n\n      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(5);\n    });\n  });\n\n  describe('unfreezeColumn', () => {\n    it('should decrease fixedColumnsLeft setting', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        fixedColumnsLeft: 1\n      });\n      const plugin = hot.getPlugin('manualColumnFreeze');\n\n      plugin.unfreezeColumn(0);\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(0);\n    });\n\n    it('should unfreeze (make non-fixed) the column provided as an argument', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        fixedColumnsLeft: 3\n      });\n\n      const plugin = hot.getPlugin('manualColumnFreeze');\n      const movePlugin = hot.getPlugin('manualColumnMove');\n\n      plugin.unfreezeColumn(0);\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(1);\n      expect(movePlugin.columnsMapper.getValueByIndex(1)).toEqual(2);\n      expect(movePlugin.columnsMapper.getValueByIndex(2)).toEqual(0);\n    });\n\n    it('should unfreeze the last column', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true\n      });\n\n      const plugin = hot.getPlugin('manualColumnFreeze');\n      const movePlugin = hot.getPlugin('manualColumnMove');\n\n      plugin.freezeColumn(9);\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(9);\n      expect(movePlugin.columnsMapper.getValueByIndex(9)).toEqual(8);\n\n      plugin.unfreezeColumn(0);\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(0);\n      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(0);\n      expect(movePlugin.columnsMapper.getValueByIndex(9)).toEqual(9);\n    });\n  });\n\n  describe('functionality', () => {\n\n    it('should add a \\'freeze column\\' context menu entry for non-fixed columns', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        contextMenu: true\n      });\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Freeze column';\n\n      });\n\n      expect(freezeEntry.size()).toEqual(1);\n    });\n\n    it('should add a \\'unfreeze column\\' context menu entry for fixed columns', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        contextMenu: true,\n        fixedColumnsLeft: 2\n      });\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Unfreeze column';\n\n      });\n\n      expect(freezeEntry.size()).toEqual(1);\n    });\n\n    it('should fix the desired column after clicking the \\'freeze column\\' context menu entry', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        fixedColumnsLeft: 1,\n        contextMenu: true\n      });\n\n      selectCell(1, 3);\n\n      const dataAtCell = hot.getDataAtCell(1, 3);\n\n      contextMenu();\n\n      const freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        if ($(this).text() === 'Freeze column') {\n          return true;\n        }\n        return false;\n      });\n\n      expect(freezeEntry.size()).toEqual(1);\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n      expect(hot.getDataAtCell(1, 1)).toEqual(dataAtCell);\n\n    });\n\n    it('should unfix the desired column (and revert it to it\\'s original position) after clicking the \\'unfreeze column\\' context menu entry', async() => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        fixedColumnsLeft: 3,\n        manualColumnMove: [0, 2, 5, 3, 4, 1, 6, 7, 8, 9],\n        contextMenu: true,\n        rowHeaders: true\n      });\n\n      let dataAtCell = hot.getDataAtCell(1, 0);\n      expect(dataAtCell).toEqual('A2');\n      dataAtCell = hot.getDataAtCell(1, 1);\n      expect(dataAtCell).toEqual('C2');\n      dataAtCell = hot.getDataAtCell(1, 2);\n      expect(dataAtCell).toEqual('F2');\n\n      selectCell(1, 1);\n      contextMenu();\n\n      let freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Unfreeze column';\n\n      });\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n      dataAtCell = hot.getDataAtCell(1, 0);\n      expect(dataAtCell).toEqual('A2');\n      dataAtCell = hot.getDataAtCell(1, 1);\n      expect(dataAtCell).toEqual('F2');\n      dataAtCell = hot.getDataAtCell(1, 2);\n      expect(dataAtCell).toEqual('C2');\n\n      selectCell(1, 1);\n      contextMenu();\n\n      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        if ($(this).text() === 'Unfreeze column') {\n          return true;\n        }\n        return false;\n      });\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n      dataAtCell = hot.getDataAtCell(1, 0);\n      expect(dataAtCell).toEqual('A2');\n      dataAtCell = hot.getDataAtCell(1, 1);\n      expect(dataAtCell).toEqual('C2');\n      dataAtCell = hot.getDataAtCell(1, 2);\n      expect(dataAtCell).toEqual('D2');\n\n      dataAtCell = hot.getDataAtCell(1, 5);\n      expect(dataAtCell).toEqual('F2');\n\n      // Use the modified columns position.\n      hot.updateSettings({\n        fixedColumnsLeft: 0,\n        manualColumnMove: [0, 2, 5, 3, 4, 1, 6, 7, 8, 9],\n      });\n\n      await sleep(300);\n\n      hot.getSettings().fixedColumnsLeft = 0;\n\n      selectCell(1, 2);\n      contextMenu();\n      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Freeze column';\n      });\n\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n      dataAtCell = hot.getDataAtCell(1, 0);\n      expect(dataAtCell).toEqual('F2');\n\n      selectCell(1, 0);\n      contextMenu();\n      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Unfreeze column';\n      });\n\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(0);\n      dataAtCell = hot.getDataAtCell(1, 2);\n      expect(dataAtCell).toEqual('F2');\n    });\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/manualColumnFreeze/test/manualColumnFreeze.e2e.js","describe('manualColumnMove', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('init', () => {\n    it('should change column order at init', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: [1, 2, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n    });\n  });\n\n  describe('persistentState', () => {\n    it('should load data from cache after initialization of new Handsontable instance', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true,\n        persistentState: true\n      });\n\n      const dataAt0x2Cell = getDataAtCell(0, 2);\n      const manualColumnMovePlugin = hot.getPlugin('manualColumnMove');\n\n      manualColumnMovePlugin.moveColumn(2, 0);\n      manualColumnMovePlugin.persistentStateSave();\n\n      hot.destroy();\n      spec().$container.remove();\n      spec().$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true,\n        persistentState: true\n      });\n\n      expect(getDataAtCell(0, 0)).toEqual(dataAt0x2Cell);\n    });\n\n    it('should work with updateSettings properly', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true,\n        persistentState: true\n      });\n\n      const dataAt0x2Cell = getDataAtCell(0, 2);\n      const manualColumnMovePlugin = hot.getPlugin('manualColumnMove');\n\n      manualColumnMovePlugin.moveColumn(2, 0);\n      manualColumnMovePlugin.persistentStateSave();\n\n      updateSettings({});\n      expect(getDataAtCell(0, 0)).toEqual(dataAt0x2Cell);\n    });\n  });\n\n  describe('updateSettings', () => {\n    it('should be enabled after specifying it in updateSettings config', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true\n      });\n\n      updateSettings({\n        manualColumnMove: true\n      });\n\n      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mouseup');\n\n      expect(spec().$container.hasClass('after-selection--columns')).toBeGreaterThan(0);\n    });\n\n    it('should change the default column order with updateSettings', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      updateSettings({\n        manualColumnMove: [2, 1, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n    });\n\n    it('should change column order with updateSettings', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: [1, 2, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n\n      updateSettings({\n        manualColumnMove: [2, 1, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n    });\n\n    it('should update columnsMapper when updateSettings change numbers of columns', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumn(2, 0);\n\n      updateSettings({\n        columns: [\n          { data: 2 },\n          { data: 0 },\n          { data: 1 },\n        ]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n    });\n\n    it('should reset column order with updateSettings when undefined is passed', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: [1, 2, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n\n      updateSettings({\n        manualColumnMove: void 0\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n    });\n  });\n\n  describe('loadData', () => {\n    it('should increase numbers of columns if it is necessary', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        manualColumnMove: true\n      });\n\n      hot.loadData(Handsontable.helper.createSpreadsheetData(10, 10));\n\n      expect(countRows()).toEqual(10);\n      expect(hot.getPlugin('manualColumnMove').columnsMapper.__arrayMap.length).toEqual(10);\n    });\n\n    it('should decrease numbers of columns if it is necessary', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        manualColumnMove: true\n      });\n\n      hot.loadData(Handsontable.helper.createSpreadsheetData(2, 2));\n\n      expect(countRows()).toEqual(2);\n      expect(hot.getPlugin('manualColumnMove').columnsMapper.__arrayMap.length).toEqual(2);\n    });\n  });\n\n  describe('moving', () => {\n    it('should move column by API', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumn(2, 0);\n      hot.render();\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('B1');\n    });\n\n    it('should move many columns by API', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumns([7, 9, 8], 0);\n      hot.render();\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('H1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('I1');\n    });\n\n    it('should trigger an beforeColumnMove event before column move', () => {\n      const beforeMoveColumnCallback = jasmine.createSpy('beforeMoveColumnCallback');\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        beforeColumnMove: beforeMoveColumnCallback\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumns([8, 9, 7], 0);\n      hot.render();\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('I1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('H1');\n\n      expect(beforeMoveColumnCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);\n    });\n\n    it('should trigger an afterColumnMove event after column move', () => {\n      const afterMoveColumnCallback = jasmine.createSpy('afterMoveColumnCallback');\n\n      spec().$container.height(150);\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        afterColumnMove: afterMoveColumnCallback\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumns([8, 9, 7], 0);\n      hot.render();\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('I1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('H1');\n\n      expect(afterMoveColumnCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);\n    });\n\n    it('should move the second column to the first column', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      const $rowsHeaders = spec().$container.find('.ht_clone_top tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(0).simulate('mouseover');\n      $rowsHeaders.eq(0).simulate('mousemove');\n      $rowsHeaders.eq(0).simulate('mouseup');\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n    });\n\n    it('should move the second row to the third row', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      const $rowsHeaders = spec().$container.find('.ht_clone_top tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(3).simulate('mouseover');\n      $rowsHeaders.eq(3).simulate('mousemove');\n      $rowsHeaders.eq(3).simulate('mouseup');\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('B1');\n    });\n\n    it('should properly scrolling viewport if mouse is over part-visible cell', (done) => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 20),\n        colHeaders: true,\n        rowHeaders: true,\n        manualColumnMove: true,\n        width: 600,\n        height: 600,\n        colWidths: 47\n      });\n\n      hot.selectCell(0, 19);\n\n      setTimeout(() => {\n        expect(hot.view.wt.wtTable.getFirstVisibleColumn()).toBeGreaterThan(8);\n\n        const $rowsHeaders = spec().$container.find('.ht_clone_top tr th');\n\n        $rowsHeaders.eq(2).simulate('mousedown');\n        $rowsHeaders.eq(2).simulate('mouseup');\n        $rowsHeaders.eq(2).simulate('mousedown');\n        $rowsHeaders.eq(1).simulate('mouseover');\n        $rowsHeaders.eq(1).simulate('mousemove');\n        $rowsHeaders.eq(1).simulate('mouseup');\n      }, 50);\n\n      setTimeout(() => {\n        expect(hot.view.wt.wtTable.getFirstVisibleColumn()).toBeLessThan(9);\n        done();\n      }, 150);\n    });\n\n    it('moving column should keep cell meta created using cells function', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        cells(row, col) {\n          if (row === 1 && col === 0) {\n            this.readOnly = true;\n          }\n        }\n      });\n\n      const htCore = getHtCore();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n\n      hot.getPlugin('manualColumnMove').moveColumn(0, 3);\n      hot.render();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(2)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n    });\n\n    it('moving column should keep cell meta created using cell array', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        cell: [\n          { row: 1, col: 0, readOnly: true }\n        ]\n      });\n\n      const htCore = getHtCore();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n\n      hot.getPlugin('manualColumnMove').moveColumn(3, 0);\n      hot.render();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(1)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n    });\n  });\n\n  describe('callbacks', () => {\n\n    it('should run `beforeColumnMove` and `afterColumnMove` with proper visual `target` parameter', () => {\n      let targetParameterInsideBeforeColumnMoveCallback;\n      let targetParameterInsideAfterColumnMoveCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        colHeaders: true,\n        manualColumnMove: true,\n        beforeColumnMove: (columns, target) => {\n          targetParameterInsideBeforeColumnMoveCallback = target;\n        },\n        afterColumnMove: (columns, target) => {\n          targetParameterInsideAfterColumnMoveCallback = target;\n        }\n      });\n\n      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mouseup');\n      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mousedown');\n\n      spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseover');\n      spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mousemove');\n      spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseup');\n\n      expect(targetParameterInsideBeforeColumnMoveCallback).toEqual(2);\n      expect(targetParameterInsideAfterColumnMoveCallback).toEqual(2);\n    });\n\n    it('should run `beforeColumnMove` and `afterColumnMove` with proper visual `columns` parameter', () => {\n      let columnsParameterInsideBeforeColumnMoveCallback;\n      let columnsParameterInsideAfterColumnMoveCallback;\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        beforeColumnMove: (columns) => {\n          columnsParameterInsideBeforeColumnMoveCallback = columns;\n        },\n        afterColumnMove: (columns) => {\n          columnsParameterInsideAfterColumnMoveCallback = columns;\n        }\n      });\n\n      hot.getPlugin('manualColumnMove').moveColumn(2, 0);\n\n      expect(columnsParameterInsideBeforeColumnMoveCallback).toEqual([2]);\n      expect(columnsParameterInsideAfterColumnMoveCallback).toEqual([2]);\n      expect(columnsParameterInsideBeforeColumnMoveCallback).toEqual(columnsParameterInsideAfterColumnMoveCallback);\n\n      hot.getPlugin('manualColumnMove').moveColumn(2, 0);\n\n      expect(columnsParameterInsideBeforeColumnMoveCallback).toEqual([2]);\n      expect(columnsParameterInsideAfterColumnMoveCallback).toEqual([2]);\n      expect(columnsParameterInsideBeforeColumnMoveCallback).toEqual(columnsParameterInsideAfterColumnMoveCallback);\n    });\n  });\n\n  describe('copy-paste', () => {\n    it('should create new columns is are needed', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        colHeaders: true,\n        manualColumnMove: true,\n      });\n      const changesSet = [\n        [3, 4, 'A1'],\n        [3, 5, 'B1'],\n        [3, 6, 'C1'],\n        [3, 7, 'D1'],\n      ];\n\n      // unfortunately couse of security rules, we can't simulate native mechanism (e.g. CTRL+C -> CTRL+V)\n      hot.setDataAtCell(changesSet, void 0, void 0, 'CopyPaste.paste');\n\n      expect(hot.countCols()).toEqual(8);\n    });\n  });\n\n  describe('undoRedo', () => {\n    xit('should back changes', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n      });\n      hot.getPlugin('manualColumnMove').moveColumn(1, 4);\n      hot.render();\n\n      expect(hot.getDataAtCell(1, 3)).toBe('B2');\n\n      hot.undo();\n\n      expect(hot.getDataAtCell(1, 3)).toBe('D2');\n    });\n\n    xit('should revert changes', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n      });\n      hot.getPlugin('manualColumnMove').moveColumn(1, 4);\n      hot.render();\n\n      expect(hot.getDataAtCell(1, 3)).toBe('A2');\n\n      hot.undo();\n\n      expect(hot.getDataAtCell(1, 1)).toBe('A2');\n\n      hot.redo();\n\n      expect(hot.getDataAtCell(1, 3)).toBe('A2');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/manualColumnMove/test/manualColumnMove.e2e.js","describe('manualColumnMove', () => {\n  const id = 'testContainer';\n  const arrayOfArrays = Handsontable.helper.createSpreadsheetData(30, 30);\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('UI', () => {\n    it('should append UI elements to wtHider after click on row header', () => {\n      handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      const $headerTH = spec().$container.find('thead tr:eq(0) th:eq(0)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(spec().$container.find('.ht__manualColumnMove--guideline').length).toBe(1);\n      expect(spec().$container.find('.ht__manualColumnMove--backlight').length).toBe(1);\n    });\n\n    it('should part of UI elements be visible on dragging action', () => {\n      handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      const $headerTH = spec().$container.find('thead tr:eq(0) th:eq(0)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(spec().$container.find('.ht__manualColumnMove--guideline:visible').length).toBe(0);\n      expect(spec().$container.find('.ht__manualColumnMove--backlight:visible').length).toBe(1);\n    });\n\n    it('should all of UI elements be visible on dragging action', () => {\n      handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      const $headers = [\n        spec().$container.find('thead tr:eq(0) th:eq(0)'),\n        spec().$container.find('thead tr:eq(0) th:eq(1)'),\n        spec().$container.find('thead tr:eq(0) th:eq(2)'),\n      ];\n\n      $headers[0].simulate('mousedown');\n      $headers[0].simulate('mouseup');\n      $headers[0].simulate('mousedown');\n      $headers[1].simulate('mouseover');\n      $headers[2].simulate('mouseover');\n\n      expect(spec().$container.find('.ht__manualColumnMove--guideline:visible').length).toBe(1);\n      expect(spec().$container.find('.ht__manualColumnMove--backlight:visible').length).toBe(1);\n    });\n\n    it('should set properly width for the backlight element when stretchH is enabled', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 5),\n        width: 600,\n        colHeaders: true,\n        stretchH: 'all',\n        manualColumnMove: true\n      });\n\n      const $headerTH = spec().$container.find('thead tr:eq(0) th:eq(1)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(spec().$container.find('.ht__manualColumnMove--backlight')[0].offsetWidth).toBe($headerTH[0].offsetWidth);\n    });\n\n    it('should set properly width for the backlight element when stretchH is enabled and column order was changed', () => {\n      handsontable({\n        data: [\n          { id: 1, flag: 'EUR', currencyCode: 'EUR', currency: 'Euro', level: 0.9033, units: 'EUR / USD', asOf: '08/19/2015', onedChng: 0.0026 },\n        ],\n        width: 600,\n        colHeaders: true,\n        stretchH: 'all',\n        manualColumnMove: [2, 4, 6, 3, 1, 0],\n        columns: [\n          { data: 'id', type: 'numeric', width: 40 },\n          { data: 'currencyCode', type: 'text' },\n          { data: 'currency', type: 'text' },\n          { data: 'level', type: 'numeric', numericFormat: { pattern: '0.0000' } },\n          { data: 'units', type: 'text' },\n          { data: 'asOf', type: 'date', dateFormat: 'MM/DD/YYYY' },\n          { data: 'onedChng', type: 'numeric', numericFormat: { pattern: '0.00%' } }\n        ]\n      });\n\n      const $headerTH = spec().$container.find('thead tr:eq(0) th:eq(6)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(spec().$container.find('.ht__manualColumnMove--backlight')[0].offsetWidth).toBe($headerTH[0].offsetWidth);\n    });\n\n    it('should set proper left position of the backlight element when colWidths is undefined', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true,\n        rowHeaders: true,\n        colHeaders: true,\n      });\n\n      const header = spec().$container.find('thead tr:eq(0) th:eq(2)');\n\n      header.simulate('mousedown');\n      header.simulate('mouseup');\n      header.simulate('mousedown');\n\n      expect(spec().$container.find('.ht__manualColumnMove--backlight')[0].offsetLeft).toBe(100);\n    });\n\n    it('should set proper left position of the backlight element when colWidths is defined', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true,\n        rowHeaders: true,\n        colWidths: 100,\n        colHeaders: true,\n      });\n\n      const header = spec().$container.find('thead tr:eq(0) th:eq(2)');\n\n      header.simulate('mousedown');\n      header.simulate('mouseup');\n      header.simulate('mousedown');\n\n      expect(spec().$container.find('.ht__manualColumnMove--backlight')[0].offsetLeft).toBe(150);\n    });\n\n    it('should not run moving ui if mousedown was fired on sorting element', () => {\n      handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true,\n        columnSorting: true\n      });\n\n      const $headerTH = spec().$container.find('thead tr:eq(0) th:eq(6)');\n      const $summaryElement = $headerTH.find('.columnSorting');\n\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n\n      const $backlight = spec().$container.find('.ht__manualColumnMove--backlight')[0];\n      $summaryElement.simulate('mousedown');\n\n      const displayProp = $backlight.currentStyle ? $backlight.currentStyle.display : getComputedStyle($backlight, null).display;\n      expect(displayProp).toEqual('none');\n    });\n\n    it('should run moving ui if mousedown was fired on sorting element when sort header action is not enabled', function() {\n      handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true,\n        columnSorting: {\n          headerAction: false\n        }\n      });\n\n      const $headerTH = this.$container.find('thead tr:eq(0) th:eq(6)');\n      const $summaryElement = $headerTH.find('.columnSorting');\n\n      $summaryElement.simulate('mousedown');\n\n      const $backlight = this.$container.find('.ht__manualColumnMove--backlight');\n\n      expect($backlight.length).toBe(0);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/manualColumnMove/test/manualColumnMoveUI.e2e.js","describe('manualColumnResize', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should change column widths at init', () => {\n    handsontable({\n      manualColumnResize: [100, 150, 180]\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(100);\n    expect(colWidth(spec().$container, 1)).toBe(150);\n    expect(colWidth(spec().$container, 2)).toBe(180);\n  });\n\n  it('should be enabled after specifying it in updateSettings config', () => {\n    handsontable({\n      data: [\n        { id: 1, name: 'Ted', lastName: 'Right' },\n        { id: 2, name: 'Frank', lastName: 'Honest' },\n        { id: 3, name: 'Joan', lastName: 'Well' },\n        { id: 4, name: 'Sid', lastName: 'Strong' },\n        { id: 5, name: 'Jane', lastName: 'Neat' }\n      ],\n      colHeaders: true\n    });\n\n    updateSettings({ manualColumnResize: true });\n\n    spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mouseover');\n\n    expect($('.manualColumnResizer').size()).toBeGreaterThan(0);\n  });\n\n  it('should change the default column widths with updateSettings', () => {\n    handsontable({\n      manualColumnResize: true\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(50);\n    expect(colWidth(spec().$container, 1)).toBe(50);\n    expect(colWidth(spec().$container, 2)).toBe(50);\n\n    updateSettings({\n      manualColumnResize: [60, 50, 80]\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(60);\n    expect(colWidth(spec().$container, 1)).toBe(50);\n    expect(colWidth(spec().$container, 2)).toBe(80);\n  });\n\n  it('should change column widths with updateSettings', () => {\n    handsontable({\n      manualColumnResize: [100, 150, 180]\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(100);\n    expect(colWidth(spec().$container, 1)).toBe(150);\n    expect(colWidth(spec().$container, 2)).toBe(180);\n\n    updateSettings({\n      manualColumnResize: [60, 50, 80]\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(60);\n    expect(colWidth(spec().$container, 1)).toBe(50);\n    expect(colWidth(spec().$container, 2)).toBe(80);\n  });\n\n  it('should reset column widths when undefined is passed', () => {\n    handsontable({\n      manualColumnResize: [100, 150, 180]\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(100);\n    expect(colWidth(spec().$container, 1)).toBe(150);\n    expect(colWidth(spec().$container, 2)).toBe(180);\n\n    updateSettings({\n      manualColumnResize: void 0\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(50);\n    expect(colWidth(spec().$container, 1)).toBe(50);\n    expect(colWidth(spec().$container, 2)).toBe(50);\n  });\n\n  it('should not reset column widths when `true` is passed', () => {\n    handsontable({\n      manualColumnResize: [100, 150, 180]\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(100);\n    expect(colWidth(spec().$container, 1)).toBe(150);\n    expect(colWidth(spec().$container, 2)).toBe(180);\n\n    updateSettings({\n      manualColumnResize: true\n    });\n\n    expect(colWidth(spec().$container, 0)).toBe(100);\n    expect(colWidth(spec().$container, 1)).toBe(150);\n    expect(colWidth(spec().$container, 2)).toBe(180);\n  });\n\n  it('should resize (narrowing) appropriate columns, even when stretchH `all` is enabled', () => {\n    spec().$container.css('width', '910px');\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'all'\n    });\n\n    resizeColumn(1, 65);\n\n    const $columnHeaders = spec().$container.find('thead tr:eq(1) th');\n\n    expect($columnHeaders.eq(0).width()).toBe(209);\n    expect($columnHeaders.eq(1).width()).toBe(64);\n    expect($columnHeaders.eq(2).width()).toBe(210);\n    expect($columnHeaders.eq(3).width()).toBe(210);\n    expect($columnHeaders.eq(4).width()).toBe(211);\n  });\n\n  it('should resize (extending) appropriate columns, even when stretchH `all` is enabled', () => {\n    spec().$container.css('width', '910px');\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'all'\n    });\n\n    resizeColumn(1, 400);\n\n    const $columnHeaders = spec().$container.find('thead tr:eq(1) th');\n\n    expect($columnHeaders.eq(0).width()).toBe(125);\n    expect($columnHeaders.eq(1).width()).toBe(399);\n    expect($columnHeaders.eq(2).width()).toBe(126);\n    expect($columnHeaders.eq(3).width()).toBe(126);\n    expect($columnHeaders.eq(4).width()).toBe(128);\n  });\n\n  it('should resize (narrowing) selected columns', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 20),\n      colHeaders: true,\n      manualColumnResize: true\n    });\n\n    const $columnHeaders = spec().$container.find('thead tr:eq(0) th');\n    const $colHeader = spec().$container.find('thead tr:eq(0) th:eq(1)');\n    $colHeader.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualColumnResizer');\n    const resizerPosition = $resizer.position();\n\n    spec().$container.find('tr:eq(0) th:eq(1)').simulate('mousedown');\n    spec().$container.find('tr:eq(0) th:eq(2)').simulate('mouseover');\n    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mouseover');\n    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mousemove');\n    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mouseup');\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mousemove', { clientX: spec().$container.find('tr:eq(0) th:eq(1)').position().left + 29 });\n    $resizer.simulate('mouseup');\n\n    await sleep(1000);\n\n    expect($columnHeaders.eq(1).width()).toBe(33);\n    expect($columnHeaders.eq(2).width()).toBe(34);\n    expect($columnHeaders.eq(3).width()).toBe(34);\n  });\n\n  it('should resize (expanding) selected columns', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 20),\n      colHeaders: true,\n      manualColumnResize: true\n    });\n\n    const $columnHeaders = spec().$container.find('thead tr:eq(0) th');\n    const $colHeader = spec().$container.find('thead tr:eq(0) th:eq(1)');\n    $colHeader.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualColumnResizer');\n    const resizerPosition = $resizer.position();\n\n    spec().$container.find('tr:eq(0) th:eq(1)').simulate('mousedown');\n    spec().$container.find('tr:eq(0) th:eq(2)').simulate('mouseover');\n    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mouseover');\n    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mousemove');\n    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mouseup');\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mousemove', { clientX: spec().$container.find('tr:eq(0) th:eq(1)').position().left + 150 });\n    $resizer.simulate('mouseup');\n\n    await sleep(1000);\n\n    expect($columnHeaders.eq(1).width()).toBe(154);\n    expect($columnHeaders.eq(2).width()).toBe(155);\n    expect($columnHeaders.eq(3).width()).toBe(155);\n  });\n\n  it('should resize appropriate columns to calculated stretch width after double click on column handler when stretchH is set as `all`', async() => {\n    spec().$container.css('width', '910px');\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'all',\n    });\n\n    resizeColumn(1, 65);\n\n    const $columnHeaders = spec().$container.find('thead tr:eq(1) th');\n\n    expect($columnHeaders.eq(0).width()).toBe(209);\n    expect($columnHeaders.eq(1).width()).toBe(64);\n    expect($columnHeaders.eq(2).width()).toBe(210);\n    expect($columnHeaders.eq(3).width()).toBe(210);\n    expect($columnHeaders.eq(4).width()).toBe(211);\n\n    const $th = $columnHeaders.eq(1);\n\n    $th.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualColumnResizer');\n    const resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    await sleep(1000);\n\n    expect($columnHeaders.eq(0).width()).toBe(180);\n    expect($columnHeaders.eq(1).width()).toBe(181);\n    expect($columnHeaders.eq(2).width()).toBe(181);\n    expect($columnHeaders.eq(3).width()).toBe(181);\n    expect($columnHeaders.eq(4).width()).toBe(181);\n  });\n\n  it('should resize appropriate columns to calculated autoColumnSize width after double click on column handler when stretchH is set as `last`', async() => {\n    spec().$container.css('width', '910px');\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'last',\n    });\n\n    resizeColumn(0, 65);\n\n    const $columnHeaders = spec().$container.find('thead tr:eq(0) th');\n\n    expect($columnHeaders.eq(0).width()).toBe(63);\n    expect($columnHeaders.eq(1).width()).toBe(48);\n    expect($columnHeaders.eq(2).width()).toBe(49);\n    expect($columnHeaders.eq(3).width()).toBe(49);\n    expect($columnHeaders.eq(4).width()).toBe(694);\n\n    const $th = $columnHeaders.eq(0);\n\n    $th.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualColumnResizer');\n    const resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    await sleep(1000);\n\n    expect($columnHeaders.eq(0).width()).toBeAroundValue(19);\n    expect($columnHeaders.eq(1).width()).toBe(48);\n    expect($columnHeaders.eq(2).width()).toBe(49);\n    expect($columnHeaders.eq(3).width()).toBe(49);\n    expect($columnHeaders.eq(4).width()).toBeAroundValue(738);\n  });\n\n  it('should resize appropriate columns, even if the column order was changed with manualColumnMove plugin', function() {\n    handsontable({\n      colHeaders: ['First', 'Second', 'Third'],\n      manualColumnMove: [2, 1, 0, 3],\n      manualColumnResize: true\n    });\n\n    const $columnHeaders = spec().$container.find('thead tr:eq(0) th');\n    const initialColumnWidths = [];\n\n    $columnHeaders.each(function() {\n      initialColumnWidths.push($(this).width());\n    });\n\n    resizeColumn.call(this, 0, 100);\n\n    const $resizedTh = $columnHeaders.eq(0);\n\n    expect($resizedTh.text()).toEqual('Third');\n    expect($resizedTh.outerWidth()).toEqual(100);\n\n    // Sizes of remaining columns should stay the same\n    for (let i = 1; i < $columnHeaders.length; i++) {\n      expect($columnHeaders.eq(i).width()).toEqual(initialColumnWidths[i]);\n    }\n  });\n\n  it('should trigger an afterColumnResize event after column size changes', () => {\n    const afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      afterColumnResize: afterColumnResizeCallback\n    });\n\n    expect(colWidth(spec().$container, 0)).toEqual(50);\n\n    resizeColumn(0, 100);\n\n    expect(afterColumnResizeCallback).toHaveBeenCalledWith(0, 100, void 0, void 0, void 0, void 0);\n    expect(colWidth(spec().$container, 0)).toEqual(100);\n  });\n\n  it('should not trigger an afterColumnResize event if column size does not change (mouseMove event width delta = 0)', () => {\n    const afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      afterColumnResize: afterColumnResizeCallback\n    });\n\n    expect(colWidth(spec().$container, 0)).toEqual(50);\n\n    resizeColumn(0, 50);\n\n    expect(afterColumnResizeCallback).not.toHaveBeenCalled();\n    expect(colWidth(spec().$container, 0)).toEqual(50);\n  });\n\n  it('should not trigger an afterColumnResize event if column size does not change (no mouseMove event)', () => {\n    const afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      afterColumnResize: afterColumnResizeCallback\n    });\n\n    expect(colWidth(spec().$container, 0)).toEqual(50);\n\n    const $th = spec().$container.find('thead tr:eq(0) th:eq(0)');\n    $th.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualColumnResizer');\n    const resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    expect(afterColumnResizeCallback).not.toHaveBeenCalled();\n    expect(colWidth(spec().$container, 0)).toEqual(50);\n  });\n\n  it('should trigger an afterColumnResize after column size changes, after double click', async() => {\n    const afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      afterColumnResize: afterColumnResizeCallback\n    });\n\n    expect(colWidth(spec().$container, 0)).toEqual(50);\n\n    const $th = spec().$container.find('thead tr:eq(0) th:eq(0)');\n\n    $th.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualColumnResizer');\n    const resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    await sleep(1000);\n\n    expect(afterColumnResizeCallback.calls.count()).toEqual(1);\n    expect(afterColumnResizeCallback.calls.argsFor(0)[0]).toEqual(0);\n    // All modern browsers returns width = 25px, but IE8 seems to compute width differently and returns 24px\n    expect(afterColumnResizeCallback.calls.argsFor(0)[1]).toBeInArray([30, 31, 32, 24, 25]);\n    expect(colWidth(spec().$container, 0)).toBeInArray([30, 31, 32, 24, 25]);\n  });\n\n  it('should autosize column after double click (when initial width is not defined)', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      columns: [{ width: 100 }, { width: 200 }, {}]\n    });\n\n    expect(colWidth(spec().$container, 0)).toEqual(100);\n    expect(colWidth(spec().$container, 1)).toEqual(200);\n    expect(colWidth(spec().$container, 2)).toEqual(50);\n\n    resizeColumn(2, 300);\n\n    const $resizer = spec().$container.find('.manualColumnResizer');\n    const resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    await sleep(1000);\n\n    expect(colWidth(spec().$container, 2)).toBeAroundValue(29, 3);\n  });\n\n  it('should autosize selected columns after double click on handler', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(9, 9),\n      colHeaders: true,\n      manualColumnResize: true,\n    });\n\n    resizeColumn(2, 300);\n\n    spec().$container.find('thead tr:eq(0) th:eq(1)').simulate('mousedown');\n    spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseover');\n    spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseover');\n    spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mousemove');\n    spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseup');\n\n    const $resizer = spec().$container.find('.manualColumnResizer');\n    const resizerPosition = $resizer.position();\n\n    await sleep(600);\n\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n    $resizer.simulate('mousedown', { clientX: resizerPosition.left });\n    $resizer.simulate('mouseup');\n\n    await sleep(600);\n\n    expect(colWidth(spec().$container, 1)).toBeAroundValue(32, 2);\n    expect(colWidth(spec().$container, 2)).toBeAroundValue(32, 2);\n    expect(colWidth(spec().$container, 3)).toBeAroundValue(32, 2);\n  });\n\n  it('should adjust resize handles position after table size changed', () => {\n    let maxed = false;\n\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'all',\n      width() {\n        return maxed ? 614 : 200;\n      }\n    });\n\n    spec().$container.find('thead th:eq(0)').simulate('mouseover');\n\n    const handle = spec().$container.find('.manualColumnResizer');\n    const th0 = spec().$container.find('thead th:eq(0)');\n    let handleBox = handle[0].getBoundingClientRect();\n    let thBox = th0[0].getBoundingClientRect();\n\n    expect(handleBox.left + handleBox.width).toEqual(thBox.left + thBox.width - 1);\n\n    maxed = true;\n\n    render();\n    spec().$container.find('thead th:eq(0)').simulate('mouseover');\n\n    handleBox = handle[0].getBoundingClientRect();\n    thBox = th0[0].getBoundingClientRect();\n    expect(handleBox.left + handleBox.width).toEqual(thBox.left + thBox.width - 1);\n  });\n\n  it('should display the resize handle in the correct place after the table has been scrolled', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 20),\n      colHeaders: true,\n      manualColumnResize: true,\n      height: 100,\n      width: 200\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n    let $colHeader = spec().$container.find('.ht_clone_top thead tr:eq(0) th:eq(2)');\n\n    $colHeader.simulate('mouseover');\n\n    const $handle = spec().$container.find('.manualColumnResizer');\n    $handle[0].style.background = 'red';\n\n    expect($colHeader.offset().left + $colHeader.width() - 5).toBeCloseTo($handle.offset().left, 0);\n    expect($colHeader.offset().top).toBeCloseTo($handle.offset().top, 0);\n\n    $(mainHolder).scrollLeft(200);\n    hot.render();\n\n    $colHeader = spec().$container.find('.ht_clone_top thead tr:eq(0) th:eq(3)');\n    $colHeader.simulate('mouseover');\n    expect($colHeader.offset().left + $colHeader.width() - 5).toBeCloseTo($handle.offset().left, 0);\n    expect($colHeader.offset().top).toBeCloseTo($handle.offset().top, 0);\n  });\n\n  describe('handle and guide', () => {\n    it('should display the resize handle in the proper position and with a proper size', () => {\n      handsontable({\n        data: [\n          { id: 1, name: 'Ted', lastName: 'Right' },\n          { id: 2, name: 'Frank', lastName: 'Honest' },\n          { id: 3, name: 'Joan', lastName: 'Well' },\n          { id: 4, name: 'Sid', lastName: 'Strong' },\n          { id: 5, name: 'Jane', lastName: 'Neat' }\n        ],\n        colHeaders: true,\n        manualColumnResize: true\n      });\n\n      const $headerTH = spec().$container.find('thead tr:eq(0) th:eq(1)');\n      $headerTH.simulate('mouseover');\n\n      const $handle = $('.manualColumnResizer');\n\n      expect($handle.offset().left).toEqual($headerTH.offset().left + $headerTH.outerWidth() - $handle.outerWidth() - 1);\n      expect($handle.height()).toEqual($headerTH.outerHeight());\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/manualColumnResize/test/manualColumnResize.e2e.js","describe('manualRowMove', () => {\n  const id = 'testContainer';\n  const arrayOfObjects = [\n    { id: 1, name: 'Ted', lastName: 'Right' },\n    { id: 2, name: 'Frank', lastName: 'Honest' },\n    { id: 3, name: 'Joan', lastName: 'Well' },\n    { id: 4, name: 'Sid', lastName: 'Strong' },\n    { id: 5, name: 'Jane', lastName: 'Neat' },\n    { id: 6, name: 'Chuck', lastName: 'Jackson' },\n    { id: 7, name: 'Meg', lastName: 'Jansen' },\n    { id: 8, name: 'Rob', lastName: 'Norris' },\n    { id: 9, name: 'Sean', lastName: 'O\\'Hara' },\n    { id: 10, name: 'Eve', lastName: 'Branson' }\n  ];\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('init', () => {\n    it('should change row order at init', () => {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: [1, 2, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n    });\n  });\n\n  describe('updateSettings', () => {\n    it('should be enabled after specifying it in updateSettings config', () => {\n      handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true\n      });\n\n      updateSettings({\n        manualRowMove: true\n      });\n\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n\n      expect(spec().$container.hasClass('after-selection--rows')).toBeGreaterThan(0);\n    });\n\n    it('should change the default row order with updateSettings', () => {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      updateSettings({\n        manualRowMove: [2, 1, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n    });\n\n    it('should change row order with updateSettings', () => {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: [1, 2, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n\n      updateSettings({\n        manualRowMove: [2, 1, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n    });\n\n    it('should reset row order with updateSettings when undefined is passed', () => {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: [1, 2, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n\n      updateSettings({\n        manualRowMove: void 0\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    });\n\n    it('should not change row order with updateSettings when `true` is passed', () => {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: [1, 2, 0]\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n\n      updateSettings({\n        manualRowMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n    });\n  });\n\n  describe('loadData', () => {\n    it('should increase numbers of rows if it is necessary', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        manualRowMove: true\n      });\n\n      hot.loadData(Handsontable.helper.createSpreadsheetData(10, 10));\n\n      expect(countRows()).toEqual(10);\n      expect(hot.getPlugin('manualRowMove').rowsMapper.__arrayMap.length).toEqual(10);\n    });\n    it('should decrease numbers of rows if it is necessary', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        manualRowMove: true\n      });\n\n      hot.loadData(Handsontable.helper.createSpreadsheetData(2, 2));\n\n      expect(countRows()).toEqual(2);\n      expect(hot.getPlugin('manualRowMove').rowsMapper.__arrayMap.length).toEqual(2);\n    });\n  });\n\n  describe('moving', () => {\n    it('should move row by API', () => {\n      const hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      hot.getPlugin('manualRowMove').moveRow(2, 0);\n      hot.render();\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    });\n\n    it('should move many rows by API', () => {\n      const hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      hot.getPlugin('manualRowMove').moveRows([7, 9, 8], 0);\n      hot.render();\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('8');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('10');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('9');\n    });\n\n    it('should trigger the `beforeRowMove` hook before row move with visual indexes as parameters', () => {\n      const beforeMoveRowCallback = jasmine.createSpy('beforeMoveRowCallback');\n\n      const hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: beforeMoveRowCallback,\n        modifyRow(row) {\n          return row + 10;\n        }\n      });\n\n      hot.getPlugin('manualRowMove').moveRows([8, 9, 7], 0);\n      hot.render();\n\n      expect(beforeMoveRowCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);\n    });\n\n    it('should trigger the `afterRowMove` hook after row move with visual indexes as parameters', () => {\n      const afterMoveRowCallback = jasmine.createSpy('afterMoveRowCallback');\n\n      const hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        afterRowMove: afterMoveRowCallback,\n        modifyRow(row) {\n          return row + 10;\n        }\n      });\n\n      hot.getPlugin('manualRowMove').moveRows([8, 9, 7], 0);\n      hot.render();\n\n      expect(afterMoveRowCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);\n    });\n\n    it('should run `beforeRowMove` with proper `target` parameter (moving row above first header)', () => {\n      let targetParameterInsideCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        colHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: (rows, target) => {\n          targetParameterInsideCallback = target;\n        }\n      });\n      const $fistHeader = spec().$container.find('tbody tr:eq(0) th:eq(0)');\n\n      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mousedown');\n\n      $fistHeader.simulate('mouseover');\n      $fistHeader.simulate('mousemove', {\n        clientY: $fistHeader.offset().bottom - $fistHeader.height() - 50\n      });\n      $fistHeader.simulate('mouseup');\n\n      expect(targetParameterInsideCallback).toEqual(0);\n    });\n\n    it('should run `beforeRowMove` with proper `target` parameter (moving row to the top of first header)', () => {\n      let targetParameterInsideCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true,\n        colHeaders: true,\n        beforeRowMove: (rows, target) => {\n          targetParameterInsideCallback = target;\n        }\n      });\n      const $fistHeader = spec().$container.find('tbody tr:eq(0) th:eq(0)');\n\n      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mousedown');\n\n      $fistHeader.simulate('mouseover');\n      $fistHeader.simulate('mousemove', {\n        clientY: $fistHeader.offset().bottom - $fistHeader.height()\n      });\n      $fistHeader.simulate('mouseup');\n\n      expect(targetParameterInsideCallback).toEqual(0);\n    });\n\n    it('should run `beforeRowMove` with proper `target` parameter (moving row to the middle of the table)', () => {\n      let targetParameterInsideCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: (rows, target) => {\n          targetParameterInsideCallback = target;\n        }\n      });\n\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseover');\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mousemove');\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseup');\n\n      expect(targetParameterInsideCallback).toEqual(2);\n    });\n\n    it('should run `beforeRowMove` with proper `target` parameter (moving row to the top of last header)', () => {\n      let targetParameterInsideCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: (rows, target) => {\n          targetParameterInsideCallback = target;\n        }\n      });\n\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n\n      spec().$container.find('tbody tr:eq(29) th:eq(0)').simulate('mouseover');\n      spec().$container.find('tbody tr:eq(29) th:eq(0)').simulate('mousemove');\n      spec().$container.find('tbody tr:eq(29) th:eq(0)').simulate('mouseup');\n\n      expect(targetParameterInsideCallback).toEqual(29);\n    });\n\n    it('should run `beforeRowMove` with proper `target` parameter (moving row to the bottom of last header)', () => {\n      let targetParameterInsideCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: (rows, target) => {\n          targetParameterInsideCallback = target;\n        }\n      });\n      const $lastHeader = spec().$container.find('tbody tr:eq(29) th:eq(0)');\n\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n\n      $lastHeader.simulate('mouseover');\n      $lastHeader.simulate('mousemove', {\n        clientY: $lastHeader.offset().top + $lastHeader.height()\n      });\n      $lastHeader.simulate('mouseup');\n\n      expect(targetParameterInsideCallback).toEqual(30);\n    });\n\n    it('should run `beforeRowMove` with proper `target` parameter (moving row below last header)', () => {\n      let targetParameterInsideCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: (rows, target) => {\n          targetParameterInsideCallback = target;\n        }\n      });\n      const $lastHeader = spec().$container.find('tbody tr:eq(29) th:eq(0)');\n\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n\n      $lastHeader.simulate('mouseover');\n      $lastHeader.simulate('mousemove', {\n        clientY: $lastHeader.offset().top + $lastHeader.height() + 200\n      });\n      $lastHeader.simulate('mouseup');\n\n      expect(targetParameterInsideCallback).toEqual(30);\n    });\n\n    it('should run `beforeRowMove` with proper visual `target` parameter', () => {\n      let targetParameterInsideCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: [1, 2, 0],\n        beforeRowMove: (rows, target) => {\n          targetParameterInsideCallback = target;\n        }\n      });\n\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseover');\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mousemove');\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseup');\n\n      expect(targetParameterInsideCallback).toEqual(2);\n    });\n\n    it('should run `afterRowMove` with proper visual `target` parameter', () => {\n      let targetParameterInsideCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: [1, 2, 0],\n        afterRowMove: (rows, target) => {\n          targetParameterInsideCallback = target;\n        }\n      });\n\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseover');\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mousemove');\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseup');\n\n      expect(targetParameterInsideCallback).toEqual(2);\n    });\n\n    it('should move the second row to the first row', () => {\n      handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      const $rowsHeaders = spec().$container.find('.ht_clone_left tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(0).simulate('mouseover');\n      $rowsHeaders.eq(0).simulate('mousemove');\n      $rowsHeaders.eq(0).simulate('mouseup');\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    });\n\n    it('should move the second row to the third row', () => {\n      handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      const $rowsHeaders = spec().$container.find('.ht_clone_left tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(3).simulate('mouseover');\n      $rowsHeaders.eq(3).simulate('mousemove');\n      $rowsHeaders.eq(3).simulate('mouseup');\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    });\n\n    it('should not move row if it\\'s not needed', () => {\n      const cache = [];\n\n      handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        afterRowMove(rows) {\n          cache.push(rows);\n        }\n      });\n\n      const $rowsHeaders = spec().$container.find('.ht_clone_left tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(3).simulate('mouseup');\n\n      expect(cache.length).toEqual(0);\n    });\n\n    it('should properly scrolling viewport if mouse is over part-visible cell', (done) => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        colHeaders: true,\n        rowHeaders: true,\n        manualRowMove: true,\n        width: 600,\n        height: 600,\n        rowHeights: 47\n      });\n\n      hot.selectCell(19, 0);\n\n      setTimeout(() => {\n        expect(hot.view.wt.wtTable.getFirstVisibleRow()).toBeGreaterThan(8);\n\n        const $rowsHeaders = spec().$container.find('.ht_clone_left tr th');\n\n        $rowsHeaders.eq(10).simulate('mousedown');\n        $rowsHeaders.eq(10).simulate('mouseup');\n        $rowsHeaders.eq(10).simulate('mousedown');\n        $rowsHeaders.eq(8).simulate('mouseover');\n        $rowsHeaders.eq(8).simulate('mousemove');\n        $rowsHeaders.eq(8).simulate('mouseup');\n      }, 50);\n\n      setTimeout(() => {\n        expect(hot.view.wt.wtTable.getFirstVisibleRow()).toBeLessThan(8);\n        done();\n      }, 150);\n    });\n\n    it('moving row should keep cell meta created using cells function', () => {\n      const hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        cells(row, col) {\n          if (row === 1 && col === 0) {\n            this.readOnly = true;\n          }\n        }\n      });\n\n      const htCore = getHtCore();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n\n      hot.getPlugin('manualRowMove').moveRow(1, 3);\n      hot.render();\n\n      expect(htCore.find('tbody tr:eq(2) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n    });\n\n    it('moving row should keep cell meta created using cell array', () => {\n      const hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        cell: [\n          { row: 1, col: 0, readOnly: true }\n        ]\n      });\n\n      const htCore = getHtCore();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n\n      hot.getPlugin('manualRowMove').moveRow(3, 1);\n      hot.render();\n\n      expect(htCore.find('tbody tr:eq(2) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n    });\n  });\n\n  describe('callbacks', () => {\n    it('should run `beforeRowMove` and `afterRowMove` with proper visual `target` parameter', () => {\n      let targetParameterInsideBeforeRowMoveCallback;\n      let targetParameterInsideAfterRowMoveCallback;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        rowHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: (rows, target) => {\n          targetParameterInsideBeforeRowMoveCallback = target;\n        },\n        afterRowMove: (rows, target) => {\n          targetParameterInsideAfterRowMoveCallback = target;\n        }\n      });\n\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseover');\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mousemove');\n      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseup');\n\n      expect(targetParameterInsideBeforeRowMoveCallback).toEqual(2);\n      expect(targetParameterInsideAfterRowMoveCallback).toEqual(2);\n    });\n\n    it('should run `beforeRowMove` and `afterRowMove` with proper visual `rows` parameter', () => {\n      let rowsParameterInsideBeforeRowMoveCallback;\n      let rowsParameterInsideAfterRowMoveCallback;\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        rowHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: (rows) => {\n          rowsParameterInsideBeforeRowMoveCallback = rows;\n        },\n        afterRowMove: (rows) => {\n          rowsParameterInsideAfterRowMoveCallback = rows;\n        }\n      });\n\n      hot.getPlugin('manualRowMove').moveRow(2, 0);\n\n      expect(rowsParameterInsideBeforeRowMoveCallback).toEqual([2]);\n      expect(rowsParameterInsideAfterRowMoveCallback).toEqual([2]);\n      expect(rowsParameterInsideBeforeRowMoveCallback).toEqual(rowsParameterInsideAfterRowMoveCallback);\n\n      hot.getPlugin('manualRowMove').moveRow(2, 0);\n\n      expect(rowsParameterInsideBeforeRowMoveCallback).toEqual([2]);\n      expect(rowsParameterInsideAfterRowMoveCallback).toEqual([2]);\n      expect(rowsParameterInsideBeforeRowMoveCallback).toEqual(rowsParameterInsideAfterRowMoveCallback);\n    });\n  });\n\n  describe('undoRedo', () => {\n    it('should back changes', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        rowHeaders: true,\n        manualRowMove: true,\n      });\n      hot.getPlugin('manualRowMove').moveRow(1, 4);\n      hot.render();\n\n      expect(hot.getDataAtCell(3, 0)).toBe('A2');\n\n      hot.undo();\n\n      expect(hot.getDataAtCell(1, 0)).toBe('A2');\n    });\n\n    it('should revert changes', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        rowHeaders: true,\n        manualRowMove: true,\n      });\n      hot.getPlugin('manualRowMove').moveRow(1, 4);\n      hot.render();\n\n      expect(hot.getDataAtCell(3, 0)).toBe('A2');\n\n      hot.undo();\n\n      expect(hot.getDataAtCell(1, 0)).toBe('A2');\n\n      hot.redo();\n\n      expect(hot.getDataAtCell(3, 0)).toBe('A2');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/manualRowMove/test/manualRowMove.e2e.js","describe('manualRowMove', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('UI', () => {\n    it('should append UI elements to wtHider after click on row header', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      const $headerTH = spec().$container.find('tbody tr:eq(0) th:eq(0)');\n\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(spec().$container.find('.ht__manualRowMove--guideline').length).toBe(1);\n      expect(spec().$container.find('.ht__manualRowMove--backlight').length).toBe(1);\n    });\n\n    it('should part of UI elements be visible on dragging action', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      const $headerTH = spec().$container.find('tbody tr:eq(0) th:eq(0)');\n\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(spec().$container.find('.ht__manualRowMove--guideline:visible').length).toBe(0);\n      expect(spec().$container.find('.ht__manualRowMove--backlight:visible').length).toBe(1);\n    });\n\n    it('should all of UI elements be visible on dragging action', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      const $headers = [\n        spec().$container.find('tbody tr:eq(0) th:eq(0)'),\n        spec().$container.find('tbody tr:eq(1) th:eq(0)'),\n        spec().$container.find('tbody tr:eq(2) th:eq(0)'),\n      ];\n\n      $headers[0].simulate('mousedown');\n      $headers[0].simulate('mouseup');\n      $headers[0].simulate('mousedown');\n      $headers[1].simulate('mouseover');\n      $headers[2].simulate('mouseover');\n\n      expect(spec().$container.find('.ht__manualRowMove--guideline:visible').length).toBe(1);\n      expect(spec().$container.find('.ht__manualRowMove--backlight:visible').length).toBe(1);\n    });\n\n    describe('backlight', () => {\n      it('should set proper left position of element when colWidths is undefined', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          rowHeaders: true,\n          manualRowMove: true\n        });\n\n        const $headerTH = spec().$container.find('tbody tr:eq(0) th:eq(0)');\n\n        $headerTH.simulate('mousedown');\n        $headerTH.simulate('mouseup');\n        $headerTH.simulate('mousedown');\n\n        expect(spec().$container.find('.ht__manualRowMove--backlight')[0].offsetLeft).toBe(50);\n      });\n\n      it('should set proper left position of element when colWidths is defined', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          rowHeaders: true,\n          manualRowMove: true,\n          colWidths: 100,\n        });\n\n        const $headerTH = spec().$container.find('tbody tr:eq(0) th:eq(0)');\n\n        $headerTH.simulate('mousedown');\n        $headerTH.simulate('mouseup');\n        $headerTH.simulate('mousedown');\n\n        expect(spec().$container.find('.ht__manualRowMove--backlight')[0].offsetLeft).toBe(50);\n      });\n    });\n\n    describe('guideline', () => {\n      it('should set proper top position of element when target is first row and column headers are disabled', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          rowHeaders: true,\n          colHeaders: false,\n          manualRowMove: true,\n        });\n\n        const $headers = [\n          spec().$container.find('tbody tr:eq(0) th:eq(0)'),\n          spec().$container.find('tbody tr:eq(1) th:eq(0)'),\n        ];\n\n        $headers[1].simulate('mousedown');\n        $headers[1].simulate('mouseup');\n        $headers[1].simulate('mousedown');\n        $headers[0].simulate('mouseover');\n        $headers[0].simulate('mousemove');\n\n        expect(spec().$container.find('.ht__manualRowMove--guideline')[0].offsetTop).toBe(-1);\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/manualRowMove/test/manualRowMoveUI.e2e.js","describe('manualRowResize', () => {\n  const id = 'test';\n  const defaultRowHeight = 22;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should change row heights at init', () => {\n    handsontable({\n      rowHeaders: true,\n      manualRowResize: [50, 40, 100]\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(51);\n    expect(rowHeight(spec().$container, 1)).toEqual(40);\n    expect(rowHeight(spec().$container, 2)).toEqual(100);\n  });\n\n  it('should be enabled after specifying it in updateSettings config', () => {\n    handsontable({\n      data: [\n        { id: 1, name: 'Ted', lastName: 'Right' },\n        { id: 2, name: 'Frank', lastName: 'Honest' },\n        { id: 3, name: 'Joan', lastName: 'Well' },\n        { id: 4, name: 'Sid', lastName: 'Strong' },\n        { id: 5, name: 'Jane', lastName: 'Neat' }\n      ],\n      rowHeaders: true\n    });\n\n    updateSettings({ manualRowResize: true });\n\n    spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseover');\n\n    expect($('.manualRowResizer').size()).toBeGreaterThan(0);\n  });\n\n  it('should change the default row height with updateSettings', () => {\n    handsontable({\n      manualRowResize: true\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2); // + Double border\n    expect(rowHeight(spec().$container, 1)).toEqual(defaultRowHeight + 1); // + Single border\n    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1); // + Single border\n\n    updateSettings({\n      manualRowResize: [60, 50, 80]\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(61);\n    expect(rowHeight(spec().$container, 1)).toEqual(50);\n    expect(rowHeight(spec().$container, 2)).toEqual(80);\n  });\n\n  it('should change the row height with updateSettings', () => {\n    handsontable({\n      manualRowResize: [60, 50, 80]\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(61);\n    expect(rowHeight(spec().$container, 1)).toEqual(50);\n    expect(rowHeight(spec().$container, 2)).toEqual(80);\n\n    updateSettings({\n      manualRowResize: [30, 80, 100]\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(31);\n    expect(rowHeight(spec().$container, 1)).toEqual(80);\n    expect(rowHeight(spec().$container, 2)).toEqual(100);\n  });\n\n  it('should not change the row height when `true` is passing', () => {\n    handsontable({\n      manualRowResize: [60, 50, 80]\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(61);\n    expect(rowHeight(spec().$container, 1)).toEqual(50);\n    expect(rowHeight(spec().$container, 2)).toEqual(80);\n\n    updateSettings({\n      manualRowResize: true\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(61);\n    expect(rowHeight(spec().$container, 1)).toEqual(50);\n    expect(rowHeight(spec().$container, 2)).toEqual(80);\n  });\n\n  it('should change the row height to defaults when undefined is passed', () => {\n    handsontable({\n      manualRowResize: [60, 50, 80]\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(61);\n    expect(rowHeight(spec().$container, 1)).toEqual(50);\n    expect(rowHeight(spec().$container, 2)).toEqual(80);\n\n    updateSettings({\n      manualRowResize: void 0\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2); // + Double border\n    expect(rowHeight(spec().$container, 1)).toEqual(defaultRowHeight + 1); // + Single border\n    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1); // + Single border\n  });\n\n  it('should reset row height', () => {\n    handsontable({\n      manualRowResize: true\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n    expect(rowHeight(spec().$container, 1)).toEqual(defaultRowHeight + 1);\n    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1);\n\n    updateSettings({\n      manualRowResize: true\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n    expect(rowHeight(spec().$container, 1)).toEqual(defaultRowHeight + 1);\n    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1);\n  });\n\n  it('should trigger afterRowResize event after row height changes', () => {\n    const afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n\n    resizeRow(0, 100);\n    expect(afterRowResizeCallback).toHaveBeenCalledWith(0, 100, false, void 0, void 0, void 0);\n    expect(rowHeight(spec().$container, 0)).toEqual(101);\n  });\n\n  it('should not trigger afterRowResize event if row height does not change (delta = 0)', () => {\n    const afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n\n    resizeRow(0, defaultRowHeight);\n    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n  });\n\n  it('should not trigger afterRowResize event after if row height does not change (no mousemove event)', () => {\n    const afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n\n    const $th = spec().$container.find('tbody tr:eq(0) th:eq(0)');\n    $th.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualRowResizer');\n    const resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {\n      clientY: resizerPosition.top\n    });\n\n    $resizer.simulate('mouseup');\n\n    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n  });\n\n  it('should trigger an afterRowResize after row size changes, after double click', async() => {\n    const afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      autoRowSize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n\n    const $th = spec().$container.find('tbody tr:eq(2) th:eq(0)');\n    $th.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualRowResizer');\n    const resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {\n      clientY: resizerPosition.top\n    });\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', {\n      clientY: resizerPosition.top\n    });\n    $resizer.simulate('mouseup');\n\n    await sleep(1000);\n\n    expect(afterRowResizeCallback.calls.count()).toEqual(1);\n    expect(afterRowResizeCallback.calls.argsFor(0)[0]).toEqual(2);\n    expect(afterRowResizeCallback.calls.argsFor(0)[1]).toEqual(defaultRowHeight + 1);\n    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1);\n  });\n  it('should not trigger afterRowResize event after if row height does not change (no dblclick event)', () => {\n    const afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n\n    const $th = spec().$container.find('tbody tr:eq(2) th:eq(0)');\n    $th.simulate('mouseover');\n\n    const $resizer = spec().$container.find('.manualRowResizer');\n    const resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {\n      clientY: resizerPosition.top\n    });\n    $resizer.simulate('mouseup');\n\n    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);\n  });\n  it('should display the resize handle in the correct place after the table has been scrolled', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 20),\n      rowHeaders: true,\n      manualRowResize: true,\n      height: 100,\n      width: 200\n    });\n\n    const mainHolder = hot.view.wt.wtTable.holder;\n    let $rowHeader = spec().$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)');\n\n    $rowHeader.simulate('mouseover');\n\n    const $handle = spec().$container.find('.manualRowResizer');\n    $handle[0].style.background = 'red';\n\n    expect($rowHeader.offset().left).toBeCloseTo($handle.offset().left, 0);\n    expect($rowHeader.offset().top + $rowHeader.height() - 5).toBeCloseTo($handle.offset().top, 0);\n\n    $(mainHolder).scrollTop(200);\n    $(mainHolder).scroll();\n\n    $rowHeader = spec().$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)');\n    $rowHeader.simulate('mouseover');\n    expect($rowHeader.offset().left).toBeCloseTo($handle.offset().left, 0);\n    expect($rowHeader.offset().top + $rowHeader.height() - 5).toBeCloseTo($handle.offset().top, 0);\n  });\n\n  it('should autosize selected rows after double click on handler', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(9, 9),\n      rowHeaders: true,\n      manualRowResize: true,\n    });\n\n    resizeRow(2, 300);\n\n    const $resizer = spec().$container.find('.manualRowResizer');\n    const resizerPosition = $resizer.position();\n\n    spec().$container.find('.ht_clone_left tbody tr:eq(1) th:eq(0)').simulate('mousedown');\n    spec().$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)').simulate('mouseover');\n    spec().$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mouseover');\n    spec().$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mousemove');\n    spec().$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mouseup');\n\n    await sleep(600);\n\n    $resizer.simulate('mousedown', { clientY: resizerPosition.top });\n    $resizer.simulate('mouseup');\n    $resizer.simulate('mousedown', { clientY: resizerPosition.top });\n    $resizer.simulate('mouseup');\n\n    await sleep(1000);\n\n    expect(rowHeight(spec().$container, 1)).toBeAroundValue(24);\n    expect(rowHeight(spec().$container, 2)).toBeAroundValue(24);\n    expect(rowHeight(spec().$container, 3)).toBeAroundValue(24);\n  });\n\n  it('should resize (expanding and narrowing) selected rows', async() => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 20),\n      rowHeaders: true,\n      manualRowResize: true\n    });\n\n    resizeRow(2, 60);\n\n    const $rowsHeaders = spec().$container.find('.ht_clone_left tr th');\n    spec().$container.find('.ht_clone_left tbody tr:eq(1) th:eq(0)').simulate('mouseover');\n\n    $rowsHeaders.eq(1).simulate('mousedown');\n    $rowsHeaders.eq(2).simulate('mouseover');\n    $rowsHeaders.eq(3).simulate('mouseover');\n    $rowsHeaders.eq(3).simulate('mousemove');\n    $rowsHeaders.eq(3).simulate('mouseup');\n\n    const $resizer = spec().$container.find('.manualRowResizer');\n    const resizerPosition = $resizer.position();\n\n    await sleep(600);\n    $resizer.simulate('mousedown', { clientY: resizerPosition.top });\n    $resizer.simulate('mousemove', { clientY: resizerPosition.top - $rowsHeaders.eq(3).height() + 80 });\n    $resizer.simulate('mouseup');\n\n    expect($rowsHeaders.eq(1).height()).toEqual(80);\n    expect($rowsHeaders.eq(2).height()).toEqual(80);\n    expect($rowsHeaders.eq(3).height()).toEqual(80);\n\n    await sleep(1200);\n\n    $resizer.simulate('mousedown', { clientY: resizerPosition.top });\n    $resizer.simulate('mousemove', { clientY: resizerPosition.top - $rowsHeaders.eq(3).height() + 35 });\n    $resizer.simulate('mouseup');\n\n    expect($rowsHeaders.eq(1).height()).toEqual(35);\n    expect($rowsHeaders.eq(2).height()).toEqual(35);\n    expect($rowsHeaders.eq(3).height()).toEqual(35);\n  });\n\n  describe('handle and guide', () => {\n    it('should display the resize handle in the proper position and with a proper size', () => {\n      handsontable({\n        data: [\n          { id: 1, name: 'Ted', lastName: 'Right' },\n          { id: 2, name: 'Frank', lastName: 'Honest' },\n          { id: 3, name: 'Joan', lastName: 'Well' },\n          { id: 4, name: 'Sid', lastName: 'Strong' },\n          { id: 5, name: 'Jane', lastName: 'Neat' }\n        ],\n        rowHeaders: true,\n        manualRowResize: true\n      });\n\n      const $headerTH = spec().$container.find('tbody tr:eq(1) th:eq(0)');\n      $headerTH.simulate('mouseover');\n\n      const $handle = $('.manualRowResizer');\n\n      expect($handle.offset().top).toBeCloseTo($headerTH.offset().top + $headerTH.outerHeight() - $handle.outerHeight() - 1, 0);\n      expect($handle.width()).toBeCloseTo($headerTH.outerWidth(), 0);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/manualRowResize/test/manualRowResize.e2e.js","describe('MergeCells', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('initialization', () => {\n    it('should merge cell in startup', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 }\n        ]\n      });\n      const TD = hot.rootElement.querySelector('td');\n\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n    });\n  });\n\n  describe('methods', () => {\n    it('should clear merged cells collection without throw an exception', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(50, 1),\n        width: 100,\n        height: 100,\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 1 },\n          { row: 4, col: 0, rowspan: 30, colspan: 1 },\n          { row: 48, col: 0, rowspan: 2, colspan: 1 },\n        ],\n      });\n\n      expect(() => {\n        hot.getPlugin('mergeCells').clearCollections();\n      }).not.toThrow();\n    });\n  });\n\n  describe('mergeCells updateSettings', () => {\n    it('should allow to overwrite the initial settings using the updateSettings method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 }\n        ]\n      });\n      let TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n\n      updateSettings({\n        mergeCells: [\n          { row: 2, col: 2, rowspan: 2, colspan: 2 }\n        ]\n      });\n\n      TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe(null);\n      expect(TD.getAttribute('colspan')).toBe(null);\n\n      TD = getCell(2, 2);\n\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n    });\n\n    it('should allow resetting the merged cells by changing it to an empty array', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 }\n        ]\n      });\n      let TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n\n      updateSettings({\n        mergeCells: []\n      });\n\n      TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe(null);\n      expect(TD.getAttribute('colspan')).toBe(null);\n    });\n\n    it('should allow resetting and turning off the mergeCells plugin by changing mergeCells to \\'false\\'', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 }\n        ]\n      });\n      let TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n\n      updateSettings({\n        mergeCells: false\n      });\n\n      TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe(null);\n      expect(TD.getAttribute('colspan')).toBe(null);\n    });\n\n  });\n\n  describe('mergeCells copy', () => {\n    it('should not copy text of cells that are merged into another cell', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 }\n        ]\n      });\n      expect(hot.getCopyableText(0, 0, 2, 2)).toBe('A1\\t\\tC1\\n\\t\\tC2\\nA3\\tB3\\tC3');\n    });\n  });\n\n  describe('merged cells selection', () => {\n    it('should select the whole range of cells which form a merged cell', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(4, 4),\n        mergeCells: [\n          {\n            row: 0,\n            col: 0,\n            colspan: 4,\n            rowspan: 1\n          }\n        ]\n      });\n\n      const $table = spec().$container.find('table.htCore');\n      const $td = $table.find('tr:eq(0) td:eq(0)');\n\n      expect($td.attr('rowspan')).toEqual('1');\n      expect($td.attr('colspan')).toEqual('4');\n\n      expect(hot.getSelectedLast()).toBeUndefined();\n\n      hot.selectCell(0, 0);\n\n      expect(hot.getSelectedLast()).toEqual([0, 0, 0, 3]);\n\n      deselectCell();\n\n      hot.selectCell(0, 1);\n\n      expect(hot.getSelectedLast()).toEqual([0, 0, 0, 3]);\n    });\n\n    it('should always make a rectangular selection, when selecting merged and not merged cells', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(4, 4),\n        mergeCells: [\n          {\n            row: 1,\n            col: 1,\n            colspan: 3,\n            rowspan: 2\n          }\n        ]\n      });\n\n      const $table = spec().$container.find('table.htCore');\n      const $td = $table.find('tr:eq(1) td:eq(1)');\n\n      expect($td.attr('rowspan')).toEqual('2');\n      expect($td.attr('colspan')).toEqual('3');\n\n      expect(hot.getSelectedLast()).toBeUndefined();\n\n      hot.selectCell(0, 0);\n\n      expect(hot.getSelectedLast()).toEqual([0, 0, 0, 0]);\n\n      deselectCell();\n\n      hot.selectCell(0, 0, 1, 1);\n\n      expect(hot.getSelectedLast()).not.toEqual([0, 0, 1, 1]);\n      expect(hot.getSelectedLast()).toEqual([0, 0, 2, 3]);\n\n      deselectCell();\n\n      hot.selectCell(0, 1, 1, 1);\n\n      expect(hot.getSelectedLast()).toEqual([0, 1, 2, 3]);\n    });\n\n    it('should not switch the selection start point when selecting from non-merged cells to merged cells', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          { row: 1, col: 1, rowspan: 3, colspan: 3 },\n          { row: 3, col: 4, rowspan: 2, colspan: 2 }\n        ]\n      });\n\n      $(hot.getCell(6, 6)).simulate('mousedown');\n\n      expect(hot.getSelectedRangeLast().from.col).toEqual(6);\n      expect(hot.getSelectedRangeLast().from.row).toEqual(6);\n\n      $(hot.getCell(1, 1)).simulate('mouseenter');\n\n      expect(hot.getSelectedRangeLast().from.col).toEqual(6);\n      expect(hot.getSelectedRangeLast().from.row).toEqual(6);\n\n      $(hot.getCell(3, 3)).simulate('mouseenter');\n\n      expect(hot.getSelectedRangeLast().from.col).toEqual(6);\n      expect(hot.getSelectedRangeLast().from.row).toEqual(6);\n\n      $(hot.getCell(4, 4)).simulate('mouseenter');\n\n      expect(hot.getSelectedRangeLast().from.col).toEqual(6);\n      expect(hot.getSelectedRangeLast().from.row).toEqual(6);\n\n    });\n\n    it('should select cells in the correct direction when changing selections around a merged range', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          { row: 4, col: 4, rowspan: 2, colspan: 2 }\n        ]\n      });\n\n      hot.selectCell(5, 5, 5, 2);\n      expect(hot.getSelectedRangeLast().getDirection()).toEqual('SE-NW');\n\n      hot.selectCell(4, 4, 2, 5);\n      expect(hot.getSelectedRangeLast().getDirection()).toEqual('SW-NE');\n\n      hot.selectCell(4, 4, 5, 7);\n      expect(hot.getSelectedRangeLast().getDirection()).toEqual('NW-SE');\n\n      hot.selectCell(4, 5, 7, 5);\n      expect(hot.getSelectedRangeLast().getDirection()).toEqual('NE-SW');\n    });\n\n    it('should not add an area class to the selected cell if a single merged cell is selected', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(6, 6),\n        mergeCells: [\n          {\n            row: 1,\n            col: 1,\n            colspan: 3,\n            rowspan: 2\n          }\n        ]\n      });\n\n      selectCell(1, 1);\n      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);\n\n      selectCell(1, 1, 4, 4);\n      expect(getCell(1, 1).className.indexOf('area')).not.toEqual(-1);\n\n      selectCell(1, 1);\n      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);\n\n      selectCell(0, 0);\n      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);\n    });\n\n    it('should render fill handle after merge cells', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: true\n      });\n\n      const plugin = hot.getPlugin('mergeCells');\n      hot.selectCell(0, 0, 2, 2);\n      plugin.mergeSelection();\n\n      expect(spec().$container.find('.wtBorder.current.corner:visible').length).toEqual(1);\n    });\n\n    it('should render fill handle when merge cells is highlighted cell in right bottom corner', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 2, col: 2, rowspan: 2, colspan: 2 }\n        ]\n      });\n\n      hot.selectCell(2, 2, 1, 1);\n\n      expect(spec().$container.find('.wtBorder.corner:visible').length).toEqual(1);\n    });\n\n    it('should render fill handle when cell in right bottom corner is a merged cell', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 2, col: 2, rowspan: 2, colspan: 2 }\n        ]\n      });\n\n      hot.selectCell(1, 1, 2, 2);\n\n      expect(spec().$container.find('.wtBorder.corner:visible').length).toEqual(1);\n    });\n\n    it('should select the cell in the top-left corner of the merged cell, when navigating down using the ENTER key on the' +\n      ' bottom edge of the table', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 8, col: 8, rowspan: 2, colspan: 2 }\n        ]\n      });\n      hot.setDataAtCell(8, 8, 'top-left-corner!');\n\n      hot.selectCell(7, 9);\n\n      keyDownUp('enter');\n      keyDownUp('enter');\n      keyDownUp('enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n\n      keyDownUp('enter');\n      keyDownUp('enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n\n      keyDownUp('enter');\n      keyDownUp('enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n    });\n\n    it('should select the cell in the top-left corner of the merged cell, when navigating down using the TAB key on the' +\n      ' bottom edge of the table', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 8, col: 8, rowspan: 2, colspan: 2 }\n        ],\n        autoWrapCol: false,\n        autoWrapRow: false\n      });\n      hot.setDataAtCell(8, 8, 'top-left-corner!');\n\n      hot.selectCell(9, 7);\n\n      keyDownUp('enter');\n      keyDownUp('tab');\n      keyDownUp('enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n\n      keyDownUp('tab');\n      keyDownUp('enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n\n      keyDownUp('tab');\n      keyDownUp('enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n    });\n\n    it('should select the cell in the top-left corner of the merged cell, when navigating down using the SHIFT + ENTER key on the' +\n      ' top edge of the table', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 }\n        ],\n        autoWrapCol: false,\n        autoWrapRow: false\n      });\n      hot.setDataAtCell(0, 0, 'top-left-corner!');\n\n      hot.selectCell(2, 1);\n\n      keyDownUp('shift+enter');\n      keyDownUp('shift+enter');\n      keyDownUp('shift+enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n\n      keyDownUp('shift+enter');\n      keyDownUp('shift+enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n\n      keyDownUp('shift+enter');\n      keyDownUp('shift+enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n    });\n\n    it('should select the cell in the top-left corner of the merged cell, when navigating down using the SHIFT + TAB key on the' +\n      ' top edge of the table', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 }\n        ]\n      });\n      hot.setDataAtCell(0, 0, 'top-left-corner!');\n\n      hot.selectCell(1, 2);\n\n      keyDownUp('shift+enter');\n      keyDownUp('shift+tab');\n      keyDownUp('shift+enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');\n\n      keyDownUp('shift+tab');\n      keyDownUp('shift+enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('J1');\n\n      keyDownUp('shift+tab');\n      keyDownUp('shift+enter');\n\n      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('I1');\n      keyDownUp('shift+enter');\n    });\n  });\n\n  describe('merged cells scroll', () => {\n    it('getCell should return merged cell parent', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 }\n        ],\n        height: 100,\n        width: 400\n      });\n\n      const mergedCellParent = hot.getCell(0, 0);\n      const mergedCellHidden = hot.getCell(1, 1);\n\n      expect(mergedCellHidden).toBe(mergedCellParent);\n    });\n\n    it('should scroll viewport to beginning of a merged cell when it\\'s clicked', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        mergeCells: [\n          { row: 5, col: 0, rowspan: 2, colspan: 2 }\n        ],\n        height: 100,\n        width: 400\n      });\n\n      const mainHolder = hot.view.wt.wtTable.holder;\n\n      mainHolder.scrollTop = 130;\n      hot.render();\n\n      expect(mainHolder.scrollTop).toBe(130);\n\n      let TD = hot.getCell(5, 0);\n      mouseDown(TD);\n      mouseUp(TD);\n      const mergedCellScrollTop = mainHolder.scrollTop;\n      expect(mergedCellScrollTop).toBeLessThan(130);\n      expect(mergedCellScrollTop).toBeGreaterThan(0);\n\n      mainHolder.scrollTop = 0;\n      hot.render();\n\n      mainHolder.scrollTop = 130;\n      hot.render();\n\n      TD = hot.getCell(5, 2);\n      mouseDown(TD);\n      mouseUp(TD);\n      const regularCellScrollTop = mainHolder.scrollTop;\n      expect(mergedCellScrollTop).toBe(regularCellScrollTop);\n    });\n\n    it('should render whole merged cell even when most rows are not in the viewport - scrolled to top', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(40, 5),\n        mergeCells: [\n          { row: 1, col: 0, rowspan: 21, colspan: 2 },\n          { row: 21, col: 2, rowspan: 18, colspan: 2 }\n        ],\n        height: 100,\n        width: 400\n      });\n\n      expect(hot.countRenderedRows()).toBe(39);\n    });\n\n    it('should render whole merged cell even when most rows are not in the viewport - scrolled to bottom', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(40, 5),\n        mergeCells: [\n          { row: 1, col: 0, rowspan: 21, colspan: 2 },\n          { row: 21, col: 2, rowspan: 18, colspan: 2 }\n        ],\n        height: 100,\n        width: 400\n      });\n\n      const mainHolder = hot.view.wt.wtTable.holder;\n\n      $(mainHolder).scrollTop(99999);\n      hot.render();\n\n      expect(hot.countRenderedRows()).toBe(39);\n    });\n\n    it('should render whole merged cell even when most columns are not in the viewport - scrolled to the left', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(5, 40),\n        mergeCells: [\n          { row: 0, col: 1, rowspan: 2, colspan: 21 },\n          { row: 2, col: 21, rowspan: 2, colspan: 18 }\n        ],\n        height: 100,\n        width: 400\n      });\n\n      expect(hot.countRenderedCols()).toBe(39);\n    });\n\n    it('should render whole merged cell even when most columns are not in the viewport - scrolled to the right', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(5, 40),\n        mergeCells: [\n          { row: 0, col: 1, rowspan: 2, colspan: 21 },\n          { row: 2, col: 21, rowspan: 2, colspan: 18 }\n        ],\n        height: 100,\n        width: 400\n      });\n\n      spec().$container.scrollLeft(99999);\n      hot.render();\n\n      expect(hot.countRenderedCols()).toBe(39);\n    });\n\n  });\n\n  describe('merge cells shift', () => {\n    it('should shift the merged cells right, when inserting a column on the left side of them', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 1, col: 1, rowspan: 2, colspan: 2 },\n          { row: 2, col: 5, rowspan: 2, colspan: 2 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('insert_col', 3, 2);\n\n      const plugin = hot.getPlugin('mergeCells');\n      const mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;\n\n      expect(mergedCellsCollection[0].col).toEqual(1);\n      expect(mergedCellsCollection[1].col).toEqual(7);\n    });\n\n    it('should shift the merged cells left, when removing a column on the left side of them', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 1, col: 1, rowspan: 2, colspan: 2 },\n          { row: 2, col: 5, rowspan: 2, colspan: 2 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_col', 3, 2);\n\n      const plugin = hot.getPlugin('mergeCells');\n      const mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;\n\n      expect(mergedCellsCollection[0].col).toEqual(1);\n      expect(mergedCellsCollection[1].col).toEqual(3);\n\n    });\n\n    it('should shift the merged cells down, when inserting rows above them', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 1, col: 1, rowspan: 2, colspan: 2 },\n          { row: 5, col: 5, rowspan: 2, colspan: 2 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('insert_row', 3, 2);\n\n      const plugin = hot.getPlugin('mergeCells');\n      const mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;\n\n      expect(mergedCellsCollection[0].row).toEqual(1);\n      expect(mergedCellsCollection[1].row).toEqual(7);\n    });\n\n    it('should shift the merged cells up, when removing rows above them', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 1, col: 1, rowspan: 2, colspan: 2 },\n          { row: 5, col: 5, rowspan: 2, colspan: 2 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_row', 3, 2);\n\n      const plugin = hot.getPlugin('mergeCells');\n      const mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;\n\n      expect(mergedCellsCollection[0].row).toEqual(1);\n      expect(mergedCellsCollection[1].row).toEqual(3);\n    });\n\n    it('should trim the merged cell\\'s height, when removing rows between their start and end', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 1, col: 1, rowspan: 5, colspan: 3 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_row', 2, 2);\n\n      const plugin = hot.getPlugin('mergeCells');\n      const mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;\n\n      expect(mergedCellsCollection[0].row).toEqual(1);\n      expect(mergedCellsCollection[0].rowspan).toEqual(3);\n\n      plugin.mergedCellsCollection.clear();\n      plugin.merge(1, 1, 2, 2);\n\n      hot.alter('remove_row', 2, 2);\n\n      expect(mergedCellsCollection[0].row).toEqual(1);\n      expect(mergedCellsCollection[0].rowspan).toEqual(1);\n    });\n\n    it('should trim the merged cell\\'s width, when removing columns between their start and end', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 1, col: 1, rowspan: 3, colspan: 5 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_col', 2, 2);\n\n      const plugin = hot.getPlugin('mergeCells');\n      const mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;\n\n      expect(mergedCellsCollection[0].col).toEqual(1);\n      expect(mergedCellsCollection[0].colspan).toEqual(3);\n\n      plugin.mergedCellsCollection.clear();\n      plugin.merge(1, 1, 2, 2);\n\n      hot.alter('remove_col', 2, 2);\n\n      expect(mergedCellsCollection[0].col).toEqual(1);\n      expect(mergedCellsCollection[0].colspan).toEqual(1);\n    });\n\n    it('should shift the `row` of a merged cells, when removing rows consisting it', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 5, col: 5, rowspan: 5, colspan: 3 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_row', 4, 3);\n\n      const plugin = hot.getPlugin('mergeCells');\n      const mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;\n\n      expect(mergedCellsCollection[0].row).toEqual(4);\n      expect(mergedCellsCollection[0].rowspan).toEqual(3);\n\n      plugin.mergedCellsCollection.clear();\n      plugin.merge(1, 1, 2, 2);\n\n      hot.alter('remove_row', 0, 2);\n\n      expect(mergedCellsCollection[0].row).toEqual(0);\n      expect(mergedCellsCollection[0].rowspan).toEqual(1);\n\n      plugin.mergedCellsCollection.clear();\n      plugin.merge(1, 1, 2, 2);\n\n      hot.alter('remove_row', 1, 1);\n\n      expect(mergedCellsCollection[0].row).toEqual(1);\n      expect(mergedCellsCollection[0].rowspan).toEqual(1);\n    });\n\n    it('should shift the `col` of a merged cells, when removing columns consisting it', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 5, col: 5, rowspan: 3, colspan: 5 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_col', 4, 3);\n\n      const plugin = hot.getPlugin('mergeCells');\n      const mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;\n\n      expect(mergedCellsCollection[0].col).toEqual(4);\n      expect(mergedCellsCollection[0].colspan).toEqual(3);\n\n      plugin.mergedCellsCollection.clear();\n      plugin.merge(1, 1, 2, 2);\n\n      hot.alter('remove_col', 0, 2);\n\n      expect(mergedCellsCollection[0].col).toEqual(0);\n      expect(mergedCellsCollection[0].colspan).toEqual(1);\n\n      plugin.mergedCellsCollection.clear();\n      plugin.merge(1, 1, 2, 2);\n\n      hot.alter('remove_col', 1, 1);\n\n      expect(mergedCellsCollection[0].col).toEqual(1);\n      expect(mergedCellsCollection[0].colspan).toEqual(1);\n    });\n\n    it('should allow removing multiple merged cells, while removing multiple rows', () => {\n      const errorSpy = spyOn(console, 'error');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          { row: 0, col: 0, rowspan: 2, colspan: 2 },\n          { row: 5, col: 5, rowspan: 3, colspan: 3 }\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_row', 0, 10);\n\n      expect(errorSpy).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('merged cell candidates validation', () => {\n    it('should check if the provided merged cell information object contains negative values, and if so, do not add it ' +\n      'to the collection and throw an appropriate warning', () => {\n      const warnSpy = spyOn(console, 'warn');\n      const newMergedCells = [\n        {\n          row: 0,\n          col: 1,\n          rowspan: 3,\n          colspan: 4\n        },\n        {\n          row: -5,\n          col: 8,\n          rowspan: 3,\n          colspan: 4\n        },\n        {\n          row: 20,\n          col: -21,\n          rowspan: 3,\n          colspan: 4\n        },\n        {\n          row: 200,\n          col: 210,\n          rowspan: -3,\n          colspan: 4\n        },\n        {\n          row: 220,\n          col: 220,\n          rowspan: 3,\n          colspan: -4\n        }];\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: newMergedCells\n      });\n\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared with {row: -5, col: 8, rowspan: 3, colspan: 4} ' +\n        'contains negative values, which is not supported. It will not be added to the collection.');\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared with {row: 20, col: -21, rowspan: 3, colspan: 4} ' +\n        'contains negative values, which is not supported. It will not be added to the collection.');\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared with {row: 200, col: 210, rowspan: -3, colspan: 4} ' +\n        'contains negative values, which is not supported. It will not be added to the collection.');\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared with {row: 220, col: 220, rowspan: 3, colspan: -4} ' +\n        'contains negative values, which is not supported. It will not be added to the collection.');\n\n      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(1);\n    });\n\n    it('should check if the provided merged cell information object has rowspan and colspan declared as 0, and if so, do not add it ' +\n      'to the collection and throw an appropriate warning', () => {\n      const warnSpy = spyOn(console, 'warn');\n      const newMergedCells = [\n        {\n          row: 0,\n          col: 1,\n          rowspan: 3,\n          colspan: 4\n        },\n        {\n          row: 6,\n          col: 6,\n          rowspan: 0,\n          colspan: 0\n        },\n        {\n          row: 9,\n          col: 9,\n          rowspan: 1,\n          colspan: 0\n        }\n      ];\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: newMergedCells\n      });\n\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [6, 6] has \"rowspan\" or ' +\n        '\"colspan\" declared as \"0\", which is not supported. It cannot be added to the collection.');\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [9, 9] has \"rowspan\" or ' +\n        '\"colspan\" declared as \"0\", which is not supported. It cannot be added to the collection.');\n\n      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(1);\n    });\n\n    it('should check if the provided merged cell information object represents a single cell, and if so, do not add it ' +\n      'to the collection and throw an appropriate warning', () => {\n      const warnSpy = spyOn(console, 'warn');\n      const newMergedCells = [\n        {\n          row: 0,\n          col: 1,\n          rowspan: 3,\n          colspan: 4\n        },\n        {\n          row: 5,\n          col: 8,\n          rowspan: 1,\n          colspan: 1\n        },\n        {\n          row: 20,\n          col: 21,\n          rowspan: 3,\n          colspan: 4\n        }\n      ];\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        mergeCells: newMergedCells\n      });\n\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [5, 8] has both \"rowspan\" and \"colspan\" ' +\n        'declared as \"1\", which makes it a single cell. It cannot be added to the collection.');\n      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(2);\n    });\n\n    it('should check if the provided merged cell information object contains merged declared out of bounds, and if so, ' +\n      'do not add it to the collection and throw an appropriate warning', () => {\n      const warnSpy = spyOn(console, 'warn');\n      const newMergedCells = [\n        {\n          row: 0,\n          col: 1,\n          rowspan: 3,\n          colspan: 4\n        },\n        {\n          row: 17,\n          col: 17,\n          rowspan: 5,\n          colspan: 5\n        },\n        {\n          row: 20,\n          col: 21,\n          rowspan: 3,\n          colspan: 4\n        }\n      ];\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: newMergedCells\n      });\n\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [17, 17] is positioned ' +\n        '(or positioned partially) outside of the table range. It was not added to the table, please fix your setup.');\n      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [20, 21] is positioned ' +\n        '(or positioned partially) outside of the table range. It was not added to the table, please fix your setup.');\n      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(1);\n    });\n  });\n\n  xdescribe('canMergeRange', () => {\n    it('should return false if start and end cell is the same', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)\n      });\n      const mergeCells = new Handsontable.plugins.MergeCells(hot);\n      const result = mergeCells.canMergeRange({\n        from: {\n          row: 0, col: 1\n        },\n        to: {\n          row: 0, col: 1\n        }\n      });\n\n      expect(result).toBe(false);\n    });\n\n    it('should return true for 2 consecutive cells in the same column', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)\n      });\n      const mergeCells = new Handsontable.plugins.MergeCells(hot);\n      const result = mergeCells.canMergeRange({\n        from: {\n          row: 0, col: 1\n        },\n        to: {\n          row: 1, col: 1\n        }\n      });\n\n      expect(result).toBe(true);\n    });\n\n    it('should return true for 2 consecutive cells in the same row', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)\n      });\n      const mergeCells = hot.getPlugin('mergeCells');\n      const result = mergeCells.canMergeRange({\n        from: {\n          row: 0, col: 1\n        },\n        to: {\n          row: 0, col: 2\n        }\n      });\n\n      expect(result).toBe(true);\n    });\n\n    it('should return true for 4 neighboring cells', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)\n      });\n      const mergeCells = hot.getPlugin('mergeCells');\n      const result = mergeCells.canMergeRange({\n        from: {\n          row: 0, col: 1\n        },\n        to: {\n          row: 1, col: 2\n        }\n      });\n\n      expect(result).toBe(true);\n    });\n  });\n\n  xdescribe('modifyTransform', () => {\n    it('should not transform arrow right when entering a merged cell', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const coords = new CellCoords(1, 0);\n      const currentSelection = new CellRange(coords, coords, coords);\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      const inDelta = new CellCoords(0, 1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(0, 1));\n    });\n\n    it('should transform arrow right when leaving a merged cell', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const coords = new CellCoords(1, 1);\n      const currentSelection = new CellRange(coords, coords, coords);\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      const inDelta = new CellCoords(0, 1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(0, 3));\n    });\n\n    it('should transform arrow right when leaving a merged cell (return to desired row)', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n\n      let coords = new CellCoords(2, 0);\n      let currentSelection = new CellRange(coords, coords, coords);\n      let inDelta = new CellCoords(0, 1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(-1, 1));\n\n      coords = new CellCoords(1, 1);\n      currentSelection = new CellRange(coords, coords, coords);\n      inDelta = new CellCoords(0, 1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(1, 3));\n    });\n\n    it('should transform arrow left when entering a merged cell', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const coords = new CellCoords(1, 4);\n      const currentSelection = new CellRange(coords, coords, coords);\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      const inDelta = new CellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(0, -3));\n    });\n\n    it('should not transform arrow left when leaving a merged cell', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const coords = new CellCoords(1, 1);\n      const currentSelection = new CellRange(coords, coords, coords);\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      const inDelta = new CellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(0, -1));\n    });\n\n    it('should transform arrow left when leaving a merged cell (return to desired row)', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n\n      let coords = new CellCoords(2, 4);\n      let currentSelection = new CellRange(coords, coords, coords);\n      let inDelta = new CellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(-1, -3));\n\n      coords = new CellCoords(1, 1);\n      currentSelection = new CellRange(coords, coords, coords);\n      inDelta = new CellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(1, -1));\n    });\n\n    it('should not transform arrow down when entering a merged cell', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const coords = new CellCoords(0, 1);\n      const currentSelection = new CellRange(coords, coords, coords);\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      const inDelta = new CellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(0, -1));\n    });\n\n    it('should transform arrow down when leaving a merged cell', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const coords = new CellCoords(1, 1);\n      const currentSelection = new CellRange(coords, coords, coords);\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      const inDelta = new CellCoords(1, 0);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(3, 0));\n    });\n\n    it('should transform arrow up when entering a merged cell', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const coords = new CellCoords(4, 1);\n      const currentSelection = new CellRange(coords, coords, coords);\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      const inDelta = new CellCoords(-1, 0);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(-3, 0));\n    });\n\n    it('should not transform arrow up when leaving a merged cell', () => {\n      const mergeCellsSettings = [\n        { row: 1, col: 1, rowspan: 3, colspan: 3 }\n      ];\n      const coords = new CellCoords(1, 1);\n      const currentSelection = new CellRange(coords, coords, coords);\n      const mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      const inDelta = new CellCoords(-1, 0);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new CellCoords(-1, 0));\n    });\n  });\n\n  describe('ContextMenu', () => {\n    it('should disable `Merge cells` context menu item when context menu was triggered from corner header', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        mergeCells: true,\n      });\n\n      $('.ht_clone_top_left_corner .htCore')\n        .find('thead')\n        .find('th')\n        .eq(0)\n        .simulate('mousedown', { which: 3 });\n      contextMenu();\n\n      expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n        'Insert column left',\n        'Insert column right',\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n        'Merge cells',\n      ].join(''));\n    });\n  });\n\n  describe('Validation', () => {\n    it('should not hide the merged cells after validating the table', (done) => {\n      const onAfterValidate = jasmine.createSpy('onAfterValidate');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 5, col: 4, rowspan: 2, colspan: 2 },\n          { row: 1, col: 1, rowspan: 2, colspan: 2 },\n        ],\n        validator(query, callback) {\n          callback(true);\n        },\n        afterValidate: onAfterValidate\n      });\n\n      let firstCollection = hot.getCell(5, 4);\n      let secondCollection = hot.getCell(1, 1);\n\n      expect(firstCollection.style.display.indexOf('none')).toEqual(-1);\n      expect(secondCollection.style.display.indexOf('none')).toEqual(-1);\n\n      hot.validateCells();\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n\n        firstCollection = hot.getCell(5, 4);\n        secondCollection = hot.getCell(1, 1);\n\n        expect(firstCollection.style.display.indexOf('none')).toEqual(-1);\n        expect(secondCollection.style.display.indexOf('none')).toEqual(-1);\n\n        done();\n      }, 100);\n    });\n  });\n\n  describe('Entire row/column selection', () => {\n    it('should be possible to select a single entire column, when there\\'s a merged cell in it', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 5, col: 4, rowspan: 2, colspan: 5 }\n        ]\n      });\n\n      hot.selectCell(0, 5, 9, 5);\n      expect(JSON.stringify(hot.getSelectedLast())).toEqual('[0,5,9,5]');\n\n      // it should work only for selecting the entire column\n      hot.selectCell(4, 5, 7, 5);\n      expect(JSON.stringify(hot.getSelectedLast())).toEqual('[4,4,7,8]');\n    });\n\n    it('should be possible to select a single entire row, when there\\'s a merged cell in it', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 5, col: 4, rowspan: 5, colspan: 2 }\n        ]\n      });\n\n      hot.selectCell(5, 0, 5, 9);\n      expect(JSON.stringify(hot.getSelectedLast())).toEqual('[5,0,5,9]');\n\n      // it should work only for selecting the entire row\n      hot.selectCell(6, 3, 6, 7);\n      expect(JSON.stringify(hot.getSelectedLast())).toEqual('[5,3,9,7]');\n    });\n  });\n\n  describe('Undo/Redo', () => {\n    it('should not be possible to remove initially declared merged cells by calling the \\'Undo\\' action.', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: [\n          { row: 5, col: 4, rowspan: 2, colspan: 5 },\n          { row: 1, col: 1, rowspan: 2, colspan: 2 },\n        ]\n      });\n\n      hot.undo();\n\n      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(2);\n    });\n\n    it('should be possible undo the merging process by calling the \\'Undo\\' action.', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: true\n      });\n\n      const plugin = hot.getPlugin('mergeCells');\n      plugin.merge(0, 0, 3, 3);\n      hot.selectCell(4, 4, 7, 7);\n      plugin.mergeSelection();\n\n      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(2);\n      hot.undo();\n      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(1);\n      hot.undo();\n      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(0);\n    });\n\n    it('should be possible redo the merging process by calling the \\'Redo\\' action.', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        mergeCells: true\n      });\n\n      const plugin = hot.getPlugin('mergeCells');\n      plugin.merge(0, 0, 3, 3);\n      hot.selectCell(4, 4, 7, 7);\n      plugin.mergeSelection();\n\n      hot.undo();\n      hot.undo();\n\n      hot.redo();\n      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(1);\n      hot.redo();\n      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(2);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/mergeCells/test/mergeCells.e2e.js","describe('MergeCells Selection', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should leave the partially selected merged cells white (or any initial color), when selecting entire columns or rows', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n      mergeCells: [\n        { row: 0, col: 0, rowspan: 3, colspan: 3 }\n      ]\n    });\n\n    selectColumns(0, 1);\n\n    const mergedCell = getCell(0, 0);\n\n    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual('0');\n\n    selectRows(0, 1);\n\n    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual('0');\n  });\n\n  it('should leave the partially selected merged cells with their initial color, when selecting entire columns or rows ' +\n    '(when the merged cells was previously fully selected)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n      mergeCells: [\n        { row: 0, col: 0, rowspan: 3, colspan: 3 }\n      ],\n      rowHeaders: true\n    });\n\n    selectColumns(0, 2);\n\n    const mergedCell = getCell(0, 0);\n    const selectedCellBackground = getComputedStyle(mergedCell, ':before').backgroundColor;\n    const selectedCellOpacity = getComputedStyle(mergedCell, ':before').opacity;\n    const firstRowHeader = getCell(0, -1, true);\n\n    keyDown('ctrl');\n\n    $(firstRowHeader).simulate('mousedown');\n    $(firstRowHeader).simulate('mouseup');\n\n    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);\n    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);\n  });\n\n  it('should make the entirely selected merged cells have the same background color as a regular selected area, when ' +\n    'selecting entire columns or rows', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 6),\n      mergeCells: [\n        { row: 0, col: 0, rowspan: 3, colspan: 3 }\n      ]\n    });\n\n    selectCell(4, 4, 5, 5);\n\n    const selectedCell = getCell(4, 4);\n    const selectedCellBackground = getComputedStyle(selectedCell, ':before').backgroundColor;\n    const selectedCellOpacity = getComputedStyle(selectedCell, ':before').opacity;\n\n    selectColumns(0, 2);\n\n    const mergedCell = getCell(0, 0);\n\n    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);\n    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);\n\n    selectRows(0, 2);\n\n    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);\n    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);\n  });\n\n  it('should make the entirely selected merged cells have the same background color as a regular selected area, when ' +\n    'selecting entire columns or rows (using multiple selection layers)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n      mergeCells: [\n        { row: 0, col: 0, rowspan: 3, colspan: 3 }\n      ],\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    // sample the selected background\n    selectCells([[5, 1, 5, 2]]);\n    const selectedCell = getCell(5, 1);\n    const selectedCellBackground = getComputedStyle(selectedCell, ':before').backgroundColor;\n    const selectedCellOpacity = getComputedStyle(selectedCell, ':before').opacity;\n\n    const mergedCell = getCell(0, 0);\n    const rowHeaders = [\n      getCell(0, -1, true),\n      getCell(1, -1, true),\n      getCell(2, -1, true),\n      getCell(3, -1, true),\n    ];\n    const columnHeaders = [\n      spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)'),\n      spec().$container.find('.ht_clone_top tr:eq(0) th:eq(2)'),\n      spec().$container.find('.ht_clone_top tr:eq(0) th:eq(3)'),\n      spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)'),\n    ];\n\n    deselectCell();\n\n    keyDown('ctrl');\n    $(rowHeaders[0]).simulate('mousedown');\n    $(rowHeaders[1]).simulate('mouseover');\n    $(rowHeaders[1]).simulate('mouseup');\n    $(rowHeaders[2]).simulate('mousedown');\n    $(rowHeaders[2]).simulate('mouseover');\n    $(rowHeaders[2]).simulate('mouseup');\n    keyUp('ctrl');\n\n    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);\n    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);\n\n    deselectCell();\n\n    keyDown('ctrl');\n    $(columnHeaders[0]).simulate('mousedown');\n    $(columnHeaders[1]).simulate('mouseover');\n    $(columnHeaders[1]).simulate('mouseup');\n    $(columnHeaders[2]).simulate('mousedown');\n    $(columnHeaders[3]).simulate('mouseover');\n    $(columnHeaders[3]).simulate('mouseup');\n    keyUp('ctrl');\n\n    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);\n    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);\n  });\n\n  it('should make the entirely selected merged cells have the same background color as a regular selected area, when ' +\n    'selecting entire columns or rows (when the merged cells was previously fully selected)', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n      mergeCells: [\n        { row: 0, col: 0, rowspan: 3, colspan: 3 }\n      ],\n      rowHeaders: true\n    });\n\n    // sample the double-selected background\n    selectCells([[5, 1, 5, 2], [5, 1, 5, 2]]);\n    const selectedCell = getCell(5, 1);\n    const selectedCellBackground = getComputedStyle(selectedCell, ':before').backgroundColor;\n    const selectedCellOpacity = getComputedStyle(selectedCell, ':before').opacity;\n\n    selectColumns(0, 2);\n\n    const mergedCell = getCell(0, 0);\n    const firstRowHeader = getCell(0, -1, true);\n    const thirdRowHeader = getCell(2, -1, true);\n\n    keyDown('ctrl');\n\n    $(firstRowHeader).simulate('mousedown');\n    $(thirdRowHeader).simulate('mouseover');\n    $(thirdRowHeader).simulate('mouseup');\n\n    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);\n    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/mergeCells/test/selection.e2e.js","describe('HandsontableObserveChanges', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function createHOT(data, observeChanges) {\n    return handsontable({\n      data,\n      width: 200,\n      height: 200,\n      observeChanges\n    });\n  }\n\n  describe('refreshing table after changes have been detected', () => {\n    describe('array data', () => {\n      it('should render newly added row', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        createHOT(data, true);\n\n        data.push(['A3', 'B3']);\n\n        const htCore = getHtCore();\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(3);\n          expect(htCore.find('col').length).toEqual(2);\n          done();\n        }, 200);\n      });\n\n      it('should render newly added column', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data[0].push('C1');\n        data[1].push('C2');\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(2);\n          expect(htCore.find('col').length).toEqual(3);\n          done();\n        }, 200);\n      });\n\n      it('should render removed row', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data.splice(0, 1); // removes one row at index 0\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(1);\n          expect(htCore.find('col').length).toEqual(2);\n          done();\n        }, 200);\n      });\n\n      it('should render removed column', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data[0].splice(0, 1); // removes one column at index 0 in first row\n        data[1].splice(0, 1); // removes one column at index 0 in second row\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(2);\n          expect(htCore.find('col').length).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should render cell change from string to string', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data[0][0] = 'new string';\n\n        setTimeout(() => {\n          expect(htCore.find('td:eq(0)').html()).toEqual('new string');\n          done();\n        }, 200);\n      });\n\n      it('should render cell change in a new row', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data.push(['A3', 'B3']);\n\n        setTimeout(() => {\n          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n          data[2][0] = 'new string';\n        }, 200);\n\n        setTimeout(() => {\n          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('new string');\n          done();\n        }, 1200);\n      });\n\n      it('should not render cell change when turned off (`observeChanges: false`)', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        createHOT(data, false);\n        const htCore = getHtCore();\n\n        data[0][0] = 'new string';\n\n        setTimeout(() => {\n          expect(htCore.find('td:eq(0)').html()).toEqual('A1');\n          done();\n        }, 100);\n      });\n    });\n    describe('object data', () => {\n      it('should render newly added row', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data.push({ prop0: 'A3', prop1: 'B3' });\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(3);\n          expect(htCore.find('col').length).toEqual(2);\n          done();\n        }, 200);\n      });\n\n      it('should render removed row', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data.splice(0, 1); // removes one row at index 0\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(1);\n          expect(htCore.find('col').length).toEqual(2);\n          done();\n        }, 200);\n      });\n\n      it('should render cell change from string to string', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data[0].prop0 = 'new string';\n\n        setTimeout(() => {\n          expect(htCore.find('td:eq(0)').html()).toEqual('new string');\n          done();\n        }, 200);\n      });\n\n      it('should render cell change in a new row', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        createHOT(data, true);\n        const htCore = getHtCore();\n\n        data.push({ prop0: 'A3', prop1: 'B3' });\n\n        setTimeout(() => {\n          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n          data[2].prop0 = 'new string';\n        }, 200);\n\n        setTimeout(() => {\n          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('new string');\n          done();\n        }, 1200);\n      });\n\n      it('should not break with undefined data properties', () => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        data[0].prop0 = undefined;\n\n        expect(() => {\n          createHOT(data, true);\n          getHtCore();\n        }).not.toThrow();\n      });\n\n      it('should not render cell change when turned off (`observeChanges: false`)', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        createHOT(data, false);\n        const htCore = getHtCore();\n\n        data[0].prop0 = 'new string';\n\n        setTimeout(() => {\n          expect(htCore.find('td:eq(0)').html()).toEqual('A1');\n          done();\n        }, 200);\n      });\n    });\n  });\n\n  describe('enabling/disabling plugin', () => {\n    it('should be possible to enable plugin using updateSettings', (done) => {\n      const data = Handsontable.helper.createSpreadsheetData(2, 2);\n      createHOT(data, false);\n      const htCore = getHtCore();\n\n      data[0][0] = 'new string';\n\n      setTimeout(() => {\n        expect(htCore.find('td:eq(0)').html()).toEqual('A1');\n\n        updateSettings({\n          observeChanges: true\n        });\n        data[1][0] = 'another new string';\n      }, 200);\n\n      setTimeout(() => {\n        expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('another new string');\n        done();\n      }, 400);\n    });\n\n    it('should be possible to disable plugin using updateSettings', (done) => {\n      const data = Handsontable.helper.createSpreadsheetData(2, 2);\n      const hot = createHOT(data, true);\n      const htCore = getHtCore();\n\n      data[0][0] = 'new string';\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        updateSettings({\n          observeChanges: false\n        });\n\n        data[1][0] = 'another new string';\n      }, 200);\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        hot.render();\n\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');\n        done();\n      }, 300);\n    });\n\n    it('should be possible to pause observing changes without disabling the plugin', (done) => {\n      const data = Handsontable.helper.createSpreadsheetData(2, 2);\n      const hot = createHOT(data, true);\n      const htCore = getHtCore();\n\n      data[0][0] = 'new string';\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        hot.pauseObservingChanges();\n\n        data[1][0] = 'another new string';\n      }, 200);\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        hot.render();\n\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');\n        done();\n      }, 300);\n    });\n\n    it('should be possible to resume observing changes after it was paused', (done) => {\n      const data = Handsontable.helper.createSpreadsheetData(2, 2);\n      const hot = createHOT(data, true);\n      const htCore = getHtCore();\n\n      hot.pauseObservingChanges();\n\n      data[0][0] = 'new string';\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('A1');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        hot.resumeObservingChanges();\n        data[1][0] = 'another new string';\n      }, 100);\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');\n        done();\n      }, 1200);\n    });\n  });\n\n  describe('observeChanges fires appropriate events when changes are detected', () => {\n    describe('array data', () => {\n      it('should fire afterChangesObserved event after changes has been noticed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        data[0][0] = 'new string';\n\n        setTimeout(() => {\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterCreateRow event after detecting that new row has been added', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n        hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n        data.push(['A2', 'B2']);\n\n        setTimeout(() => {\n          expect(afterCreateRowCallback.calls.count()).toEqual(1);\n          expect(afterCreateRowCallback).toHaveBeenCalledWith(2, 1, 'ObserveChanges.change', undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveRow event after detecting that row has been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n        hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n        data.pop();\n\n        setTimeout(() => {\n          expect(afterRemoveRowCallback.calls.count()).toEqual(1);\n          expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 1, 'ObserveChanges.change', undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveRow event after detecting that multiple rows have been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n        hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n        data.splice(0, 2);\n\n        setTimeout(() => {\n          expect(afterRemoveRowCallback.calls.count()).toEqual(2);\n\n          // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim\n          const args = [];\n          args.push(afterRemoveRowCallback.calls.argsFor(0));\n          args.push(afterRemoveRowCallback.calls.argsFor(1));\n          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterCreateCol event after detecting that new col has been added', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n        hot.addHook('afterCreateCol', afterCreateColCallback);\n\n        data[0].push('C1');\n        data[1].push('C2');\n\n        setTimeout(() => {\n          expect(afterCreateColCallback.calls.count()).toEqual(1);\n          expect(afterCreateColCallback.calls.argsFor(0)).toEqual([2, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveCol event after detecting that col has been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n        hot.addHook('afterRemoveCol', afterRemoveColCallback);\n\n        data[0].pop();\n        data[1].pop();\n\n        setTimeout(() => {\n          expect(afterRemoveColCallback.calls.count()).toEqual(1);\n          expect(afterRemoveColCallback.calls.argsFor(0)).toEqual([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveCol event after detecting that multiple cols have been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n        hot.addHook('afterRemoveCol', afterRemoveColCallback);\n\n        data[0].pop();\n        data[0].pop();\n        data[1].pop();\n        data[1].pop();\n\n        setTimeout(() => {\n          expect(afterRemoveColCallback.calls.count()).toEqual(2);\n\n          // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim\n          const args = [];\n          args.push(afterRemoveColCallback.calls.argsFor(0));\n          args.push(afterRemoveColCallback.calls.argsFor(1));\n          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterChange event after detecting that table data has changed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n        hot.addHook('afterChange', afterChangeCallback);\n\n        data[0][0] = 'new string';\n\n        setTimeout(() => {\n          expect(afterChangeCallback.calls.count()).toEqual(1);\n          expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, null, 'new string']], 'ObserveChanges.change', undefined, undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n    });\n    describe('object data', () => {\n      it('should fire afterChangesObserved event after changes has been noticed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        data[0].prop0 = 'new string';\n\n        setTimeout(() => {\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterCreateRow event after detecting that new row has been added', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n        hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n        data.push({ prop0: 'A2', prop1: 'B2' });\n\n        setTimeout(() => {\n          expect(afterCreateRowCallback.calls.count()).toEqual(1);\n          expect(afterCreateRowCallback).toHaveBeenCalledWith(2, 1, 'ObserveChanges.change', undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveRow event after detecting that row has been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n        hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n        data.pop();\n\n        setTimeout(() => {\n          expect(afterRemoveRowCallback.calls.count()).toEqual(1);\n          expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 1, 'ObserveChanges.change', undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveRow event after detecting that multiple rows have been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n        hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n        data.splice(0, 2);\n\n        setTimeout(() => {\n          expect(afterRemoveRowCallback.calls.count()).toEqual(2);\n\n          // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim\n          const args = [];\n          args.push(afterRemoveRowCallback.calls.argsFor(0));\n          args.push(afterRemoveRowCallback.calls.argsFor(1));\n          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterChange event after detecting that table data has changed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n        hot.addHook('afterChange', afterChangeCallback);\n\n        data[0].prop0 = 'new string';\n\n        setTimeout(() => {\n          expect(afterChangeCallback.calls.count()).toEqual(1);\n          expect(afterChangeCallback).toHaveBeenCalledWith([[0, 'prop0', null, 'new string']], 'ObserveChanges.change', undefined, undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n    });\n  });\n\n  describe('using HOT data manipulation methods, when observeChanges plugin is enabled', () => {\n    describe('array data', () => {\n      it('should run render ONCE after detecting that new row has been added', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        alter('insert_row');\n\n        setTimeout(() => {\n          expect(countRows()).toEqual(3);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that row has been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        const afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        alter('remove_row');\n\n        setTimeout(() => {\n          expect(countRows()).toEqual(1);\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that new column has been added', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        alter('insert_col');\n\n        setTimeout(() => {\n          expect(countCols()).toEqual(3);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that column has been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        const afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        alter('remove_col');\n\n        setTimeout(() => {\n          expect(countCols()).toEqual(1);\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that table data has changed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetData(2, 2);\n        const hot = createHOT(data, true);\n        const htCore = getHtCore();\n\n        const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        const afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        setDataAtCell(0, 0, 'new value');\n\n        setTimeout(() => {\n          expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('new value');\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n    });\n    describe('object data', () => {\n      it('should run render ONCE after detecting that new row has been added', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        alter('insert_row');\n\n        setTimeout(() => {\n          expect(countRows()).toEqual(3);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that row has been removed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        const afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        alter('remove_row');\n\n        setTimeout(() => {\n          expect(countRows()).toEqual(1);\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that table data has changed', (done) => {\n        const data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        const hot = createHOT(data, true);\n\n        const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        const afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        setDataAtRowProp(0, 'prop0', 'new value');\n\n        setTimeout(() => {\n          expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('new value');\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n    });\n  });\n\n  describe('refreshing table after changes have been detected', () => {\n    it('should observe changes to new data bound using loadData', (done) => {\n      const data = Handsontable.helper.createSpreadsheetData(2, 2);\n      const newData = Handsontable.helper.createSpreadsheetData(2, 2);\n      const hot = createHOT(data, true);\n      const htCore = getHtCore();\n      hot.loadData(newData);\n\n      const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n      hot.addHook('afterRender', afterRenderSpy);\n\n      newData.push(['A3', 'B3']);\n\n      setTimeout(() => {\n        expect(afterRenderSpy.calls.count()).toBe(1);\n        expect(htCore.find('tr').length).toEqual(3);\n        expect(htCore.find('col').length).toEqual(2);\n        done();\n      }, 200);\n    });\n\n    it('should not observe changes to old data after it was replaced using loadData', (done) => {\n      const data = Handsontable.helper.createSpreadsheetData(2, 2);\n      const newData = Handsontable.helper.createSpreadsheetData(2, 2);\n      const hot = createHOT(data, true);\n      const htCore = getHtCore();\n      hot.loadData(newData);\n\n      const afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n      hot.addHook('afterRender', afterRenderSpy);\n\n      data.push(['A3', 'B3']);\n\n      setTimeout(() => {\n        expect(afterRenderSpy.calls.count()).toBe(0);\n        expect(htCore.find('tr').length).toEqual(2);\n        expect(htCore.find('col').length).toEqual(2);\n        done();\n      }, 1000);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/observeChanges/test/observeChanges.e2e.js","describe('persistentState', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n\n    window.localStorage.clear();\n  });\n\n  it('should save data, when persistentStateSave is run', () => {\n    const hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    const rawStoredData = window.localStorage[`${id}_testData`];\n\n    expect(rawStoredData).toBeDefined();\n\n    const storedData = JSON.parse(rawStoredData);\n\n    expect(storedData).toEqual(100);\n  });\n\n  it('should NOT save data, when persistentStateSave is run, if plugin is not enabled', () => {\n    const hot = handsontable({\n      persistentState: false\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    const rawStoredData = window.localStorage[`${id}_testData`];\n\n    expect(rawStoredData).toBeUndefined();\n\n  });\n\n  it('should load data, when persistentStateLoad is run', () => {\n    const hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    const storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toEqual(100);\n\n  });\n\n  it('should NOT load data, when persistentStateLoad is run, if plugin is not enabled', () => {\n    const hot = handsontable({\n      persistentState: false\n    });\n\n    // We have to manually save data, as persistentStateSave won't work when the plugin is disabled\n    window.localStorage[`${id}_testData`] = JSON.stringify(100);\n\n    const storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toBeUndefined();\n\n  });\n\n  it('should clear the data under the given key, when persistentStateReset is run', () => {\n    const hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    let storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toEqual(100);\n\n    hot.runHooks('persistentStateReset', 'testData');\n\n    storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toBeUndefined();\n  });\n\n  it('should NOT clear the data under the given key, when persistentStateReset is run', () => {\n    const hot = handsontable({\n      persistentState: false\n    });\n\n    // We have to manually save data, as persistentStateSave won't work when the plugin is disabled\n    window.localStorage[`${id}_testData`] = JSON.stringify(100);\n\n    hot.runHooks('persistentStateReset', 'testData');\n\n    expect(JSON.parse(window.localStorage[`${id}_testData`])).toEqual(100);\n\n  });\n\n  it('should clear all data, when persistentStateReset is run without specifying a key to reset', () => {\n    const hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData0', 100);\n    hot.runHooks('persistentStateSave', 'testData1', 'foo');\n    hot.runHooks('persistentStateSave', 'testData2', 200);\n\n    let storedData = [\n      {},\n      {},\n      {}\n    ];\n    hot.runHooks('persistentStateLoad', 'testData0', storedData[0]);\n    hot.runHooks('persistentStateLoad', 'testData1', storedData[1]);\n    hot.runHooks('persistentStateLoad', 'testData2', storedData[2]);\n\n    expect(storedData[0].value).toEqual(100);\n    expect(storedData[1].value).toEqual('foo');\n    expect(storedData[2].value).toEqual(200);\n\n    hot.runHooks('persistentStateReset');\n\n    storedData = [\n      {},\n      {},\n      {}\n    ];\n    hot.runHooks('persistentStateLoad', 'testData0', storedData[0]);\n    hot.runHooks('persistentStateLoad', 'testData1', storedData[1]);\n    hot.runHooks('persistentStateLoad', 'testData2', storedData[2]);\n\n    expect(storedData[0].value).toBeUndefined();\n    expect(storedData[1].value).toBeUndefined();\n    expect(storedData[2].value).toBeUndefined();\n  });\n\n  it('should allow to DISABLE plugin with updateSettings', () => {\n    const hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    let storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toEqual(100);\n\n    updateSettings({\n      persistentState: false\n    });\n\n    storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toBeUndefined();\n\n  });\n\n  it('should allow to ENABLE plugin with updateSettings', () => {\n    const hot = handsontable({\n      persistentState: false\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    let storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toBeUndefined();\n\n    updateSettings({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toEqual(100);\n\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/persistentState/test/persistentState.e2e.js","describe('Search plugin', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('enabling/disabling plugin', () => {\n    it('should be disabled by default', () => {\n      const hot = handsontable();\n\n      expect(hot.getPlugin('search').isEnabled()).toBe(false);\n    });\n\n    it('should disable plugin using updateSettings', () => {\n      const hot = handsontable({\n        search: true\n      });\n\n      hot.updateSettings({\n        search: false\n      });\n\n      expect(hot.getPlugin('search').isEnabled()).toBe(false);\n    });\n\n    it('should enable plugin using updateSettings', () => {\n      const hot = handsontable({\n        search: false\n      });\n\n      hot.updateSettings({\n        search: true\n      });\n\n      expect(hot.getPlugin('search')).toBeDefined();\n    });\n\n    it('should remove default search result class to cells when disable plugin', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        search: true\n      });\n\n      hot.getPlugin('search').query('2');\n\n      render();\n\n      const searchResultClass = hot.getPlugin('search').searchResultClass;\n\n      let cell = hot.getCell(0, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(0, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(0, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(1, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(true);\n      cell = hot.getCell(1, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(true);\n      cell = hot.getCell(1, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(true);\n      cell = hot.getCell(2, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(2, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(2, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n\n      hot.updateSettings({\n        search: false\n      });\n\n      cell = hot.getCell(0, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(0, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(0, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(1, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(1, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(1, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(2, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(2, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(2, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n    });\n\n    it('should remove beforeRenderer hook when disable plugin', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        search: true\n      });\n\n      const onBeforeRenderer = spyOn(hot.getPlugin('search'), 'onBeforeRenderer');\n\n      hot.getPlugin('search').query('2');\n      hot.render();\n\n      expect(onBeforeRenderer.calls.count()).toEqual(9);\n\n      hot.updateSettings({\n        search: false\n      });\n\n      expect(onBeforeRenderer.calls.count()).toEqual(18);\n\n      hot.render();\n\n      expect(onBeforeRenderer.calls.count()).toEqual(18);\n    });\n  });\n\n  describe('query method', () => {\n\n    it('should use the default query method if no queryMethod is passed to query function', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      spyOn(hot.getPlugin('search'), 'queryMethod');\n\n      const queryMethod = hot.getPlugin('search').getQueryMethod();\n\n      hot.getPlugin('search').query('A');\n\n      expect(queryMethod.calls.count()).toEqual(25);\n    });\n\n    it('should use the custom default query method if no queryMethod is passed to query function', () => {\n      const customQueryMethod = jasmine.createSpy('customQueryMethod');\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      hot.getPlugin('search').setQueryMethod(customQueryMethod);\n\n      hot.getPlugin('search').query('A');\n\n      expect(customQueryMethod.calls.count()).toEqual(25);\n    });\n\n    it('should use the query method from the constructor if no queryMethod is passed to query function', () => {\n      const customQueryMethod = jasmine.createSpy('customQueryMethod');\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: {\n          queryMethod: customQueryMethod\n        }\n      });\n\n      hot.getPlugin('search').query('A');\n\n      expect(customQueryMethod.calls.count()).toEqual(25);\n    });\n\n    it('should use method passed to query function', () => {\n      const customQueryMethod = jasmine.createSpy('customQueryMethod');\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      hot.getPlugin('search').query('A', null, customQueryMethod);\n\n      expect(customQueryMethod.calls.count()).toEqual(25);\n    });\n  });\n\n  describe('default query method', () => {\n\n    it('should use query method to find phrase', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      const searchResult = hot.getPlugin('search').query('A');\n\n      expect(searchResult.length).toEqual(5);\n\n      for (let i = 0; i < searchResult.length; i += 1) {\n        expect(searchResult[i].row).toEqual(i);\n        expect(searchResult[i].col).toEqual(0);\n        expect(searchResult[i].data).toEqual(hot.getDataAtCell(i, 0));\n      }\n    });\n\n    it('default query method should be case insensitive', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      let searchResult = hot.getPlugin('search').query('a');\n\n      expect(searchResult.length).toEqual(5);\n\n      searchResult = hot.getPlugin('search').query('A');\n\n      expect(searchResult.length).toEqual(5);\n    });\n\n    it('default query method should work with numeric values', () => {\n      const hot = handsontable({\n        data: [\n          [1, 2],\n          [22, 4]\n        ],\n        search: true\n      });\n\n      const searchResult = hot.getPlugin('search').query('2');\n\n      expect(searchResult.length).toEqual(2);\n    });\n\n    it('default query method should interpret query as string, not regex', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      const searchResult = hot.getPlugin('search').query('A*');\n\n      expect(searchResult.length).toEqual(0);\n    });\n\n    it('default query method should always return false if query string is empty', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      let searchResult = hot.getPlugin('search').query('A');\n\n      expect(searchResult.length).toEqual(5);\n\n      searchResult = hot.getPlugin('search').query('');\n\n      expect(searchResult.length).toEqual(0);\n    });\n\n    it('default query method should always return false if no query string has been specified', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      let searchResult = hot.getPlugin('search').query('A');\n\n      expect(searchResult.length).toEqual(5);\n\n      searchResult = hot.getPlugin('search').query();\n\n      expect(searchResult.length).toEqual(0);\n    });\n\n    it('default query method should always return false if no query string is not a string', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      let searchResult = hot.getPlugin('search').query('A');\n\n      expect(searchResult.length).toEqual(5);\n\n      searchResult = hot.getPlugin('search').query([1, 2, 3]);\n\n      expect(searchResult.length).toEqual(0);\n    });\n  });\n\n  describe('search callback', () => {\n\n    it('should invoke default callback for each cell', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      spyOn(hot.getPlugin('search'), 'callback');\n\n      const callback = hot.getPlugin('search').callback;\n\n      hot.getPlugin('search').query('A');\n\n      expect(callback.calls.count()).toEqual(25);\n    });\n\n    it('should change the default callback', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      const search = hot.getPlugin('search');\n\n      spyOn(search, 'callback');\n\n      const callback = search.callback;\n      const newCallback = jasmine.createSpy('newCallback');\n\n      search.setCallback(newCallback);\n\n      search.query('A');\n\n      expect(callback).not.toHaveBeenCalled();\n      expect(newCallback.calls.count()).toEqual(25);\n    });\n\n    it('should invoke callback passed in constructor', () => {\n      const searchCallback = jasmine.createSpy('searchCallback');\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: {\n          callback: searchCallback\n        }\n      });\n\n      hot.getPlugin('search').query('A');\n\n      expect(searchCallback.calls.count()).toEqual(25);\n    });\n\n    it('should invoke custom callback for each cell which has been tested', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        search: true\n      });\n\n      const searchCallback = jasmine.createSpy('searchCallback');\n\n      hot.getPlugin('search').query('A', searchCallback);\n\n      expect(searchCallback.calls.count()).toEqual(4);\n      expect(searchCallback.calls.argsFor(0).splice(1)).toEqual([0, 0, 'A1', true]);\n      expect(searchCallback.calls.argsFor(1).splice(1)).toEqual([0, 1, 'B1', false]);\n      expect(searchCallback.calls.argsFor(2).splice(1)).toEqual([1, 0, 'A2', true]);\n      expect(searchCallback.calls.argsFor(3).splice(1)).toEqual([1, 1, 'B2', false]);\n    });\n  });\n\n  describe('default search callback', () => {\n    it('should add isSearchResult = true, to cell properties of all matched cells', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        search: true\n      });\n\n      hot.getPlugin('search').query('2');\n\n      render();\n\n      let cellProperties = hot.getCellMeta(0, 0);\n      expect(cellProperties.isSearchResult).toBeFalsy();\n      cellProperties = hot.getCellMeta(0, 1);\n      expect(cellProperties.isSearchResult).toBeFalsy();\n      cellProperties = hot.getCellMeta(0, 2);\n      expect(cellProperties.isSearchResult).toBeFalsy();\n      cellProperties = hot.getCellMeta(1, 0);\n      expect(cellProperties.isSearchResult).toBeTruthy();\n      cellProperties = hot.getCellMeta(1, 1);\n      expect(cellProperties.isSearchResult).toBeTruthy();\n      cellProperties = hot.getCellMeta(1, 2);\n      expect(cellProperties.isSearchResult).toBeTruthy();\n      cellProperties = hot.getCellMeta(2, 0);\n      expect(cellProperties.isSearchResult).toBeFalsy();\n      cellProperties = hot.getCellMeta(2, 1);\n      expect(cellProperties.isSearchResult).toBeFalsy();\n      cellProperties = hot.getCellMeta(2, 2);\n      expect(cellProperties.isSearchResult).toBeFalsy();\n    });\n  });\n\n  describe('search result decorator', () => {\n    it('should add default search result class to cells which mach the query', () => {\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        search: true\n      });\n\n      hot.getPlugin('search').query('2');\n\n      render();\n\n      const searchResultClass = hot.getPlugin('search').searchResultClass;\n\n      let cell = hot.getCell(0, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(0, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(0, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(1, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(true);\n      cell = hot.getCell(1, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(true);\n      cell = hot.getCell(1, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(true);\n      cell = hot.getCell(2, 0);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(2, 1);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n      cell = hot.getCell(2, 2);\n      expect($(cell).hasClass(searchResultClass)).toBe(false);\n    });\n\n    it('should add custom search result class to cells which mach the query', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        search: {\n          searchResultClass: 'customSearchResultClass'\n        }\n      });\n\n      hot.getPlugin('search').query('2');\n\n      render();\n\n      let cell = hot.getCell(0, 0);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(false);\n      cell = hot.getCell(0, 1);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(false);\n      cell = hot.getCell(0, 2);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(false);\n      cell = hot.getCell(1, 0);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(true);\n      cell = hot.getCell(1, 1);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(true);\n      cell = hot.getCell(1, 2);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(true);\n      cell = hot.getCell(2, 0);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(false);\n      cell = hot.getCell(2, 1);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(false);\n      cell = hot.getCell(2, 2);\n      expect($(cell).hasClass('customSearchResultClass')).toBe(false);\n    });\n  });\n\n  describe('HOT properties compatibility', () => {\n    it('should work properly when the last row is empty', () => { // connected with https://github.com/handsontable/handsontable/issues/1606\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        colHeaders: true,\n        search: true,\n        minSpareRows: 1\n      });\n      let errorThrown = false;\n\n      try {\n        hot.getPlugin('search').query('A');\n      } catch (err) {\n        errorThrown = true;\n      }\n\n      expect(errorThrown).toBe(false);\n    });\n  });\n\n  describe('cellProperties.className', () => {\n    it('should add default search result class to cells when we have classes in array', () => {\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        search: true,\n        columns() {\n          return {\n            className: ['columns', 'cell']\n          };\n        }\n      });\n\n      hot.getPlugin('search').query('2');\n\n      render();\n\n      let cellClassName = hot.getCell(0, 0).className;\n      expect(cellClassName).toBe('columns cell');\n      cellClassName = hot.getCell(0, 1).className;\n      expect(cellClassName).toBe('columns cell');\n      cellClassName = hot.getCell(0, 2).className;\n      expect(cellClassName).toBe('columns cell');\n      cellClassName = hot.getCell(1, 0).className;\n      expect(cellClassName).toBe('columns cell htSearchResult');\n      cellClassName = hot.getCell(1, 1).className;\n      expect(cellClassName).toBe('columns cell htSearchResult');\n      cellClassName = hot.getCell(1, 2).className;\n      expect(cellClassName).toBe('columns cell htSearchResult');\n      cellClassName = hot.getCell(2, 0).className;\n      expect(cellClassName).toBe('columns cell');\n      cellClassName = hot.getCell(2, 1).className;\n      expect(cellClassName).toBe('columns cell');\n      cellClassName = hot.getCell(2, 2).className;\n      expect(cellClassName).toBe('columns cell');\n    });\n\n    it('should add default search result class to cells when we have class in string', () => {\n\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 3),\n        search: true,\n        className: 'cell',\n      });\n\n      hot.getPlugin('search').query('2');\n\n      render();\n\n      let cellClassName = hot.getCell(0, 0).className;\n      expect(cellClassName).toBe('cell');\n      cellClassName = hot.getCell(0, 1).className;\n      expect(cellClassName).toBe('cell');\n      cellClassName = hot.getCell(0, 2).className;\n      expect(cellClassName).toBe('cell');\n      cellClassName = hot.getCell(1, 0).className;\n      expect(cellClassName).toBe('cell htSearchResult');\n      cellClassName = hot.getCell(1, 1).className;\n      expect(cellClassName).toBe('cell htSearchResult');\n      cellClassName = hot.getCell(1, 2).className;\n      expect(cellClassName).toBe('cell htSearchResult');\n      cellClassName = hot.getCell(2, 0).className;\n      expect(cellClassName).toBe('cell');\n      cellClassName = hot.getCell(2, 1).className;\n      expect(cellClassName).toBe('cell');\n      cellClassName = hot.getCell(2, 2).className;\n      expect(cellClassName).toBe('cell');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/search/test/search.e2e.js","describe('UndoRedo', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('core features', () => {\n    describe('Array data', () => {\n      describe('undo', () => {\n        it('should undo single change', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n          const HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n          expect(getDataAtCell(0, 0)).toBe('X1');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('A1');\n        });\n\n        it('should undo single change on cell with validator', (done) => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n          });\n          const HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n            done();\n          }, 400);\n        });\n\n        it('should undo creation of a single row', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo creation of multiple rows', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row', 0, 5);\n\n          expect(countRows()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo creation of multiple rows with minSpareRows', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 1),\n            minSpareRows: 2\n          });\n\n          expect(getData()).toEqual([['A1'], ['A2'], [null], [null]]);\n\n          setDataAtCell(2, 0, 'A3');\n          setDataAtCell(4, 0, 'A4');\n\n          expect(getData()).toEqual([['A1'], ['A2'], ['A3'], [null], ['A4'], [null], [null]]);\n\n          HOT.undo();\n          HOT.undo();\n\n          expect(getData()).toEqual([['A1'], ['A2'], [null], [null]]);\n        });\n\n        it('should undo removal of single row', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(3, 2)\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          alter('remove_row', 1);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A3');\n          expect(getDataAtCell(1, 1)).toEqual('B3');\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n        });\n\n        it('should undo removal of multiple rows', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(4, 2)\n          });\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          alter('remove_row', 1, 2);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A4');\n          expect(getDataAtCell(1, 1)).toEqual('B4');\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n        });\n\n        it('should undo removal of single row after column sorting', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(3, 2),\n            colHeaders: true,\n            columnSorting: true\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          getPlugin('ColumnSorting').sort({ column: 0, sortOrder: 'desc' });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A3');\n          expect(getDataAtCell(0, 1)).toEqual('B3');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A1');\n          expect(getDataAtCell(2, 1)).toEqual('B1');\n\n          alter('remove_row', 0);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A2');\n          expect(getDataAtCell(0, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 0)).toEqual('A1');\n          expect(getDataAtCell(1, 1)).toEqual('B1');\n\n          undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A3');\n          expect(getDataAtCell(0, 1)).toEqual('B3');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A1');\n          expect(getDataAtCell(2, 1)).toEqual('B1');\n        });\n\n        it('should undo creation of a single column (colHeaders: undefined)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3)\n          });\n\n          expect(countCols()).toEqual(3);\n\n          alter('insert_col');\n\n          expect(countCols()).toEqual(4);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(3);\n        });\n\n        it('should undo creation of a single column (colHeaders: true)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3),\n            colHeaders: true\n          });\n\n          expect(countCols()).toEqual(3);\n          expect(getColHeader()).toEqual(['A', 'B', 'C']);\n\n          alter('insert_col');\n\n          expect(countCols()).toEqual(4);\n          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(3);\n          expect(getColHeader()).toEqual(['A', 'B', 'C']);\n        });\n\n        it('should undo creation of a single column (colHeaders: Array)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3),\n            colHeaders: ['Header1', 'Header2', 'Header3']\n          });\n\n          expect(countCols()).toEqual(3);\n          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3']);\n\n          alter('insert_col', 1);\n\n          expect(countCols()).toEqual(4);\n          expect(getColHeader()).toEqual(['Header1', 'B', 'Header2', 'Header3']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(3);\n          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3']);\n        });\n\n        it('should undo creation of multiple columns (colHeaders: undefined)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countCols()).toEqual(2);\n\n          alter('insert_col', 1, 5);\n\n          expect(countCols()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n        });\n\n        it('should undo creation of multiple columns (colHeaders: true)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n            colHeaders: true\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getColHeader()).toEqual(['A', 'B']);\n\n          alter('insert_col', 1, 5);\n\n          expect(countCols()).toEqual(7);\n          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D', 'E', 'F', 'G']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getColHeader()).toEqual(['A', 'B']);\n        });\n\n        it('should undo creation of multiple columns (colHeaders: Array)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n            colHeaders: ['Header1', 'Header2']\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getColHeader()).toEqual(['Header1', 'Header2']);\n\n          alter('insert_col', 1, 5);\n\n          expect(countCols()).toEqual(7);\n          expect(getColHeader()).toEqual(['Header1', 'B', 'C', 'D', 'E', 'F', 'Header2']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getColHeader()).toEqual(['Header1', 'Header2']);\n        });\n\n        it('should undo creation of multiple columns with minSpareCols', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(1, 1),\n            minSpareCols: 2\n          });\n\n          expect(getData()).toEqual([['A1', null, null]]);\n\n          setDataAtCell(0, 1, 'B1');\n          setDataAtCell(0, 3, 'C1');\n\n          expect(getData()).toEqual([['A1', 'B1', null, 'C1', null, null]]);\n\n          HOT.undo();\n          HOT.undo();\n\n          expect(getData()).toEqual([['A1', null, null]]);\n        });\n\n        it('should undo removal of single column (colHeaders: undefined)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3)\n          });\n\n          expect(countCols()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n\n          alter('remove_col', 1);\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('C2');\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n        });\n\n        it('should undo removal of single column (colHeaders: true)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n            colHeaders: true\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getColHeader()).toEqual(['A', 'B']);\n\n          alter('remove_col');\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getColHeader()).toEqual(['A']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          expect(getColHeader()).toEqual(['A', 'B']);\n        });\n\n        it('should undo removal of single column (colHeaders: Array)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n            colHeaders: ['Header1', 'Header2']\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getColHeader()).toEqual(['Header1', 'Header2']);\n\n          alter('remove_col');\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getColHeader()).toEqual(['Header1']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          expect(getColHeader()).toEqual(['Header1', 'Header2']);\n        });\n\n        it('should undo removal of multiple columns (colHeaders: undefined)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 4)\n          });\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n\n          alter('remove_col', 1, 2);\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('D1');\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('D2');\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n        });\n\n        it('should undo removal of multiple columns (colHeaders: true)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 4),\n            colHeaders: true\n          });\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);\n\n          alter('remove_col', 1, 3);\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n          expect(getColHeader()).toEqual(['A']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);\n        });\n\n        it('should undo removal of multiple columns (colHeaders: Array)', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 4),\n            colHeaders: ['Header1', 'Header2', 'Header3', 'Header4']\n          });\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3', 'Header4']);\n\n          alter('remove_col', 1, 2);\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('D1');\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('D2');\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n          expect(getColHeader()).toEqual(['Header1', 'Header4']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3', 'Header4']);\n        });\n\n        it('should undo removal of multiple columns (with a used manualColumnMove)', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 7),\n            manualColumnMove: [3, 2, 0, 6, 1, 5, 4]\n          });\n\n          expect(countCols()).toEqual(7);\n          expect(getDataAtRow(0)).toEqual(['D1', 'C1', 'A1', 'G1', 'B1', 'F1', 'E1']);\n\n          alter('remove_col', 1, 3);\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtRow(0)).toEqual(['D1', 'B1', 'F1', 'E1']);\n\n          // HOT.undo();\n          //\n          // expect(countCols()).toEqual(7);\n          // expect(getDataAtRow(0)).toEqual(['D1', 'C1', 'A1', 'G1', 'B1', 'F1', 'E1']);\n        });\n\n        it('should undo multiple changes', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n          const HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n          setDataAtCell(1, 0, 'X2');\n          setDataAtCell(0, 1, 'Y1');\n          setDataAtCell(1, 1, 'Y2');\n\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('Y2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('A1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('A1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n        });\n\n        it('should undo multiple changes in cells with validators', (done) => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n          });\n          const HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n          setDataAtCell(1, 0, 'X2');\n          setDataAtCell(0, 1, 'Y1');\n          setDataAtCell(1, 1, 'Y2');\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('Y2');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.undo();\n          }, 400);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.undo();\n          }, 600);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.undo();\n          }, 800);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.undo();\n          }, 1000);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n            done();\n          }, 1200);\n        });\n\n        it('should undo multiple row creations', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n\n          expect(countRows()).toEqual(6);\n\n          HOT.undo();\n          expect(countRows()).toEqual(5);\n\n          HOT.undo();\n          expect(countRows()).toEqual(4);\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo multiple row removals', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(4, 2)\n          });\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          alter('remove_row');\n          alter('remove_row');\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          HOT.undo();\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          HOT.undo();\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n        });\n\n        it('should undo changes only for table where the change actually took place', () => {\n          spec().$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n\n          const hot1 = handsontable({\n            data: [\n              [1],\n              [2],\n              [3]\n            ]\n          });\n\n          spec().$container2.handsontable({\n            data: [\n              ['A'],\n              ['B'],\n              ['C']\n            ]\n          });\n\n          const hot2 = spec().$container2.handsontable('getInstance');\n\n          hot1.setDataAtCell(0, 0, 4);\n          expect(hot1.getDataAtCell(0, 0)).toEqual(4);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot2.undo();\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n          expect(hot1.getDataAtCell(0, 0)).toEqual(4);\n\n          hot1.undo();\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n          expect(hot1.getDataAtCell(0, 0)).toEqual(1);\n\n          hot2.destroy();\n          spec().$container2.remove();\n        });\n\n        it('should return the right amount after undo removal of single column', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3)\n          });\n\n          const afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n          HOT.addHook('afterCreateCol', afterCreateColCallback);\n\n          expect(countCols()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n\n          alter('remove_col', 1);\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('C2');\n\n          HOT.undo();\n\n          expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'UndoRedo.undo', void 0, void 0, void 0);\n\n          expect(countCols()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n        });\n      });\n      describe('redo', () => {\n        it('should redo single change', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n          const HOT = getInstance();\n\n          setDataAtCell(0, 0, 'new value');\n\n          expect(getDataAtCell(0, 0)).toBe('new value');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('A1');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('new value');\n        });\n\n        it('should redo single change in cell with validator', (done) => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n          });\n          const HOT = getInstance();\n\n          setDataAtCell(0, 0, 'new value');\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('new value');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n\n            HOT.redo();\n          }, 400);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('new value');\n            done();\n          }, 600);\n        });\n\n        it('should redo creation of a single row', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(3);\n        });\n\n        it('should redo creation of multiple rows', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row', 0, 5);\n\n          expect(countRows()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(7);\n        });\n\n        it('should redo removal of single row', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(3, 2)\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          alter('remove_row', 1);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A3');\n          expect(getDataAtCell(1, 1)).toEqual('B3');\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A3');\n          expect(getDataAtCell(1, 1)).toEqual('B3');\n        });\n\n        it('should redo removal of multiple rows', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(4, 2)\n          });\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          alter('remove_row', 1, 2);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A4');\n          expect(getDataAtCell(1, 1)).toEqual('B4');\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A4');\n          expect(getDataAtCell(1, 1)).toEqual('B4');\n        });\n\n        it('should redo creation of a single column', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countCols()).toEqual(2);\n\n          alter('insert_col');\n\n          expect(countCols()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countCols()).toEqual(3);\n        });\n\n        it('should redo creation of multiple columns', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countCols()).toEqual(2);\n\n          alter('insert_col', 1, 5);\n\n          expect(countCols()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countCols()).toEqual(7);\n        });\n\n        it('should redo removal of single column', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          alter('remove_col');\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          HOT.redo();\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n        });\n\n        it('should redo removal of multiple columns', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 4)\n          });\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n\n          alter('remove_col', 1, 3);\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n\n          HOT.redo();\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n        });\n\n        it('should redo multiple changes', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n          const HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n          setDataAtCell(1, 0, 'X2');\n          setDataAtCell(0, 1, 'Y1');\n          setDataAtCell(1, 1, 'Y2');\n\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('Y2');\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(getDataAtCell(0, 0)).toBe('A1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('Y2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('Y2');\n        });\n\n        it('should redo multiple changes in cell with validator', (done) => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n          });\n\n          setDataAtCell(0, 0, 'X1');\n          setDataAtCell(1, 0, 'X2');\n          setDataAtCell(0, 1, 'Y1');\n          setDataAtCell(1, 1, 'Y2');\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('Y2');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 400);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 600);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 800);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.redo();\n          }, 1000);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.redo();\n          }, 1200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.redo();\n          }, 1400);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.redo();\n          }, 1600);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('Y2');\n\n            HOT.redo();\n          }, 1800);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('Y2');\n            done();\n          }, 2000);\n        });\n\n        it('should redo multiple row creations', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n\n          expect(countRows()).toEqual(6);\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n          expect(countRows()).toEqual(3);\n\n          HOT.redo();\n          expect(countRows()).toEqual(4);\n\n          HOT.redo();\n          expect(countRows()).toEqual(5);\n\n          HOT.redo();\n          expect(countRows()).toEqual(6);\n\n          HOT.redo();\n          expect(countRows()).toEqual(6);\n        });\n\n        it('should undo multiple row removals', () => {\n          const HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(4, 2)\n          });\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          alter('remove_row');\n          alter('remove_row');\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          HOT.redo();\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          HOT.redo();\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          HOT.redo();\n          expect(countRows()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n\n          HOT.redo();\n          expect(countRows()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n        });\n\n        it('should redo changes only for table where the change actually took place', () => {\n          spec().$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n\n          const hot1 = handsontable({\n            data: [\n              [1],\n              [2],\n              [3]\n            ]\n          });\n\n          spec().$container2.handsontable({\n            data: [\n              ['A'],\n              ['B'],\n              ['C']\n            ]\n          });\n\n          const hot2 = spec().$container2.handsontable('getInstance');\n\n          hot1.setDataAtCell(0, 0, 4);\n          expect(hot1.getDataAtCell(0, 0)).toEqual(4);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot1.undo();\n          expect(hot1.getDataAtCell(0, 0)).toEqual(1);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot2.redo();\n          expect(hot1.getDataAtCell(0, 0)).toEqual(1);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot1.redo();\n          expect(hot1.getDataAtCell(0, 0)).toEqual(4);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot2.destroy();\n          spec().$container2.remove();\n        });\n      });\n    });\n\n    describe('Object data', () => {\n\n      function createObjectData() {\n        return [\n          { name: 'Timothy', surname: 'Dalton' },\n          { name: 'Sean', surname: 'Connery' },\n          { name: 'Roger', surname: 'Moore' }\n        ];\n      }\n\n      describe('undo', () => {\n        it('should undo single change', () => {\n          handsontable({\n            data: createObjectData()\n          });\n          const HOT = getInstance();\n\n          setDataAtRowProp(0, 0, 'Pearce');\n          expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('Timothy');\n        });\n\n        it('should undo single change in cell with validator', (done) => {\n          handsontable({\n            data: createObjectData(),\n          });\n          const HOT = getInstance();\n\n          setDataAtRowProp(0, 0, 'Pearce');\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('Timothy');\n            done();\n          }, 400);\n        });\n\n        it('should undo creation of a single row', () => {\n          const HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo creation of multiple rows', () => {\n          const HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row', 0, 5);\n\n          expect(countRows()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo removal of single row', () => {\n          const HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n        });\n\n        it('should undo removal of multiple rows', () => {\n          const HOT = handsontable({\n            data: createObjectData()\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          alter('remove_row', 1, 2);\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n          expect(getDataAtRowProp(2, 'name')).toBeNull();\n          expect(getDataAtRowProp(2, 'surname')).toBeNull();\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n        });\n\n        it('should undo multiple changes', () => {\n          handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n          const HOT = getInstance();\n\n          setDataAtRowProp(0, 'name', 'Pierce');\n          setDataAtRowProp(0, 'surname', 'Brosnan');\n          setDataAtRowProp(1, 'name', 'Daniel');\n          setDataAtRowProp(1, 'surname', 'Craig');\n\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n        });\n\n        it('should undo multiple changes in cells with validators', (done) => {\n          handsontable({\n            data: createObjectData().slice(0, 2),\n          });\n          const HOT = getInstance();\n\n          setDataAtRowProp(0, 'name', 'Pierce');\n          setDataAtRowProp(0, 'surname', 'Brosnan');\n          setDataAtRowProp(1, 'name', 'Daniel');\n          setDataAtRowProp(1, 'surname', 'Craig');\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.undo();\n          }, 400);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.undo();\n          }, 600);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.undo();\n          }, 800);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.undo();\n          }, 1000);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n            done();\n          }, 1200);\n        });\n\n        it('should undo multiple row creations', () => {\n          const HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n\n          expect(countRows()).toEqual(6);\n\n          HOT.undo();\n          expect(countRows()).toEqual(5);\n\n          HOT.undo();\n          expect(countRows()).toEqual(4);\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n\n        });\n\n        it('should undo multiple row removals', () => {\n          const HOT = handsontable({\n            data: createObjectData()\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          alter('remove_row');\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n        });\n      });\n\n      describe('redo', () => {\n        it('should redo single change', () => {\n          handsontable({\n            data: createObjectData()\n          });\n          const HOT = getInstance();\n\n          setDataAtRowProp(0, 0, 'Pearce');\n          expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('Timothy');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n        });\n\n        it('should redo single change in cell with validator', (done) => {\n          handsontable({\n            data: createObjectData(),\n          });\n          const HOT = getInstance();\n\n          setDataAtRowProp(0, 0, 'Pearce');\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('Timothy');\n\n            HOT.redo();\n          }, 400);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n            done();\n          }, 600);\n        });\n\n        it('should redo creation of a single row', () => {\n          const HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(3);\n        });\n\n        it('should redo creation of multiple rows', () => {\n          const HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row', 0, 5);\n\n          expect(countRows()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(7);\n        });\n\n        it('should redo removal of single row', () => {\n          const HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n        });\n\n        it('should redo removal of multiple rows', () => {\n          const HOT = handsontable({\n            data: createObjectData()\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          alter('remove_row', 1, 2);\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n          expect(getDataAtRowProp(2, 'name')).toBeNull();\n          expect(getDataAtRowProp(2, 'surname')).toBeNull();\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n          expect(getDataAtRowProp(2, 'name')).toBeNull();\n          expect(getDataAtRowProp(2, 'surname')).toBeNull();\n        });\n\n        it('should redo multiple changes', () => {\n          handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n          const HOT = getInstance();\n\n          setDataAtRowProp(0, 'name', 'Pierce');\n          setDataAtRowProp(0, 'surname', 'Brosnan');\n          setDataAtRowProp(1, 'name', 'Daniel');\n          setDataAtRowProp(1, 'surname', 'Craig');\n\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n        });\n\n        it('should redo multiple changes in cells with validators', (done) => {\n          handsontable({\n            data: createObjectData().slice(0, 2),\n          });\n          const HOT = getInstance();\n\n          setDataAtRowProp(0, 'name', 'Pierce');\n          setDataAtRowProp(0, 'surname', 'Brosnan');\n          setDataAtRowProp(1, 'name', 'Daniel');\n          setDataAtRowProp(1, 'surname', 'Craig');\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 400);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 600);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 800);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.redo();\n          }, 1000);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.redo();\n          }, 1200);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.redo();\n          }, 1400);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.redo();\n          }, 1600);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n            HOT.redo();\n          }, 1800);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n            done();\n          }, 2000);\n        });\n\n        it('should redo multiple row creations', () => {\n          const HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n\n          expect(countRows()).toEqual(6);\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n          expect(countRows()).toEqual(3);\n\n          HOT.redo();\n          expect(countRows()).toEqual(4);\n\n          HOT.redo();\n          expect(countRows()).toEqual(5);\n\n          HOT.redo();\n          expect(countRows()).toEqual(6);\n\n          HOT.redo();\n          expect(countRows()).toEqual(6);\n        });\n\n        it('should undo multiple row removals', () => {\n          const HOT = handsontable({\n            data: createObjectData()\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          alter('remove_row');\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          HOT.redo();\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          HOT.redo();\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n\n          HOT.redo();\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n        });\n      });\n    });\n  });\n\n  describe('plugin features', () => {\n    describe('cell alignment', () => {\n      it('should undo a sequence of aligning cells', () => {\n        const hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(9, 9),\n          contextMenu: true,\n          colWidths: [50, 50, 50, 50, 50, 50, 50, 50, 50],\n          rowHeights: [50, 50, 50, 50, 50, 50, 50, 50, 50]\n        });\n\n        // top 3 rows center\n        selectCell(0, 0, 2, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:center');\n\n        // middle 3 rows unchanged - left\n\n        // bottom 3 rows right\n        selectCell(6, 0, 8, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:right');\n\n        // left 3 columns - middle\n        selectCell(0, 0, 8, 2);\n        hot.getPlugin('contextMenu').executeCommand('alignment:middle');\n\n        // middle 3 columns unchanged - top\n\n        // right 3 columns - bottom\n        selectCell(0, 6, 8, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:bottom');\n\n        let cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(0, 7);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(5, 1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(5, 7);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 5);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 7);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        hot.undo();\n        cellMeta = hot.getCellMeta(0, 7);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(5, 7);\n        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(7, 7);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);\n\n        hot.undo();\n\n        cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(5, 1);\n        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(7, 1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);\n\n        hot.undo();\n\n        cellMeta = hot.getCellMeta(7, 1);\n        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(7, 5);\n        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(7, 7);\n        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);\n\n        hot.undo();\n\n        // check if all cells are either non-adjusted or adjusted to the left (as default)\n        let finish;\n        for (let i = 0; i < 9; i++) {\n          for (let j = 0; j < 9; j++) {\n            cellMeta = hot.getCellMeta(i, j);\n            finish = cellMeta.className === void 0 || cellMeta.className.trim() === '' || cellMeta.className.trim() === 'htLeft';\n            expect(finish).toBe(true);\n          }\n        }\n      });\n\n      it('should redo a sequence of aligning cells', () => {\n        const hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(9, 9),\n          contextMenu: true,\n          colWidths: [50, 50, 50, 50, 50, 50, 50, 50, 50],\n          rowHeights: [50, 50, 50, 50, 50, 50, 50, 50, 50]\n        });\n\n        // top 3 rows center\n        selectCell(0, 0, 2, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:center');\n\n        // middle 3 rows unchanged - left\n\n        // bottom 3 rows right\n        selectCell(6, 0, 8, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:right');\n\n        // left 3 columns - middle\n        selectCell(0, 0, 8, 2);\n        hot.getPlugin('contextMenu').executeCommand('alignment:middle');\n\n        // middle 3 columns unchanged - top\n\n        // right 3 columns - bottom\n        selectCell(0, 6, 8, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:bottom');\n\n        let cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(0, 7);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(5, 1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(5, 7);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 5);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 7);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        hot.undo();\n        hot.undo();\n        hot.undo();\n        hot.undo();\n\n        // check if all cells are either non-adjusted or adjusted to the left (as default)\n        let finish;\n        for (let i = 0; i < 9; i++) {\n          for (let j = 0; j < 9; j++) {\n            cellMeta = hot.getCellMeta(i, j);\n            finish = cellMeta.className === void 0 || cellMeta.className.trim() === '' || cellMeta.className.trim() === 'htLeft';\n            expect(finish).toBe(true);\n          }\n        }\n\n        hot.redo();\n        cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(1, 5);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(2, 8);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n\n        hot.redo();\n        cellMeta = hot.getCellMeta(6, 0);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(7, 5);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(8, 8);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n\n        hot.redo();\n        cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(5, 1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(8, 2);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n\n        hot.redo();\n        cellMeta = hot.getCellMeta(0, 6);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(5, 7);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(8, 8);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n      });\n    });\n\n    it('should exposed new methods when plugin is enabled', () => {\n      const hot = handsontable({\n        undo: false\n      });\n\n      expect(hot.undo).toBeUndefined();\n      expect(hot.redo).toBeUndefined();\n      expect(hot.isUndoAvailable).toBeUndefined();\n      expect(hot.isRedoAvailable).toBeUndefined();\n      expect(hot.clearUndo).toBeUndefined();\n\n      updateSettings({\n        undo: true\n      });\n\n      expect(typeof hot.undo).toEqual('function');\n      expect(typeof hot.redo).toEqual('function');\n      expect(typeof hot.isUndoAvailable).toEqual('function');\n      expect(typeof hot.isRedoAvailable).toEqual('function');\n      expect(typeof hot.clearUndo).toEqual('function');\n    });\n\n    it('should remove exposed methods when plugin is disbaled', () => {\n      const hot = handsontable({\n        undo: true\n      });\n\n      expect(typeof hot.undo).toEqual('function');\n      expect(typeof hot.redo).toEqual('function');\n      expect(typeof hot.isUndoAvailable).toEqual('function');\n      expect(typeof hot.isRedoAvailable).toEqual('function');\n      expect(typeof hot.clearUndo).toEqual('function');\n\n      updateSettings({\n        undo: false\n      });\n\n      expect(hot.undo).toBeUndefined();\n      expect(hot.redo).toBeUndefined();\n      expect(hot.isUndoAvailable).toBeUndefined();\n      expect(hot.isRedoAvailable).toBeUndefined();\n      expect(hot.clearUndo).toBeUndefined();\n    });\n\n    describe('Keyboard shortcuts', () => {\n      it('should undo single change after hitting CTRL+Z', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(2, 2)\n        });\n\n        selectCell(0, 0);\n        setDataAtCell(0, 0, 'new value');\n\n        spec().$container.simulate('keydown', { ctrlKey: true, keyCode: 'Z'.charCodeAt(0) });\n        expect(getDataAtCell(0, 0)).toBe('A1');\n      });\n\n      it('should redo single change after hitting CTRL+Y', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(2, 2)\n        });\n        const HOT = getInstance();\n\n        selectCell(0, 0);\n        setDataAtCell(0, 0, 'new value');\n\n        expect(getDataAtCell(0, 0)).toBe('new value');\n\n        HOT.undo();\n        expect(getDataAtCell(0, 0)).toBe('A1');\n\n        spec().$container.simulate('keydown', { ctrlKey: true, keyCode: 'Y'.charCodeAt(0) });\n\n        expect(getDataAtCell(0, 0)).toBe('new value');\n      });\n\n      it('should redo single change after hitting CTRL+SHIFT+Z', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(2, 2)\n        });\n        const HOT = getInstance();\n\n        selectCell(0, 0);\n        setDataAtCell(0, 0, 'new value');\n\n        expect(getDataAtCell(0, 0)).toBe('new value');\n\n        HOT.undo();\n        expect(getDataAtCell(0, 0)).toBe('A1');\n\n        spec().$container.simulate('keydown', { ctrlKey: true, shiftKey: true, keyCode: 'Z'.charCodeAt(0) });\n\n        expect(getDataAtCell(0, 0)).toBe('new value');\n      });\n    });\n  });\n\n  describe('Hooks', () => {\n    it('should fire a `beforeUndo` hook after the undo process begins', (done) => {\n      const beforeUndoSpy = jasmine.createSpy('beforeUndo');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n      let hookData = null;\n\n      hot.addHook('beforeUndo', beforeUndoSpy);\n      hot.addHook('beforeUndo', (data) => {\n        hookData = data;\n      });\n\n      alter('remove_row', 1);\n\n      setTimeout(() => {\n        hot.undo();\n      }, 10);\n\n      setTimeout(() => {\n        expect(beforeUndoSpy.calls.count()).toEqual(1);\n        expect(hookData).not.toBe(null);\n        expect(hookData.actionType).toEqual('remove_row');\n        expect(hookData.data).toEqual([['A2', 'B2']]);\n        done();\n      }, 100);\n    });\n\n    it('should fire a `beforeRedo` hook before the redo process begins', (done) => {\n      const beforeRedoSpy = jasmine.createSpy('beforeRedo');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n      let hookData = null;\n\n      hot.addHook('beforeRedo', beforeRedoSpy);\n      hot.addHook('beforeRedo', (data) => {\n        hookData = data;\n      });\n\n      alter('remove_row', 1);\n\n      setTimeout(() => {\n        hot.undo();\n        hot.redo();\n      }, 10);\n\n      setTimeout(() => {\n        expect(beforeRedoSpy.calls.count()).toEqual(1);\n        expect(hookData).not.toBe(null);\n        expect(hookData.actionType).toEqual('remove_row');\n        expect(hookData.data).toEqual([['A2', 'B2']]);\n        done();\n      }, 100);\n    });\n\n    it('should fire a `afterRedo` hook after the redo process begins', (done) => {\n      const afterRedoSpy = jasmine.createSpy('afterRedo');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n      let hookData = null;\n\n      hot.addHook('beforeRedo', afterRedoSpy);\n      hot.addHook('beforeRedo', (data) => {\n        hookData = data;\n      });\n\n      alter('remove_row', 1);\n\n      setTimeout(() => {\n        hot.undo();\n        hot.redo();\n      }, 10);\n\n      setTimeout(() => {\n        expect(afterRedoSpy.calls.count()).toEqual(1);\n        expect(hookData).not.toBe(null);\n        expect(hookData.actionType).toEqual('remove_row');\n        expect(hookData.data).toEqual([['A2', 'B2']]);\n        done();\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/undoRedo/test/UndoRedo.e2e.js","// this file is called MemoryLeakTest.js (not MemoryLeak.spec.js) to make sure it is manually executed as the last suite\ndescribe('MemoryLeakTest', () => {\n  it('after all Handsontable instances are destroy()\\'d, there should be no more active listeners', () => {\n    expect(Handsontable._getListenersCounter()).toBe(0);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./test/e2e/MemoryLeakTest.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;;;;;;;ACHA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9BA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnBA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/dA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;;;;;;;ACJA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpxBA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnnRA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjCA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACfA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACtzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;AACA;AACA;;;;;;;ACFA;AACA;AACA;;;;;;;ACFA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACbA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7CA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACVA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;AACA;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;;;;;;;ACDA;;;;;;;ACAA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrBA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnBA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzttBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpjIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AAXA;AAcA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AALA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AALA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AArBA;AAuBA;AAEA;AACA;AACA;AACA;;;;;;;;;ACrWA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AALA;AAQA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAJA;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AANA;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AANA;AASA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AANA;AASA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AASA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AANA;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAbA;AAiBA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAbA;AAiBA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAOA;AARA;AAUA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AASA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AALA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;AC/rCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;ACpGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrFA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;;;;;;;;;AChFA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAWA;AACA;AAEA;AACA;AACA;AADA;AAWA;AACA;AAEA;AACA;AACA;AAQA;AATA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;;;;;;;;;AC3FA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAWA;AACA;AAEA;AACA;AACA;AADA;AAeA;AACA;AAEA;AACA;AACA;AAOA;AARA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;;;;;;;;;ACvGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAXA;AAcA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA2BA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAbA;AAgBA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAZA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA4BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAZA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AArBA;AAuBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAEA;AADA;AAIA;AADA;AApBA;AA0BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAiCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAoBA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AChgBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AARA;AAUA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;AC9KA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;;;;;;;;;ACpEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;AC/EA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAPA;AASA;AAXA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAPA;AASA;AACA;AAlBA;AAqBA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAkBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AACA;;;;;;;;;AChPA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;ACjEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AAUA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AC5JA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/GA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;ACjEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AChEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAJA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AARA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA8BA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AARA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAPA;AAeA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;;;;;;;;;AC1WA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;AC/IA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAPA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AACA;AAWA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAUA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAWA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAJA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAiBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAhBA;AAmBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC1nBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1SA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxTA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AAAA;AACA;AADA;AAAA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;;;;;;;;;AClLA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAOA;AACA;AAGA;AAJA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AANA;AASA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AANA;AASA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AANA;AASA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;AC9KA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AANA;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrJA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAEA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AAEA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AASA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAyiDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAKA;AACA;AACA;AACA;AAFA;AADA;AAKA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AARA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAfA;AACA;AAiBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AATA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAVA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AC5SA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtFA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AAZA;AAeA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AApBA;AAuBA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAJA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAJA;AAQA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AASA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAJA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AALA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AADA;AAKA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AADA;AAKA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AADA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAFA;AAOA;AACA;AAFA;AATA;AAgBA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AADA;AAFA;AANA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;;;;;;;;;;;;;AChpBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AATA;AAWA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAVA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AAAA;AAEA;AAVA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAEA;AAbA;AAeA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAmcA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAedA;AAgBA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AAAA;AACA;AAAA;AAEA;AAdA;AAgBA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AAAA;AACA;AAAA;AAEA;AAdA;AAiBA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AAAA;AACA;AAAA;AAEA;AAdA;AAiBA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAdA;AAiBA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAlBA;AAqBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AAAA;AAEA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AAEA;AAdA;AAiBA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAzBA;AA4BA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAEA;AAdA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAEA;AAdA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAEA;AAdA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzkEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAfA;AAoBA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA8BA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9vBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAUA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAUA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC5drBA;AAuBA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrMA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AAnBA;AACA;AADA;AAAA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAGA;AACA;AADA;AAGA;AAPA;AAUA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AC7LA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;;;;;;;;;ACxBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAWA;AACA;AACA;AACA;AACA;;;;;;;;;ACtDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAOA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;ACnDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAOA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;;;;;;;ACjGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;ACrDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;ACnDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AANA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAZA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAkBA;AACA;AACA;AACA;;;;;;;;;AC9HA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAZA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/DA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;;;;;;;;;ACzBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAEA;AAEA;AACA;AAgBA;AACA;AACA;AACA;;;;;;;;;ACjDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAWA;AAEA;AAUA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AC5tkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACx7BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;ACriBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAUA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;ACxbA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AACA;;;;;;;;;AClIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;;;;;;;AC5FA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;;;;;;;AC1FA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAYA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AAFA;AAVA;AAgBA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AARA;AAWA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAVA;AAaA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAFA;AAJA;AAUA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAcfA;AAkBA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AAkBA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AAkBA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AAkBA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AAkBA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AAWA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AAWA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AAecA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAFA;AAYA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAFA;AAYA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAFA;AAYA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AAPA;AAUA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAFA;AAMA;AAVA;AAiBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AADA;AAIA;AADA;AAIA;AACA;AAnCA;AAqCA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAFA;AANA;AAcA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AAFA;AANA;AAcA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AANA;AAiBA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AANA;AAiBA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAOA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC18FA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrHA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAHA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAdA;AAFA;AAHA;AAyBA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AADA;AAHA;AASA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAJA;AAYA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AADA;AAHA;AASA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AADA;AAJA;AAUA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAEA;AADA;AANA;AAaA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AADA;AAHA;AASA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AANA;AASA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAJA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAVA;AAcA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AACA;AAaA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AADA;AAFA;AAOA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACneA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AAFA;AANA;AAeA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAFA;AANA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAFA;AANA;AAcA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACvJA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAYA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAFA;AADA;AASA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAYA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AAfA;AAiBA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAFA;AAYA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjXA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AAnBA;AACA;AADA;AAAA;AACA;AAoBA;AAEA;AACA;AAGA;AACA;AADA;AAJA;AASA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AARA;AAYA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;AC7GA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACzKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AAQA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAUA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AAQA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AAQA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AALA;AACA;AAUA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AAQA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AAQA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AASA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAqBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAYA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAYA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAZA;AAeA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AADA;AANA;AAcA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACzsBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AARA;AAYA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC/KA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAFA;AAQA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAEA;AAAA;AAPA;AAUA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAFA;AAFA;AASA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAFA;AAFA;AASA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AASA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AASA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAKA;AAEA;AACA;AAFA;AAPA;AAcA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AASA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AChSA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AARA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAXA;AAilBA;AAsBA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AACA;AACA;AADA;AAHA;AADA;AASA;AACA;AADA;AAGA;AADA;AAGA;AArBA;AAwBA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AACA;AACA;AADA;AAHA;AADA;AASA;AACA;AADA;AAGA;AADA;AAGA;AArBA;AAwBA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AADA;AAGA;AADA;AARA;AAYA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAFA;AAGA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AARA;AAWA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AADA;AAIA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5yCA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AALA;AAQA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AALA;AAQA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAIA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC/gBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAPA;AAaA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC3EA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC9DA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;ACvjNA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;;;;;;;;;AC3EA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvHA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AADA;AAJA;AAUA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AADA;AAJA;AAUA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAAA;AAPA;AAWA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AALA;AAQA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AATA;AAYA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACp1BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AADA;AAJA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;ACrDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAPA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAVA;AAaA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;ACpJA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AADA;AARA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AAFA;AARA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAZA;AAmBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3KA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;;;;;;;;;ACtFA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;;;;;;;;;AC9DA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;;;;;;;;;AC9DA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AADA;AAFA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAFA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAFA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAFA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AAFA;AAaA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AAFA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;;;;;;;;;AC3PA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AANA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AANA;AASA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AADA;AANA;AAaA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAFA;AANA;AAcA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAFA;AANA;AAcA;AACA;AACA;AACA;;;;;;;;;ACpEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;;;;;;;;;ACpDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;AC/DA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AADA;AAFA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AADA;AAFA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AADA;AAFA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3IA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACpIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;ACrIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AC3MA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AARA;AAWA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjLA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AADA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AADA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AADA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AADA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;ACvWA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AADA;AAFA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AADA;AAFA;AAQA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/FA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;AC3QA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AArBA;AAwBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAtBA;AAyBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAtBA;AAyBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAMA;AAtBA;AAyBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAtBA;AAyBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AAXA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9NA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjYA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AADA;AAGA;AAPA;AAUA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;ACvaA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7QA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AANA;AASA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACzZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AANA;AAUA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AANA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AANA;AAUA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AANA;AAUA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AANA;AAUA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAAA;AATA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AACA;AACA;AAAA;AAAA;AAFA;AAMA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AACA;AADA;AAGA;AACA;AAAA;AAtBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AAUA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAXA;AAcA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AANA;AASA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AAVA;AAaA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;AC7gBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAXA;AAcA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;AC9fA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAPA;AAUA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AAPA;AAUA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AADA;AAPA;AAYA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AADA;AAPA;AAYA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AAPA;AACA;AAWA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AAPA;AAUA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AADA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AASA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AAPA;AAUA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AADA;AAPA;AAYA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAPA;AAaA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAPA;AAaA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AADA;AAPA;AAYA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AADA;AAGA;AAVA;AAaA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AADA;AAPA;AAYA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AARA;AACA;AAYA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AADA;AAPA;AAYA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAPA;AAaA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAaA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AASA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACj3BA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAVA;AACA;AAYA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AAMA;AACA;AARA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AARA;AAWA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAFA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AADA;AATA;AAcA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AATA;AAYA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AADA;AARA;AAaA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAHA;AAYA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAPA;AAUA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAcA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AA1BA;AA6BA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAaA;AAdA;AAiBA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AAMA;AAEA;AAEA;AACA;AAYA;AACA;AADA;AAbA;AAkBA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAMA;AAEA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAbA;AACA;AAuBA;AAOA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAbA;AACA;AAuBA;AAOA;AAMA;AAEA;AAEA;AACA;AAYA;AAEA;AADA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAnBA;AACA;AA6BA;AAOA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAbA;AACA;AAuBA;AAOA;AAMA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AASA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAKA;AACA;AADA;AANA;AAWA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAFA;AADA;AANA;AAcA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAFA;AADA;AANA;AAcA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AASA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAYA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAFA;AArBA;AACA;AA+BA;AAOA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAFA;AArBA;AACA;AA+BA;AAOA;AAMA;AAEA;AACA;AACA;AAOA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AApBA;AAuBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AApBA;AAuBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AApBA;AAuBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AAtBA;AAyBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAFA;AADA;AAhBA;AAwBA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AASA;AAKA;AADA;AAIA;AACA;AAnBA;AAsBA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AAnBA;AAsBA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAFA;AADA;AARA;AAgBA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAFA;AADA;AARA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AASA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAFA;AADA;AARA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AASA;AACA;AAEA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAXA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AADA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AADA;AACA;AAUA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAZA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AASA;AAUA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AASA;AASA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAFA;AADA;AARA;AAgBA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAMA;AAPA;AAUA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAPA;AAUA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAVA;AAaA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAMA;AAPA;AAUA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAMA;AAPA;AAUA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAFA;AADA;AAPA;AAeA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAVA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAPA;AAUA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AATA;AAYA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AATA;AAYA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAPA;AAUA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAXA;AAcA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AADA;AATA;AAcA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AATA;AACA;AAkBA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAeA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AARA;AAWA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AAVA;AAaA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AAVA;AAaA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAWA;AACA;AAbA;AAgBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAWA;AACA;AAbA;AAgBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AARA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAHA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAHA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAJA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAJA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAJA;AAYA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAHA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAHA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAHA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAHA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAHA;AAWA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AADA;AAVA;AAeA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AADA;AAVA;AAeA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAVA;AAaA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAHA;AAWA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC9kFA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAZA;AAeA;AACA;AAEA;AACA;AACA;AADA;AADA;AAMA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAZA;AAeA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AADA;AAKA;AAdA;AAiBA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAQA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AANA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAUA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAbA;AAgBA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAbA;AAgBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACjiBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AADA;AADA;AAUA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AADA;AADA;AAaA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AADA;AADA;AAaA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAJA;AAJA;AADA;AADA;AAkBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AAEA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AAEA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AAXA;AAcA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAJA;AAcA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAJA;AADA;AADA;AAFA;AAkBA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAJA;AArBA;AADA;AAFA;AAsCA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAKA;AAAA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAAA;AAAA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAIA;AAAA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAYA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AAEA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AADA;AAYA;AAbA;AAgBA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AADA;AAUA;AAXA;AAcA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AALA;AADA;AADA;AAWA;AAZA;AAeA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAFA;AAWA;AAZA;AAeA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AADA;AAUA;AAXA;AAcA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AANA;AASA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAxCA;AADA;AAFA;AAgDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AATA;AADA;AAeA;AAhBA;AAmBA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AADA;AAgBA;AAjBA;AAoBA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AARA;AAWA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AARA;AADA;AAeA;AAhBA;AAmBA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AADA;AAgBA;AAjBA;AAoBA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AADA;AAaA;AAdA;AAiBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AARA;AADA;AAcA;AAfA;AAkBA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AADA;AARA;AADA;AAcA;AAfA;AAkBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AADA;AAaA;AAdA;AAiBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AADA;AAcA;AAfA;AAkBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AADA;AAaA;AAdA;AAiBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AARA;AADA;AAcA;AAfA;AAkBA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AADA;AARA;AADA;AAcA;AAfA;AAkBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AADA;AAaA;AAdA;AAiBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AARA;AADA;AAcA;AAfA;AAkBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AALA;AADA;AASA;AAVA;AAaA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AADA;AARA;AADA;AAFA;AAkn3GA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AC7LA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;ACzFA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAlBA;AAqBA;AAEA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAeA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AArBA;AAAA;AAAA;AAqBA;AACA;AACA;AAvBA;AAAA;AAAA;AAwBA;AAAA;AACA;AACA;AA1BA;AACA;AADA;AAAA;AACA;AA4BA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAMA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AADA;AAQA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AADA;AAUA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AANA;AASA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAQA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAQA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAQA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AADA;AASA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AADA;AAQA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;ACrtBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AAFA;AAoBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AAFA;AAoBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AAFA;AAoBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AAFA;AAoBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAvBA;AA6BA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AA9BA;AAgDA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAvBA;AA6BA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AA9BA;AAgDA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAvBA;AA6BA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AA9BA;AAgDA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AAHA;AAqBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAXA;AAHA;AAqBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAPA;AAJA;AAkBA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AACA;AAEA;AAWA;AACA;;;;;;;;;ACxxBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACxKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC/PA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAJA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AALA;AASA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;AClhBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AASA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACpMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AARA;AAWA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AATA;AAYA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AChjBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AALA;AASA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;ACpqBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AARA;AAWA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AATA;AAYA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AChYA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAQA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AAQA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AAQA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AASA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAUA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AAJA;AASA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AAJA;AASA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AAJA;AASA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AAJA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAIA;AAAA;AACA;AAEA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AATA;AAYA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAQA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnyCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AALA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAOA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AALA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;ACluBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AACA;AAIA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AACA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;ACjMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AAFA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AALA;AAQA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AAFA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAFA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAPA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtiBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAQA;AACA;AADA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAQA;AACA;AADA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxgFA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}