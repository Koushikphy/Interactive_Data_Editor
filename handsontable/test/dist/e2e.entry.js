/*!
 * (The MIT License)
 * 
 * Copyright (c) 2012-2014 Marcin Warpechowski
 * Copyright (c) 2015 Handsoncode sp. z o.o. <hello@handsoncode.net>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * Version: 6.2.2
 * Release date: 19/12/2018 (built at 18/12/2018 14:57:51)
 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 121);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(9);
var hide = __webpack_require__(14);
var redefine = __webpack_require__(10);
var ctx = __webpack_require__(21);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 3 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(59)('wks');
var uid = __webpack_require__(29);
var Symbol = __webpack_require__(3).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(17);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(2);
var IE8_DOM_DEFINE = __webpack_require__(85);
var toPrimitive = __webpack_require__(26);
var dP = Object.defineProperty;

exports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(1)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 9 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.1' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var has = __webpack_require__(13);
var SRC = __webpack_require__(29)('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(9).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(24);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var fails = __webpack_require__(1);
var defined = __webpack_require__(24);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(7);
var createDesc = __webpack_require__(28);
module.exports = __webpack_require__(8) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(43);
var defined = __webpack_require__(24);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(1);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(44);
var createDesc = __webpack_require__(28);
var toIObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(26);
var has = __webpack_require__(13);
var IE8_DOM_DEFINE = __webpack_require__(85);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(0);
var core = __webpack_require__(9);
var fails = __webpack_require__(1);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(21);
var IObject = __webpack_require__(43);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(6);
var asc = __webpack_require__(214);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(22);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 23 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(8)) {
  var LIBRARY = __webpack_require__(30);
  var global = __webpack_require__(3);
  var fails = __webpack_require__(1);
  var $export = __webpack_require__(0);
  var $typed = __webpack_require__(57);
  var $buffer = __webpack_require__(84);
  var ctx = __webpack_require__(21);
  var anInstance = __webpack_require__(40);
  var propertyDesc = __webpack_require__(28);
  var hide = __webpack_require__(14);
  var redefineAll = __webpack_require__(41);
  var toInteger = __webpack_require__(17);
  var toLength = __webpack_require__(6);
  var toIndex = __webpack_require__(111);
  var toAbsoluteIndex = __webpack_require__(32);
  var toPrimitive = __webpack_require__(26);
  var has = __webpack_require__(13);
  var classof = __webpack_require__(45);
  var isObject = __webpack_require__(4);
  var toObject = __webpack_require__(11);
  var isArrayIter = __webpack_require__(76);
  var create = __webpack_require__(33);
  var getPrototypeOf = __webpack_require__(35);
  var gOPN = __webpack_require__(34).f;
  var getIterFn = __webpack_require__(78);
  var uid = __webpack_require__(29);
  var wks = __webpack_require__(5);
  var createArrayMethod = __webpack_require__(20);
  var createArrayIncludes = __webpack_require__(47);
  var speciesConstructor = __webpack_require__(46);
  var ArrayIterators = __webpack_require__(80);
  var Iterators = __webpack_require__(37);
  var $iterDetect = __webpack_require__(50);
  var setSpecies = __webpack_require__(39);
  var arrayFill = __webpack_require__(79);
  var arrayCopyWithin = __webpack_require__(102);
  var $DP = __webpack_require__(7);
  var $GOPD = __webpack_require__(18);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(4);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(29)('meta');
var isObject = __webpack_require__(4);
var has = __webpack_require__(13);
var setDesc = __webpack_require__(7).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(1)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 29 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(87);
var enumBugKeys = __webpack_require__(62);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(17);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(2);
var dPs = __webpack_require__(88);
var enumBugKeys = __webpack_require__(62);
var IE_PROTO = __webpack_require__(61)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(58)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(64).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(87);
var hiddenKeys = __webpack_require__(62).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(13);
var toObject = __webpack_require__(11);
var IE_PROTO = __webpack_require__(61)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(7).f;
var has = __webpack_require__(13);
var TAG = __webpack_require__(5)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(5)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(14)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var dP = __webpack_require__(7);
var DESCRIPTORS = __webpack_require__(8);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(10);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(23);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 44 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(23);
var TAG = __webpack_require__(5)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(2);
var aFunction = __webpack_require__(22);
var SPECIES = __webpack_require__(5)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(15);
var toLength = __webpack_require__(6);
var toAbsoluteIndex = __webpack_require__(32);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 48 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var defined = __webpack_require__(24);
var fails = __webpack_require__(1);
var spaces = __webpack_require__(66);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(5)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(2);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var classof = __webpack_require__(45);
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(104);
var redefine = __webpack_require__(10);
var hide = __webpack_require__(14);
var fails = __webpack_require__(1);
var defined = __webpack_require__(24);
var wks = __webpack_require__(5);
var regexpExec = __webpack_require__(81);

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(21);
var call = __webpack_require__(100);
var isArrayIter = __webpack_require__(76);
var anObject = __webpack_require__(2);
var toLength = __webpack_require__(6);
var getIterFn = __webpack_require__(78);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(10);
var redefineAll = __webpack_require__(41);
var meta = __webpack_require__(27);
var forOf = __webpack_require__(54);
var anInstance = __webpack_require__(40);
var isObject = __webpack_require__(4);
var fails = __webpack_require__(1);
var $iterDetect = __webpack_require__(50);
var setToStringTag = __webpack_require__(36);
var inheritIfRequired = __webpack_require__(67);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var uid = __webpack_require__(29);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
var document = __webpack_require__(3).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(9);
var global = __webpack_require__(3);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(30) ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(5);


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(59)('keys');
var uid = __webpack_require__(29);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 62 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(23);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(3).document;
module.exports = document && document.documentElement;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(4);
var anObject = __webpack_require__(2);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(21)(Function.call, __webpack_require__(18).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 66 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
var setPrototypeOf = __webpack_require__(65).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(17);
var defined = __webpack_require__(24);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 69 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 70 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(17);
var defined = __webpack_require__(24);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(30);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(10);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(37);
var $iterCreate = __webpack_require__(99);
var setToStringTag = __webpack_require__(36);
var getPrototypeOf = __webpack_require__(35);
var ITERATOR = __webpack_require__(5)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(74);
var defined = __webpack_require__(24);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(4);
var cof = __webpack_require__(23);
var MATCH = __webpack_require__(5)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(5)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(37);
var ITERATOR = __webpack_require__(5)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(7);
var createDesc = __webpack_require__(28);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(45);
var ITERATOR = __webpack_require__(5)('iterator');
var Iterators = __webpack_require__(37);
module.exports = __webpack_require__(9).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(11);
var toAbsoluteIndex = __webpack_require__(32);
var toLength = __webpack_require__(6);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(38);
var step = __webpack_require__(103);
var Iterators = __webpack_require__(37);
var toIObject = __webpack_require__(15);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(72)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(51);

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var at = __webpack_require__(71)(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(21);
var invoke = __webpack_require__(93);
var html = __webpack_require__(64);
var cel = __webpack_require__(58);
var global = __webpack_require__(3);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(23)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var DESCRIPTORS = __webpack_require__(8);
var LIBRARY = __webpack_require__(30);
var $typed = __webpack_require__(57);
var hide = __webpack_require__(14);
var redefineAll = __webpack_require__(41);
var fails = __webpack_require__(1);
var anInstance = __webpack_require__(40);
var toInteger = __webpack_require__(17);
var toLength = __webpack_require__(6);
var toIndex = __webpack_require__(111);
var gOPN = __webpack_require__(34).f;
var dP = __webpack_require__(7).f;
var arrayFill = __webpack_require__(79);
var setToStringTag = __webpack_require__(36);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(8) && !__webpack_require__(1)(function () {
  return Object.defineProperty(__webpack_require__(58)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(9);
var LIBRARY = __webpack_require__(30);
var wksExt = __webpack_require__(60);
var defineProperty = __webpack_require__(7).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(13);
var toIObject = __webpack_require__(15);
var arrayIndexOf = __webpack_require__(47)(false);
var IE_PROTO = __webpack_require__(61)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(7);
var anObject = __webpack_require__(2);
var getKeys = __webpack_require__(31);

module.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(15);
var gOPN = __webpack_require__(34).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(31);
var gOPS = __webpack_require__(48);
var pIE = __webpack_require__(44);
var toObject = __webpack_require__(11);
var IObject = __webpack_require__(43);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(1)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 91 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(22);
var isObject = __webpack_require__(4);
var invoke = __webpack_require__(93);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 93 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(3).parseInt;
var $trim = __webpack_require__(49).trim;
var ws = __webpack_require__(66);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(3).parseFloat;
var $trim = __webpack_require__(49).trim;

module.exports = 1 / $parseFloat(__webpack_require__(66) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(23);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(4);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 98 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(33);
var descriptor = __webpack_require__(28);
var setToStringTag = __webpack_require__(36);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(14)(IteratorPrototype, __webpack_require__(5)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(2);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(22);
var toObject = __webpack_require__(11);
var IObject = __webpack_require__(43);
var toLength = __webpack_require__(6);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(11);
var toAbsoluteIndex = __webpack_require__(32);
var toLength = __webpack_require__(6);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpExec = __webpack_require__(81);
__webpack_require__(0)({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(8) && /./g.flags != 'g') __webpack_require__(7).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(51)
});


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(30);
var global = __webpack_require__(3);
var ctx = __webpack_require__(21);
var classof = __webpack_require__(45);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(4);
var aFunction = __webpack_require__(22);
var anInstance = __webpack_require__(40);
var forOf = __webpack_require__(54);
var speciesConstructor = __webpack_require__(46);
var task = __webpack_require__(83).set;
var microtask = __webpack_require__(235)();
var newPromiseCapabilityModule = __webpack_require__(107);
var perform = __webpack_require__(236);
var userAgent = __webpack_require__(55);
var promiseResolve = __webpack_require__(108);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(5)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(41)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(36)($Promise, PROMISE);
__webpack_require__(39)(PROMISE);
Wrapper = __webpack_require__(9)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(50)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(22);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(2);
var isObject = __webpack_require__(4);
var newPromiseCapability = __webpack_require__(107);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(7).f;
var create = __webpack_require__(33);
var redefineAll = __webpack_require__(41);
var ctx = __webpack_require__(21);
var anInstance = __webpack_require__(40);
var forOf = __webpack_require__(54);
var $iterDefine = __webpack_require__(72);
var step = __webpack_require__(103);
var setSpecies = __webpack_require__(39);
var DESCRIPTORS = __webpack_require__(8);
var fastKey = __webpack_require__(27).fastKey;
var validate = __webpack_require__(42);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(41);
var getWeak = __webpack_require__(27).getWeak;
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(4);
var anInstance = __webpack_require__(40);
var forOf = __webpack_require__(54);
var createArrayMethod = __webpack_require__(20);
var $has = __webpack_require__(13);
var validate = __webpack_require__(42);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(17);
var toLength = __webpack_require__(6);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(34);
var gOPS = __webpack_require__(48);
var anObject = __webpack_require__(2);
var Reflect = __webpack_require__(3).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(6);
var repeat = __webpack_require__(68);
var defined = __webpack_require__(24);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(31);
var toIObject = __webpack_require__(15);
var isEnum = __webpack_require__(44).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

__webpack_require__(122);

__webpack_require__(287).install();

var testPathRegExp = null;

if ((typeof {} === "undefined" ? "undefined" : _typeof({})) === 'object' && {}.testPathPattern) {
  // Remove string between % signs. On Windows' machines an empty env variable was visible as '%{variable_name}%' so it must be stripped.
  // See https://github.com/handsontable/handsontable/issues/4378).
  var pattern = {}.testPathPattern.replace(/^%(.*)%$/, '');

  if (pattern) {
    testPathRegExp = new RegExp(pattern, 'i');
  }
}

var ignoredE2ETestsPath = './mobile';
[__webpack_require__(291), __webpack_require__(405)].forEach(function (req) {
  req.keys().forEach(function (filePath) {
    if (filePath.includes(ignoredE2ETestsPath) === false) {
      if (testPathRegExp === null || testPathRegExp instanceof RegExp && testPathRegExp.test(filePath)) {
        req(filePath);
      }
    }
  });
});

__webpack_require__(432);

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(123);

__webpack_require__(266);

__webpack_require__(268);

__webpack_require__(270);

__webpack_require__(272);

__webpack_require__(274);

__webpack_require__(276);

__webpack_require__(278);

__webpack_require__(280);

__webpack_require__(282);

__webpack_require__(286);

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(124);
__webpack_require__(126);
__webpack_require__(127);
__webpack_require__(128);
__webpack_require__(129);
__webpack_require__(130);
__webpack_require__(131);
__webpack_require__(132);
__webpack_require__(133);
__webpack_require__(134);
__webpack_require__(135);
__webpack_require__(136);
__webpack_require__(137);
__webpack_require__(138);
__webpack_require__(139);
__webpack_require__(140);
__webpack_require__(141);
__webpack_require__(142);
__webpack_require__(143);
__webpack_require__(144);
__webpack_require__(145);
__webpack_require__(146);
__webpack_require__(147);
__webpack_require__(148);
__webpack_require__(149);
__webpack_require__(150);
__webpack_require__(151);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);
__webpack_require__(156);
__webpack_require__(157);
__webpack_require__(158);
__webpack_require__(159);
__webpack_require__(160);
__webpack_require__(161);
__webpack_require__(162);
__webpack_require__(163);
__webpack_require__(164);
__webpack_require__(165);
__webpack_require__(166);
__webpack_require__(167);
__webpack_require__(169);
__webpack_require__(170);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(173);
__webpack_require__(174);
__webpack_require__(175);
__webpack_require__(176);
__webpack_require__(177);
__webpack_require__(178);
__webpack_require__(179);
__webpack_require__(180);
__webpack_require__(181);
__webpack_require__(182);
__webpack_require__(183);
__webpack_require__(184);
__webpack_require__(185);
__webpack_require__(186);
__webpack_require__(187);
__webpack_require__(188);
__webpack_require__(189);
__webpack_require__(190);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(194);
__webpack_require__(195);
__webpack_require__(196);
__webpack_require__(197);
__webpack_require__(198);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(201);
__webpack_require__(202);
__webpack_require__(204);
__webpack_require__(205);
__webpack_require__(207);
__webpack_require__(208);
__webpack_require__(209);
__webpack_require__(210);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(213);
__webpack_require__(216);
__webpack_require__(217);
__webpack_require__(218);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(223);
__webpack_require__(224);
__webpack_require__(225);
__webpack_require__(226);
__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(80);
__webpack_require__(229);
__webpack_require__(104);
__webpack_require__(230);
__webpack_require__(105);
__webpack_require__(231);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(106);
__webpack_require__(237);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);
__webpack_require__(247);
__webpack_require__(248);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(251);
__webpack_require__(252);
__webpack_require__(253);
__webpack_require__(254);
__webpack_require__(255);
__webpack_require__(256);
__webpack_require__(257);
__webpack_require__(258);
__webpack_require__(259);
__webpack_require__(260);
__webpack_require__(261);
__webpack_require__(262);
__webpack_require__(263);
__webpack_require__(264);
__webpack_require__(265);
module.exports = __webpack_require__(9);


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(3);
var has = __webpack_require__(13);
var DESCRIPTORS = __webpack_require__(8);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(10);
var META = __webpack_require__(27).KEY;
var $fails = __webpack_require__(1);
var shared = __webpack_require__(59);
var setToStringTag = __webpack_require__(36);
var uid = __webpack_require__(29);
var wks = __webpack_require__(5);
var wksExt = __webpack_require__(60);
var wksDefine = __webpack_require__(86);
var enumKeys = __webpack_require__(125);
var isArray = __webpack_require__(63);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(4);
var toIObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(26);
var createDesc = __webpack_require__(28);
var _create = __webpack_require__(33);
var gOPNExt = __webpack_require__(89);
var $GOPD = __webpack_require__(18);
var $DP = __webpack_require__(7);
var $keys = __webpack_require__(31);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(34).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(44).f = $propertyIsEnumerable;
  __webpack_require__(48).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(30)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(14)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(31);
var gOPS = __webpack_require__(48);
var pIE = __webpack_require__(44);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(33) });


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperty: __webpack_require__(7).f });


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperties: __webpack_require__(88) });


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(15);
var $getOwnPropertyDescriptor = __webpack_require__(18).f;

__webpack_require__(19)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(11);
var $getPrototypeOf = __webpack_require__(35);

__webpack_require__(19)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(11);
var $keys = __webpack_require__(31);

__webpack_require__(19)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(19)('getOwnPropertyNames', function () {
  return __webpack_require__(89).f;
});


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(4);
var meta = __webpack_require__(27).onFreeze;

__webpack_require__(19)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(4);
var meta = __webpack_require__(27).onFreeze;

__webpack_require__(19)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(4);
var meta = __webpack_require__(27).onFreeze;

__webpack_require__(19)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(4);

__webpack_require__(19)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(4);

__webpack_require__(19)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(4);

__webpack_require__(19)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(90) });


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { is: __webpack_require__(91) });


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(65).set });


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(45);
var test = {};
test[__webpack_require__(5)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(10)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(0);

$export($export.P, 'Function', { bind: __webpack_require__(92) });


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(7).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(8) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(4);
var getPrototypeOf = __webpack_require__(35);
var HAS_INSTANCE = __webpack_require__(5)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(7).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(94);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(95);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var has = __webpack_require__(13);
var cof = __webpack_require__(23);
var inheritIfRequired = __webpack_require__(67);
var toPrimitive = __webpack_require__(26);
var fails = __webpack_require__(1);
var gOPN = __webpack_require__(34).f;
var gOPD = __webpack_require__(18).f;
var dP = __webpack_require__(7).f;
var $trim = __webpack_require__(49).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(33)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(8) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(10)(global, NUMBER, $Number);
}


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toInteger = __webpack_require__(17);
var aNumberValue = __webpack_require__(96);
var repeat = __webpack_require__(68);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(1)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $fails = __webpack_require__(1);
var aNumberValue = __webpack_require__(96);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(0);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(0);
var _isFinite = __webpack_require__(3).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', { isInteger: __webpack_require__(97) });


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(0);
var isInteger = __webpack_require__(97);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(95);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(94);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(0);
var log1p = __webpack_require__(98);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(0);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(0);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(0);
var sign = __webpack_require__(69);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(0);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(0);
var $expm1 = __webpack_require__(70);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { fround: __webpack_require__(168) });


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(69);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(0);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(0);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(1)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { log1p: __webpack_require__(98) });


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { sign: __webpack_require__(69) });


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(70);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(1)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(70);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toAbsoluteIndex = __webpack_require__(32);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(15);
var toLength = __webpack_require__(6);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(49)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(71)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(72)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $at = __webpack_require__(71)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(6);
var context = __webpack_require__(73);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(75)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(0);
var context = __webpack_require__(73);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(75)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(68)
});


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(6);
var context = __webpack_require__(73);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(75)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(12)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(12)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(12)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(12)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(12)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(12)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(12)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(12)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(12)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(12)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(12)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(12)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(12)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(0);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(26);

$export($export.P + $export.F * __webpack_require__(1)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(0);
var toISOString = __webpack_require__(203);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(1);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(10)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(5)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(14)(proto, TO_PRIMITIVE, __webpack_require__(206));


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(2);
var toPrimitive = __webpack_require__(26);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(0);

$export($export.S, 'Array', { isArray: __webpack_require__(63) });


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(21);
var $export = __webpack_require__(0);
var toObject = __webpack_require__(11);
var call = __webpack_require__(100);
var isArrayIter = __webpack_require__(76);
var toLength = __webpack_require__(6);
var createProperty = __webpack_require__(77);
var getIterFn = __webpack_require__(78);

$export($export.S + $export.F * !__webpack_require__(50)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var createProperty = __webpack_require__(77);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(1)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(0);
var toIObject = __webpack_require__(15);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(43) != Object || !__webpack_require__(16)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var html = __webpack_require__(64);
var cof = __webpack_require__(23);
var toAbsoluteIndex = __webpack_require__(32);
var toLength = __webpack_require__(6);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(1)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var aFunction = __webpack_require__(22);
var toObject = __webpack_require__(11);
var fails = __webpack_require__(1);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(16)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $forEach = __webpack_require__(20)(0);
var STRICT = __webpack_require__(16)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(215);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
var isArray = __webpack_require__(63);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $map = __webpack_require__(20)(1);

$export($export.P + $export.F * !__webpack_require__(16)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $filter = __webpack_require__(20)(2);

$export($export.P + $export.F * !__webpack_require__(16)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $some = __webpack_require__(20)(3);

$export($export.P + $export.F * !__webpack_require__(16)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $every = __webpack_require__(20)(4);

$export($export.P + $export.F * !__webpack_require__(16)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(101);

$export($export.P + $export.F * !__webpack_require__(16)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(101);

$export($export.P + $export.F * !__webpack_require__(16)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $indexOf = __webpack_require__(47)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(16)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(15);
var toInteger = __webpack_require__(17);
var toLength = __webpack_require__(6);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(16)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { copyWithin: __webpack_require__(102) });

__webpack_require__(38)('copyWithin');


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { fill: __webpack_require__(79) });

__webpack_require__(38)('fill');


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(20)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(38)(KEY);


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(20)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(38)(KEY);


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(39)('Array');


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var inheritIfRequired = __webpack_require__(67);
var dP = __webpack_require__(7).f;
var gOPN = __webpack_require__(34).f;
var isRegExp = __webpack_require__(74);
var $flags = __webpack_require__(51);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(8) && (!CORRECT_NEW || __webpack_require__(1)(function () {
  re2[__webpack_require__(5)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(10)(global, 'RegExp', $RegExp);
}

__webpack_require__(39)('RegExp');


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(105);
var anObject = __webpack_require__(2);
var $flags = __webpack_require__(51);
var DESCRIPTORS = __webpack_require__(8);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(10)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(1)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var toLength = __webpack_require__(6);
var advanceStringIndex = __webpack_require__(82);
var regExpExec = __webpack_require__(52);

// @@match logic
__webpack_require__(53)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(6);
var toInteger = __webpack_require__(17);
var advanceStringIndex = __webpack_require__(82);
var regExpExec = __webpack_require__(52);
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(53)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return ch;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return ch;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return ch;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var sameValue = __webpack_require__(91);
var regExpExec = __webpack_require__(52);

// @@search logic
__webpack_require__(53)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(74);
var anObject = __webpack_require__(2);
var speciesConstructor = __webpack_require__(46);
var advanceStringIndex = __webpack_require__(82);
var toLength = __webpack_require__(6);
var callRegExpExec = __webpack_require__(52);
var regexpExec = __webpack_require__(81);
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';

// eslint-disable-next-line no-empty
var SUPPORTS_Y = !!(function () { try { return new RegExp('x', 'y'); } catch (e) {} })();

// @@split logic
__webpack_require__(53)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                    (rx.multiline ? 'm' : '') +
                    (rx.unicode ? 'u' : '') +
                    (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? 0xffffffff : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var macrotask = __webpack_require__(83).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(23)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 236 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(109);
var validate = __webpack_require__(42);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(56)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(109);
var validate = __webpack_require__(42);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(56)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each = __webpack_require__(20)(0);
var redefine = __webpack_require__(10);
var meta = __webpack_require__(27);
var assign = __webpack_require__(90);
var weak = __webpack_require__(110);
var isObject = __webpack_require__(4);
var fails = __webpack_require__(1);
var validate = __webpack_require__(42);
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(56)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(110);
var validate = __webpack_require__(42);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(56)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $typed = __webpack_require__(57);
var buffer = __webpack_require__(84);
var anObject = __webpack_require__(2);
var toAbsoluteIndex = __webpack_require__(32);
var toLength = __webpack_require__(6);
var isObject = __webpack_require__(4);
var ArrayBuffer = __webpack_require__(3).ArrayBuffer;
var speciesConstructor = __webpack_require__(46);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(1)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(39)(ARRAY_BUFFER);


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
$export($export.G + $export.W + $export.F * !__webpack_require__(57).ABV, {
  DataView: __webpack_require__(84).DataView
});


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(22);
var anObject = __webpack_require__(2);
var rApply = (__webpack_require__(3).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(1)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(0);
var create = __webpack_require__(33);
var aFunction = __webpack_require__(22);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(4);
var fails = __webpack_require__(1);
var bind = __webpack_require__(92);
var rConstruct = (__webpack_require__(3).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(7);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var toPrimitive = __webpack_require__(26);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(1)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(0);
var gOPD = __webpack_require__(18).f;
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(99)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(18);
var getPrototypeOf = __webpack_require__(35);
var has = __webpack_require__(13);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(4);
var anObject = __webpack_require__(2);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(18);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(0);
var getProto = __webpack_require__(35);
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(112) });


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(7);
var gOPD = __webpack_require__(18);
var getPrototypeOf = __webpack_require__(35);
var has = __webpack_require__(13);
var $export = __webpack_require__(0);
var createDesc = __webpack_require__(28);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(4);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(0);
var setProto = __webpack_require__(65);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(267);
module.exports = __webpack_require__(9).Array.includes;


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(0);
var $includes = __webpack_require__(47)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(38)('includes');


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(269);
module.exports = __webpack_require__(9).String.padStart;


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(113);
var userAgent = __webpack_require__(55);

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(271);
module.exports = __webpack_require__(9).String.padEnd;


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(113);
var userAgent = __webpack_require__(55);

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(273);
module.exports = __webpack_require__(60).f('asyncIterator');


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(86)('asyncIterator');


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(275);
module.exports = __webpack_require__(9).Object.getOwnPropertyDescriptors;


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(0);
var ownKeys = __webpack_require__(112);
var toIObject = __webpack_require__(15);
var gOPD = __webpack_require__(18);
var createProperty = __webpack_require__(77);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(277);
module.exports = __webpack_require__(9).Object.values;


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $values = __webpack_require__(114)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(279);
module.exports = __webpack_require__(9).Object.entries;


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $entries = __webpack_require__(114)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(106);
__webpack_require__(281);
module.exports = __webpack_require__(9).Promise['finally'];


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(0);
var core = __webpack_require__(9);
var global = __webpack_require__(3);
var speciesConstructor = __webpack_require__(46);
var promiseResolve = __webpack_require__(108);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(283);
__webpack_require__(284);
__webpack_require__(285);
module.exports = __webpack_require__(9);


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(3);
var $export = __webpack_require__(0);
var userAgent = __webpack_require__(55);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $task = __webpack_require__(83);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(80);
var getKeys = __webpack_require__(31);
var redefine = __webpack_require__(10);
var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(37);
var wks = __webpack_require__(5);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 286 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var co = __webpack_require__(289),
    isGeneratorFn = __webpack_require__(290).fn;

var DEFAULT_METHODS = [
    'afterAll',
    'afterEach',
    'beforeAll',
    'beforeEach',
    'it', 'fit', //'xit',
];
var EXPECTS_NAME = ['it', 'fit', 'xit'];

var originalMethods = {},
    overrideMethods, installed;

module.exports = function jasmineCo(userFn) {
    return wrapFn(userFn);
};
module.exports.install = function install() {
    (overrideMethods || DEFAULT_METHODS).forEach(function(fname) {
        coifyJasmineFn(fname);
    });
    installed = true;
};
module.exports.uninstall = function uninstall() {
    Object.keys(originalMethods).forEach(function(key) {
        global[key] = originalMethods[key];
    });
    originalMethods = {};
    installed = false;
};
module.exports.isInstalled = function isInstalled() {
    return installed;
};
module.exports.setOverrideMethods = function setOverrideMethods(methods) {
    overrideMethods = Array.isArray(methods) ? methods : DEFAULT_METHODS;
};

function coifyJasmineFn(fname) {
    // don't process methods that don't exist globally or have already been overridden
    if (!global[fname] || originalMethods[fname]) { return; }

    var origFn = originalMethods[fname] = global[fname];
    global[fname] = wrapFn(origFn, EXPECTS_NAME.indexOf(fname) !== -1);
}

function wrapFn(origFn, expectsName) {
    return function() {
        var userFn = expectsName ? arguments[1] : arguments[0];
        var restParams = [].slice.call(arguments, expectsName ? 2 : 1);
        var args;
        if (isGeneratorFn(userFn)) {
            // if the user method is a generator:
            //   1. call it with the correct `this` context object
            //   2. wrap it in a co function which fails the spec if an exception is
            //      encountered and notifies jasmine that the spec is done when the co
            //      promise settles
            args = [function(done) {
                return co(userFn.bind(this)).then(done, done.fail);
            }];
            if (expectsName) { args.unshift(arguments[0]); }
            if (restParams.length) { args.push.apply(args, restParams); }
            return origFn.apply(null, args);
        } else if (userFn && !userFn.length) {
            // if the user method is a standard function that doesn't expect to be asynchronous
            // (i.e. it doesn't take `done` as a parameter), wrap it with a function that *is*
            // asynchronous and retrofit it to support returning a promise from the function
            args = [function(done) {
                var result = userFn.call(this);
                if (!(result && typeof result.then === 'function')) {
                    done();
                    return result;
                } else {
                    result.then(done, done.fail);
                }
            }];
            if (expectsName) { args.unshift(arguments[0]); }
            if (restParams.length) { args.push.apply(args, restParams); }
            return origFn.apply(null, args);
        } else {
            // if the user method is already asynchronous, just call the standard jasmine method
            // and let the user method take care of itself
            return origFn.apply(null, arguments);
        }
    };
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(288)))

/***/ }),
/* 288 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 289 */
/***/ (function(module, exports) {


/**
 * slice() reference.
 */

var slice = Array.prototype.slice;

/**
 * Expose `co`.
 */

module.exports = co['default'] = co.co = co;

/**
 * Wrap the given generator `fn` into a
 * function that returns a promise.
 * This is a separate function so that
 * every `co()` call doesn't create a new,
 * unnecessary closure.
 *
 * @param {GeneratorFunction} fn
 * @return {Function}
 * @api public
 */

co.wrap = function (fn) {
  createPromise.__generatorFunction__ = fn;
  return createPromise;
  function createPromise() {
    return co.call(this, fn.apply(this, arguments));
  }
};

/**
 * Execute the generator function or a generator
 * and return a promise.
 *
 * @param {Function} fn
 * @return {Promise}
 * @api public
 */

function co(gen) {
  var ctx = this;
  var args = slice.call(arguments, 1)

  // we wrap everything in a promise to avoid promise chaining,
  // which leads to memory leak errors.
  // see https://github.com/tj/co/issues/180
  return new Promise(function(resolve, reject) {
    if (typeof gen === 'function') gen = gen.apply(ctx, args);
    if (!gen || typeof gen.next !== 'function') return resolve(gen);

    onFulfilled();

    /**
     * @param {Mixed} res
     * @return {Promise}
     * @api private
     */

    function onFulfilled(res) {
      var ret;
      try {
        ret = gen.next(res);
      } catch (e) {
        return reject(e);
      }
      next(ret);
    }

    /**
     * @param {Error} err
     * @return {Promise}
     * @api private
     */

    function onRejected(err) {
      var ret;
      try {
        ret = gen.throw(err);
      } catch (e) {
        return reject(e);
      }
      next(ret);
    }

    /**
     * Get the next value in the generator,
     * return a promise.
     *
     * @param {Object} ret
     * @return {Promise}
     * @api private
     */

    function next(ret) {
      if (ret.done) return resolve(ret.value);
      var value = toPromise.call(ctx, ret.value);
      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);
      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '
        + 'but the following object was passed: "' + String(ret.value) + '"'));
    }
  });
}

/**
 * Convert a `yield`ed value into a promise.
 *
 * @param {Mixed} obj
 * @return {Promise}
 * @api private
 */

function toPromise(obj) {
  if (!obj) return obj;
  if (isPromise(obj)) return obj;
  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);
  if ('function' == typeof obj) return thunkToPromise.call(this, obj);
  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);
  if (isObject(obj)) return objectToPromise.call(this, obj);
  return obj;
}

/**
 * Convert a thunk to a promise.
 *
 * @param {Function}
 * @return {Promise}
 * @api private
 */

function thunkToPromise(fn) {
  var ctx = this;
  return new Promise(function (resolve, reject) {
    fn.call(ctx, function (err, res) {
      if (err) return reject(err);
      if (arguments.length > 2) res = slice.call(arguments, 1);
      resolve(res);
    });
  });
}

/**
 * Convert an array of "yieldables" to a promise.
 * Uses `Promise.all()` internally.
 *
 * @param {Array} obj
 * @return {Promise}
 * @api private
 */

function arrayToPromise(obj) {
  return Promise.all(obj.map(toPromise, this));
}

/**
 * Convert an object of "yieldables" to a promise.
 * Uses `Promise.all()` internally.
 *
 * @param {Object} obj
 * @return {Promise}
 * @api private
 */

function objectToPromise(obj){
  var results = new obj.constructor();
  var keys = Object.keys(obj);
  var promises = [];
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var promise = toPromise.call(this, obj[key]);
    if (promise && isPromise(promise)) defer(promise, key);
    else results[key] = obj[key];
  }
  return Promise.all(promises).then(function () {
    return results;
  });

  function defer(promise, key) {
    // predefine the key in the result
    results[key] = undefined;
    promises.push(promise.then(function (res) {
      results[key] = res;
    }));
  }
}

/**
 * Check if `obj` is a promise.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isPromise(obj) {
  return 'function' == typeof obj.then;
}

/**
 * Check if `obj` is a generator.
 *
 * @param {Mixed} obj
 * @return {Boolean}
 * @api private
 */

function isGenerator(obj) {
  return 'function' == typeof obj.next && 'function' == typeof obj.throw;
}

/**
 * Check if `obj` is a generator function.
 *
 * @param {Mixed} obj
 * @return {Boolean}
 * @api private
 */
function isGeneratorFunction(obj) {
  var constructor = obj.constructor;
  if (!constructor) return false;
  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;
  return isGenerator(constructor.prototype);
}

/**
 * Check for plain object.
 *
 * @param {Mixed} val
 * @return {Boolean}
 * @api private
 */

function isObject(val) {
  return Object == val.constructor;
}


/***/ }),
/* 290 */
/***/ (function(module, exports) {

/**
 * Export generator function checks.
 */
module.exports = isGenerator
module.exports.fn = isGeneratorFunction

/**
 * Check whether an object is a generator.
 *
 * @param  {Object}  obj
 * @return {Boolean}
 */
function isGenerator (obj) {
  return obj &&
    typeof obj.next === 'function' &&
    typeof obj.throw === 'function'
}

/**
 * Check whether a function is generator.
 *
 * @param  {Function} fn
 * @return {Boolean}
 */
function isGeneratorFunction (fn) {
  return typeof fn === 'function' &&
    fn.constructor &&
    fn.constructor.name === 'GeneratorFunction'
}


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./ColHeader.spec.js": 292,
	"./Core_alter.spec.js": 293,
	"./Core_beforeKeyDown.spec.js": 294,
	"./Core_beforechange.spec.js": 295,
	"./Core_count.spec.js": 296,
	"./Core_countEmptyCols.spec.js": 297,
	"./Core_countEmptyRows.spec.js": 298,
	"./Core_dataSchema.spec.js": 299,
	"./Core_datachange.spec.js": 300,
	"./Core_destroy.spec.js": 301,
	"./Core_destroyEditor.spec.js": 302,
	"./Core_getCellMeta.spec.js": 303,
	"./Core_getColHeader.spec.js": 304,
	"./Core_getDataAt.spec.js": 305,
	"./Core_getDataType.spec.js": 306,
	"./Core_getRowHeader.spec.js": 307,
	"./Core_init.spec.js": 308,
	"./Core_isEmpty.spec.js": 309,
	"./Core_keepEmptyRows.spec.js": 310,
	"./Core_listen.spec.js": 311,
	"./Core_loadData.spec.js": 312,
	"./Core_navigation.spec.js": 313,
	"./Core_onKeyDown.spec.js": 314,
	"./Core_populateFromArray.spec.js": 315,
	"./Core_reCreate.spec.js": 316,
	"./Core_removeCellMeta.spec.js": 317,
	"./Core_render.spec.js": 318,
	"./Core_selection.spec.js": 319,
	"./Core_setDataAtCell.spec.js": 320,
	"./Core_splice.spec.js": 321,
	"./Core_update.spec.js": 322,
	"./Core_validate.spec.js": 323,
	"./Core_view.spec.js": 324,
	"./Dom.spec.js": 325,
	"./Performance.spec.js": 326,
	"./PluginHooks.spec.js": 327,
	"./RowHeader.spec.js": 328,
	"./cellTypes/index.spec.js": 329,
	"./core/colToProp.spec.js": 330,
	"./core/countSourceCols.spec.js": 331,
	"./core/emptySelectedCells.spec.js": 332,
	"./core/getCellMetaAtRow.spec.js": 333,
	"./core/getCellsMeta.spec.js": 334,
	"./core/getCopyableData.spec.js": 335,
	"./core/getCopyableText.spec.js": 336,
	"./core/getSelected.spec.js": 337,
	"./core/getSelectedLast.spec.js": 338,
	"./core/getSelectedRange.spec.js": 339,
	"./core/getSelectedRangeLast.spec.js": 340,
	"./core/getSourceDataArray.spec.js": 341,
	"./core/getSourceDataAtCell.spec.js": 342,
	"./core/getSourceDataAtCol.spec.js": 343,
	"./core/propToCol.spec.js": 344,
	"./core/selectAll.spec.js": 345,
	"./core/selectCell.spec.js": 346,
	"./core/selectCells.spec.js": 347,
	"./core/selectColumns.spec.js": 348,
	"./core/selectRows.spec.js": 349,
	"./core/setCellMeta.spec.js": 350,
	"./core/spliceCellsMeta.spec.js": 351,
	"./core/spliceCol.spec.js": 352,
	"./core/spliceRow.spec.js": 353,
	"./core/toPhysicalColumn.spec.js": 354,
	"./core/toPhysicalRow.spec.js": 355,
	"./core/toVisualColumn.spec.js": 356,
	"./core/toVisualRow.spec.js": 357,
	"./editors/autocompleteEditor.spec.js": 358,
	"./editors/baseEditor.spec.js": 359,
	"./editors/dateEditor.spec.js": 360,
	"./editors/dropdownEditor.spec.js": 361,
	"./editors/handsontableEditor.spec.js": 362,
	"./editors/index.spec.js": 363,
	"./editors/noEditor.spec.js": 364,
	"./editors/numericEditor.spec.js": 365,
	"./editors/passwordEditor.spec.js": 366,
	"./editors/selectEditor.spec.js": 367,
	"./editors/textEditor.spec.js": 368,
	"./i18n/index.spec.js": 369,
	"./mobile/events.spec.js": 370,
	"./mobile/scroll.spec.js": 371,
	"./mobile/selection.spec.js": 372,
	"./publicAPI.spec.js": 373,
	"./renderers/autocompleteRenderer.spec.js": 374,
	"./renderers/cellDecorator.spec.js": 375,
	"./renderers/checkboxRenderer.spec.js": 376,
	"./renderers/htmlRenderer.spec.js": 377,
	"./renderers/index.spec.js": 378,
	"./renderers/numericRenderer.spec.js": 379,
	"./renderers/passwordRenderer.spec.js": 380,
	"./renderers/textRenderer.spec.js": 381,
	"./settings/autoWrapCol.spec.js": 382,
	"./settings/autoWrapRow.spec.js": 383,
	"./settings/colWidths.spec.js": 384,
	"./settings/columns.spec.js": 385,
	"./settings/copyable.spec.js": 386,
	"./settings/currentHeaderClassName.spec.js": 387,
	"./settings/currentRowClassName.spec.js": 388,
	"./settings/editor.spec.js": 389,
	"./settings/fixedColumnsLeft.spec.js": 390,
	"./settings/fixedRowsBottom.spec.js": 391,
	"./settings/fixedRowsTop.spec.js": 392,
	"./settings/fragmentSelection.spec.js": 393,
	"./settings/maxCols.spec.js": 394,
	"./settings/maxRows.spec.js": 395,
	"./settings/outsideClickDeselects.spec.js": 396,
	"./settings/renderer.spec.js": 397,
	"./settings/tableClassName.spec.js": 398,
	"./utils/ghostTable.spec.js": 399,
	"./validators/autocompleteValidator.spec.js": 400,
	"./validators/dateValidator.spec.js": 401,
	"./validators/index.spec.js": 402,
	"./validators/numericValidator.spec.js": 403,
	"./validators/timeValidator.spec.js": 404
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 291;

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('ColHeader', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should not show col headers by default', function () {
    handsontable();
    expect(spec().$container.find('thead th').length).toEqual(0);
  });
  it('should show col headers if true', function () {
    handsontable({
      colHeaders: true
    });
    expect(spec().$container.find('thead th').length).toBeGreaterThan(0);
  });
  it('should show default columns headers labelled A-(Z * n)', function () {
    var startCols = 5;
    handsontable({
      startCols: startCols,
      colHeaders: true
    });
    var ths = getHtCore().find('thead th');
    expect(ths.length).toEqual(startCols);
    expect($.trim(ths.eq(0).text())).toEqual('A');
    expect($.trim(ths.eq(1).text())).toEqual('B');
    expect($.trim(ths.eq(2).text())).toEqual('C');
    expect($.trim(ths.eq(3).text())).toEqual('D');
    expect($.trim(ths.eq(4).text())).toEqual('E');
  });
  it('should show default columns headers labelled A-(Z * n) when columns as an array is present', function () {
    var startCols = 5;
    handsontable({
      startCols: startCols,
      colHeaders: true,
      columns: [{}, {}, {}, {}, {}]
    });
    var ths = getHtCore().find('thead th');
    expect(ths.length).toEqual(startCols);
    expect($.trim(ths.eq(0).text())).toEqual('A');
    expect($.trim(ths.eq(1).text())).toEqual('B');
    expect($.trim(ths.eq(2).text())).toEqual('C');
    expect($.trim(ths.eq(3).text())).toEqual('D');
    expect($.trim(ths.eq(4).text())).toEqual('E');
  });
  it('should show default columns headers labelled A-(Z * n) when columns as a function is present', function () {
    var startCols = 5;
    handsontable({
      startCols: startCols,
      colHeaders: true,
      columns: function columns() {
        return {};
      }
    });
    var ths = getHtCore().find('thead th');
    expect(ths.length).toEqual(startCols);
    expect($.trim(ths.eq(0).text())).toEqual('A');
    expect($.trim(ths.eq(1).text())).toEqual('B');
    expect($.trim(ths.eq(2).text())).toEqual('C');
    expect($.trim(ths.eq(3).text())).toEqual('D');
    expect($.trim(ths.eq(4).text())).toEqual('E');
  });
  it('should show col headers with custom label', function () {
    var startCols = 5;
    handsontable({
      startCols: startCols,
      colHeaders: ['First', 'Second', 'Third']
    });
    var ths = getHtCore().find('thead th');
    expect(ths.length).toEqual(startCols);
    expect($.trim(ths.eq(0).text())).toEqual('First');
    expect($.trim(ths.eq(1).text())).toEqual('Second');
    expect($.trim(ths.eq(2).text())).toEqual('Third');
    expect($.trim(ths.eq(3).text())).toEqual('D');
    expect($.trim(ths.eq(4).text())).toEqual('E');
  });
  it('should not show col headers if false', function () {
    handsontable({
      colHeaders: false
    });
    expect(spec().$container.find('th.htColHeader').length).toEqual(0);
  });
  it('should hide columns headers after updateSettings', function () {
    var hot = handsontable({
      startCols: 5,
      colHeaders: true
    });
    expect(getHtCore().find('thead th').length).toEqual(5);
    expect(getTopClone().find('thead th').length).toEqual(5);
    hot.updateSettings({
      colHeaders: false
    });
    expect(getHtCore().find('thead th').length).toEqual(0);
    expect(getTopClone().width()).toEqual(0);
  });
  it('should show/hide columns headers after updateSettings', function () {
    var hot = handsontable({
      startCols: 5,
      colHeaders: true
    });
    expect(getHtCore().find('thead th').length).toEqual(5);
    expect(getTopClone().find('thead th').length).toEqual(5);
    hot.updateSettings({
      colHeaders: false
    });
    expect(getHtCore().find('thead th').length).toEqual(0);
    expect(getTopClone().width()).toEqual(0);
    hot.updateSettings({
      colHeaders: true
    });
    expect(getHtCore().find('thead th').length).toEqual(5);
    expect(getTopClone().width()).toBeGreaterThan(0);
    hot.updateSettings({
      colHeaders: false
    });
    expect(getHtCore().find('thead th').length).toEqual(0);
    expect(getTopClone().width()).toEqual(0);
  });
  it('should show columns headers after updateSettings', function () {
    var hot = handsontable({
      startCols: 5,
      colHeaders: false
    });
    expect(getHtCore().find('thead th').length).toEqual(0);
    expect(getTopClone().find('thead th').length).toEqual(0);
    hot.updateSettings({
      colHeaders: true
    });
    expect(getHtCore().find('thead th').length).toEqual(5);
    expect(getTopClone().find('thead th').length).toEqual(5);
  });
  it('should show new columns headers after updateSettings', function () {
    var hot = handsontable({
      startCols: 3,
      colHeaders: ['A', 'B', 'C']
    });
    var htCore = getHtCore();
    expect(htCore.find('thead th:eq(0)').text()).toEqual('A');
    expect(htCore.find('thead th:eq(1)').text()).toEqual('B');
    expect(htCore.find('thead th:eq(2)').text()).toEqual('C');
    hot.updateSettings({
      colHeaders: ['X', 'Y', 'Z']
    });
    expect(htCore.find('thead th:eq(0)').text()).toEqual('X');
    expect(htCore.find('thead th:eq(1)').text()).toEqual('Y');
    expect(htCore.find('thead th:eq(2)').text()).toEqual('Z');
  });
  it('should be possible to define colHeaders with a function', function () {
    handsontable({
      startCols: 2,
      colHeaders: function colHeaders(col) {
        switch (col) {
          case 0:
            return 'One';

          case 1:
            return 'Two';

          default:
            break;
        }
      }
    });
    var htCore = getHtCore();
    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');
    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');
  });
  it('should be possible to set HTML in colHeaders', function () {
    handsontable({
      startCols: 2,
      colHeaders: ['One <input type="checkbox">', 'Two <input type="checkbox">']
    });
    var htCore = getHtCore();
    expect(htCore.find('thead th:eq(0) input[type=checkbox]').length).toEqual(1);
    expect(htCore.find('thead th:eq(1) input[type=checkbox]').length).toEqual(1);
  });
  it('should be possible to set colHeaders when columns array is present', function () {
    handsontable({
      startCols: 2,
      colHeaders: ['One', 'Two'],
      columns: [{
        type: 'text'
      }, {
        type: 'text'
      }]
    });
    var htCore = getHtCore();
    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');
    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');
  });
  it('should be possible to set colHeaders when columns function is present', function () {
    handsontable({
      startCols: 2,
      colHeaders: ['One', 'Two'],
      columns: function columns(column) {
        var colMeta = {
          type: 'text'
        };

        if ([0, 1].indexOf(column) < 0) {
          colMeta = null;
        }

        return colMeta;
      }
    });
    var htCore = getHtCore();
    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');
    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');
  });
  it('should be possible to set colHeaders using columns title property', function () {
    handsontable({
      startCols: 2,
      colHeaders: ['One', 'Two'],
      columns: [{
        type: 'text',
        title: 'Special title'
      }, {
        type: 'text'
      }]
    });
    var htCore = getHtCore();
    expect(htCore.find('thead th:eq(0)').text()).toEqual('Special title');
    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');
  });
  it('should be possible to set colHeaders using columns title property when columns is a function', function () {
    handsontable({
      startCols: 2,
      colHeaders: ['One', 'Two'],
      columns: function columns(column) {
        var colMeta = {
          type: 'text'
        };

        if (column === 0) {
          colMeta.title = 'Special title';
        }

        if ([0, 1].indexOf(column) < 0) {
          colMeta = null;
        }

        return colMeta;
      }
    });
    var htCore = getHtCore();
    expect(htCore.find('thead th:eq(0)').text()).toEqual('Special title');
    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');
  });
  it('should resize all the column headers in the overlays, according to the other overlays\' height', function () {
    handsontable({
      startCols: 5,
      colHeaders: ['a', 'a', 'a', 'a<BR>a', 'a'],
      fixedColumnsLeft: 2
    });
    var topHeaderExample = $('.ht_clone_top').find('thead tr:first-child th:nth-child(1)');
    var masterHeaderExample = $('.ht_master').find('thead tr:first-child th:nth-child(3)');
    expect(topHeaderExample.height()).toEqual(masterHeaderExample.height());
  });
  it('should allow defining custom column header height using the columnHeaderHeight config option', function () {
    var hot = handsontable({
      startCols: 3,
      colHeaders: true,
      columnHeaderHeight: 40
    });
    hot.render();
    expect(spec().$container.find('th').eq(0).height()).toEqual(40);
  });
  it('should allow defining custom column header heights using the columnHeaderHeight config option, when multiple column header levels are defined', function () {
    var hot = handsontable({
      startCols: 3,
      colHeaders: true,
      columnHeaderHeight: [45, 65],
      afterGetColumnHeaderRenderers: function afterGetColumnHeaderRenderers(array) {
        array.push(function (index, TH) {
          TH.innerHTML = '';
          var div = document.createElement('div');
          var span = document.createElement('span');
          div.className = 'relative';
          span.className = 'colHeader';
          span.innerText = index;
          div.appendChild(span);
          TH.appendChild(div);
        });
        return array;
      }
    });
    hot.render();
    expect(spec().$container.find('.handsontable.ht_clone_top tr:nth-child(1) th:nth-child(1)').height()).toEqual(45);
    expect(spec().$container.find('.handsontable.ht_clone_top tr:nth-child(2) th:nth-child(1)').height()).toEqual(65);
  });
});

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_alter', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfNestedObjects = function arrayOfNestedObjects() {
    return [{
      id: 1,
      name: {
        first: 'Ted',
        last: 'Right'
      },
      address: 'Street Name',
      zip: '80410',
      city: 'City Name'
    }, {
      id: 2,
      name: {
        first: 'Frank',
        last: 'Honest'
      },
      address: 'Street Name',
      zip: '80410',
      city: 'City Name'
    }, {
      id: 3,
      name: {
        first: 'Joan',
        last: 'Well'
      },
      address: 'Street Name',
      zip: '80410',
      city: 'City Name'
    }];
  };

  var arrayOfArrays = function arrayOfArrays() {
    return [['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['2008', 10, 11, 12, 13], ['2009', 20, 11, 14, 13], ['2010', 30, 15, 12, 13]];
  };

  describe('remove row', function () {
    describe('multiple items at once', function () {
      it('should remove rows when index groups are passed in ascending order', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(15, 5)
        }); // [[rowVisualIndex, amountRowsToRemove] ...]

        alter('remove_row', [[1, 3], [5, 1], [7, 3], [11, 2]]); // It remove rows as follow:
        //     1--------3      5-1     7---------3       11-----2
        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15
        //
        // Result: A1, A5, A7, A11, A14, A15

        expect(getDataAtCol(0)).toEqual(['A1', 'A5', 'A7', 'A11', 'A14', 'A15']);
        expect(getData().length).toBe(6);
      });
      it('should remove rows when index groups are passed in descending order', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(15, 5)
        }); // [[rowVisualIndex, amountRowsToRemove] ...]

        alter('remove_row', [[11, 2], [7, 3], [5, 1], [1, 3]]); // It remove rows as follow:
        //     1--------3      5-1     7---------3       11-----2
        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15
        //
        // Result: A1, A5, A7, A11, A14, A15

        expect(getDataAtCol(0)).toEqual(['A1', 'A5', 'A7', 'A11', 'A14', 'A15']);
        expect(getData().length).toBe(6);
      });
      it('should remove rows when index groups are passed as intersecting values', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(15, 5)
        }); // [[rowVisualIndex, amountRowsToRemove] ...]

        alter('remove_row', [[1, 3], [4, 2], [5, 5], [11, 1]]); // It remove rows as follow:
        //     1---------------------------------9       11-1
        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15
        //
        // Result: A1, A11, A13, A14, A15

        expect(getDataAtCol(0)).toEqual(['A1', 'A11', 'A13', 'A14', 'A15']);
        expect(getData().length).toBe(5);
      });
      it('should remove rows when index groups are passed as intersecting values (the second scenario)', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(15, 5)
        }); // [[rowVisualIndex, amountRowsToRemove] ...]

        alter('remove_row', [[1, 3], [2, 1], [5, 2]]); // It remove columns as follow:
        //     1--------3      5----2
        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15
        //
        // Result: A1, A5, A8, A9, A10, A11, A12, A13, A14, A15

        expect(getDataAtCol(0)).toEqual(['A1', 'A5', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15']);
        expect(getData().length).toBe(10);
      });
      it('should remove rows when index groups are passed as intersecting values (placed randomly)', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(15, 5)
        }); // [[rowVisualIndex, amountRowsToRemove] ...]

        alter('remove_row', [[4, 2], [11, 1], [5, 5], [1, 3]]); // It remove rows as follow:
        //     1---------------------------------9       11-1
        // A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15
        //
        // Result: A1, A11, A13, A14, A15

        expect(getDataAtCol(0)).toEqual(['A1', 'A11', 'A13', 'A14', 'A15']);
        expect(getData().length).toBe(5);
      });
    });
    it('should remove row', function () {
      handsontable({
        minRows: 5,
        data: arrayOfNestedObjects(),
        columns: [{
          data: 'id'
        }, {
          data: 'name.first'
        }]
      });
      alter('remove_row', 1);
      expect(getDataAtCell(1, 1)).toEqual('Joan'); // Joan should be moved up

      expect(getData().length).toEqual(5); // new row should be added by keepEmptyRows
    });
    it('should not remove row if amount is zero', function () {
      handsontable({
        data: arrayOfNestedObjects(),
        columns: [{
          data: 'id'
        }, {
          data: 'name.first'
        }]
      });
      var countedRows = countRows();
      alter('remove_row', 1, 0);
      expect(countRows()).toBe(countedRows);
    });
    it('should fire beforeRemoveRow event before removing row', function () {
      var onBeforeRemoveRow = jasmine.createSpy('onBeforeRemoveRow');
      handsontable({
        data: arrayOfNestedObjects(),
        columns: [{
          data: 'id'
        }, {
          data: 'name.first'
        }],
        beforeRemoveRow: onBeforeRemoveRow
      });
      alter('remove_row', 2, 1, 'customSource');
      expect(onBeforeRemoveRow).toHaveBeenCalledWith(countRows(), 1, [2], 'customSource', undefined, undefined);
    });
    it('should not remove row if removing has been canceled by beforeRemoveRow event handler', function () {
      var onBeforeRemoveRow = jasmine.createSpy('onBeforeRemoveRow');
      onBeforeRemoveRow.and.callFake(function () {
        return false;
      });
      handsontable({
        data: arrayOfNestedObjects(),
        columns: [{
          data: 'id'
        }, {
          data: 'name.first'
        }],
        beforeRemoveRow: onBeforeRemoveRow
      });
      expect(countRows()).toEqual(3);
      alter('remove_row');
      expect(countRows()).toEqual(3);
    });
    it('should not remove rows below minRows', function () {
      handsontable({
        startRows: 5,
        minRows: 4
      });
      alter('remove_row', 1);
      alter('remove_row', 1);
      alter('remove_row', 1);
      expect(countRows()).toEqual(4);
    });
    it('should not remove cols below minCols', function () {
      handsontable({
        startCols: 5,
        minCols: 4
      });
      alter('remove_col', 1);
      alter('remove_col', 1);
      alter('remove_col', 1);
      expect(countCols()).toEqual(4);
    });
    it('should remove one row if amount parameter is empty', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('remove_row', 1);
      expect(countRows()).toEqual(4);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a1');
      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('c2');
    });
    it('should remove as many rows as given in the amount parameter', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('remove_row', 1, 3);
      expect(countRows()).toEqual(2);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a1');
      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('e2');
    });
    it('should not remove more rows that exist', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('remove_row', 1, 10);
      expect(countRows()).toEqual(1);
      expect(getHtCore().find('tr:last td:last').html()).toEqual('a3');
    });
    it('should remove one row from end if no parameters are given', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('remove_row');
      expect(countRows()).toEqual(4);
      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('d1');
    });
    it('should remove amount of rows from end if index parameter is not given', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('remove_row', null, 3);
      expect(countRows()).toEqual(2);
      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('b1');
    });
    it('should remove rows from table with fixedRows', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3']],
        fixedRowsTop: 1,
        minSpareRows: 0
      });
      alter('remove_row', 1);
      expect(countRows()).toEqual(1);
    });
    it('should remove all rows from table with fixedRows', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3']],
        fixedRowsTop: 1,
        minSpareRows: 0
      });
      alter('remove_row', 1);
      alter('remove_row', 1);
      expect(countRows()).toEqual(0);
    });
    it('should remove row\'s cellProperties', function () {
      handsontable({
        startCols: 1,
        startRows: 3
      });
      getCellMeta(0, 0).someValue = [0, 0];
      getCellMeta(1, 0).someValue = [1, 0];
      getCellMeta(2, 0).someValue = [2, 0];
      alter('remove_row', 0);
      expect(getCellMeta(0, 0).someValue).toEqual([1, 0]);
      expect(getCellMeta(1, 0).someValue).toEqual([2, 0]);
    });
    it('should fire callback on remove row', function () {
      var outputBefore;
      var outputAfter;
      handsontable({
        minRows: 5,
        data: arrayOfNestedObjects(),
        columns: [{
          data: 'id'
        }, {
          data: 'name.first'
        }],
        beforeRemoveRow: function beforeRemoveRow(index, amount, removedRows, source) {
          outputBefore = [index, amount, removedRows, source];
        },
        afterRemoveRow: function afterRemoveRow(index, amount, removedRows, source) {
          outputAfter = [index, amount, removedRows, source];
        }
      });
      alter('remove_row', 1, 2, 'customSource');
      expect(outputBefore).toEqual([1, 2, [1, 2], 'customSource']);
      expect(outputAfter).toEqual([1, 2, [1, 2], 'customSource']);
    });
    it('should decrement the number of fixed rows, if a fix row is removed', function () {
      var hot = handsontable({
        startCols: 1,
        startRows: 3,
        fixedRowsTop: 4
      });
      alter('remove_row', 1, 1);
      expect(hot.getSettings().fixedRowsTop).toEqual(3);
      alter('remove_row', 1, 2);
      expect(hot.getSettings().fixedRowsTop).toEqual(1);
    });
    it('should shift the cell meta according to the new row layout', function () {
      handsontable({
        startCols: 3,
        startRows: 4
      });
      setCellMeta(2, 1, 'className', 'test');
      alter('remove_row', 1, 1);
      expect(getCellMeta(1, 1).className).toEqual('test');
    });
    it('should shift the cell meta according to the new rows (>1) layout', function () {
      handsontable({
        startCols: 3,
        startRows: 4
      });
      setCellMeta(2, 1, 'className', 'test');
      alter('remove_row', 0, 2);
      expect(getCellMeta(0, 1).className).toEqual('test');
    });
  });
  describe('remove column', function () {
    describe('multiple items at once', function () {
      it('should remove columns when index groups are passed in ascending order', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(5, 15)
        }); // [[columnVisualIndex, amountColumnsToRemove] ...]

        alter('remove_col', [[1, 3], [5, 1], [7, 3], [11, 2]]); // It remove columns as follow:
        //     1--------3      5-1     7--------3      11---2
        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1
        //
        // Result: A1, E1, G1, K1, N1, O1

        expect(getDataAtRow(0)).toEqual(['A1', 'E1', 'G1', 'K1', 'N1', 'O1']);
        expect(getData()[0].length).toBe(6);
      });
      it('should remove columns when index groups are passed in descending order', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(5, 15)
        }); // [[columnVisualIndex, amountColumnsToRemove] ...]

        alter('remove_col', [[11, 2], [7, 3], [5, 1], [1, 3]]); // It remove columns as follow:
        //     1--------3      5-1     7--------3      11---2
        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1
        //
        // Result: A1, E1, G1, K1, N1, O1

        expect(getDataAtRow(0)).toEqual(['A1', 'E1', 'G1', 'K1', 'N1', 'O1']);
        expect(getData()[0].length).toBe(6);
      });
      it('should remove columns when index groups are passed as intersecting values', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(5, 15)
        }); // [[columnVisualIndex, amountColumnsToRemove] ...]

        alter('remove_col', [[1, 3], [4, 2], [5, 5], [11, 1]]); // It remove columns as follow:
        //     1--------------------------------9     11-1
        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1
        //
        // Result: A1, K1, M1, N1, O1

        expect(getDataAtRow(0)).toEqual(['A1', 'K1', 'M1', 'N1', 'O1']);
        expect(getData()[0].length).toBe(5);
      });
      it('should remove columns when index groups are passed as intersecting values (the second scenario)', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(5, 15)
        }); // [[columnVisualIndex, amountColumnsToRemove] ...]

        alter('remove_col', [[1, 3], [2, 1], [5, 2]]); // It remove columns as follow:
        //     1--------3      5----2
        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1
        //
        // Result: A1, E1, H1

        expect(getDataAtRow(0)).toEqual(['A1', 'E1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1']);
        expect(getData()[0].length).toBe(10);
      });
      it('should remove columns when index groups are passed as intersecting values (placed randomly)', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(5, 15)
        }); // [[columnVisualIndex, amountColumnsToRemove] ...]

        alter('remove_col', [[4, 2], [11, 1], [5, 5], [1, 3]]); // It remove columns as follow:
        //     1--------------------------------9     11-1
        // A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1
        //
        // Result: A1, K1, M1, N1, O1

        expect(getDataAtRow(0)).toEqual(['A1', 'K1', 'M1', 'N1', 'O1']);
        expect(getData()[0].length).toBe(5);
      });
    });
    it('should not remove column if amount is zero', function () {
      handsontable({
        data: arrayOfArrays()
      });
      var countedColumns = countCols();
      alter('remove_col', 1, 0);
      expect(countCols()).toBe(countedColumns);
    });
    it('should remove one column if amount parameter is empty', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('remove_col', 1);
      expect(countCols()).toEqual(7);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a');
      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('c');
    });
    it('should remove as many columns as given in the amount parameter', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('remove_col', 1, 3);
      expect(countCols()).toEqual(5);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a');
      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('e');
    });
    it('should not remove more columns that exist', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('remove_col', 6, 3);
      expect(countCols()).toEqual(6);
      expect(spec().$container.find('tr:eq(1) td:last').html()).toEqual('f');
    });
    it('should remove one column from end if no parameters are given', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('remove_col');
      expect(countCols()).toEqual(7);
      expect(spec().$container.find('tr:eq(1) td:last').html()).toEqual('g');
    });
    it('should remove amount of columns from end if index parameter is not given', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('remove_col', null, 3);
      expect(countCols()).toEqual(5);
      expect(spec().$container.find('tr:eq(1) td:last').html()).toEqual('e');
    });
    it('should fire beforeRemoveCol event before removing col', function () {
      var onBeforeRemoveCol = jasmine.createSpy('onBeforeRemoveCol');
      handsontable({
        beforeRemoveCol: onBeforeRemoveCol
      });
      alter('remove_col');
      expect(onBeforeRemoveCol).toHaveBeenCalledWith(countCols(), 1, [4], undefined, undefined, undefined);
    });
    it('should not remove column if removing has been canceled by beforeRemoveCol event handler', function () {
      var onBeforeRemoveCol = jasmine.createSpy('onBeforeRemoveCol');
      onBeforeRemoveCol.and.callFake(function () {
        return false;
      });
      handsontable({
        beforeRemoveCol: onBeforeRemoveCol
      });
      expect(countCols()).toEqual(5);
      alter('remove_col');
      expect(countCols()).toEqual(5);
    });
    it('should fire callback on remove col', function () {
      var outputBefore;
      var outputAfter;
      handsontable({
        minRows: 5,
        data: arrayOfArrays(),
        beforeRemoveCol: function beforeRemoveCol(index, amount, removedCols, source) {
          outputBefore = [index, amount, removedCols, source];
        },
        afterRemoveCol: function afterRemoveCol(index, amount, removedCols, source) {
          outputAfter = [index, amount, removedCols, source];
        }
      });
      alter('remove_col', 1, 2, 'customSource');
      expect(outputBefore).toEqual([1, 2, [1, 2], 'customSource']);
      expect(outputAfter).toEqual([1, 2, [1, 2], 'customSource']);
    });
    it('should remove column\'s properties', function () {
      handsontable({
        startCols: 3,
        startRows: 1
      });
      getCellMeta(0, 0).someValue = [0, 0];
      getCellMeta(0, 1).someValue = [0, 1];
      getCellMeta(0, 2).someValue = [0, 2];
      alter('remove_col', 0);
      expect(getCellMeta(0, 0).someValue).toEqual([0, 1]);
      expect(getCellMeta(0, 1).someValue).toEqual([0, 2]);
    });
    it('should remove column when not all rows are visible in the viewport', function () {
      spec().$container.css({
        height: '100',
        overflow: 'auto'
      });
      handsontable({
        startCols: 3,
        startRows: 20
      });
      expect(getHtCore().find('tbody tr').length).toBeLessThan(20);
      expect(countCols()).toEqual(3);
      alter('remove_col', 0);
      expect(countCols()).toEqual(2);
    });
    it('should not remove column header together with the column, if headers were NOT specified explicitly', function () {
      handsontable({
        startCols: 3,
        startRows: 2,
        colHeaders: true
      });
      expect(getColHeader()).toEqual(['A', 'B', 'C']);
      expect(countCols()).toEqual(3);
      alter('remove_col', 1);
      expect(countCols()).toEqual(2);
      expect(getColHeader()).toEqual(['A', 'B']);
    });
    it('should remove column header together with the column, if headers were specified explicitly', function () {
      handsontable({
        startCols: 3,
        startRows: 2,
        colHeaders: ['Header0', 'Header1', 'Header2']
      });
      expect(getColHeader()).toEqual(['Header0', 'Header1', 'Header2']);
      expect(countCols()).toEqual(3);
      alter('remove_col', 1);
      expect(countCols()).toEqual(2);
      expect(getColHeader()).toEqual(['Header0', 'Header2']);
    });
    it('should decrement the number of fixed columns, if a fix column is removed', function () {
      var hot = handsontable({
        startCols: 1,
        startRows: 3,
        fixedColumnsLeft: 4
      });
      alter('remove_col', 1, 1);
      expect(hot.getSettings().fixedColumnsLeft).toEqual(3);
      alter('remove_col', 1, 2);
      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);
    });
    it('should shift the cell meta according to the new column layout', function () {
      handsontable({
        startCols: 4,
        startRows: 3
      });
      setCellMeta(1, 2, 'className', 'test');
      alter('remove_col', 1, 1);
      expect(getCellMeta(1, 1).className).toEqual('test');
    });
    it('should shift the cell meta according to the new columns (>1) layout', function () {
      handsontable({
        startCols: 4,
        startRows: 3
      });
      setCellMeta(1, 2, 'className', 'test');
      alter('remove_col', 0, 2);
      expect(getCellMeta(1, 0).className).toEqual('test');
    });
  });
  describe('insert row', function () {
    it('should insert row at given index', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('insert_row', 1);
      expect(countRows()).toEqual(6);
      expect(spec().$container.find('tr:eq(2) td:eq(0)').html()).toEqual('b1');
    });
    it('should fire the beforeCreateRow hook before creating a row', function () {
      var onBeforeCreateRow = jasmine.createSpy('beforeCreateRow');
      handsontable({
        data: arrayOfNestedObjects(),
        columns: [{
          data: 'id'
        }, {
          data: 'name.first'
        }],
        beforeCreateRow: onBeforeCreateRow
      });
      alter('insert_row', 2, 1, 'customSource');
      expect(onBeforeCreateRow).toHaveBeenCalledWith(2, 1, 'customSource', void 0, void 0, void 0);
    });
    it('should not create row if removing has been canceled by beforeCreateRow hook handler', function () {
      var beforeCreateRow = jasmine.createSpy('beforeCreateRow');
      beforeCreateRow.and.callFake(function () {
        return false;
      });
      handsontable({
        data: arrayOfNestedObjects(),
        columns: [{
          data: 'id'
        }, {
          data: 'name.first'
        }],
        beforeCreateRow: beforeCreateRow
      });
      expect(countRows()).toEqual(3);
      alter('insert_row');
      expect(countRows()).toEqual(3);
    });
    it('should insert row at the end if index is not given', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('insert_row');
      expect(countRows()).toEqual(6);
      expect(getHtCore().find('tr:eq(4) td:eq(0)').html()).toEqual('e1');
      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('');
    });
    it('should not change cellMeta after executing `insert row` without parameters (#3581, #3989, #2114)', function () {
      var greenRenderer = function greenRenderer(instance, td) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        Handsontable.renderers.TextRenderer.apply(this, [instance, td].concat(args));
        td.style.backgroundColor = 'green';
      };

      handsontable({
        data: [[0, 'a', true], [1, 'b', false], [2, 'c', true], [3, 'd', true]],
        cell: [{
          row: 0,
          col: 0,
          renderer: greenRenderer,
          type: 'text',
          readOnly: true
        }],
        columns: [{
          type: 'numeric'
        }, {
          type: 'text'
        }, {
          type: 'checkbox'
        }]
      });
      alter('insert_row');
      expect(getCellMeta(1, 0).renderer).not.toBe(greenRenderer);
      expect(getCellMeta(1, 0).readOnly).toBe(false);
      expect(getCellMeta(4, 0).renderer).not.toBe(greenRenderer);
      expect(getCellMeta(4, 0).readOnly).toBe(false);
    });
    it('should add new row which respect defined type of cells after executing `insert_row`', function () {
      handsontable({
        data: [[0, 'a', true], [1, 'b', false], [2, 'c', true], [3, 'd', true]],
        cell: [{
          row: 0,
          col: 0,
          type: 'text'
        }],
        columns: [{
          type: 'numeric'
        }, {
          type: 'text'
        }, {
          type: 'checkbox'
        }]
      });
      alter('insert_row'); // added row

      expect(getCellMeta(4, 0).type).toEqual('numeric');
      expect(getDataAtCell(4, 0)).toEqual(null);
      expect(getCellMeta(4, 2).type).toEqual('checkbox');
      expect(getDataAtCell(4, 2)).toEqual(null);
    });
    it('should insert the amount of rows at given index', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('insert_row', 1, 3);
      expect(countRows()).toEqual(8);
      expect(spec().$container.find('tr:eq(1) td:eq(0)').html()).toEqual('');
      expect(spec().$container.find('tr:eq(4) td:eq(0)').html()).toEqual('b1');
    });
    it('should insert the amount of rows at the end if index is not given', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']]
      });
      alter('insert_row', null, 3);
      expect(countRows()).toEqual(8);
      expect(getHtCore().find('tr:eq(4) td:eq(0)').html()).toEqual('e1');
      expect(getHtCore().find('tr:eq(5) td:eq(0)').html()).toEqual('');
      expect(getHtCore().find('tr:eq(6) td:eq(0)').html()).toEqual('');
      expect(getHtCore().find('tr:eq(7) td:eq(0)').html()).toEqual('');
    });
    it('should insert not more rows than maxRows', function () {
      handsontable({
        startRows: 5,
        maxRows: 7
      });
      alter('insert_row', 1);
      alter('insert_row', 1);
      alter('insert_row', 1);
      expect(countRows()).toEqual(7);
    });
    it('when amount parameter is used, should not insert more rows than allowed by maxRows', function () {
      handsontable({
        data: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3'], ['d1', 'd2', 'd3'], ['e1', 'e2', 'e3']],
        maxRows: 10
      });
      alter('insert_row', 1, 10);
      expect(countRows()).toEqual(10);
      expect(spec().$container.find('tr:eq(6) td:eq(0)').html()).toEqual('b1');
    });
    it('should not add more source rows than defined in maxRows when trimming rows using the modifyRow hook', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 4),
        modifyRow: function modifyRow(row) {
          return [8, 9].indexOf(row) > -1 ? null : row;
        },
        maxRows: 10
      });
      expect(hot.countRows()).toEqual(8);
      hot.populateFromArray(7, 0, [['a'], ['b'], ['c']]);
      expect(hot.countSourceRows()).toEqual(10);
      expect(hot.getDataAtCell(7, 0)).toEqual('a');
    });
    it('should fire callback on create row', function () {
      var outputBefore;
      var outputAfter;
      handsontable({
        minRows: 5,
        data: arrayOfNestedObjects(),
        columns: [{
          data: 'id'
        }, {
          data: 'name.first'
        }],
        beforeCreateRow: function beforeCreateRow(index, amount, source) {
          outputBefore = [index, amount, source];
        },
        afterCreateRow: function afterCreateRow(index, amount, source) {
          outputAfter = [index, amount, source];
        }
      });
      alter('insert_row', 3, 1, 'customSource');
      expect(outputBefore).toEqual([3, 1, 'customSource']);
      expect(outputAfter).toEqual([3, 1, 'customSource']);
    });
    it('should keep the single-cell selection in the same position as before inserting the row', function () {
      handsontable({
        minRows: 5,
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      selectCell(2, 2);
      alter('insert_row', 2);
      var selected = getSelected();
      expect(selected[0][0]).toBe(3);
      expect(selected[0][2]).toBe(3);
      expect(selected.length).toBe(1);
    });
    it('should shift the cell meta according to the new row layout', function () {
      handsontable({
        startCols: 4,
        startRows: 3
      });
      setCellMeta(2, 1, 'className', 'test');
      alter('insert_row', 1, 1);
      expect(getCellMeta(3, 1).className).toEqual('test');
    });
    it('should shift the cell meta according to the new rows (>1) layout', function () {
      handsontable({
        startCols: 4,
        startRows: 3
      });
      setCellMeta(2, 1, 'className', 'test');
      alter('insert_row', 0, 3);
      expect(getCellMeta(5, 1).className).toEqual('test');
    });
  });
  describe('insert column', function () {
    it('should insert column at given index', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('insert_col', 1);
      expect(countCols()).toEqual(9);
      expect(spec().$container.find('tr:eq(1) td:eq(2)').html()).toEqual('b');
    });
    it('should insert column at the end if index is not given', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('insert_col');
      expect(countCols()).toEqual(9);
      expect(spec().$container.find('tr:eq(1) td:eq(7)').html()).toEqual('h');
    });
    it('should insert the amount of columns at given index', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('insert_col', 1, 3);
      expect(countCols()).toEqual(11);
      expect(spec().$container.find('tr:eq(1) td:eq(4)').html()).toEqual('b');
    });
    it('should insert the amount of columns at the end if index is not given', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]
      });
      alter('insert_col', null, 3);
      expect(countCols()).toEqual(11);
      expect(spec().$container.find('tr:eq(1) td:eq(7)').html()).toEqual('h');
      expect(spec().$container.find('tr:eq(1) td:eq(8)').html()).toEqual('');
      expect(spec().$container.find('tr:eq(1) td:eq(9)').html()).toEqual('');
      expect(spec().$container.find('tr:eq(1) td:eq(10)').html()).toEqual('');
    });
    it('should insert not more cols than maxCols', function () {
      handsontable({
        startCols: 5,
        maxCols: 7
      });
      alter('insert_col', 1);
      alter('insert_col', 1);
      alter('insert_col', 1);
      expect(countCols()).toEqual(7);
    });
    it('should not insert more columns than allowed by maxCols, when amount parameter is used', function () {
      handsontable({
        data: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']],
        maxCols: 10
      });
      alter('insert_col', 1, 10);
      expect(countCols()).toEqual(10);
      expect(spec().$container.find('tr:eq(1) td:eq(1)').html()).toEqual('');
      expect(spec().$container.find('tr:eq(1) td:eq(2)').html()).toEqual('');
      expect(spec().$container.find('tr:eq(1) td:eq(3)').html()).toEqual('b');
    });
    it('should fire callback on create col', function () {
      var outputBefore;
      var outputAfter;
      handsontable({
        minRows: 5,
        data: arrayOfArrays(),
        beforeCreateCol: function beforeCreateCol(index, amount, source) {
          outputBefore = [index, amount, source];
        },
        afterCreateCol: function afterCreateCol(index, amount, source) {
          outputAfter = [index, amount, source];
        }
      });
      alter('insert_col', 2, 1, 'customSource');
      expect(outputBefore).toEqual([2, 1, 'customSource']);
      expect(outputAfter).toEqual([2, 1, 'customSource']);
    });
    it('should not create column header together with the column, if headers were NOT specified explicitly', function () {
      handsontable({
        startCols: 3,
        startRows: 2,
        colHeaders: true
      });
      expect(getColHeader()).toEqual(['A', 'B', 'C']);
      expect(countCols()).toEqual(3);
      alter('insert_col', 1);
      expect(countCols()).toEqual(4);
      expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);
    });
    it('should create column header together with the column, if headers were specified explicitly', function () {
      handsontable({
        startCols: 3,
        startRows: 2,
        colHeaders: ['Header0', 'Header1', 'Header2']
      });
      expect(getColHeader()).toEqual(['Header0', 'Header1', 'Header2']);
      expect(countCols()).toEqual(3);
      alter('insert_col', 1);
      expect(countCols()).toEqual(4);
      expect(getColHeader()).toEqual(['Header0', 'B', 'Header1', 'Header2']);
    });
    it('should stretch the table after adding another column (if stretching is set to \'all\')', function () {
      spec().$container.css({
        width: 500
      });
      var hot = handsontable({
        startCols: 5,
        startRows: 10,
        stretchH: 'all'
      });
      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);
      alter('insert_col', null, 1);
      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);
      alter('insert_col', null, 1);
      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);
    });
    it('should shift the cell meta according to the new column layout', function () {
      handsontable({
        startCols: 4,
        startRows: 3
      });
      setCellMeta(1, 2, 'className', 'test');
      alter('insert_col', 1, 1);
      expect(getCellMeta(1, 3).className).toEqual('test');
    });
    it('should shift the cell meta according to the new columns (>1) layout', function () {
      handsontable({
        startCols: 4,
        startRows: 3
      });
      setCellMeta(1, 2, 'className', 'test');
      alter('insert_col', 0, 3);
      expect(getCellMeta(1, 5).className).toEqual('test');
    });
  });
});

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_beforeKeyDown', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should run beforeKeyDown hook', function () {
    var called = false;
    handsontable({
      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
      beforeKeyDown: function beforeKeyDown() {
        called = true;
      }
    });
    selectCell(0, 0);
    keyDown('arrow_right');
    expect(called).toEqual(true);
  });
  it('should run afterDocumentKeyDown and beforeKeyDown hook', function () {
    var called = [];
    handsontable({
      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
      afterDocumentKeyDown: function afterDocumentKeyDown() {
        called.push('afterDocumentKeyDown');
      },
      beforeKeyDown: function beforeKeyDown() {
        called.push('beforeKeyDown');
      }
    });
    selectCell(0, 0);
    keyDown('arrow_right');
    expect(called).toEqual(['afterDocumentKeyDown', 'beforeKeyDown']);
  });
  it('should prevent hook from running default action', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
      beforeKeyDown: function beforeKeyDown(event) {
        serveImmediatePropagation(event).stopImmediatePropagation();
      }
    });
    selectCell(0, 0);
    keyDown('arrow_right');
    expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    expect(getSelected()).not.toEqual([[0, 1, 0, 1]]);
  });
  it('should overwrite default behavior of delete key, but not this of right arrow', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
      beforeKeyDown: function beforeKeyDown(event) {
        if (event.keyCode === 8) {
          event.stopImmediatePropagation();
          getInstance().alter('insert_row', 1, 1);
        }
      }
    });
    selectCell(0, 0);
    keyDown('backspace');
    keyDown('arrow_right');
    expect(getData().length).toEqual(3);
    expect(getSelected()).toEqual([[0, 1, 0, 1]]);
  });
  it('should run beforeKeyDown hook in cell editor handler', function () {
    var called = 0;
    handsontable({
      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
      beforeKeyDown: function beforeKeyDown() {
        called += 1;
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    keyDown('enter');
    expect(called).toEqual(2);
  });
});

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_beforechange', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('this.rootElement should point to handsontable rootElement', function () {
    var output = null;
    handsontable({
      beforeChange: function beforeChange() {
        output = this.rootElement;
      }
    });
    setDataAtCell(0, 0, 'test');
    expect(output).toEqual(spec().$container[0]);
  });
  it('should remove change from stack', function () {
    var output = null;
    handsontable({
      data: [['a', 'b'], ['c', 'd']],
      beforeChange: function beforeChange(changes) {
        changes[1] = null;
      },
      afterChange: function afterChange(changes) {
        output = changes;
      }
    });
    setDataAtCell([[0, 0, 'test'], [1, 0, 'test'], [1, 1, 'test']]);
    expect(getDataAtCell(0, 0)).toEqual('test');
    expect(getDataAtCell(1, 0)).toEqual('c');
    expect(getDataAtCell(1, 1)).toEqual('test');
    expect(output).toEqual([[0, 0, 'a', 'test'], [1, 1, 'd', 'test']]);
  });
  it('should drop all changes when beforeChange return false', function () {
    handsontable({
      data: [['a', 'b'], ['c', 'd']],
      beforeChange: function beforeChange() {
        return false;
      }
    });
    setDataAtCell([[0, 0, 'test'], [1, 0, 'test'], [1, 1, 'test']]);
    expect(getDataAtCell(0, 0)).toEqual('a');
    expect(getDataAtCell(1, 0)).toEqual('c');
    expect(getDataAtCell(1, 1)).toEqual('d');
  });

  function beforechangeOnKeyFactory(keyCode) {
    return function () {
      var called = false;
      handsontable({
        beforeChange: function beforeChange(changes) {
          if (changes[0][2] === 'test' && changes[0][3] === '') {
            called = true;
          }
        }
      });
      setDataAtCell(0, 0, 'test');
      selectCell(0, 0);
      keyDown(keyCode);
      expect(called).toEqual(true);
    };
  }

  it('should be called on Delete key', beforechangeOnKeyFactory(46)); // 46 = Delete key

  it('should be called on Backspace key', beforechangeOnKeyFactory(8)); // 8 = Backspace key
});

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_count', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    destroy();
    this.$container.remove();
  });
  describe('countVisibleRows', function () {
    it('should return number of visible rows', function () {
      var instance = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        height: 100,
        width: 600
      });
      expect(instance.countVisibleRows()).toEqual(4);
    });
    it('should return -1 if table is not rendered', function () {
      spec().$container.remove();
      var instance = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        width: 100
      });
      expect(instance.countVisibleRows()).toEqual(-1);
    });
  });
  describe('countRenderedRows', function () {
    it('should return number of rendered rows', function () {
      var instance = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        height: 100,
        viewportRowRenderingOffset: 0
      });
      expect(instance.countRenderedRows()).toEqual(5);
    });
    it('should return number of rendered rows, including rows rendered becausee of viewportRowRenderingOffset', function () {
      var instance = handsontable({
        data: Handsontable.helper.createSpreadsheetData(50, 10),
        height: 100,
        viewportRowRenderingOffset: 20
      });
      expect(instance.countRenderedRows()).toEqual(25);
    });
    it('should return -1 if table is not rendered', function () {
      spec().$container.remove();
      var instance = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        width: 100
      });
      expect(instance.countRenderedRows()).toEqual(-1);
    });
  });
  describe('countVisibleCols', function () {
    it('should return number of visible columns', function () {
      var instance = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        width: 100
      });
      expect(instance.countVisibleCols()).toEqual(10);
    });
    it('should return -1 if table is not rendered', function () {
      spec().$container.remove();
      var instance = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        width: 100
      });
      expect(instance.countVisibleCols()).toEqual(-1);
    });
  });
});

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-multi-spaces, array-bracket-spacing */
describe('Core_countEmptyCols', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should count empty columns properly for empty data set', function () {
    handsontable({
      data: []
    });
    expect(countEmptyCols()).toBe(0);
  });
  it('should count empty columns properly when using a simple data set', function () {
    handsontable({
      data: [[null, null, 1, null, null, null], [4, null, null, null, null, null], [null, null, null, null, null, null], [3, null, null, null, null, null], [1, null, null, null, null, null], [null, null, null, null, 1, null]]
    });
    expect(countEmptyCols()).toBe(3);
  });
  it('should count empty columns at the end of the data source properly (optional `ending` parameter)', function () {
    handsontable({
      data: [[null, null, 1, null, null, null], [4, null, null, null, null, null], [null, null, null, null, null, null], [3, null, null, null, null, null], [1, null, null, null, null, null], [null, null, null, null, 1, null]]
    });
    expect(countEmptyCols(true)).toBe(1);
  });
  it('should count empty columns properly when using `minSpareCols` option', function () {
    handsontable({
      data: [[null, null, 1, null, null], [4, null, null, null, null], [null, null, null, null, null], [3, null, null, null, null], [1, null, null, null, null], [null, null, null, null, 1]],
      minSpareCols: 2
    });
    expect(countEmptyCols()).toBe(4);
  });
  it('should count empty columns properly when translating columns in the viewport', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      modifyCol: function modifyCol(row) {
        return row + 2;
      }
    });
    expect(countEmptyCols()).toBe(2);
  });
  it('should count empty columns properly when translating columns outside the viewport', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(100, 100),
      modifyCol: function modifyCol(column) {
        return column + 5;
      }
    });
    expect(countEmptyCols()).toBe(5);
  });
});

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_countEmptyRows', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should count empty rows properly when using a simple data set', function () {
    handsontable({
      data: [[null], [4], [null], [3], [1], [null]]
    });
    expect(countEmptyRows()).toBe(3);
  });
  it('should count empty rows at the end of the data source properly (optional `ending` parameter)', function () {
    handsontable({
      data: [[null], [4], [null], [3], [1], [null], [null], [null], [null], [null]]
    });
    expect(countEmptyRows(true)).toBe(5);
  });
  it('should count empty rows properly when using `minSpareRows` option', function () {
    handsontable({
      data: [[null], [4], [null], [3], [1]],
      minSpareRows: 2
    });
    expect(countEmptyRows()).toBe(4);
  });
  it('should count empty rows properly when translating rows in the viewport', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      modifyRow: function modifyRow(row) {
        return row + 2;
      }
    });
    expect(countEmptyRows()).toBe(2);
  });
  it('should count empty rows properly when translating rows below the viewport', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(100, 100),
      modifyRow: function modifyRow(row) {
        return row + 5;
      }
    });
    expect(countEmptyRows()).toBe(5);
  });
  it('should count empty rows properly when rows was trimmed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 10),
      modifyRow: function modifyRow(row) {
        if (row === 9 || row === 8) {
          return null;
        }

        if (row >= 2) {
          return row + 2;
        }

        return row;
      }
    });
    expect(countEmptyRows()).toBe(0);
  });
});

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_dataSchema', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as object)', function () {
    var schema = {
      id: null,
      name: {
        first: null,
        last: null
      },
      cars: [{
        brand: null
      }]
    };
    var hot = handsontable({
      data: [],
      dataSchema: schema,
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name'],
      columns: [{
        data: 'id'
      }, {
        data: 'name.first'
      }, {
        data: 'name.last'
      }],
      minSpareRows: 1
    });
    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));
  });
  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as object) when columns is a function', function () {
    var schema = {
      id: null,
      name: {
        first: null,
        last: null
      },
      cars: [{
        brand: null
      }]
    };
    var hot = handsontable({
      data: [],
      dataSchema: schema,
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name'],
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'name.first';
        } else if (column === 2) {
          colMeta.data = 'name.last';
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      minSpareRows: 1
    });
    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));
  });
  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as function)', function () {
    var schema = {
      id: null,
      name: {
        first: null,
        last: null
      },
      cars: [{
        brand: null
      }]
    };
    var hot = handsontable({
      data: [],
      dataSchema: function dataSchema() {
        return schema;
      },
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name'],
      columns: [{
        data: 'id'
      }, {
        data: 'name.first'
      }, {
        data: 'name.last'
      }],
      minSpareRows: 1
    });
    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));
  });
  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as function) when columns is a function', function () {
    var schema = {
      id: null,
      name: {
        first: null,
        last: null
      },
      cars: [{
        brand: null
      }]
    };
    var hot = handsontable({
      data: [],
      dataSchema: function dataSchema() {
        return schema;
      },
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name'],
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'name.first';
        } else if (column === 2) {
          colMeta.data = 'name.last';
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      minSpareRows: 1
    });
    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));
  });
  it('should be equal to `hot.getSchema()` when dataSchema is generated based on data structure', function () {
    var hot = handsontable({
      data: [{
        id: 1,
        name: {
          first: 'Alan',
          last: 'Pakoli'
        },
        cars: [{
          brand: 'Ford'
        }]
      }],
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name'],
      columns: [{
        data: 'id'
      }, {
        data: 'name.first'
      }, {
        data: 'name.last'
      }],
      minSpareRows: 1
    });
    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify({
      id: null,
      name: {
        first: null,
        last: null
      },
      cars: [{
        brand: null
      }]
    }));
  });
  it('should be equal to `hot.getSchema()` when dataSchema is generated based on data structure when columns is a function', function () {
    var hot = handsontable({
      data: [{
        id: 1,
        name: {
          first: 'Alan',
          last: 'Pakoli'
        },
        cars: [{
          brand: 'Ford'
        }]
      }],
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name'],
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'name.first';
        } else if (column === 2) {
          colMeta.data = 'name.last';
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      minSpareRows: 1
    });
    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify({
      id: null,
      name: {
        first: null,
        last: null
      },
      cars: [{
        brand: null
      }]
    }));
  });
  it('should create new row from dataSchema', function () {
    handsontable({
      data: [],
      dataSchema: {
        id: null,
        name: {
          first: null,
          last: null
        },
        address: null
      },
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
      columns: [{
        data: 'id'
      }, {
        data: 'name.first'
      }, {
        data: 'name.last'
      }, {
        data: 'address'
      }],
      minSpareRows: 1
    });
    selectCell(0, 1);
    keyDownUp('enter');
    keyProxy().val('Ted');
    keyDownUp('enter');
    expect(getData()[0][1]).toEqual('Ted');
    expect(getSourceData()[0].name.first).toEqual('Ted');
  });
  it('should create new row from dataSchema when columns is a function', function () {
    handsontable({
      data: [],
      dataSchema: {
        id: null,
        name: {
          first: null,
          last: null
        },
        address: null
      },
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'name.first';
        } else if (column === 2) {
          colMeta.data = 'name.last';
        } else if (column === 3) {
          colMeta.data = 'address';
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      minSpareRows: 1
    });
    selectCell(0, 1);
    keyDownUp('enter');
    keyProxy().val('Ted');
    keyDownUp('enter');
    expect(getData()[0][1]).toEqual('Ted');
    expect(getSourceData()[0].name.first).toEqual('Ted');
  });
  it('should create new row from dataSchema (functional)', function () {
    handsontable({
      data: [],
      dataSchema: function dataSchema(index) {
        return {
          id: 1000 + index,
          name: {
            first: null,
            last: null
          },
          address: null
        };
      },
      isEmptyRow: function isEmptyRow(r) {
        var row = this.getSourceData()[r];
        return (row.name.first === null || row.name.first === '') && (row.name.last === null || row.name.last === '') && (row.address === null || row.address === '');
      },
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
      columns: [{
        data: 'id'
      }, {
        data: 'name.first'
      }, {
        data: 'name.last'
      }, {
        data: 'address'
      }],
      minSpareRows: 1
    });
    selectCell(4, 1);
    expect(countRows()).toEqual(5);
    keyDownUp('enter');
    keyProxy().val('Ted'); // need it in next frame as long as HT is rendered in async

    keyDownUp('enter'); // need it in next frame as long as HT is rendered in async

    keyDownUp('enter');
    expect(getSourceData()[4].name.first).toEqual('Ted');
    expect(getSourceData()[4].id).toEqual(1004);
    expect(getData()[4][1]).toEqual('Ted');
    expect(getData()[4][0]).toEqual(1004);
    expect(countRows()).toEqual(6); // row should be added by keepEmptyRows
  });
  it('should create new row from dataSchema (functional) when columns is a function', function () {
    handsontable({
      data: [],
      dataSchema: function dataSchema(index) {
        return {
          id: 1000 + index,
          name: {
            first: null,
            last: null
          },
          address: null
        };
      },
      isEmptyRow: function isEmptyRow(r) {
        var row = this.getSourceData()[r];
        return (row.name.first === null || row.name.first === '') && (row.name.last === null || row.name.last === '') && (row.address === null || row.address === '');
      },
      minRows: 5,
      minCols: 4,
      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'name.first';
        } else if (column === 2) {
          colMeta.data = 'name.last';
        } else if (column === 3) {
          colMeta.data = 'address';
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      minSpareRows: 1
    });
    selectCell(4, 1);
    expect(countRows()).toEqual(5);
    keyDownUp('enter');
    keyProxy().val('Ted'); // need it in next frame as long as HT is rendered in async

    keyDownUp('enter'); // need it in next frame as long as HT is rendered in async

    keyDownUp('enter');
    expect(getSourceData()[4].name.first).toEqual('Ted');
    expect(getSourceData()[4].id).toEqual(1004);
    expect(getData()[4][1]).toEqual('Ted');
    expect(getData()[4][0]).toEqual(1004);
    expect(countRows()).toEqual(6); // row should be added by keepEmptyRows
  });
  it('should translate prop to col, when prop is a function', function () {
    var idAccessor = createAccessorForProperty('id');
    var nameAccessor = createAccessorForProperty('name');
    hot = handsontable({
      data: [Model({
        id: 1,
        name: 'Tom'
      }), Model({
        id: 2,
        name: 'Hanna'
      }), Model({
        id: 3,
        name: 'Jerry'
      })],
      dataSchema: Model,
      columns: [{
        data: idAccessor
      }, {
        data: nameAccessor
      }]
    });
    expect(hot.propToCol(idAccessor)).toEqual(0);
    expect(hot.propToCol(nameAccessor)).toEqual(1);
  });
  it('should translate prop to col, when prop and columns is a function', function () {
    var idAccessor = createAccessorForProperty('id');
    var nameAccessor = createAccessorForProperty('name');
    hot = handsontable({
      data: [Model({
        id: 1,
        name: 'Tom'
      }), Model({
        id: 2,
        name: 'Hanna'
      }), Model({
        id: 3,
        name: 'Jerry'
      })],
      dataSchema: Model,
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = idAccessor;
        } else if (column === 1) {
          colMeta.data = nameAccessor;
        } else {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(hot.propToCol(idAccessor)).toEqual(0);
    expect(hot.propToCol(nameAccessor)).toEqual(1);
  });
  it('should create new row data matched to dataSchema (data type as `array`)', function () {
    var spy = jasmine.createSpy();
    var hot = handsontable({
      data: [[{
        id: 1
      }]],
      dataSchema: [{
        id: null
      }],
      columns: [{
        data: '0',
        renderer: spy
      }],
      autoColumnSize: false,
      autoRowSize: false
    });
    expect(spy.calls.count()).toBe(1);
    expect(spy.calls.argsFor(0)[5]).toEqual({
      id: 1
    });
    spy.calls.reset();
    hot.alter('insert_row', 0);
    expect(spy.calls.count()).toBe(2);
    expect(spy.calls.argsFor(0)[5]).toEqual({
      id: null
    });
    expect(spy.calls.argsFor(1)[5]).toEqual({
      id: 1
    });
  });
  it('should create new row data matched to dataSchema (data type as `array`) when columns is a function', function () {
    var spy = jasmine.createSpy();
    var hot = handsontable({
      data: [[{
        id: 1
      }]],
      dataSchema: [{
        id: null
      }],
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = '0';
          colMeta.renderer = spy;
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      autoColumnSize: false,
      autoRowSize: false
    });
    expect(spy.calls.count()).toBe(1);
    expect(spy.calls.argsFor(0)[5]).toEqual({
      id: 1
    });
    spy.calls.reset();
    hot.alter('insert_row', 0);
    expect(spy.calls.count()).toBe(2);
    expect(spy.calls.argsFor(0)[5]).toEqual({
      id: null
    });
    expect(spy.calls.argsFor(1)[5]).toEqual({
      id: 1
    });
  });
  it('should create an array of objects as the source structure, when dataSchema is defined (as an object) but no data is provided', function () {
    var hot = handsontable({
      startCols: 2,
      minSpareRows: 4,
      dataSchema: {
        id: null,
        name: null,
        surname: null
      }
    });
    var dataAtRow = hot.getSourceDataAtRow(0);
    expect(Array.isArray(dataAtRow)).toBe(false);
    expect(dataAtRow.id).toEqual(null);
    expect(dataAtRow.name).toEqual(null);
    expect(dataAtRow.surname).toEqual(null);
  });
  it('should create an array of objects as the source structure, when dataSchema is defined (as a function) but no data is provided', function () {
    var hot = handsontable({
      startCols: 2,
      minSpareRows: 4,
      dataSchema: function dataSchema() {
        return {
          id: null,
          name: null,
          surname: null
        };
      }
    });
    var dataAtRow = hot.getSourceDataAtRow(0);
    expect(Array.isArray(dataAtRow)).toBe(false);
    expect(dataAtRow.id).toEqual(null);
    expect(dataAtRow.name).toEqual(null);
    expect(dataAtRow.surname).toEqual(null);
  });
  it('should create an array of objects as the source structure, when dataSchema is defined (as an array with an object) but no data is provided', function () {
    var hot = handsontable({
      startCols: 2,
      minSpareRows: 4,
      dataSchema: [{
        id: null,
        name: null,
        surname: null
      }]
    });
    var dataAtRow = hot.getSourceDataAtRow(0);
    expect(Array.isArray(dataAtRow)).toBe(false);
    expect(dataAtRow.id).toEqual(null);
    expect(dataAtRow.name).toEqual(null);
    expect(dataAtRow.surname).toEqual(null);
  });
});

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_datachange', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should call onChange callback', function () {
    var output = null;
    handsontable({
      afterChange: function afterChange(changes) {
        output = changes;
      }
    });
    setDataAtCell(1, 2, 'test');
    expect(output[0][0]).toEqual(1);
    expect(output[0][1]).toEqual(2);
    expect(output[0][2]).toEqual(null);
    expect(output[0][3]).toEqual('test');
  });
  it('should use custom source for datachange', function () {
    var output = null;
    var src = null;
    handsontable({
      afterChange: function afterChange(changes, source) {
        output = changes;
        src = source;
      }
    });
    setDataAtCell(1, 2, 'abc', 'test');
    expect(output[0][3]).toEqual('abc');
    expect(src).toEqual('test');
  });
  it('should use custom source for datachange with array', function () {
    var output = null;
    var src = null;
    handsontable({
      afterChange: function afterChange(changes, source) {
        output = changes;
        src = source;
      }
    });
    setDataAtCell([[1, 2, 'abc']], 'test');
    expect(output[0][3]).toEqual('abc');
    expect(src).toEqual('test');
  });
  it('should trigger datachange event', function () {
    var output = null;
    handsontable();
    Handsontable.hooks.add('afterChange', function (changes) {
      output = changes;
    });
    setDataAtCell(1, 2, 'test');
    expect(output[0][0]).toEqual(1);
    expect(output[0][1]).toEqual(2);
    expect(output[0][2]).toEqual(null);
    expect(output[0][3]).toEqual('test');
  });
  it('this.rootElement should point to handsontable rootElement', function () {
    var $container = spec().$container;
    var output = null;
    handsontable({
      afterChange: function afterChange() {
        output = this.rootElement;
      }
    });
    setDataAtCell(0, 0, 'test');
    expect(output).toEqual($container[0]);
  });
  it('onChange should be triggered after data is rendered to DOM (init)', function () {
    var $container = spec().$container;
    var output = null;
    handsontable({
      data: [['Joe Red']],
      afterChange: function afterChange(changes, source) {
        if (source === 'loadData') {
          output = $container.find('table.htCore tbody td:first').html();
        }
      }
    });
    expect(output).toEqual('Joe Red');
  });
  it('onChange should be triggered after data is rendered to DOM (setDataAtCell)', function () {
    var $container = spec().$container;
    var output = null;
    handsontable({
      data: [['Joe Red']],
      afterChange: function afterChange(changes, source) {
        if (source === 'edit') {
          output = $container.find('table.htCore tbody td:first').html();
        }
      }
    });
    setDataAtCell(0, 0, 'Alice Red');
    expect(output).toEqual('Alice Red');
  });
  it('onChange event object should contain documented keys and values when triggered by edit', function () {
    var sampleData = [{
      col1: 'a',
      col2: 'b',
      col3: 'c'
    }];
    var event = null;
    handsontable({
      data: sampleData,
      afterChange: function afterChange(changes, source) {
        if (source === 'edit') {
          event = changes.shift();
        }
      }
    });
    setDataAtCell(0, 0, 'test');
    expect(event[0]).toEqual(0);
    expect(event[1]).toEqual('col1');
    expect(event[2]).toEqual('a');
    expect(event[3]).toEqual('test');
  });
  it('source parameter should be `edit` when cell value is changed through editor', function () {
    var sources = [];
    handsontable({
      data: [['Joe Red']],
      afterChange: function afterChange(changes, source) {
        sources.push(source);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    keyDown('enter');
    expect(sources).toEqual(['loadData', 'edit']); // loadData is always the first source
  });
});

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_destroy', function () {
  var id = 'testContainer';
  beforeEach(function () {
    spec().$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (spec().$container) {
      destroy();
      spec().$container.remove();
    }
  });
  it('should remove table from the root element', function () {
    handsontable();
    destroy();
    expect(spec().$container.html()).toEqual('');
  });
  it('should remove events from the root element, document element and window', function () {
    var x = handsontable();
    expect(x.eventListeners.length > 0).toBeTruthy();
    destroy();
    expect(x.eventListeners).toBeNull();
    $(document.documentElement).off('.copypaste'); // remove copypaste.js listeners, which are not removed by destroy (because copypaste is a singleton for whole page)
  });
  it('should NOT remove events from document element and window for other Handsontable instances on the page', function () {
    // test based on Core_selectionSpec.js (should deselect currently selected cell)
    handsontable();
    var $tmp = $('<div id="tmp"></div>').appendTo(document.body);
    $tmp.handsontable();
    $tmp.handsontable('destroy');
    $tmp.remove();
    selectCell(0, 0);
    $('html').simulate('mousedown');
    expect(getSelected()).toBeUndefined();
  });
  it('should throw an exception when metod on destroyed instance is called', function () {
    var hot = handsontable();
    destroy();
    expect(function () {
      hot.getDataAtCell(0, 0);
    }).toThrowError('The "getDataAtCell" method cannot be called because this Handsontable instance has been destroyed');
    expect(function () {
      hot.listen();
    }).toThrowError('The "listen" method cannot be called because this Handsontable instance has been destroyed');
  });
  it('should set isDestroyed flag to `true` when instance is destroyed', function () {
    var hot = handsontable();
    expect(hot.isDestroyed).toBe(false);
    destroy();
    expect(hot.isDestroyed).toBe(true);
  });
});

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_destroyEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('editor should not be visible', function () {
    handsontable();
    selectCell(1, 1);
    keyDownUp('enter');
    destroyEditor();
    expect(isEditorVisible()).toEqual(false);
  });
  it('value should be saved', function () {
    handsontable();
    selectCell(1, 1);
    keyDownUp('enter');
    keyProxy().val('Ted');
    destroyEditor();
    expect(getDataAtCell(1, 1)).toEqual('Ted');
  });
  it('cell should be selected', function () {
    handsontable();
    selectCell(1, 1);
    keyDownUp('enter');
    destroyEditor();
    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
  });
  it('should revert original value when param set to true', function () {
    handsontable();
    selectCell(1, 1);
    keyDownUp('enter');
    keyProxy().val('Ted');
    destroyEditor(true);
    expect(getDataAtCell(1, 1)).toEqual(null);
  });
  it('should not destroy editor on scroll', function () {
    spec().$container.css({
      width: 200,
      height: 100
    });
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(20, 10)
    });
    selectCell(0, 0);
    keyDown('enter');
    var editor = $('.handsontableInputHolder');
    expect(editor.is(':visible')).toBe(true);
    spec().$container.scroll();
    expect(editor.is(':visible')).toBe(true);
  });
});

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_getCellMeta', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should get proper cell meta when indexes was modified', function () {
    handsontable({
      modifyRow: function modifyRow(row) {
        return row + 10;
      },
      modifyCol: function modifyCol(col) {
        return col + 10;
      }
    });
    var cellMeta = getCellMeta(0, 1);
    expect(cellMeta.row).toEqual(10);
    expect(cellMeta.col).toEqual(11);
    expect(cellMeta.visualRow).toEqual(0);
    expect(cellMeta.visualCol).toEqual(1);
  });
  it('should not allow manual editing of a read only cell', function () {
    var allCellsReadOnly = false;
    handsontable({
      cells: function cells() {
        return {
          readOnly: allCellsReadOnly
        };
      }
    });
    allCellsReadOnly = true;
    selectCell(2, 2);
    keyDown('enter');
    expect(isEditorVisible()).toEqual(false);
  });
  it('should allow manual editing of cell that is no longer read only', function () {
    var allCellsReadOnly = true;
    handsontable({
      cells: function cells() {
        return {
          readOnly: allCellsReadOnly
        };
      }
    });
    allCellsReadOnly = false;
    selectCell(2, 2);
    keyDown('enter');
    expect(isEditorVisible()).toEqual(true);
  });
  it('should move the selection to the cell below, when hitting the ENTER key on a read-only cell', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3),
      cells: function cells() {
        return {
          readOnly: true
        };
      }
    });
    selectCell(0, 0);
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    keyDown('enter');
    expect(getSelected()).toEqual([[1, 0, 1, 0]]);
  });
  it('should use default cell editor for a cell that has declared only cell renderer', function () {
    handsontable({
      cells: function cells() {
        return {
          renderer: function renderer(instance, td) {
            for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              args[_key - 2] = arguments[_key];
            }

            // taken from demo/renderers.html
            Handsontable.renderers.TextRenderer.apply(this, [instance, td].concat(args));
            $(td).css({
              background: 'yellow'
            });
          }
        };
      }
    });
    selectCell(2, 2);
    keyDown('enter');
    document.activeElement.value = 'new value';
    destroyEditor();
    expect(getDataAtCell(2, 2)).toEqual('new value');
  });
  it('should allow to use type and renderer in `flat` notation', function () {
    handsontable({
      data: [[1, 2, 3, 4], [5, 6, 7, 8], [0, 9, 8, 7]],
      cells: function cells(row, col) {
        if (row === 2 && col === 2) {
          return {
            type: 'checkbox',
            renderer: function renderer(instance, td) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                args[_key2 - 2] = arguments[_key2];
              }

              // taken from demo/renderers.html
              Handsontable.renderers.TextRenderer.apply(this, [instance, td].concat(args));
              td.style.backgroundColor = 'yellow';
            }
          };
        }
      }
    });
    expect(getCell(2, 2).style.backgroundColor).toEqual('yellow');
    expect(getCell(1, 1).style.backgroundColor).toEqual('');
  });
  it('this in cells should point to cellProperties', function () {
    var called = 0;

    var _row;

    var _this;

    handsontable({
      cells: function cells(row) {
        called += 1;
        _row = row;
        _this = this;
      }
    });
    var HOT = getInstance();
    expect(called).toBeGreaterThan(0);
    expect(_this.row).toEqual(_row);
    expect(_this.instance).toBe(HOT);
  });
  it('should get proper cellProperties when order of displayed rows is different than order of stored data', function () {
    handsontable({
      data: [['C'], ['A'], ['B']],
      minSpareRows: 1,
      cells: function cells(row, col) {
        var cellProperties = {};

        if (getSourceData()[row][col] === 'A') {
          cellProperties.readOnly = true;
        }

        return cellProperties;
      }
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C');
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htDimmed')).toBe(false);
    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A');
    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').hasClass('htDimmed')).toBe(true);
    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('B');
    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').hasClass('htDimmed')).toBe(false); // Column sorting changes the order of displayed rows while keeping table data unchanged

    updateSettings({
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A');
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htDimmed')).toBe(true);
    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('B');
    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').hasClass('htDimmed')).toBe(false);
    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('C');
    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').hasClass('htDimmed')).toBe(false);
  });
  it('should call `beforeGetCellMeta` plugin hook with visual indexes as parameters', function () {
    var rowInsideHook;
    var colInsideHook;
    var hot = handsontable({
      beforeGetCellMeta: function beforeGetCellMeta(row, col) {
        rowInsideHook = row;
        colInsideHook = col;
      },
      modifyRow: function modifyRow(row) {
        return row + 10;
      },
      modifyCol: function modifyCol(col) {
        return col + 10;
      }
    });
    hot.getCellMeta(0, 1);
    expect(rowInsideHook).toEqual(0);
    expect(colInsideHook).toEqual(1);
  });
  it('should call `afterGetCellMeta` plugin hook with visual indexes as parameters', function () {
    var rowInsideHook;
    var colInsideHook;
    var hot = handsontable({
      afterGetCellMeta: function afterGetCellMeta(row, col) {
        rowInsideHook = row;
        colInsideHook = col;
      },
      modifyRow: function modifyRow(row) {
        return row + 10;
      },
      modifyCol: function modifyCol(col) {
        return col + 10;
      }
    });
    hot.getCellMeta(0, 1);
    expect(rowInsideHook).toEqual(0);
    expect(colInsideHook).toEqual(1);
  });
});

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getColHeader', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('when not configured, should return undefined', function () {
    handsontable();
    expect(getColHeader(1)).toBe(null);
  });
  it('when configured as true, should return the Excel-style column title', function () {
    handsontable({
      colHeaders: true
    });
    expect(getColHeader(30)).toEqual('AE');
  });
  it('when configured as array, should return value at index', function () {
    handsontable({
      colHeaders: ['One', 'Two', 'Three', 'Four', 'Five']
    });
    expect(getColHeader(1)).toEqual('Two');
  });
  it('when configured as function, should return function output', function () {
    handsontable({
      colHeaders: function colHeaders(index) {
        return "col".concat(index);
      }
    });
    expect(getColHeader(1)).toEqual('col1');
  });
  it('when configured as static value, should return the value', function () {
    handsontable({
      colHeaders: 'static'
    });
    expect(getColHeader(1)).toEqual('static');
  });
  it('when configured as HTML value, should render that as HTML', function () {
    handsontable({
      colHeaders: function colHeaders(index) {
        return "<b>col".concat(index, "</b>");
      }
    });
    expect(getColHeader(1)).toEqual('<b>col1</b>');
  });
  it('when no argument given, should return as much column headers as there are columns', function () {
    handsontable({
      colHeaders: true,
      startCols: 3
    });
    expect(getColHeader()).toEqual(['A', 'B', 'C']);
  });
});

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_getDataAt*', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfArrays = function arrayOfArrays() {
    return [['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['2008', 10, 11, 12, 13], ['2009', 20, 11, 14, 13], ['2010', 30, 15, 12, 13]];
  };

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      'id.a.b.c': 1,
      id: 1,
      name: 'Nannie Patel',
      address: 'Jenkin ville',
      details: {
        city: 'Chicago'
      }
    }, {
      'id.a.b.c': 2,
      id: 2,
      name: 'Łucja Grożny and Środeńczak',
      address: 'Gardiner',
      details: {
        city: 'New York'
      }
    }];
  };

  it('should return data at specified row', function () {
    handsontable({
      data: arrayOfArrays()
    });
    expect(getDataAtRow(0)).toEqual(['', 'Kia', 'Nissan', 'Toyota', 'Honda']);
  });
  it('should return data at specified col', function () {
    handsontable({
      data: arrayOfArrays()
    });
    expect(getDataAtCol(1)).toEqual(['Kia', 10, 20, 30]);
  });
  describe('Core_getDataAtRowProp', function () {
    it('should return data at specified column', function () {
      handsontable({
        data: arrayOfObjects()
      });
      expect(getDataAtRowProp(1, 'id.a.b.c')).toBe(2);
      expect(getDataAtRowProp(1, 'id')).toBe(2);
      expect(getDataAtRowProp(1, 'id')).toBe(2);
      expect(getDataAtRowProp(1, 'details.city')).toBe('New York');
    });
  });
  describe('`modifyData` hook', function () {
    it('should be fired with specified arguments on every `set`, `get` operation (array of arrays)', function () {
      var spy = jasmine.createSpy();
      handsontable({
        data: arrayOfArrays(),
        autoColumnSize: false,
        modifyData: spy
      });
      expect(spy.calls.count()).toBe(20); // call for all cells

      expect(spy.calls.argsFor(1)[0]).toBe(0);
      expect(spy.calls.argsFor(1)[1]).toBe(1);
      expect(spy.calls.argsFor(1)[2].value).toBe('Kia');
      expect(spy.calls.argsFor(1)[3]).toBe('get');
      spy.calls.reset();
      setDataAtCell(2, 3, 'foo');
      expect(spy.calls.count()).toBe(21); // call for all cells + 1 from setDataAtCell

      expect(spy.calls.argsFor(0)[0]).toBe(2);
      expect(spy.calls.argsFor(0)[1]).toBe(3);
      expect(spy.calls.argsFor(0)[2].value).toBe('foo');
      expect(spy.calls.argsFor(0)[3]).toBe('set');
    });
    it('should be fired with specified arguments on every `set`, `get` operation (array of objects)', function () {
      var spy = jasmine.createSpy();
      handsontable({
        data: arrayOfObjects(),
        autoColumnSize: false,
        modifyData: spy
      });
      expect(spy.calls.count()).toBe(10); // call for all cells

      expect(spy.calls.argsFor(2)[0]).toBe(0);
      expect(spy.calls.argsFor(2)[1]).toBe(2);
      expect(spy.calls.argsFor(2)[2].value).toBe('Nannie Patel');
      expect(spy.calls.argsFor(2)[3]).toBe('get');
      spy.calls.reset();
      setDataAtRowProp(2, 'name', 'foo');
      expect(spy.calls.count()).toBe(16);
      expect(spy.calls.argsFor(0)[0]).toBe(2);
      expect(spy.calls.argsFor(0)[1]).toBe(2);
      expect(spy.calls.argsFor(0)[2].value).toBe('foo');
      expect(spy.calls.argsFor(0)[3]).toBe('set');
    });
    it('should overwrite value while loading data', function () {
      handsontable({
        data: arrayOfArrays(),
        modifyData: function modifyData(row, column, valueHolder, ioMode) {
          if (ioMode === 'get' && row === 1 && column === 2) {
            valueHolder.value = 'foo';
          }
        }
      });
      expect(getDataAtCell(1, 2)).toBe('foo');
      expect(getSourceDataAtCell(1, 2)).toBe(11);
    });
    it('should overwrite value while saving data', function () {
      handsontable({
        data: arrayOfArrays(),
        modifyData: function modifyData(row, column, valueHolder, ioMode) {
          if (ioMode === 'set' && row === 1 && column === 2) {
            valueHolder.value = 'foo';
          }
        }
      });
      setDataAtCell(1, 2, 'bar');
      expect(getDataAtCell(1, 2)).toBe('foo');
      expect(getSourceDataAtCell(1, 2)).toBe('foo');
    });
  });
});

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_getDataType', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfArrays = function arrayOfArrays() {
    return [['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['2008', 10, 11, 12, 13], ['2009', 20, 11, 14, 13], ['2010', 30, 15, 12, 13]];
  };

  it('should return data type at specyfied range (default type)', function () {
    handsontable({
      data: arrayOfArrays()
    });
    expect(getDataType(0, 0)).toEqual('text');
    expect(getDataType(0, 0, 1, 1)).toEqual('text');
  });
  it('should return data type at specyfied range (type defined in columns)', function () {
    handsontable({
      data: arrayOfArrays(),
      columns: [{
        type: 'numeric'
      }, {
        type: 'text'
      }, {
        type: 'date'
      }, {
        type: 'autocomplete'
      }, {
        type: 'dropdown'
      }]
    });
    expect(getDataType(0, 0)).toEqual('numeric');
    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');
    expect(getDataType(0, 1, 1, 1)).toEqual('text');
    expect(getDataType(0, 2, 1, 2)).toEqual('date');
    expect(getDataType(3, 3, 3, 3)).toEqual('autocomplete');
    expect(getDataType(3, 4, 3, 4)).toEqual('dropdown');
  });
  it('should return data type at specyfied range (type defined in columns) when columns is a function', function () {
    handsontable({
      data: arrayOfArrays(),
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.type = 'numeric';
        } else if (column === 1) {
          colMeta.type = 'text';
        } else if (column === 2) {
          colMeta.type = 'date';
        } else if (column === 3) {
          colMeta.type = 'autocomplete';
        } else if (column === 4) {
          colMeta.type = 'dropdown';
        } else {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(getDataType(0, 0)).toEqual('numeric');
    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');
    expect(getDataType(0, 1, 1, 1)).toEqual('text');
    expect(getDataType(0, 2, 1, 2)).toEqual('date');
    expect(getDataType(3, 3, 3, 3)).toEqual('autocomplete');
    expect(getDataType(3, 4, 3, 4)).toEqual('dropdown');
  });
  it('should return data type at specyfied range (type defined in cells)', function () {
    handsontable({
      data: arrayOfArrays(),
      cells: function cells(row, column) {
        var cellMeta = {};

        if (row === 1 && column === 1) {
          cellMeta.type = 'date';
        }

        if (column === 2) {
          cellMeta.type = 'checkbox';
        }

        return cellMeta;
      }
    });
    expect(getDataType(0, 0)).toEqual('text');
    expect(getDataType(1, 1)).toEqual('date');
    expect(getDataType(1, 2)).toEqual('checkbox');
    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');
  });
});

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getRowHeader', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('when not configured, should return undefined', function () {
    handsontable();
    expect(getRowHeader(1)).toEqual(void 0);
  });
  it('when configured as true, should return the index incremented by 1', function () {
    handsontable({
      rowHeaders: true
    });
    expect(getRowHeader(1)).toEqual(2);
  });
  it('when configured as array, should return value at index', function () {
    handsontable({
      rowHeaders: ['One', 'Two', 'Three', 'Four', 'Five']
    });
    expect(getRowHeader(1)).toEqual('Two');
  });
  it('when configured as function, should return function output', function () {
    handsontable({
      rowHeaders: function rowHeaders(index) {
        return "row".concat(index);
      }
    });
    expect(getRowHeader(1)).toEqual('row1');
  });
  it('when configured as static value, should return the value', function () {
    handsontable({
      rowHeaders: 'static'
    });
    expect(getRowHeader(1)).toEqual('static');
  });
  it('when configured as HTML value, should render that as HTML', function () {
    handsontable({
      rowHeaders: function rowHeaders(index) {
        return "<b>row".concat(index, "</b>");
      }
    });
    expect(getRowHeader(1)).toEqual('<b>row1</b>');
  });
  it('when no argument given, should return as much row headers as there are rows', function () {
    handsontable({
      rowHeaders: true,
      startRows: 3
    });
    expect(getRowHeader()).toEqual([1, 2, 3]);
  });
});

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_init', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should respect startRows and startCols when no data is provided', function () {
    spec().$container.remove();
    spec().$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    handsontable();
    expect(countRows()).toEqual(5); // as given in README.md

    expect(countCols()).toEqual(5); // as given in README.md
  });
  it('should respect width provided in inline style', function () {
    spec().$container.css({
      overflow: 'auto',
      width: '200px'
    });
    handsontable({
      data: [['ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC']]
    });
    expect(spec().$container.width()).toEqual(200);
  });
  it('should respect width provided in CSS class', function () {
    $('<style>.myTable {overflow: auto; width: 200px}</style>').appendTo('head');
    spec().$container.addClass('myTable');
    handsontable({
      data: [['ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC']]
    });
    expect(spec().$container.width()).toEqual(200);
  });
  it('should construct when container is not appended to document', function () {
    spec().$container.remove();
    handsontable();
    expect(getData()).toBeTruthy();
  });
  xit('should create table even if is launched inside custom element', function () {
    // TODO: When we'll update phantomjs, then we should try to run this test case.
    spec().$container = $("<hot-table><div id=\"".concat(id, "\"></div></hot-table>")).appendTo('body');
    handsontable();
    expect(function () {
      mouseOver(spec().$container.find('tr:eq(0) td:eq(1)'));
    }).not.toThrow();
  });
});

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.isEmpty*', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('isEmptyRow', function () {
    it('should be empty row', function () {
      handsontable();
      var hot = getInstance();
      expect(hot.isEmptyRow(0)).toEqual(true);
    });
    it('should not be empty row', function () {
      handsontable();
      setDataAtCell(0, 0, 'test');
      var hot = getInstance();
      expect(hot.isEmptyRow(0)).toEqual(false);
    });
    it('should bind this to instance', function () {
      handsontable();
      var hot = getInstance();
      var check = hot.isEmptyRow;
      expect(check(0)).toEqual(true); // this may be change in future when we switch to define isEmptyCol in prototype
    });
  });
  describe('isEmptyCol', function () {
    it('should be empty row', function () {
      handsontable();
      var hot = getInstance();
      expect(hot.isEmptyCol(0)).toEqual(true);
    });
    it('should not be empty row', function () {
      handsontable();
      setDataAtCell(0, 0, 'test');
      var hot = getInstance();
      expect(hot.isEmptyCol(0)).toEqual(false);
    });
    it('should bind this to instance', function () {
      handsontable();
      var hot = getInstance();
      var check = hot.isEmptyCol;
      expect(check(0)).toEqual(true); // this may be change in future when we switch to define isEmptyCol in prototype
    });
  });
});

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_keepEmptyRows', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfNestedObjects = function arrayOfNestedObjects() {
    return [{
      id: 1,
      name: {
        first: 'Ted',
        last: 'Right'
      },
      address: 'Street Name',
      zip: '80410',
      city: 'City Name'
    }, {
      id: 2,
      name: {
        first: 'Frank',
        last: 'Honest'
      },
      address: 'Street Name',
      zip: '80410',
      city: 'City Name'
    }, {
      id: 3,
      name: {
        first: 'Joan',
        last: 'Well'
      },
      address: 'Street Name',
      zip: '80410',
      city: 'City Name'
    }];
  };

  it('should remove columns if needed', function () {
    handsontable({
      data: arrayOfNestedObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'name.first'
      }]
    });
    expect(spec().$container.find('tbody tr:first td').length).toEqual(2);
  });
  it('should remove columns if needed when columns is a function', function () {
    handsontable({
      data: arrayOfNestedObjects(),
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'name.first';
        } else {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(spec().$container.find('tbody tr:first td').length).toEqual(2);
  });
  it('should create columns if needed', function () {
    handsontable({
      data: arrayOfNestedObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'name.first'
      }, {
        data: 'name.last'
      }, {
        data: 'address'
      }, {
        data: 'zip'
      }, {
        data: 'city'
      }]
    });
    expect(spec().$container.find('tbody tr:first td').length).toEqual(6);
  });
  it('should create columns if needed when columns is a function', function () {
    handsontable({
      data: arrayOfNestedObjects(),
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'name.first';
        } else if (column === 2) {
          colMeta.data = 'name.last';
        } else if (column === 3) {
          colMeta.data = 'address';
        } else if (column === 4) {
          colMeta.data = 'zip';
        } else if (column === 5) {
          colMeta.data = 'city';
        } else {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(spec().$container.find('tbody tr:first td').length).toEqual(6);
  });
  it('should create spare cols and rows on init (array data source)', function () {
    handsontable({
      data: [['one', 'two'], ['three', 'four']],
      minCols: 4,
      minRows: 4,
      minSpareRows: 4,
      minSpareCols: 4
    });
    expect(countCells()).toEqual(36);
  });
  it('should create spare cols and rows on init (object data source)', function () {
    handsontable({
      data: arrayOfNestedObjects(),
      minRows: 4,
      minSpareRows: 1
    });
    expect(countRows()).toEqual(4);
    expect(countCols()).toEqual(6); // because arrayOfNestedObjects has 6 nested properites and they should be figured out if dataSchema/columns is not given

    expect(spec().$container.find('tbody tr:first td:last').text()).toEqual('City Name');
  });
  it('should create new row when last cell in last row is edited', function () {
    var data = [['one', 'two'], ['three', 'four']];
    handsontable({
      data: data,
      minRows: 4,
      minCols: 4,
      minSpareRows: 1
    });
    setDataAtCell(3, 3, 'test');
    expect(data.length).toEqual(5);
  });
  it('should create new col when last cell in last row is edited', function () {
    var data = [['one', 'two'], ['three', 'four']];
    handsontable({
      data: data,
      minRows: 4,
      minCols: 4,
      minSpareCols: 1
    });
    setDataAtCell(3, 3, 'test');
    expect(countCols()).toEqual(5);
  });
  it('should create new row when last cell in last row is edited by autocomplete', function (done) {
    var data = [{
      id: 1,
      color: 'orange'
    }];
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);
    });
    handsontable({
      data: data,
      startRows: 5,
      colHeaders: true,
      minSpareRows: 1,
      columns: [{
        data: 'id',
        type: 'text'
      }, {
        data: 'color',
        editor: 'autocomplete',
        source: syncSources
      }]
    });
    selectCell(1, 1);
    keyDownUp('enter');
    setTimeout(function () {
      keyDown('arrow_down');
      keyDownUp('enter');
      expect(data.length).toEqual(3);
      done();
    }, 200);
  });
  it('should create new row when last cell in last row is edited by autocomplete when columns is a function', function (done) {
    var data = [{
      id: 1,
      color: 'orange'
    }];
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);
    });
    handsontable({
      data: data,
      startRows: 5,
      colHeaders: true,
      minSpareRows: 1,
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
          colMeta.type = 'text';
        } else if (column === 1) {
          colMeta.data = 'color';
          colMeta.editor = 'autocomplete';
          colMeta.source = syncSources;
        } else {
          colMeta = null;
        }

        return colMeta;
      }
    });
    selectCell(1, 1);
    keyDownUp('enter');
    setTimeout(function () {
      keyDown('arrow_down');
      keyDownUp('enter');
      expect(data.length).toEqual(3);
      done();
    }, 200);
  });
  it('should not create more rows that maxRows', function () {
    handsontable({
      startRows: 4,
      maxRows: 6,
      minSpareRows: 1
    });
    setDataAtCell(3, 0, 'test');
    setDataAtCell(4, 0, 'test');
    setDataAtCell(5, 0, 'test');
    expect(countRows()).toEqual(6);
  });
  it('should not create more cols that maxCols', function () {
    handsontable({
      startCols: 4,
      maxCols: 6,
      minSpareCols: 1
    });
    setDataAtCell(0, 3, 'test');
    setDataAtCell(0, 4, 'test');
    setDataAtCell(0, 5, 'test');
    expect(countCols()).toEqual(6);
  });
  it('should ignore minCols if columns is set', function () {
    handsontable({
      startCols: 1,
      minCols: 6,
      columns: [{}, {}]
    });
    expect(countCols()).toEqual(2);
  });
  it('should ignore minCols if columns is set when columns is a function', function () {
    handsontable({
      startCols: 1,
      minCols: 6,
      columns: function columns(column) {
        var colMeta = {};

        if ([0, 1].indexOf(column) < 0) {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(countCols()).toEqual(1);
  });
  it('columns should have priority over startCols', function () {
    handsontable({
      startCols: 3,
      minCols: 6,
      columns: [{}, {}]
    });
    expect(countCols()).toEqual(2);
  });
  it('columns should have priority over startCols when columns is a function', function () {
    handsontable({
      startCols: 3,
      minCols: 6,
      columns: function columns(column) {
        var colMeta = {};

        if ([0, 1].indexOf(column) < 0) {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(countCols()).toEqual(2);
  });
});

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_listen', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should listen to changes when cell is selected', function () {
    var hot = handsontable();
    hot.selectCell(0, 0);
    expect(hot.isListening()).toEqual(true);
  });
  it('should\'t listen to changes when cell is selected via `selectCell` when `changeListener` argument is `false`', function () {
    var hot = handsontable();
    hot.unlisten();
    expect(hot.isListening()).toEqual(false);
    hot.selectCell(0, 0, undefined, undefined, true, false);
    expect(hot.isListening()).toEqual(false);
  });
  it('should unlisten changes', function () {
    var hot = handsontable();
    hot.selectCell(0, 0);
    expect(hot.isListening()).toEqual(true);
    hot.unlisten();
    expect(hot.isListening()).toEqual(false);
  });
  it('should listen to changes, when called after unlisten', function () {
    var hot = handsontable();
    hot.selectCell(0, 0);
    hot.unlisten();
    hot.listen();
    expect(hot.isListening()).toEqual(true);
  });
  it('should change focus on active element, when listen without arguments was called', function () {
    var hot = handsontable();
    var input = document.createElement('input');
    document.body.appendChild(input);
    hot.selectCell(0, 0);
    input.focus();
    hot.listen();
    expect(hot.isListening()).toEqual(true);
    expect(document.activeElement).not.toBe(input);
    expect(document.activeElement).toBe(document.body);
    document.body.removeChild(input);
  });
  it('should not change focus on active element, when listen with first argument as `false` was called', function () {
    var hot = handsontable();
    var input = document.createElement('input');
    document.body.appendChild(input);
    hot.selectCell(0, 0);
    input.focus();
    hot.listen(false);
    expect(hot.isListening()).toEqual(true);
    expect(document.activeElement).toBe(input);
    document.body.removeChild(input);
  });
  it('when second instance is created, first should unlisten automatically', function () {
    var $container1 = $('<div id="hot1"></div>').appendTo('body').handsontable();
    $container1.handsontable('selectCell', 0, 0);
    var $container2 = $('<div id="hot2"></div>').appendTo('body').handsontable();
    $container2.handsontable('selectCell', 0, 0);
    expect($container1.handsontable('isListening')).toEqual(false);
    expect($container2.handsontable('isListening')).toEqual(true);
    $container1.handsontable('destroy');
    $container1.remove();
    $container2.handsontable('destroy');
    $container2.remove();
  });
  it('when listen is called on first instance, second should unlisten automatically', function () {
    var $container1 = $('<div id="hot1"></div>').appendTo('body').handsontable();
    $container1.handsontable('selectCell', 0, 0);
    var $container2 = $('<div id="hot2"></div>').appendTo('body').handsontable();
    $container2.handsontable('selectCell', 0, 0);
    $container1.handsontable('listen');
    expect($container1.handsontable('isListening')).toEqual(true);
    expect($container2.handsontable('isListening')).toEqual(false);
    $container1.handsontable('destroy');
    $container1.remove();
    $container2.handsontable('destroy');
    $container2.remove();
  });
  describe('hooks', function () {
    it('should call `afterListen` after set listen on instance', function () {
      var afterListenCallback = jasmine.createSpy('afterListenCallback');
      handsontable({
        afterListen: afterListenCallback
      });
      expect(afterListenCallback.calls.count()).toBe(0);
      spec().$container.handsontable('listen');
      expect(afterListenCallback.calls.count()).toBe(1);
    });
    it('should call `afterUnlisten` after unset listen on instance', function () {
      var afterUnlistenCallback = jasmine.createSpy('afterListenCallback');
      handsontable({
        afterUnlisten: afterUnlistenCallback
      });
      spec().$container.handsontable('listen');
      expect(afterUnlistenCallback.calls.count()).toBe(0);
      spec().$container.handsontable('unlisten');
      expect(afterUnlistenCallback.calls.count()).toBe(1);
    });
  });
});

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_loadData', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfArrays = function arrayOfArrays() {
    return [['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['2008', 10, 11, 12, 13], ['2009', 20, 11, 14, 13], ['2010', 30, 15, 12, 13]];
  };

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      id: 1,
      name: 'Ted',
      lastName: 'Right'
    }, {
      id: 2,
      name: 'Frank',
      lastName: 'Honest'
    }, {
      id: 3,
      name: 'Joan',
      lastName: 'Well'
    }, {
      id: 4,
      name: 'Sid',
      lastName: 'Strong'
    }, {
      id: 5,
      name: 'Jane',
      lastName: 'Neat'
    }, {
      id: 6,
      name: 'Chuck',
      lastName: 'Jackson'
    }, {
      id: 7,
      name: 'Meg',
      lastName: 'Jansen'
    }, {
      id: 8,
      name: 'Rob',
      lastName: 'Norris'
    }, {
      id: 9,
      name: 'Sean',
      lastName: 'O\'Hara'
    }, {
      id: 10,
      name: 'Eve',
      lastName: 'Branson'
    }];
  };

  var arrayOfNestedObjects = function arrayOfNestedObjects() {
    return [{
      id: 1,
      name: {
        first: 'Ted',
        last: 'Right'
      },
      'full.street': 'Street I'
    }, {
      id: 2,
      name: {
        first: 'Frank',
        last: 'Honest'
      },
      'full.street': 'Street II'
    }, {
      id: 3,
      name: {
        first: 'Joan',
        last: 'Well'
      },
      'full.street': 'Street III'
    }];
  };

  var htmlData = [['<b>H&M</b>']];
  it('should allow array of arrays', function () {
    handsontable();
    loadData(arrayOfArrays());
    expect(getDataAtCell(0, 2)).toEqual('Nissan');
  });
  it('should allow array of objects', function () {
    handsontable({
      columns: [{
        data: 'id'
      }, {
        data: 'lastName'
      }, {
        data: 'name'
      }]
    });
    loadData(arrayOfObjects());
    expect(getDataAtCell(0, 2)).toEqual('Ted');
  });
  it('should allow array of objects when columns as a function', function () {
    handsontable({
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'lastName';
        } else if (column === 2) {
          colMeta.data = 'name';
        } else {
          colMeta = null;
        }

        return colMeta;
      }
    });
    loadData(arrayOfObjects());
    expect(getDataAtCell(0, 2)).toEqual('Ted');
  });
  it('should allow array of nested objects', function () {
    handsontable({
      data: arrayOfNestedObjects(),
      colHeaders: true,
      columns: [{
        data: 'id'
      }, {
        data: 'name.last'
      }, {
        data: 'name.first'
      }, {
        data: 'full.street'
      }]
    });
    expect(getDataAtCell(0, 2)).toEqual('Ted');
    expect(getDataAtCell(1, 3)).toEqual('Street II');
    expect(getDataAtRowProp(2, 'full.street')).toEqual('Street III');
  });
  it('should allow array of nested objects when columns as a function', function () {
    handsontable({
      data: arrayOfNestedObjects(),
      colHeaders: true,
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
        } else if (column === 1) {
          colMeta.data = 'name.last';
        } else if (column === 2) {
          colMeta.data = 'name.first';
        } else if (column === 3) {
          colMeta.data = 'full.street';
        } else {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(getDataAtCell(0, 2)).toEqual('Ted');
    expect(getDataAtCell(1, 3)).toEqual('Street II');
    expect(getDataAtRowProp(2, 'full.street')).toEqual('Street III');
  });
  it('should figure out default column names for array of nested objects', function () {
    handsontable({
      data: arrayOfNestedObjects(),
      colHeaders: true
    });
    expect(getDataAtCell(0, 2)).toEqual('Right');
  });
  it('should trigger onChange callback when loaded array of arrays', function () {
    var called = false;
    handsontable({
      afterChange: function afterChange(changes, source) {
        if (source === 'loadData') {
          called = true;
        }
      }
    });
    loadData(arrayOfArrays());
    expect(called).toEqual(true);
  });
  it('should trigger onChange callback when loaded array of objects', function () {
    var called = false;
    handsontable({
      afterChange: function afterChange(changes, source) {
        if (source === 'loadData') {
          called = true;
        }
      }
    });
    loadData(arrayOfObjects());
    expect(called).toEqual(true);
  });
  it('should trigger onChange callback when loaded array of nested objects', function () {
    var called = false;
    handsontable({
      afterChange: function afterChange(changes, source) {
        if (source === 'loadData') {
          called = true;
        }
      }
    });
    loadData(arrayOfNestedObjects());
    expect(called).toEqual(true);
  });
  it('should create new rows for array of arrays (and respect minRows)', function () {
    handsontable({
      minRows: 20,
      // minRows should be respected
      data: arrayOfArrays()
    });
    expect(countRows()).toEqual(20); // TODO why this must be checked after render?
  });
  it('should create new rows for array of nested objects (and respect minRows)', function () {
    handsontable({
      minRows: 20,
      // minRows should be respected
      data: arrayOfNestedObjects()
    });
    expect(countRows()).toEqual(20); // TODO why this must be checked after render?
  });
  it('HTML special chars should be escaped by default', function () {
    handsontable();
    loadData(htmlData);
    expect(getCell(0, 0).innerHTML).toEqual('&lt;b&gt;H&amp;M&lt;/b&gt;');
  });
  it('should create as many rows as needed by array of objects', function () {
    handsontable({
      minRows: 6,
      data: arrayOfObjects()
    });
    expect(getCell(9, 1).innerHTML).toEqual('Eve');
  }); // https://github.com/handsontable/handsontable/pull/233

  it('should not invoke the cells callback multiple times with the same row/col (without overlays)', function () {
    var cellsSpy = jasmine.createSpy('cellsSpy');
    handsontable({
      data: arrayOfNestedObjects(),
      colWidths: [90, 90, 90, 90],
      rowHeights: [23, 23, 23, 23],
      cells: cellsSpy
    }); //

    expect(cellsSpy.calls.count()).toEqual(43);
  });
  it('should not invoke the cells callback multiple times with the same row/col (with overlays)', function () {
    var cellsSpy = jasmine.createSpy('cellsSpy');
    handsontable({
      data: arrayOfNestedObjects(),
      colHeaders: true,
      rowHeaders: true,
      colWidths: [90, 90, 90, 90],
      rowHeights: [90, 90, 90, 90],
      cells: cellsSpy
    });
    expect(cellsSpy.calls.count()).toEqual(56);
  });
  it('should remove grid rows if new data source has less of them', function () {
    var data1 = [['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['h']];
    var data2 = [['a'], ['b'], ['c'], ['d'], ['e']];
    handsontable({
      data: data1,
      rowHeaders: true,
      colHeaders: true
    });
    selectCell(7, 0);
    loadData(data2);
    expect(countRows()).toBe(data2.length);
    expect(getSelected()).toEqual([[4, 0, 4, 0]]);
  });
  it('should remove grid rows if new data source has less of them (with minSpareRows)', function () {
    var data1 = [['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['h']];
    var data2 = [['a'], ['b'], ['c'], ['d'], ['e']];
    handsontable({
      data: data1,
      minSpareCols: 1,
      minSpareRows: 1,
      rowHeaders: true,
      colHeaders: true
    });
    selectCell(8, 0);
    loadData(data2);
    expect(countRows()).toBe(6); // +1 because of minSpareRows

    expect(getSelected()).toEqual([[5, 0, 5, 0]]);
  });
  it('loading empty data should remove all rows', function () {
    var data1 = [['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['h']];
    var data2 = [];
    handsontable({
      data: data1,
      rowHeaders: true,
      colHeaders: true
    });
    selectCell(7, 0);
    loadData(data2);
    expect(countRows()).toBe(0);
    expect(getSelected()).toBeUndefined();
  });
  it('should only have as many columns as in settings', function () {
    var data1 = arrayOfArrays();
    handsontable({
      data: data1,
      columns: [{
        data: 1
      }, {
        data: 3
      }]
    });
    expect(countCols()).toBe(2);
  });
  it('should only have as many columns as in settings when columns is a function', function () {
    var data1 = arrayOfArrays();
    handsontable({
      data: data1,
      columns: function columns(column) {
        var colMeta = {
          data: column
        };

        if ([1, 3].indexOf(column) < 0) {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(countCols()).toBe(2);
  });
  it('should throw error when trying to load a string (constructor)', function () {
    var errors = 0;

    try {
      handsontable({
        data: 'string'
      });
    } catch (e) {
      errors += 1;
    }

    expect(errors).toBe(1);
  });
  it('should throw error when trying to load a string (loadData)', function () {
    var errors = 0;

    try {
      handsontable();
      loadData('string');
    } catch (e) {
      errors += 1;
    }

    expect(errors).toBe(1);
  });
  it('should load Backbone Collection as data source', function () {
    // code borrowed from demo/backbone.js
    var CarModel = Backbone.Model.extend({});
    var CarCollection = Backbone.Collection.extend({
      model: CarModel,
      // Backbone.Collection doesn't support `splice`, yet! Easy to add.
      splice: hackedSplice
    });
    var cars = new CarCollection();
    cars.add([{
      make: 'Dodge',
      model: 'Ram',
      year: 2012,
      weight: 6811
    }, {
      make: 'Toyota',
      model: 'Camry',
      year: 2012,
      weight: 3190
    }, {
      make: 'Smart',
      model: 'Fortwo',
      year: 2012,
      weight: 1808
    }]);
    handsontable({
      data: cars,
      columns: [attr('make'), attr('model'), attr('year')]
    }); // use the "good" Collection methods to emulate Array.splice

    function hackedSplice(index, howMany) {
      for (var _len = arguments.length, models = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        models[_key - 2] = arguments[_key];
      }

      var args = _.toArray([index, howMany].concat(models)).slice(2).concat({
        at: index
      });

      var removed = this.models.slice(index, index + howMany);
      this.remove(removed).add.apply(this, args);
      return removed;
    } // normally, you'd get these from the server with .fetch()


    function attr(attribute) {
      // this lets us remember `attr` for when when it is get/set
      return {
        data: function data(car, value) {
          if (_.isUndefined(value)) {
            return car.get(attribute);
          }

          car.set(attribute, value);
        }
      };
    }

    expect(countRows()).toBe(3);
  });
  it('should load Backbone Collection as data source when columns is a function', function () {
    // code borrowed from demo/backbone.js
    var CarModel = Backbone.Model.extend({});
    var CarCollection = Backbone.Collection.extend({
      model: CarModel,
      // Backbone.Collection doesn't support `splice`, yet! Easy to add.
      splice: hackedSplice
    });
    var cars = new CarCollection();
    cars.add([{
      make: 'Dodge',
      model: 'Ram',
      year: 2012,
      weight: 6811
    }, {
      make: 'Toyota',
      model: 'Camry',
      year: 2012,
      weight: 3190
    }, {
      make: 'Smart',
      model: 'Fortwo',
      year: 2012,
      weight: 1808
    }]);
    handsontable({
      data: cars,
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = attr('make');
        } else if (column === 1) {
          colMeta = attr('model');
        } else if (column === 2) {
          colMeta = attr('year');
        }

        return colMeta;
      }
    }); // use the "good" Collection methods to emulate Array.splice

    function hackedSplice(index, howMany) {
      for (var _len2 = arguments.length, models = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        models[_key2 - 2] = arguments[_key2];
      }

      var args = _.toArray([index, howMany].concat(models)).slice(2).concat({
        at: index
      });

      var removed = this.models.slice(index, index + howMany);
      this.remove(removed).add.apply(this, args);
      return removed;
    } // normally, you'd get these from the server with .fetch()


    function attr(attribute) {
      // this lets us remember `attr` for when when it is get/set
      return {
        data: function data(car, value) {
          if (_.isUndefined(value)) {
            return car.get(attribute);
          }

          car.set(attribute, value);
        }
      };
    }

    expect(countRows()).toBe(3);
  });
  it('should clear cell properties after loadData', function () {
    handsontable();
    loadData(arrayOfArrays());
    getCellMeta(0, 0).foo = 'bar';
    expect(getCellMeta(0, 0).foo).toEqual('bar');
    loadData(arrayOfArrays());
    expect(getCellMeta(0, 0).foo).toBeUndefined();
  });
  it('should clear cell properties after loadData, but before rendering new data', function () {
    handsontable();
    loadData(arrayOfArrays());
    getCellMeta(0, 0).valid = false;
    render();
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);
    loadData(arrayOfArrays());
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);
  }); // https://github.com/handsontable/handsontable/issues/1700
  // can't edit anything after starting editing cell with no nested object

  it('should correct behave with cell with no nested object data source corresponding to column mapping', function () {
    var objectData = [{
      id: 1,
      user: {
        name: {
          first: 'Ted',
          last: 'Right'
        }
      }
    }, {
      id: 2,
      user: {
        name: {}
      }
    }, {
      id: 3
    }];
    handsontable({
      data: objectData,
      columns: [{
        data: 'id'
      }, {
        data: 'user.name.first'
      }, {
        data: 'user.name.last'
      }]
    });
    mouseDoubleClick(getCell(1, 1));
    document.activeElement.value = 'Harry';
    deselectCell();
    expect(objectData[1].user.name.first).toEqual('Harry');
    mouseDoubleClick(getCell(2, 1));
    document.activeElement.value = 'Barry';
    deselectCell();
    expect(objectData[2].user.name.first).toEqual('Barry');
  });
  it('should correct behave with cell with no nested object data source corresponding to column mapping when columns is a function', function () {
    var objectData = [{
      id: 1,
      user: {
        name: {
          first: 'Ted',
          last: 'Right'
        }
      }
    }, {
      id: 2,
      user: {
        name: {}
      }
    }, {
      id: 3
    }];
    handsontable({
      data: objectData,
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id'
          };
        } else if (column === 1) {
          colMeta = {
            data: 'user.name.first'
          };
        } else if (column === 2) {
          colMeta = {
            data: 'user.name.last'
          };
        }

        return colMeta;
      }
    });
    mouseDoubleClick(getCell(1, 1));
    document.activeElement.value = 'Harry';
    deselectCell();
    expect(objectData[1].user.name.first).toEqual('Harry');
    mouseDoubleClick(getCell(2, 1));
    document.activeElement.value = 'Barry';
    deselectCell();
    expect(objectData[2].user.name.first).toEqual('Barry');
  });
});

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_navigation', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should move to the next cell', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(0, 0);
    keyDown('arrow_right');
    expect(getSelected()).toEqual([[0, 1, 0, 1]]);
  });
  it('should move to the previous cell', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(1, 2);
    keyDown('arrow_left');
    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
  });
  it('should move to the cell above', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(1, 2);
    keyDown('arrow_up');
    expect(getSelected()).toEqual([[0, 2, 0, 2]]);
  });
  it('should move to the cell below', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(1, 2);
    keyDown('arrow_down');
    expect(getSelected()).toEqual([[2, 2, 2, 2]]);
  });
  describe('autoWrap disabled', function () {
    it('should NOT move to the next cell, if already at the last cell in row', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapRow: false
      });
      selectCell(0, 4);
      keyDown('arrow_right');
      expect(getSelected()).toEqual([[0, 4, 0, 4]]);
    });
    it('should NOT move to the previous cell, if already at the first cell in row', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapRow: false
      });
      selectCell(1, 0);
      keyDown('arrow_left');
      expect(getSelected()).toEqual([[1, 0, 1, 0]]);
    });
    it('should NOT move to the cell below, if already at the last cell in column', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapCol: false
      });
      selectCell(4, 0);
      keyDown('arrow_down');
      expect(getSelected()).toEqual([[4, 0, 4, 0]]);
    });
    it('should NOT move to the cell above, if already at the first cell in column', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapCol: false
      });
      selectCell(0, 1);
      keyDown('arrow_up');
      expect(getSelected()).toEqual([[0, 1, 0, 1]]);
    });
  });
  describe('autoWrap enabled', function () {
    it('should move to the first cell of the next row, if already at the last cell in row', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapRow: true
      });
      selectCell(0, 4);
      keyDown('arrow_right');
      expect(getSelected()).toEqual([[1, 0, 1, 0]]);
    });
    it('should move to the first cell of the previous row, if already at the first cell in row', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapRow: true
      });
      selectCell(1, 0);
      keyDown('arrow_left');
      expect(getSelected()).toEqual([[0, 4, 0, 4]]);
    });
    it('should move to the first cell of the next column, if already at the last cell in column', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapCol: true
      });
      selectCell(4, 1);
      keyDown('arrow_down');
      expect(getSelected()).toEqual([[0, 2, 0, 2]]);
    });
    it('should move to the last cell of the previous column, if already at the first cell in column', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapCol: true
      });
      selectCell(0, 1);
      keyDown('arrow_up');
      expect(getSelected()).toEqual([[4, 0, 4, 0]]);
    });
    it('should move to the first cell of the first row, after trying to get to the next cell in row, being already at the last cell in table', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapRow: true
      });
      selectCell(4, 4);
      keyDown('arrow_right');
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    });
    it('should move to the first cell of the first row, after trying to get to the next cell in column, being already at the last cell in table', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapCol: true
      });
      selectCell(4, 4);
      keyDown('arrow_down');
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    });
    it('should move to the last cell of the last row, after trying to get to the previous cell in row, being already at the first cell in table', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapRow: true
      });
      selectCell(0, 0);
      keyDown('arrow_left');
      expect(getSelected()).toEqual([[4, 4, 4, 4]]);
    });
    it('should move to the last cell of the last row, after trying to get to the previous cell in column, being already at the first cell in table', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapCol: true
      });
      selectCell(0, 0);
      keyDown('arrow_up');
      expect(getSelected()).toEqual([[4, 4, 4, 4]]);
    });
    it('should traverse whole table by constantly selecting next cell in row', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapRow: true
      });
      selectCell(0, 0);

      for (var row = 0, rlen = countRows(); row < rlen; row++) {
        for (var col = 0, clen = countCols(); col < clen; col++) {
          expect(getSelected()).toEqual([[row, col, row, col]]);
          keyDown('arrow_right');
        }
      }

      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    });
    it('should traverse whole table by constantly selecting previous cell in row', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapRow: true
      });
      selectCell(4, 4);

      for (var row = countRows() - 1; row >= 0; row--) {
        for (var col = countCols() - 1; col >= 0; col--) {
          expect(getSelected()).toEqual([[row, col, row, col]]);
          keyDown('arrow_left');
        }
      }

      expect(getSelected()).toEqual([[4, 4, 4, 4]]);
    });
    it('should traverse whole table by constantly selecting next cell in column', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapCol: true
      });
      selectCell(0, 0);

      for (var col = 0, clen = countCols(); col < clen; col++) {
        for (var row = 0, rlen = countRows(); row < rlen; row++) {
          expect(getSelected()).toEqual([[row, col, row, col]]);
          keyDown('arrow_down');
        }
      }

      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    });
    it('should traverse whole table by constantly selecting previous cell in column', function () {
      handsontable({
        startRows: 5,
        startCols: 5,
        autoWrapCol: true
      });
      selectCell(4, 4);

      for (var col = countCols() - 1; col >= 0; col--) {
        for (var row = countRows() - 1; row >= 0; row--) {
          expect(getSelected()).toEqual([[row, col, row, col]]);
          keyDown('arrow_up');
        }
      }

      expect(getSelected()).toEqual([[4, 4, 4, 4]]);
    });
  });
});

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_onKeyDown', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should advance to next cell when TAB is pressed', function () {
    // https://github.com/handsontable/handsontable/issues/151
    handsontable();
    selectCell(0, 0);
    keyDownUp('tab');
    expect(getSelected()).toEqual([[0, 1, 0, 1]]);
  });
  it('should advance to previous cell when shift+TAB is pressed', function () {
    handsontable();
    selectCell(1, 1);
    keyDownUp('shift+tab');
    expect(getSelected()).toEqual([[1, 0, 1, 0]]);
  });
  describe('while editing (quick edit mode)', function () {
    it('should finish editing and advance to next cell when TAB is pressed', function () {
      // https://github.com/handsontable/handsontable/issues/215
      handsontable();
      selectCell(1, 1);
      keyDownUp('x'); // value to cell trigger quick edit mode

      keyProxy().val('Ted');
      keyDownUp('tab');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[1, 2, 1, 2]]);
    });
    it('should finish editing and advance to lower cell when enter is pressed', function () {
      // https://github.com/handsontable/handsontable/issues/215
      handsontable();
      selectCell(1, 1);
      keyDownUp('x'); // value to cell trigger quick edit mode

      keyProxy().val('Ted');
      keyDownUp('enter');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[2, 1, 2, 1]]);
    });
    it('should finish editing and advance to higher cell when shift+enter is pressed', function () {
      // https://github.com/handsontable/handsontable/issues/215
      handsontable();
      selectCell(1, 1);
      keyDownUp('x'); // trigger quick edit mode

      keyProxy().val('Ted');
      keyDownUp('shift+enter');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[0, 1, 0, 1]]);
    });
    it('should finish editing and advance to lower cell when down arrow is pressed', function () {
      handsontable();
      selectCell(1, 1);
      keyDownUp('x');
      keyProxy().val('Ted');
      keyDownUp('arrow_down');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[2, 1, 2, 1]]);
    });
    it('should finish editing and advance to higher cell when up arrow is pressed', function () {
      handsontable();
      selectCell(1, 1);
      keyDownUp('x');
      keyProxy().val('Ted');
      keyDownUp('arrow_up');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[0, 1, 0, 1]]);
    });
    it('should finish editing and advance to right cell when right arrow is pressed', function () {
      handsontable();
      selectCell(1, 1);
      keyDownUp('x');
      keyProxy().val('Ted');
      keyDownUp('arrow_right');
      keyDownUp('arrow_right');
      keyDownUp('arrow_right');
      keyDownUp('arrow_right');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[2, 0, 2, 0]]);
    });
    it('should finish editing and advance to left cell when left arrow is pressed', function () {
      handsontable();
      selectCell(1, 1);
      keyDownUp('x');
      keyProxy().val('Ted');
      Handsontable.dom.setCaretPosition(keyProxy()[0], 0, 0);
      keyDownUp('arrow_left');
      keyDownUp('arrow_left');
      keyDownUp('arrow_left');
      keyDownUp('arrow_left');
      keyDownUp('arrow_left');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[0, 1, 0, 1]]);
    });
    it('should finish editing and advance to lower cell when enter is pressed (with sync validator)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        validator: function validator(val, cb) {
          cb(true);
        },
        afterValidate: onAfterValidate
      });
      selectCell(1, 1);
      keyDownUp('x');
      keyProxy().val('Ted');
      onAfterValidate.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalled();
        expect(getData()[1][1]).toEqual('Ted');
        expect(getSelected()).toEqual([[2, 1, 2, 1]]);
        done();
      }, 200);
    });
    it('should finish editing and advance to lower cell when enter is pressed (with async validator)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        validator: function validator(val, cb) {
          setTimeout(function () {
            cb(true);
          }, 10);
        },
        afterValidate: onAfterValidate
      });
      selectCell(1, 1);
      keyDownUp('x');
      keyProxy().val('Ted');
      onAfterValidate.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalled();
        expect(getData()[1][1]).toEqual('Ted');
        expect(getSelected()).toEqual([[2, 1, 2, 1]]);
        done();
      }, 200);
    });
  });
  describe('while editing (full edit mode)', function () {
    it('should finish editing and advance to next cell when TAB is pressed', function () {
      // https://github.com/handsontable/handsontable/issues/215
      handsontable();
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      keyDownUp('tab');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[1, 2, 1, 2]]);
    });
    it('should finish editing and advance to lower cell when enter is pressed', function () {
      // https://github.com/handsontable/handsontable/issues/215
      handsontable();
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      keyDownUp('enter');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[2, 1, 2, 1]]);
    });
    it('should finish editing and advance to higher cell when shift+enter is pressed', function () {
      // https://github.com/handsontable/handsontable/issues/215
      handsontable();
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      keyDownUp('shift+enter');
      expect(getData()[1][1]).toEqual('Ted');
      expect(getSelected()).toEqual([[0, 1, 0, 1]]);
    });
    it('shouldn\'t finish editing and advance to lower cell when down arrow is pressed', function () {
      handsontable();
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      keyDownUp('arrow_down');
      expect(getData()[1][1]).toEqual(null);
      expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    });
    it('shouldn\'t finish editing and advance to higher cell when up arrow is pressed', function () {
      handsontable();
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      keyDownUp('arrow_up');
      expect(getData()[1][1]).toEqual(null);
      expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    });
    it('shouldn\'t finish editing and advance to right cell when right arrow is pressed', function () {
      handsontable();
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      keyDownUp('arrow_right');
      keyDownUp('arrow_right');
      keyDownUp('arrow_right');
      keyDownUp('arrow_right');
      expect(getData()[1][1]).toEqual(null);
      expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    });
    it('shouldn\'t finish editing and advance to left cell when left arrow is pressed', function () {
      handsontable();
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      keyDownUp('arrow_left');
      keyDownUp('arrow_left');
      keyDownUp('arrow_left');
      keyDownUp('arrow_left');
      expect(getData()[1][1]).toEqual(null);
      expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    });
    it('should finish editing and advance to lower cell when enter is pressed (with sync validator)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        validator: function validator(val, cb) {
          cb(true);
        },
        afterValidate: onAfterValidate
      });
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      onAfterValidate.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalled();
        expect(getData()[1][1]).toEqual('Ted');
        expect(getSelected()).toEqual([[2, 1, 2, 1]]);
        done();
      }, 200);
    });
    it('should finish editing and advance to lower cell when enter is pressed (with async validator)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        validator: function validator(val, cb) {
          setTimeout(function () {
            cb(true);
          }, 10);
        },
        afterValidate: onAfterValidate
      });
      selectCell(1, 1);
      keyDownUp('enter');
      keyProxy().val('Ted');
      onAfterValidate.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalled();
        expect(getData()[1][1]).toEqual('Ted');
        expect(getSelected()).toEqual([[2, 1, 2, 1]]);
        done();
      }, 200);
    });
  });
});

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_populateFromArray', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfArrays = function arrayOfArrays() {
    return [['', 'Kia', 'Nissan', 'Toyota', 'Honda', 'Mix'], ['2008', 10, 11, 12, 13, {
      a: 1,
      b: 2
    }], ['2009', 20, 11, 14, 13, {
      a: 1,
      b: 2
    }], ['2010', 30, 15, 12, 13, {
      a: 1,
      b: 2
    }]];
  };

  it('should call onChange callback', function () {
    var output = null;
    handsontable({
      data: arrayOfArrays(),
      afterChange: function afterChange(changes) {
        output = changes;
      }
    });
    populateFromArray(0, 0, [['test', 'test'], ['test', 'test']], 1, 1);
    expect(output).toEqual([[0, 0, '', 'test'], [0, 1, 'Kia', 'test'], [1, 0, '2008', 'test'], [1, 1, 10, 'test']]);
  });
  it('should populate single value for whole selection', function () {
    var output = null;
    handsontable({
      data: arrayOfArrays(),
      afterChange: function afterChange(changes) {
        output = changes;
      }
    });
    populateFromArray(0, 0, [['test']], 3, 0);
    expect(output).toEqual([[0, 0, '', 'test'], [1, 0, '2008', 'test'], [2, 0, '2009', 'test'], [3, 0, '2010', 'test']]);
  });
  it('should populate value for whole selection only if populated data isn\'t an array', function () {
    var output = null;
    handsontable({
      data: arrayOfArrays(),
      afterChange: function afterChange(changes) {
        output = changes;
      }
    });
    populateFromArray(0, 0, [['test'], [[1, 2, 3]]], 3, 0);
    expect(output).toEqual([[0, 0, '', 'test'], [2, 0, '2009', 'test']]);
  });
  it('should populate value for whole selection only if populated data isn\'t an object', function () {
    var output = null;
    handsontable({
      data: arrayOfArrays(),
      afterChange: function afterChange(changes) {
        output = changes;
      }
    });
    populateFromArray(0, 0, [['test'], [{
      test: 1
    }]], 3, 0);
    expect(output).toEqual([[0, 0, '', 'test'], [2, 0, '2009', 'test']]);
  });
  it('shouldn\'t populate value if original value doesn\'t have the same data structure', function () {
    var output = null;
    handsontable({
      data: arrayOfArrays(),
      afterChange: function afterChange(changes) {
        output = changes;
      }
    });
    populateFromArray(1, 3, [['test']], 1, 5);
    expect(output).toEqual([[1, 3, 12, 'test'], [1, 4, 13, 'test']]);
  });
  it('should shift values down', function () {
    handsontable({
      data: arrayOfArrays(),
      minSpareRows: 1
    });
    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 2, 2, null, 'shift_down');
    expect(getData()).toEqual([['test', 'test2', 'test', 'Toyota', 'Honda', 'Mix'], ['test3', 'test4', 'test3', 12, 13, {
      a: 1,
      b: 2
    }], ['test', 'test2', 'test', 14, 13, {
      a: 1,
      b: 2
    }], ['', 'Kia', 'Nissan', 12, 13, {
      a: 1,
      b: 2
    }], ['2008', 10, 11, null, null, null], ['2009', 20, 11, null, null, null], ['2010', 30, 15, null, null, null], [null, null, null, null, null, null]]);
  });
  it('should shift values right', function () {
    handsontable({
      data: arrayOfArrays(),
      minSpareCols: 1
    });
    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 2, 2, null, 'shift_right');
    expect(getData()).toEqual([['test', 'test2', 'test', '', 'Kia', 'Nissan', 'Toyota', 'Honda', 'Mix', null], ['test3', 'test4', 'test3', '2008', 10, {
      a: 1,
      b: 2
    }, 12, 13, null, null], ['test', 'test2', 'test', '2009', 20, {
      a: 1,
      b: 2
    }, 14, 13, null, null], ['2010', 30, 15, 12, 13, {
      a: 1,
      b: 2
    }, null, null, null, null]]);
  });
  it('should run beforeAutofillInsidePopulate hook for each inserted value', function () {
    var hot = handsontable({
      data: arrayOfArrays()
    });
    var called = 0;
    hot.addHook('beforeAutofillInsidePopulate', function () {
      called += 1;
    });
    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 1, 1, 'Autofill.fill', 'overwrite');
    expect(called).toEqual(4);
  });
  it('should run beforeAutofillInsidePopulate hook and could change cell data before insert if returned object with value property', function () {
    var hot = handsontable({
      data: arrayOfArrays()
    });
    hot.addHook('beforeAutofillInsidePopulate', function () {
      return {
        value: 'my_test'
      };
    });
    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 1, 1, 'Autofill.fill', 'overwrite');
    expect(getDataAtCell(0, 0)).toEqual('my_test');
  });
  it('should populate 1 row from 2 selected rows', function () {
    handsontable({
      data: arrayOfArrays()
    });
    populateFromArray(2, 0, [['A1'], ['A2']], 2, 0, 'autofill', null, 'down', [[0]]);
    expect(getDataAtCell(2, 0)).toEqual('A1');
    expect(getDataAtCell(3, 0)).toEqual('2010');
  });
  it('should populate 1 column from 2 selected columns`', function () {
    handsontable({
      data: arrayOfArrays()
    });
    populateFromArray(0, 2, [['A1', 'A2']], 0, 2, 'autofill', null, 'right', [[0]]);
    expect(getDataAtCell(0, 2)).toEqual('A1');
    expect(getDataAtCell(0, 3)).toEqual('Toyota');
  });
});

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_reCreate', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should correctly re-render corner header when there is multiline content', function () {
    var settings = {
      rowHeaders: true,
      colHeaders: function colHeaders(col) {
        return "Column<br>".concat(col);
      }
    };
    handsontable(settings);
    destroy();
    handsontable(settings);
    expect(getTopLeftClone().width()).toBe(54);
    expect(getTopLeftClone().height()).toBe(45);
  });
});

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_removeCellMeta', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should remove meta for cell', function () {
    handsontable({
      data: [[1, 2, 3, 4], [5, 6, 7, 8], [0, 9, 8, 7]]
    });
    var border = {
      top: {},
      left: {}
    };
    setCellMeta(0, 0, 'borders', border);
    expect(getCellMeta(0, 0).borders).toEqual(border);
    removeCellMeta(0, 0, 'borders');
    expect(getCellMeta(0, 0).borders).toBeUndefined();
  });
  it('should remove proper cell meta when indexes was modified', function () {
    handsontable({
      modifyRow: function modifyRow(row) {
        return row + 10;
      },
      modifyCol: function modifyCol(col) {
        return col + 10;
      }
    });
    setCellMeta(0, 0, 'key', 'value');
    removeCellMeta(0, 0, 'key');
    expect(getCellMeta(0, 0).key).toBeUndefined();
  });
  it('should trigger `beforeRemoveCellMeta` hook with proper parameters', function () {
    var beforeRemoveCellMeta = jasmine.createSpy('beforeRemoveCellMeta');
    handsontable({
      data: [[1, 2, 3, 4], [5, 6, 7, 8], [0, 9, 8, 7]],
      beforeRemoveCellMeta: beforeRemoveCellMeta
    });
    setCellMeta(0, 0, 'key', 'value');
    removeCellMeta(0, 0, 'key');
    expect(beforeRemoveCellMeta).toHaveBeenCalledWith(0, 0, 'key', 'value', undefined, undefined);
  });
  it('should trigger `afterRemoveCellMeta` hook with proper parameters - case 1 (removed `key` existed)', function () {
    var afterRemoveCellMeta = jasmine.createSpy('afterRemoveCellMeta');
    handsontable({
      data: [[1, 2, 3, 4], [5, 6, 7, 8], [0, 9, 8, 7]],
      afterRemoveCellMeta: afterRemoveCellMeta
    });
    setCellMeta(0, 0, 'key', 'value');
    removeCellMeta(0, 0, 'key');
    expect(afterRemoveCellMeta).toHaveBeenCalledWith(0, 0, 'key', 'value', undefined, undefined);
  });
  it('should trigger `afterRemoveCellMeta` hook with proper parameters - case 2  (removed `key` not existed)', function () {
    var afterRemoveCellMeta = jasmine.createSpy('afterRemoveCellMeta');
    handsontable({
      data: [[1, 2, 3, 4], [5, 6, 7, 8], [0, 9, 8, 7]],
      afterRemoveCellMeta: afterRemoveCellMeta
    });
    removeCellMeta(0, 0, 'key');
    expect(afterRemoveCellMeta).toHaveBeenCalledWith(0, 0, 'key', undefined, undefined, undefined);
  });
  it('should call `beforeRemoveCellMeta` plugin hook with visual indexes as parameters', function () {
    var rowInsideHook;
    var colInsideHook;
    handsontable({
      beforeRemoveCellMeta: function beforeRemoveCellMeta(row, col) {
        rowInsideHook = row;
        colInsideHook = col;
      },
      modifyRow: function modifyRow(row) {
        return row + 10;
      },
      modifyCol: function modifyCol(col) {
        return col + 10;
      }
    });
    removeCellMeta(0, 1, 'key');
    expect(rowInsideHook).toEqual(0);
    expect(colInsideHook).toEqual(1);
  });
  it('should call `afterRemoveCellMeta` plugin hook with visual indexes as parameters', function () {
    var rowInsideHook;
    var colInsideHook;
    handsontable({
      afterRemoveCellMeta: function afterRemoveCellMeta(row, col) {
        rowInsideHook = row;
        colInsideHook = col;
      },
      modifyRow: function modifyRow(row) {
        return row + 10;
      },
      modifyCol: function modifyCol(col) {
        return col + 10;
      }
    });
    removeCellMeta(0, 1, 'key');
    expect(rowInsideHook).toEqual(0);
    expect(colInsideHook).toEqual(1);
  });
  it('should block removing cell meta when hook `beforeRemoveCellMeta` return false', function () {
    handsontable({
      beforeRemoveCellMeta: function beforeRemoveCellMeta(row, col) {
        if (row === 0 && col === 0) {
          return false;
        }

        return true;
      }
    });
    setCellMeta(0, 0, 'key', 'value');
    setCellMeta(0, 1, 'key', 'value');
    removeCellMeta(0, 0, 'key');
    removeCellMeta(0, 1, 'key'); // `value` shouldn't be removed

    expect(getCellMeta(0, 0).key).toEqual('value');
    expect(getCellMeta(0, 1).key).toBeUndefined();
  });
});

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_render', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('all cells should get green background', function () {
    function greenCell(instance, td) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      Handsontable.renderers.TextRenderer.apply(this, [instance, td].concat(args));
      td.style.backgroundColor = 'green';
    }

    handsontable({
      data: [['a', 'b'], ['c', 'd']],
      minRows: 4,
      minCols: 4,
      minSpareRows: 4,
      minSpareCols: 4,
      cells: function cells() {
        return {
          renderer: greenCell
        };
      }
    });
    var $tds = spec().$container.find('.htCore tbody td');
    $tds.each(function () {
      expect(this.style.backgroundColor).toEqual('green');
    });
  });
  it('render should update border dimensions', function () {
    var data = [['a', 'b'], ['c', 'd']];
    handsontable({
      data: data,
      minRows: 4,
      minCols: 4,
      minSpareRows: 4,
      minSpareCols: 4
    });
    selectCell(1, 1);
    data[1][1] = 'dddddddddddddddddddd';
    render();
    var $td = spec().$container.find('.htCore tbody tr:eq(1) td:eq(1)');
    expect(spec().$container.find('.wtBorder.current').width()).toBeGreaterThan($td.width());
  });
  it('should not render table twice', function () {
    var counter = 0;
    handsontable({
      data: [['Joe Red']],
      afterRender: function afterRender() {
        counter += 1;
      }
    });
    populateFromArray(0, 0, [['t', 'e', 's', 't']]);
    expect(counter).toEqual(2); // 1 from load and 1 from populateFromArray
  });
  it('should run afterRenderer hook', function () {
    var lastCellProperties;
    handsontable({
      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
      afterRenderer: function afterRenderer(td, row, col, prop, value, cellProperties) {
        td.innerHTML = 'Changed by plugin';

        if (!cellProperties) {
          throw new Error();
        }

        lastCellProperties = cellProperties;
      }
    });
    expect(spec().$container.find('td:eq(0)')[0].innerHTML).toEqual('Changed by plugin');
    expect(lastCellProperties.row).toEqual(1);
    expect(lastCellProperties.col).toEqual(4);
  });
  it('should run beforeValueRender hook', function () {
    handsontable({
      data: [['A1', 'B1']],
      beforeValueRender: function beforeValueRender(value, cellProperties) {
        return cellProperties.col === 0 ? 'Test' : value;
      }
    });
    expect(spec().$container.find('td:eq(0)')[0].innerHTML).toEqual('Test');
    expect(spec().$container.find('td:eq(1)')[0].innerHTML).toEqual('B1');
  });
  it('should run beforeRenderer hook', function () {
    var lastCellProperties;
    handsontable({
      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
      beforeRenderer: function beforeRenderer(td, row, col, prop, value, cellProperties) {
        td.innerHTML = 'Changed by plugin';
        lastCellProperties = cellProperties;
      }
    }); // Value is overwritten by text renderer

    expect(spec().$container.find('td:eq(0)')[0].innerHTML).toEqual('1');
    expect(lastCellProperties.row).toEqual(1);
    expect(lastCellProperties.col).toEqual(4);
  });
  it('should reflect changes applied in beforeRenderer into afterRenderer', function () {
    var afterRenderer = jasmine.createSpy();
    handsontable({
      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
      beforeRenderer: function beforeRenderer(td, row, col, prop, value, cellProperties) {
        cellProperties.foo = 'bar';
      },
      afterRenderer: afterRenderer
    });
    expect(afterRenderer.calls.count()).toBe(10);
    expect(afterRenderer.calls.argsFor(0)[0] instanceof HTMLTableCellElement).toBe(true);
    expect(afterRenderer.calls.argsFor(0)[1]).toBe(0);
    expect(afterRenderer.calls.argsFor(0)[2]).toBe(0);
    expect(afterRenderer.calls.argsFor(0)[3]).toBe(0);
    expect(afterRenderer.calls.argsFor(0)[4]).toBe(1);
    expect(afterRenderer.calls.argsFor(0)[5].foo).toBe('bar');
  });
});

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('Core_selection', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should correctly render the selection using event simulation', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(9, 8),
      selectionMode: 'multiple',
      colHeaders: true,
      rowHeaders: true
    });
    $(getCell(5, 4)).simulate('mousedown');
    $(getCell(1, 1)).simulate('mouseover');
    $(getCell(1, 1)).simulate('mouseup');
    keyDown('ctrl');
    $(getCell(0, 2)).simulate('mousedown');
    $(getCell(8, 2)).simulate('mouseover');
    $(getCell(7, 2)).simulate('mouseup');
    $(getCell(2, 4)).simulate('mousedown');
    $(getCell(2, 4)).simulate('mouseover');
    $(getCell(2, 4)).simulate('mouseup');
    $(getCell(7, 6)).simulate('mousedown');
    $(getCell(8, 7)).simulate('mouseover');
    $(getCell(8, 7)).simulate('mouseup');
    expect("\n      |   \u2551   : - : - : - : - :   : - : - |\n      |===:===:===:===:===:===:===:===:===|\n      | - \u2551   :   : 0 :   :   :   :   :   |\n      | - \u2551   : 0 : 1 : 0 : 0 :   :   :   |\n      | - \u2551   : 0 : 1 : 0 : 1 :   :   :   |\n      | - \u2551   : 0 : 1 : 0 : 0 :   :   :   |\n      | - \u2551   : 0 : 1 : 0 : 0 :   :   :   |\n      | - \u2551   : 0 : 1 : 0 : 0 :   :   :   |\n      | - \u2551   :   : 0 :   :   :   :   :   |\n      | - \u2551   :   : 0 :   :   :   : A : 0 |\n      | - \u2551   :   : 0 :   :   :   : 0 : 0 |\n      ").toBeMatchToSelectionPattern();
  });
  it('should focus external textarea when clicked during editing', function () {
    var textarea = $('<input type="text">').prependTo($('body'));
    handsontable();
    selectCell(0, 0);
    keyDown('enter'); // $("html").triggerHandler('mouseup');

    $('html').simulate('mouseup');
    textarea.focus();
    expect(document.activeElement).toBe(textarea[0]);
    textarea.remove();
  });
  it('should deselect currently selected cell', function () {
    handsontable();
    selectCell(0, 0);
    $('html').simulate('mousedown');
    expect(getSelected()).toBeUndefined();
  });
  it('should fix start range if provided is out of bounds (to the left)', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      autoWrapCol: false,
      autoWrapRow: false
    });
    selectCell(0, 0);
    keyDownUp('arrow_left');
    expect(getSelected()).toEqual([[0, 0, 0, 0]]);
  });
  it('should fix start range if provided is out of bounds (to the top)', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      autoWrapCol: false,
      autoWrapRow: false
    });
    selectCell(0, 0);
    keyDownUp('arrow_up');
    expect(getSelected()).toEqual([[0, 0, 0, 0]]);
  });
  it('should fix start range if provided is out of bounds (to the right)', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      autoWrapCol: false,
      autoWrapRow: false
    });
    selectCell(0, 4);
    keyDownUp('arrow_right');
    expect(getSelected()).toEqual([[0, 4, 0, 4]]);
  });
  it('should fix start range if provided is out of bounds (to the bottom)', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      autoWrapCol: false,
      autoWrapRow: false
    });
    selectCell(4, 0);
    keyDownUp('arrow_down');
    expect(getSelected()).toEqual([[4, 0, 4, 0]]);
  });
  it('should fix end range if provided is out of bounds (to the left)', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(0, 1);
    keyDownUp('shift+arrow_left');
    keyDownUp('shift+arrow_left');
    expect(getSelected()).toEqual([[0, 1, 0, 0]]);
  });
  it('should fix end range if provided is out of bounds (to the top)', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(1, 0);
    keyDownUp('shift+arrow_up');
    keyDownUp('shift+arrow_up');
    expect(getSelected()).toEqual([[1, 0, 0, 0]]);
  });
  it('should fix end range if provided is out of bounds (to the right)', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(0, 3);
    keyDownUp('shift+arrow_right');
    keyDownUp('shift+arrow_right');
    expect(getSelected()).toEqual([[0, 3, 0, 4]]);
  });
  it('should fix end range if provided is out of bounds (to the bottom)', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(3, 0);
    keyDownUp('shift+arrow_down');
    keyDownUp('shift+arrow_down');
    keyDownUp('shift+arrow_down');
    expect(getSelected()).toEqual([[3, 0, 4, 0]]);
  });
  it('should select multiple cells', function () {
    handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(3, 0, 4, 1);
    expect(getSelected()).toEqual([[3, 0, 4, 1]]);
  });
  it('should call onSelectionEnd as many times as onSelection when `selectCell` is called', function () {
    var tick = 0;
    var tickEnd = 0;
    handsontable({
      startRows: 5,
      startCols: 5,
      afterSelection: function afterSelection() {
        tick += 1;
      },
      afterSelectionEnd: function afterSelectionEnd() {
        tickEnd += 1;
      }
    });
    selectCell(3, 0);
    selectCell(1, 1);
    expect(tick).toEqual(2);
    expect(tickEnd).toEqual(2);
  });
  it('should call onSelectionEnd when user finishes selection by releasing SHIFT key (3 times)', function () {
    var tick = 0;
    handsontable({
      startRows: 5,
      startCols: 5,
      afterSelectionEnd: function afterSelectionEnd() {
        tick += 1;
      }
    });
    selectCell(3, 0); // makes tick++

    keyDownUp('shift+arrow_down'); // makes tick++

    keyDownUp('shift+arrow_down'); // makes tick++

    keyDownUp('shift+arrow_down'); // makes tick++

    expect(getSelected()).toEqual([[3, 0, 4, 0]]);
    expect(tick).toEqual(4);
  });
  it('should call onSelectionEnd when user finishes selection by releasing SHIFT key (1 time)', function () {
    var tick = 0;
    handsontable({
      startRows: 5,
      startCols: 5,
      afterSelectionEnd: function afterSelectionEnd() {
        tick += 1;
      }
    });
    selectCell(3, 0); // makes tick++

    keyDown('shift+arrow_down');
    keyDown('shift+arrow_down');
    keyDownUp('shift+arrow_down'); // makes tick++

    expect(getSelected()).toEqual([[3, 0, 4, 0]]);
    expect(tick).toEqual(2);
  });
  it('should select columns by click on header with SHIFT key', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      colHeaders: true
    });
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mousedown');
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mouseup');
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', {
      shiftKey: true
    });
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');
    expect(getSelected()).toEqual([[0, 1, 4, 4]]);
  });
  it('should select rows by click on header with SHIFT key', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      rowHeaders: true
    });
    spec().$container.find('.ht_clone_left tr:eq(1) th:eq(0)').simulate('mousedown');
    spec().$container.find('.ht_clone_left tr:eq(1) th:eq(0)').simulate('mouseup');
    spec().$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mousedown', {
      shiftKey: true
    });
    spec().$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mouseup');
    expect(getSelected()).toEqual([[1, 0, 4, 4]]);
  });
  it('should select columns by click on header with SHIFT key', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      colHeaders: true
    });
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mousedown');
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mouseup');
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', {
      shiftKey: true
    });
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');
    expect(getSelected()).toEqual([[0, 1, 4, 4]]);
  });
  it('should change selection after click on row header with SHIFT key', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      rowHeaders: true
    });
    selectCell(1, 1, 3, 3);
    spec().$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mousedown', {
      shiftKey: true
    });
    spec().$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mouseup');
    expect(getSelected()).toEqual([[1, 0, 4, 4]]);
  });
  it('should change selection after click on column header with SHIFT key', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      colHeaders: true
    });
    selectCell(1, 1, 3, 3);
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', {
      shiftKey: true
    });
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');
    expect(getSelected()).toEqual([[0, 1, 4, 4]]);
  });
  it('should call onSelection while user selects cells with mouse; onSelectionEnd when user finishes selection', function () {
    var tick = 0;
    var tickEnd = 0;
    handsontable({
      startRows: 5,
      startCols: 5,
      afterSelection: function afterSelection() {
        tick += 1;
      },
      afterSelectionEnd: function afterSelectionEnd() {
        tickEnd += 1;
      }
    });
    spec().$container.find('tr:eq(0) td:eq(0)').simulate('mousedown');
    spec().$container.find('tr:eq(0) td:eq(1)').simulate('mouseover');
    spec().$container.find('tr:eq(1) td:eq(3)').simulate('mouseover');
    spec().$container.find('tr:eq(1) td:eq(3)').simulate('mouseup');
    expect(getSelected()).toEqual([[0, 0, 1, 3]]);
    expect(tick).toEqual(3);
    expect(tickEnd).toEqual(1);
  });
  it('should properly select columns, when the user moves the cursor over column headers across two overlays', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      colHeaders: true,
      fixedColumnsLeft: 2
    });
    spec().$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mousedown');
    spec().$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseover');
    spec().$container.find('.ht_clone_top tr:eq(0) th:eq(2)').simulate('mouseover');
    spec().$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseover');
    spec().$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseup');
    expect(getSelected()).toEqual([[0, 1, 4, 1]]);
  });
  it('should move focus to selected cell', function () {
    var $input = $('<input>').appendTo(document.body);
    handsontable({
      startRows: 5,
      startCols: 5
    });
    $input[0].focus();
    selectCell(0, 0);
    keyDownUp('enter');
    expect(isEditorVisible()).toEqual(true);
    $input.remove();
  }); // This test should cover the #893 case, but it always passes. It seems like the keydown event (with CTRL key pressed) isn't delivered.

  it('should not move focus from outside elements on CTRL keydown event, when no cell is selected', function () {
    var $input = $('<input type="text"/>');
    $('body').append($input);
    handsontable();
    selectCell(0, 0);
    expect(document.activeElement.nodeName).toBeInArray(['TEXTAREA', 'BODY', 'HTML']);
    $input.focus();
    expect(document.activeElement.nodeName).toBe('INPUT');
    $input.simulate('keydown', {
      ctrlKey: true,
      metaKey: true
    });
    expect(document.activeElement.nodeName).toBe('INPUT');
    $input.remove();
  });
  it('should select the entire column after column header is clicked', function () {
    handsontable({
      width: 200,
      height: 100,
      startRows: 10,
      startCols: 5,
      colHeaders: true
    });
    spec().$container.find('thead th:eq(0)').simulate('mousedown');
    expect(getSelected()).toEqual([[0, 0, 9, 0]]);
    expect("\n      | * :   :   :   :   |\n      |===:===:===:===:===|\n      | A :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      | 0 :   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should select the entire column and row after column header and row header is clicked', function () {
    handsontable({
      width: 200,
      height: 100,
      startRows: 10,
      startCols: 5,
      colHeaders: true,
      rowHeaders: true
    });
    spec().$container.find('thead th:eq(3)').simulate('mousedown');
    keyDown('ctrl');
    spec().$container.find('tr:eq(2) th:eq(0)').simulate('mousedown');
    expect("\n      |   \u2551 - : - : * : - : - |\n      |===:===:===:===:===:===|\n      | - \u2551   :   : 0 :   :   |\n      | * \u2551 A : 0 : 1 : 0 : 0 |\n      | - \u2551   :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should select the entire column and row after column header and row header is clicked when cell editor is open', function () {
    handsontable({
      width: 200,
      height: 100,
      startRows: 5,
      startCols: 5,
      colHeaders: true,
      rowHeaders: true
    });
    selectCell(0, 0);
    keyDownUp('enter');
    expect(getActiveEditor()).not.toBeUndefined();
    keyDown('ctrl');
    spec().$container.find('thead th:eq(3)').simulate('mousedown');
    spec().$container.find('tr:eq(3) th:eq(0)').simulate('mousedown');
    expect("\n      |   \u2551 - : - : * : - : - |\n      |===:===:===:===:===:===|\n      | - \u2551 0 :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      | * \u2551 A : 0 : 1 : 0 : 0 |\n      | - \u2551   :   : 0 :   :   |\n      | - \u2551   :   : 0 :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not overwrite background color of the cells with custom CSS classes', function () {
    handsontable({
      width: 300,
      height: 150,
      startRows: 5,
      startCols: 5,
      cells: function cells(row, col) {
        return row === 1 && col === 1 ? {
          className: 'red-background'
        } : void 0;
      }
    });
    $(getCell(0, 0)).simulate('mousedown');
    $(getCell(4, 4)).simulate('mouseover');
    $(getCell(4, 4)).simulate('mouseup');
    expect(window.getComputedStyle(getCell(1, 1))['background-color']).toBe('rgb(255, 0, 0)');
  });
  it('should select the entire column after column header is clicked (in fixed rows/cols corner)', function () {
    handsontable({
      width: 200,
      height: 100,
      startRows: 10,
      startCols: 5,
      colHeaders: true,
      rowHeaders: true,
      fixedRowsTop: 2,
      fixedColumnsLeft: 2
    });
    spec().$container.find('.ht_master thead th:eq(1)').simulate('mousedown');
    expect(getSelected()).toEqual([[0, 0, 9, 0]]);
    expect("\n      |   \u2551 * :   |   :   :   |\n      |===:===:===:===:===:===|\n      | - \u2551 A :   |   :   :   |\n      | - \u2551 0 :   |   :   :   |\n      |---:---:---:---:---:---|\n      | - \u2551 0 :   |   :   :   |\n      | - \u2551 0 :   |   :   :   |\n      | - \u2551 0 :   |   :   :   |\n      | - \u2551 0 :   |   :   :   |\n      | - \u2551 0 :   |   :   :   |\n      | - \u2551 0 :   |   :   :   |\n      | - \u2551 0 :   |   :   :   |\n      | - \u2551 0 :   |   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should select the entire fixed column after column header is clicked, after scroll horizontally', function () {
    var hot = handsontable({
      width: 200,
      height: 100,
      startRows: 10,
      startCols: 10,
      colHeaders: true,
      rowHeaders: true,
      fixedColumnsLeft: 2
    });
    hot.render();
    hot.scrollViewportTo(void 0, hot.countCols() - 1);
    spec().$container.find('.ht_master thead th:eq(2)').simulate('mousedown');
    spec().$container.find('.ht_master thead th:eq(2)').simulate('mouseup');
    expect(getSelected()).toEqual([[0, 1, 9, 1]]);
    expect("\n      |   \u2551   : * |   :   :   :   :   :   :   :   |\n      |===:===:===:===:===:===:===:===:===:===:===|\n      | - \u2551   : A |   :   :   :   :   :   :   :   |\n      | - \u2551   : 0 |   :   :   :   :   :   :   :   |\n      | - \u2551   : 0 |   :   :   :   :   :   :   :   |\n      | - \u2551   : 0 |   :   :   :   :   :   :   :   |\n      | - \u2551   : 0 |   :   :   :   :   :   :   :   |\n      | - \u2551   : 0 |   :   :   :   :   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should scroll viewport after partially visible column\'s header is clicked, without vertical scroll manipulation', function () {
    var hot = handsontable({
      width: 200,
      height: 100,
      startRows: 40,
      startCols: 40,
      colWidths: 73,
      colHeaders: true,
      rowHeaders: true
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    mainHolder.scrollTop = 200;
    var firstLastVisibleColumn = hot.view.wt.wtTable.getLastVisibleColumn();
    var headerElement = hot.view.wt.wtTable.getColumnHeader(firstLastVisibleColumn + 1);
    $(headerElement).simulate('mousedown');
    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toBe(firstLastVisibleColumn + 1);
    expect(mainHolder.scrollTop).toBe(200);
  });
  it('should set the selection end to the first visible row, when dragging the selection from a cell to a column header',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      width: 200,
      height: 200,
      startRows: 20,
      startCols: 20,
      colHeaders: true,
      rowHeaders: true
    });
    hot.scrollViewportTo(10, 10);
    hot.render();
    yield sleep(30);
    $(getCell(12, 11)).simulate('mousedown');
    spec().$container.find('.ht_clone_top thead th:eq(2)').simulate('mouseover');
    yield sleep(30);
    expect(getSelected()).toEqual([[12, 11, 10, 11]]);
  }));
  it('should render selection borders with set proper z-indexes', function () {
    var hot = handsontable({
      width: 200,
      height: 200,
      startRows: 20,
      startCols: 20,
      colHeaders: true,
      rowHeaders: true
    });
    hot.selectCell(1, 1, 2, 2);
    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .current')).zIndex).toBe('10');
    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .area')).zIndex).toBe('8');
  });
  it('should set the selection end to the first visible column, when dragging the selection from a cell to a row header',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      width: 200,
      height: 200,
      startRows: 20,
      startCols: 20,
      colHeaders: true,
      rowHeaders: true
    });
    hot.scrollViewportTo(10, 10);
    hot.render();
    yield sleep(30);
    $(getCell(12, 11)).simulate('mousedown');
    spec().$container.find('.ht_clone_left tbody th:eq(12)').simulate('mouseover');
    yield sleep(30);
    expect(getSelected()).toEqual([[12, 11, 12, 10]]);
  }));
  it('should allow to scroll the table when a whole column is selected and table is longer than it\'s container',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var errCount = 0;
    $(window).on('error.selectionTest', function () {
      errCount += 1;
    });
    var onAfterScrollVertically = jasmine.createSpy('onAfterScrollVertically');
    var hot = handsontable({
      height: 100,
      width: 300,
      startRows: 100,
      startCols: 5,
      colHeaders: true,
      rowHeaders: true,
      afterScrollVertically: onAfterScrollVertically
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    mainHolder.scrollTop = 0;
    spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mousedown');
    spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseup');
    mainHolder.scrollTop = 120;
    yield sleep(100);
    expect(errCount).toEqual(0); // expect no errors to be thrown

    $(window).off('error.selectionTest');
  }));
  it('should scroll to the end of the selection, when selecting cells using the keyboard', function () {
    var hot = handsontable({
      height: 300,
      width: 300,
      startRows: 50,
      startCols: 50,
      colHeaders: true,
      rowHeaders: true,
      fixedRowsTop: 2,
      fixedColumnsLeft: 2
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    mainHolder.scrollTop = 100;
    selectCell(1, 3);
    keyDownUp('arrow_down');
    expect(mainHolder.scrollTop).toEqual(0);
    mainHolder.scrollTop = 100;
    selectCell(1, 3);
    keyDownUp('shift+arrow_down');
    expect(mainHolder.scrollTop).toEqual(0);
    mainHolder.scrollLeft = 100;
    selectCell(3, 1);
    keyDownUp('arrow_right');
    expect(mainHolder.scrollLeft).toEqual(0);
    mainHolder.scrollLeft = 100;
    selectCell(3, 1);
    keyDownUp('shift+arrow_right');
    expect(mainHolder.scrollLeft).toEqual(0);
    var lastVisibleColumn = hot.view.wt.wtTable.getLastVisibleColumn();
    selectCell(3, lastVisibleColumn);
    keyDownUp('arrow_right');
    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 1);
    keyDownUp('arrow_right');
    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 2);
    keyDownUp('shift+arrow_right');
    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 3);
    var lastVisibleRow = hot.view.wt.wtTable.getLastVisibleRow();
    selectCell(lastVisibleRow, 3);
    keyDownUp('arrow_down');
    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 1);
    keyDownUp('arrow_down');
    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 2);
    keyDownUp('shift+arrow_down');
    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 3);
  });
  it('should scroll to the last selected row or column of the selection, when user uses the keyboard', function () {
    var hot = handsontable({
      height: 300,
      width: 300,
      startRows: 50,
      startCols: 50,
      colHeaders: true,
      rowHeaders: true,
      fixedRowsTop: 2,
      fixedColumnsLeft: 2
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    var lastVisibleColumn = hot.view.wt.wtTable.getLastVisibleColumn();
    var lastVisibleRow = hot.view.wt.wtTable.getLastVisibleRow();
    var rowHeader = hot.view.wt.wtTable.getRowHeader(lastVisibleRow);
    var columnHeader = hot.view.wt.wtTable.getColumnHeader(lastVisibleColumn);
    $(columnHeader).simulate('mousedown');
    $(columnHeader).simulate('mouseup');
    keyDownUp('shift+arrow_right');
    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 1);
    keyDownUp('shift+arrow_right');
    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 2);
    keyDownUp('shift+arrow_right');
    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 3);
    var scrollLeft = mainHolder.scrollLeft;
    expect(scrollLeft).toBeGreaterThan(0);
    expect(mainHolder.scrollTop).toBe(0);
    $(rowHeader).simulate('mousedown');
    $(rowHeader).simulate('mouseup');
    keyDownUp('shift+arrow_down');
    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 1);
    keyDownUp('shift+arrow_down');
    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 2);
    keyDownUp('shift+arrow_down');
    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 3);
    expect(mainHolder.scrollLeft).toBe(scrollLeft);
    expect(mainHolder.scrollTop).toBeGreaterThan(0);
  });
  it('should select the entire row after row header is clicked', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      colHeaders: true,
      rowHeaders: true
    });
    spec().$container.find('tr:eq(2) th:eq(0)').simulate('mousedown');
    expect(getSelected()).toEqual([[1, 0, 1, 4]]);
    expect("\n      |   \u2551 - : - : - : - : - |\n      |===:===:===:===:===:===|\n      |   \u2551   :   :   :   :   |\n      | * \u2551 A : 0 : 0 : 0 : 0 |\n      |   \u2551   :   :   :   :   |\n      |   \u2551   :   :   :   :   |\n      |   \u2551   :   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should scroll viewport after partially visible row\'s header is clicked, without horizontal scroll manipulation', function () {
    var hot = handsontable({
      width: 200,
      height: 100,
      startRows: 40,
      startCols: 40,
      rowHeights: 27,
      colHeaders: true,
      rowHeaders: true
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    mainHolder.scrollLeft = 200;
    var firstLastVisibleRow = hot.view.wt.wtTable.getLastVisibleRow();
    var headerElement = hot.view.wt.wtTable.getRowHeader(firstLastVisibleRow + 1);
    $(headerElement).simulate('mousedown');
    expect(hot.view.wt.wtTable.getLastVisibleRow()).toBe(firstLastVisibleRow + 1);
    expect(mainHolder.scrollLeft).toBe(200);
  });
  it('should select the entire row of a partially fixed table after row header is clicked', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      colHeaders: true,
      rowHeaders: true,
      fixedRowsTop: 2,
      fixedColumnsLeft: 2
    });
    spec().$container.find('tr:eq(2) th:eq(0)').simulate('mousedown');
    expect(getSelected()).toEqual([[1, 0, 1, 4]]);
    spec().$container.find('tr:eq(3) th:eq(0)').simulate('mousedown');
    expect(getSelected()).toEqual([[2, 0, 2, 4]]);
  });
  it('should select a cell in a newly added row after automatic row adding, triggered by editing a cell in the last row with minSpareRows > 0, ' + 'unless editing happened within the fixed bottom rows',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      startRows: 5,
      startCols: 2,
      minSpareRows: 1
    });
    yield sleep(10);
    selectCell(4, 0);
    keyDownUp('enter');
    yield sleep(90);
    keyDownUp('enter');
    yield sleep(100);
    expect(countRows()).toEqual(6);
    expect(getSelected()).toEqual([[5, 0, 5, 0]]);
  }));
  it('should select a cell which one was added automatically by minSpareCols', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 5),
      minSpareCols: 1
    });
    selectCell(0, 5);
    keyDownUp('tab');
    expect(countCols()).toEqual(7);
    expect(getSelected()).toEqual([[0, 6, 0, 6]]);
    expect(getDataAtCell(0, 0)).toEqual('A1');
    expect(getDataAtCell(0, 1)).toEqual('B1');
    expect(getDataAtCell(0, 2)).toEqual('C1');
    expect(getDataAtCell(0, 3)).toEqual('D1');
    expect(getDataAtCell(0, 4)).toEqual('E1');
    expect(getDataAtCell(0, 5)).toBeNull();
    expect(getDataAtCell(0, 6)).toBeNull();
  });
  it('should change selected coords by modifying coords object via `modifyTransformStart` hook', function () {
    var hot = handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(0, 0);
    hot.addHook('modifyTransformStart', function (coords) {
      coords.col += 1;
      coords.row += 1;
    });
    keyDown('arrow_down');
    expect(getSelected()).toEqual([[2, 1, 2, 1]]);
  });
  it('should change selected coords by modifying coords object via `modifyTransformEnd` hook', function () {
    var hot = handsontable({
      startRows: 5,
      startCols: 5
    });
    selectCell(0, 0);
    hot.addHook('modifyTransformEnd', function (coords) {
      coords.col += 2;
      coords.row += 1;
    });
    keyDown('shift+arrow_down');
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
  });
  it('should indicate is coords is out of bounds via `afterModifyTransformStart` hook', function () {
    var spy = jasmine.createSpy();
    var hot = handsontable({
      startRows: 5,
      startCols: 5,
      autoWrapCol: false,
      autoWrapRow: false
    });
    hot.addHook('afterModifyTransformStart', spy);
    selectCell(2, 0);
    keyDownUp('arrow_left');
    expect(spy.calls.mostRecent().args[1]).toBe(0);
    expect(spy.calls.mostRecent().args[2]).toBe(-1);
    spy.calls.reset();
    selectCell(2, 4);
    keyDownUp('arrow_right');
    expect(spy.calls.mostRecent().args[1]).toBe(0);
    expect(spy.calls.mostRecent().args[2]).toBe(1);
    spy.calls.reset();
    selectCell(4, 2);
    keyDownUp('arrow_down');
    expect(spy.calls.mostRecent().args[1]).toBe(1);
    expect(spy.calls.mostRecent().args[2]).toBe(0);
    spy.calls.reset();
    selectCell(0, 2);
    keyDownUp('arrow_up');
    expect(spy.calls.mostRecent().args[1]).toBe(-1);
    expect(spy.calls.mostRecent().args[2]).toBe(0);
  });
  it('should indicate is coords is out of bounds via `afterModifyTransformEnd` hook', function () {
    var spy = jasmine.createSpy();
    var hot = handsontable({
      startRows: 5,
      startCols: 5
    });
    hot.addHook('afterModifyTransformEnd', spy);
    selectCell(2, 0);
    keyDownUp('shift+arrow_left');
    expect(spy.calls.mostRecent().args[1]).toBe(0);
    expect(spy.calls.mostRecent().args[2]).toBe(-1);
    spy.calls.reset();
    selectCell(2, 4);
    keyDownUp('shift+arrow_right');
    expect(spy.calls.mostRecent().args[1]).toBe(0);
    expect(spy.calls.mostRecent().args[2]).toBe(1);
    spy.calls.reset();
    selectCell(4, 2);
    keyDownUp('shift+arrow_down');
    expect(spy.calls.mostRecent().args[1]).toBe(1);
    expect(spy.calls.mostRecent().args[2]).toBe(0);
    spy.calls.reset();
    selectCell(0, 2);
    keyDownUp('shift+arrow_up');
    expect(spy.calls.mostRecent().args[1]).toBe(-1);
    expect(spy.calls.mostRecent().args[2]).toBe(0);
  });
  it('should change selection after left mouse button on one of selected cell', function () {
    var hot = handsontable({
      startRows: 5,
      startCols: 5
    });
    var cells = $('.ht_master.handsontable td');
    cells.eq(6).simulate('mousedown');
    cells.eq(18).simulate('mouseover');
    cells.eq(18).simulate('mouseup');
    expect(hot.getSelected()).toEqual([[1, 1, 3, 3]]);
    cells.eq(16).simulate('mousedown');
    cells.eq(16).simulate('mouseup');
    expect(hot.getSelected()).toEqual([[3, 1, 3, 1]]);
  });
  it('should select the first row after corner header is clicked', function () {
    handsontable({
      startRows: 5,
      startCols: 5,
      colHeaders: true,
      rowHeaders: true
    });
    spec().$container.find('thead').find('th').eq(0).simulate('mousedown');
    expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    expect("\n      |   \u2551 - :   :   :   :   |\n      |===:===:===:===:===:===|\n      | - \u2551 # :   :   :   :   |\n      |   \u2551   :   :   :   :   |\n      |   \u2551   :   :   :   :   |\n      |   \u2551   :   :   :   :   |\n      |   \u2551   :   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should redraw selection when option `colHeaders` is set and user scrolled',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      startRows: 20,
      startCols: 20,
      colHeaders: true,
      rowHeaders: true,
      width: 400,
      height: 200
    });
    var cellVerticalPosition;
    var borderOffsetInPixels = 1;
    var topBorder;
    selectCell(5, 5);
    hot.view.wt.wtOverlays.topOverlay.scrollTo(2);
    yield sleep(100);
    cellVerticalPosition = hot.getCell(5, 5).offsetTop;
    topBorder = $('.wtBorder.current')[0];
    expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);
    hot.view.wt.wtOverlays.topOverlay.scrollTo(0);
    yield sleep(100);
    cellVerticalPosition = hot.getCell(5, 5).offsetTop;
    topBorder = $('.wtBorder.current')[0];
    expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);
  }));
  it('should redraw selection on `leftOverlay` when options `colHeaders` and `fixedColumnsLeft` are set, and user scrolled',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      fixedColumnsLeft: 2,
      startRows: 20,
      startCols: 20,
      colHeaders: true,
      rowHeaders: true,
      width: 400,
      height: 200
    });
    var cellVerticalPosition;
    var borderOffsetInPixels = 1;
    var topBorder;
    selectCell(1, 0);
    hot.view.wt.wtOverlays.topOverlay.scrollTo(5);
    yield sleep(100);
    cellVerticalPosition = hot.getCell(1, 0).offsetTop;
    topBorder = $('.wtBorder.current')[0];
    expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);
    hot.view.wt.wtOverlays.topOverlay.scrollTo(0);
    yield sleep(100);
    cellVerticalPosition = hot.getCell(1, 0).offsetTop;
    topBorder = $('.wtBorder.current')[0];
    expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);
  }));
  describe('multiple selection mode', function () {
    it('should select cells by using two layers when CTRL key is pressed (default mode of the selectionMode option)', function () {
      handsontable({
        startRows: 8,
        startCols: 10
      });
      $(getCell(1, 1)).simulate('mousedown');
      $(getCell(4, 4)).simulate('mouseover');
      $(getCell(4, 4)).simulate('mouseup');
      expect(getSelected()).toEqual([[1, 1, 4, 4]]);
      keyDown('ctrl');
      $(getCell(3, 3)).simulate('mousedown');
      $(getCell(5, 6)).simulate('mouseover');
      $(getCell(5, 6)).simulate('mouseup');
      expect(getSelected()).toEqual([[1, 1, 4, 4], [3, 3, 5, 6]]);
    });
    it('should be disallowed to select non-consecutive cells when selectionMode is set as `single`', function () {
      handsontable({
        startRows: 8,
        startCols: 10,
        selectionMode: 'single'
      });
      $(getCell(1, 1)).simulate('mousedown');
      $(getCell(4, 4)).simulate('mouseover');
      $(getCell(4, 4)).simulate('mouseup');
      expect(getSelected()).toEqual([[1, 1, 1, 1]]);
      keyDown('ctrl');
      $(getCell(3, 3)).simulate('mousedown');
      $(getCell(5, 6)).simulate('mouseover');
      $(getCell(5, 6)).simulate('mouseup');
      expect(getSelected()).toEqual([[3, 3, 3, 3]]);
    });
    it('should be allowed to select consecutive cells when selectionMode is set as `range`', function () {
      handsontable({
        startRows: 8,
        startCols: 10,
        selectionMode: 'range'
      });
      $(getCell(1, 1)).simulate('mousedown');
      $(getCell(4, 4)).simulate('mouseover');
      $(getCell(4, 4)).simulate('mouseup');
      expect(getSelected()).toEqual([[1, 1, 4, 4]]);
      $(getCell(3, 3)).simulate('mousedown');
      $(getCell(5, 6)).simulate('mouseover');
      $(getCell(5, 6)).simulate('mouseup');
      expect(getSelected()).toEqual([[3, 3, 5, 6]]);
    });
    it('should be disallowed to select non-consecutive cells when selectionMode is set as `range`', function () {
      handsontable({
        startRows: 8,
        startCols: 10,
        selectionMode: 'range'
      });
      $(getCell(1, 1)).simulate('mousedown');
      $(getCell(4, 4)).simulate('mouseover');
      $(getCell(4, 4)).simulate('mouseup');
      expect(getSelected()).toEqual([[1, 1, 4, 4]]);
      keyDown('ctrl');
      $(getCell(3, 3)).simulate('mousedown');
      $(getCell(5, 6)).simulate('mouseover');
      $(getCell(5, 6)).simulate('mouseup');
      expect(getSelected()).toEqual([[3, 3, 5, 6]]);
    });
    it('should properly colorize selection layers including layer intersections', function () {
      handsontable({
        startRows: 21,
        startCols: 30,
        selectionMode: 'multiple',
        colHeaders: true,
        rowHeaders: true
      });
      $(getCell(0, 0)).simulate('mousedown');
      $(getCell(20, 15)).simulate('mouseover');
      $(getCell(20, 15)).simulate('mouseup');
      keyDown('ctrl');
      $(getCell(1, 1)).simulate('mousedown');
      $(getCell(19, 16)).simulate('mouseover');
      $(getCell(19, 16)).simulate('mouseup');
      $(getCell(2, 2)).simulate('mousedown');
      $(getCell(18, 17)).simulate('mouseover');
      $(getCell(18, 17)).simulate('mouseup');
      $(getCell(3, 3)).simulate('mousedown');
      $(getCell(17, 18)).simulate('mouseover');
      $(getCell(17, 18)).simulate('mouseup');
      $(getCell(4, 4)).simulate('mousedown');
      $(getCell(16, 19)).simulate('mouseover');
      $(getCell(16, 19)).simulate('mouseup');
      $(getCell(5, 5)).simulate('mousedown');
      $(getCell(15, 20)).simulate('mouseover');
      $(getCell(15, 20)).simulate('mouseup');
      $(getCell(6, 6)).simulate('mousedown');
      $(getCell(14, 21)).simulate('mouseover');
      $(getCell(14, 21)).simulate('mouseup');
      $(getCell(7, 7)).simulate('mousedown');
      $(getCell(13, 22)).simulate('mouseover');
      $(getCell(13, 22)).simulate('mouseup');
      $(getCell(8, 8)).simulate('mousedown');
      $(getCell(12, 23)).simulate('mouseover');
      $(getCell(12, 23)).simulate('mouseup');
      $(getCell(9, 9)).simulate('mousedown');
      $(getCell(11, 24)).simulate('mouseover');
      $(getCell(11, 24)).simulate('mouseup');
      $(getCell(10, 10)).simulate('mousedown');
      $(getCell(10, 25)).simulate('mouseover');
      $(getCell(10, 25)).simulate('mouseup');
      expect("\n        |   \u2551 - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - : - :   :   :   :   |\n        |===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===:===|\n        | - \u2551 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :   :   :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : H : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 6 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 5 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 4 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 3 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 0 :   :   :   :   :   :   :   :   :   :   :   :   :   |\n        | - \u2551 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :   :   :   :   :   :   :   :   :   :   :   :   :   :   |\n        ").toBeMatchToSelectionPattern();
    });
    it('should call afterSelection and afterSelectionEnd hooks with proper arguments', function () {
      var hooks = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionEnd']);
      handsontable({
        startRows: 21,
        startCols: 30,
        selectionMode: 'multiple',
        afterSelection: hooks.afterSelection,
        afterSelectionEnd: hooks.afterSelectionEnd
      });
      $(getCell(0, 0)).simulate('mousedown');
      $(getCell(20, 15)).simulate('mouseover');
      $(getCell(20, 15)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([0, 0, 0, 0, jasmine.any(Object), 0]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([0, 0, 20, 15, jasmine.any(Object), 0]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([0, 0, 20, 15, 0, void 0]);
      keyDown('ctrl');
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(1, 1)).simulate('mousedown');
      $(getCell(19, 16)).simulate('mouseover');
      $(getCell(19, 16)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([1, 1, 1, 1, jasmine.any(Object), 1]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([1, 1, 19, 16, jasmine.any(Object), 1]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([1, 1, 19, 16, 1, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(2, 2)).simulate('mousedown');
      $(getCell(18, 17)).simulate('mouseover');
      $(getCell(18, 17)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([2, 2, 2, 2, jasmine.any(Object), 2]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([2, 2, 18, 17, jasmine.any(Object), 2]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([2, 2, 18, 17, 2, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(3, 3)).simulate('mousedown');
      $(getCell(17, 18)).simulate('mouseover');
      $(getCell(17, 18)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([3, 3, 3, 3, jasmine.any(Object), 3]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([3, 3, 17, 18, jasmine.any(Object), 3]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([3, 3, 17, 18, 3, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(4, 4)).simulate('mousedown');
      $(getCell(16, 19)).simulate('mouseover');
      $(getCell(16, 19)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([4, 4, 4, 4, jasmine.any(Object), 4]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([4, 4, 16, 19, jasmine.any(Object), 4]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([4, 4, 16, 19, 4, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(5, 5)).simulate('mousedown');
      $(getCell(15, 20)).simulate('mouseover');
      $(getCell(15, 20)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([5, 5, 5, 5, jasmine.any(Object), 5]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([5, 5, 15, 20, jasmine.any(Object), 5]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([5, 5, 15, 20, 5, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(6, 6)).simulate('mousedown');
      $(getCell(14, 21)).simulate('mouseover');
      $(getCell(14, 21)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([6, 6, 6, 6, jasmine.any(Object), 6]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([6, 6, 14, 21, jasmine.any(Object), 6]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([6, 6, 14, 21, 6, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(7, 7)).simulate('mousedown');
      $(getCell(13, 22)).simulate('mouseover');
      $(getCell(13, 22)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([7, 7, 7, 7, jasmine.any(Object), 7]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([7, 7, 13, 22, jasmine.any(Object), 7]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([7, 7, 13, 22, 7, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(8, 8)).simulate('mousedown');
      $(getCell(12, 23)).simulate('mouseover');
      $(getCell(12, 23)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([8, 8, 8, 8, jasmine.any(Object), 8]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([8, 8, 12, 23, jasmine.any(Object), 8]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([8, 8, 12, 23, 8, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(9, 9)).simulate('mousedown');
      $(getCell(11, 24)).simulate('mouseover');
      $(getCell(11, 24)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([9, 9, 9, 9, jasmine.any(Object), 9]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([9, 9, 11, 24, jasmine.any(Object), 9]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([9, 9, 11, 24, 9, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(10, 10)).simulate('mousedown');
      $(getCell(10, 25)).simulate('mouseover');
      $(getCell(10, 25)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([10, 10, 10, 10, jasmine.any(Object), 10]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([10, 10, 10, 25, jasmine.any(Object), 10]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([10, 10, 10, 25, 10, void 0]);
    });
    it('should call afterSelectionByProp and afterSelectionEndByProp hooks with proper arguments', function () {
      var hooks = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionEnd']);
      handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(21, 30),
        selectionMode: 'multiple',
        afterSelectionByProp: hooks.afterSelection,
        afterSelectionEndByProp: hooks.afterSelectionEnd
      });
      $(getCell(0, 0)).simulate('mousedown');
      $(getCell(20, 15)).simulate('mouseover');
      $(getCell(20, 15)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([0, 'prop0', 0, 'prop0', jasmine.any(Object), 0]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([0, 'prop0', 20, 'prop15', jasmine.any(Object), 0]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([0, 'prop0', 20, 'prop15', 0, void 0]);
      keyDown('ctrl');
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(1, 1)).simulate('mousedown');
      $(getCell(19, 16)).simulate('mouseover');
      $(getCell(19, 16)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([1, 'prop1', 1, 'prop1', jasmine.any(Object), 1]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([1, 'prop1', 19, 'prop16', jasmine.any(Object), 1]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([1, 'prop1', 19, 'prop16', 1, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(2, 2)).simulate('mousedown');
      $(getCell(18, 17)).simulate('mouseover');
      $(getCell(18, 17)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([2, 'prop2', 2, 'prop2', jasmine.any(Object), 2]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([2, 'prop2', 18, 'prop17', jasmine.any(Object), 2]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([2, 'prop2', 18, 'prop17', 2, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(3, 3)).simulate('mousedown');
      $(getCell(17, 18)).simulate('mouseover');
      $(getCell(17, 18)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([3, 'prop3', 3, 'prop3', jasmine.any(Object), 3]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([3, 'prop3', 17, 'prop18', jasmine.any(Object), 3]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([3, 'prop3', 17, 'prop18', 3, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(4, 4)).simulate('mousedown');
      $(getCell(16, 19)).simulate('mouseover');
      $(getCell(16, 19)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([4, 'prop4', 4, 'prop4', jasmine.any(Object), 4]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([4, 'prop4', 16, 'prop19', jasmine.any(Object), 4]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([4, 'prop4', 16, 'prop19', 4, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(5, 5)).simulate('mousedown');
      $(getCell(15, 20)).simulate('mouseover');
      $(getCell(15, 20)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([5, 'prop5', 5, 'prop5', jasmine.any(Object), 5]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([5, 'prop5', 15, 'prop20', jasmine.any(Object), 5]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([5, 'prop5', 15, 'prop20', 5, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(6, 6)).simulate('mousedown');
      $(getCell(14, 21)).simulate('mouseover');
      $(getCell(14, 21)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([6, 'prop6', 6, 'prop6', jasmine.any(Object), 6]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([6, 'prop6', 14, 'prop21', jasmine.any(Object), 6]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([6, 'prop6', 14, 'prop21', 6, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(7, 7)).simulate('mousedown');
      $(getCell(13, 22)).simulate('mouseover');
      $(getCell(13, 22)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([7, 'prop7', 7, 'prop7', jasmine.any(Object), 7]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([7, 'prop7', 13, 'prop22', jasmine.any(Object), 7]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([7, 'prop7', 13, 'prop22', 7, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(8, 8)).simulate('mousedown');
      $(getCell(12, 23)).simulate('mouseover');
      $(getCell(12, 23)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([8, 'prop8', 8, 'prop8', jasmine.any(Object), 8]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([8, 'prop8', 12, 'prop23', jasmine.any(Object), 8]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([8, 'prop8', 12, 'prop23', 8, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(9, 9)).simulate('mousedown');
      $(getCell(11, 24)).simulate('mouseover');
      $(getCell(11, 24)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([9, 'prop9', 9, 'prop9', jasmine.any(Object), 9]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([9, 'prop9', 11, 'prop24', jasmine.any(Object), 9]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([9, 'prop9', 11, 'prop24', 9, void 0]);
      hooks.afterSelection.calls.reset();
      hooks.afterSelectionEnd.calls.reset();
      $(getCell(10, 10)).simulate('mousedown');
      $(getCell(10, 25)).simulate('mouseover');
      $(getCell(10, 25)).simulate('mouseup');
      expect(hooks.afterSelection.calls.count()).toBe(2);
      expect(hooks.afterSelection.calls.argsFor(0)).toEqual([10, 'prop10', 10, 'prop10', jasmine.any(Object), 10]);
      expect(hooks.afterSelection.calls.argsFor(1)).toEqual([10, 'prop10', 10, 'prop25', jasmine.any(Object), 10]);
      expect(hooks.afterSelectionEnd.calls.count()).toBe(1);
      expect(hooks.afterSelectionEnd.calls.argsFor(0)).toEqual([10, 'prop10', 10, 'prop25', 10, void 0]);
    });
  });
});

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('Core_setDataAtCell', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfNestedObjects = function arrayOfNestedObjects() {
    return [{
      id: 1,
      name: {
        first: 'Ted',
        last: 'Right'
      }
    }, {
      id: 2,
      name: {
        first: 'Frank',
        last: 'Honest'
      }
    }, {
      id: 3,
      name: {
        first: 'Joan',
        last: 'Well'
      }
    }];
  };

  var htmlText = 'Ben & Jerry\'s';
  it('HTML special chars should be preserved in data map but escaped in DOM', function () {
    // https://github.com/handsontable/handsontable/issues/147
    handsontable();
    var td = setDataAtCell(0, 0, htmlText);
    selectCell(0, 0);
    $(td).simulate('dblclick');
    deselectCell();
    expect(getDataAtCell(0, 0)).toEqual(htmlText);
  });
  it('should correctly paste string that contains "quotes"', function (done) {
    // https://github.com/handsontable/handsontable/issues/205
    handsontable({});
    selectCell(0, 0);
    triggerPaste('1\nThis is a "test" and a test\n2');
    setTimeout(function () {
      expect(getDataAtCell(0, 0)).toEqual('1');
      expect(getDataAtCell(1, 0)).toEqual('This is a "test" and a test');
      expect(getDataAtCell(2, 0)).toEqual('2');
      done();
    }, 200);
  });
  it('should correctly paste string when dataSchema is used', function (done) {
    // https://github.com/handsontable/handsontable/issues/237
    handsontable({
      colHeaders: true,
      dataSchema: {
        col1: null,
        col2: null,
        col3: null
      }
    });
    selectCell(0, 0);
    triggerPaste('1\tTest\t2');
    setTimeout(function () {
      expect(getDataAtCell(0, 0)).toEqual('1');
      expect(getDataAtCell(0, 1)).toEqual('Test');
      expect(getDataAtCell(0, 2)).toEqual('2');
      done();
    }, 200);
  });
  it('should paste not more rows than maxRows',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      minSpareRows: 1,
      minRows: 5,
      maxRows: 10
    });
    selectCell(4, 0);
    triggerPaste('1\n2\n3\n4\n5\n6\n7\n8\n9\n10');
    yield sleep(200);
    expect(countRows()).toEqual(10);
    expect(getDataAtCell(9, 0)).toEqual('6');
  }));
  it('should paste not more cols than maxCols', function (done) {
    handsontable({
      minSpareCols: 1,
      minCols: 5,
      maxCols: 10
    });
    selectCell(0, 4);
    triggerPaste('1\t2\t3\t4\t5\t6\t7\t8\t9\t10');
    setTimeout(function () {
      expect(countCols()).toEqual(10);
      expect(getDataAtCell(0, 9)).toEqual('6');
      done();
    }, 200);
  });
  it('should paste not more rows & cols than maxRows & maxCols', function (done) {
    handsontable({
      minSpareRows: 1,
      minSpareCols: 1,
      minRows: 5,
      minCols: 5,
      maxRows: 6,
      maxCols: 6
    });
    selectCell(4, 4);
    triggerPaste('1\t2\t3\n4\t5\t6\n7\t8\t9');
    setTimeout(function () {
      expect(countRows()).toEqual(6);
      expect(countCols()).toEqual(6);
      expect(getDataAtCell(5, 5)).toEqual('5');
      done();
    }, 200);
  }); // https://github.com/handsontable/handsontable/issues/250

  it('should create new rows when pasting into grid with object data source', function (done) {
    handsontable({
      data: arrayOfNestedObjects(),
      colHeaders: true,
      columns: [{
        data: 'id'
      }, {
        data: 'name.last'
      }, {
        data: 'name.first'
      }],
      minSpareRows: 1
    });
    selectCell(3, 0);
    triggerPaste('a\tb\tc\nd\te\tf\ng\th\ti');
    setTimeout(function () {
      expect(countRows()).toEqual(7);
      expect(getDataAtCell(5, 2)).toEqual('i');
      done();
    }, 200);
  }); // https://handsontable.com/demo/datasources.html

  it('should work with functional data source', function () {
    handsontable({
      data: [model({
        id: 1,
        name: 'Ted Right',
        address: ''
      }), model({
        id: 2,
        name: 'Frank Honest',
        address: ''
      }), model({
        id: 3,
        name: 'Joan Well',
        address: ''
      })],
      dataSchema: model,
      startRows: 5,
      startCols: 3,
      colHeaders: ['ID', 'Name', 'Address'],
      columns: [{
        data: property('id')
      }, {
        data: property('name')
      }, {
        data: property('address')
      }],
      minSpareRows: 1
    });

    function model(opts) {
      var _pub = {};

      var _priv = $.extend({
        id: undefined,
        name: undefined,
        address: undefined
      }, opts);

      _pub.attr = function (attr, val) {
        if (typeof val === 'undefined') {
          return _priv[attr];
        }

        _priv[attr] = val;
        return _pub;
      };

      return _pub;
    }

    function property(attr) {
      return function (row, value) {
        return row.attr(attr, value);
      };
    }

    expect(getDataAtCell(1, 1)).toEqual('Frank Honest');
    setDataAtCell(1, 1, 'Something Else');
    expect(getDataAtCell(1, 1)).toEqual('Something Else');
  });
  it('should accept changes array as 1st param and source as 2nd param', function () {
    var lastSource = '';
    handsontable({
      afterChange: function afterChange(changes, source) {
        lastSource = source;
      }
    });
    setDataAtCell([[0, 0, 'new value']], 'customSource');
    expect(getDataAtCell(0, 0)).toEqual('new value');
    expect(lastSource).toEqual('customSource');
  });
  it('should trigger `afterSetDataAtCell` hook with applied changes', function () {
    var _changes;

    var _source;

    handsontable({
      afterSetDataAtCell: function afterSetDataAtCell(changes, source) {
        _changes = changes;
        _source = source;
      }
    });
    setDataAtCell(0, 0, 'foo bar', 'customSource');
    expect(_changes).toEqual([[0, 0, null, 'foo bar']]);
    expect(_source).toBe('customSource');
    expect(getDataAtCell(0, 0)).toEqual('foo bar');
  });
  it('should modify value on the fly using `afterSetDataAtCell` hook', function () {
    handsontable({
      data: [['a', 'b', 'c'], [1, 2, 3]],
      afterSetDataAtCell: function afterSetDataAtCell(changes) {
        if (changes[0][3] === 'foo bar') {
          changes[0][3] = 'bar';
        }

        if (changes[0][3] === 22) {
          changes[0][3] = 33;
        }
      }
    });
    setDataAtCell(0, 0, 'foo bar', 'customSource');
    setDataAtCell(1, 2, 22, 'customSource');
    expect(getDataAtCell(0, 0)).toBe('bar');
    expect(getDataAtCell(1, 2)).toBe(33);
    expect(getData()).toEqual([['bar', 'b', 'c'], [1, 2, 33]]);
  });
  it('should trigger `afterSetDataAtRowProp` hook with applied changes', function () {
    var _changes;

    var _source;

    handsontable({
      columns: [{
        data: 'name'
      }, {
        data: 'id'
      }],
      afterSetDataAtRowProp: function afterSetDataAtRowProp(changes, source) {
        _changes = changes;
        _source = source;
      }
    });
    setDataAtRowProp(0, 'name', 'foo bar', 'customSource');
    expect(_changes).toEqual([[0, 'name', void 0, 'foo bar']]);
    expect(_source).toBe('customSource');
    expect(getDataAtCell(0, 0)).toBe('foo bar');
  });
  it('should modify value on the fly using `afterSetDataAtRowProp` hook', function () {
    handsontable({
      data: [{
        name: 'a',
        id: 1
      }, {
        name: 'b',
        id: 2
      }, {
        name: 'c',
        id: 3
      }],
      columns: [{
        data: 'name'
      }, {
        data: 'id'
      }],
      afterSetDataAtRowProp: function afterSetDataAtRowProp(changes) {
        if (changes[0][3] === 'foo bar') {
          changes[0][3] = 'bar';
        }

        if (changes[0][3] === 22) {
          changes[0][3] = 33;
        }
      }
    });
    setDataAtRowProp(0, 'name', 'foo bar', 'customSource');
    setDataAtRowProp(1, 'id', 22, 'customSource');
    expect(getDataAtRowProp(0, 'name')).toEqual('bar');
    expect(getDataAtRowProp(1, 'id')).toBe(33);
    expect(getData()).toEqual([['bar', 1], ['b', 33], ['c', 3]]);
  });
});

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core_splice', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfArrays = function arrayOfArrays() {
    return [['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['2008', 10, 11, 12, 13], ['2009', 20, 11, 14, 13], ['2010', 30, 15, 12, 13]];
  };

  describe('spliceCol', function () {
    it('should remove data from specified col', function () {
      handsontable({
        data: arrayOfArrays(),
        minSpareRows: 1
      });
      expect(spliceCol(1, 0, 2)).toEqual(['Kia', 10]);
      expect(getData(0, 1, 3, 1)).toEqual([[20], [30], [null], [null]]);
    });
    it('should insert data into specified col', function () {
      handsontable({
        data: arrayOfArrays(),
        minSpareRows: 1
      });
      expect(spliceCol(1, 1, 0, 'test', 'test', 'test')).toEqual([]);
      expect(getData(0, 1, 6, 1)).toEqual([['Kia'], ['test'], ['test'], ['test'], [10], [20], [30]]);
    });
    it('should remove and insert data into specified col', function () {
      handsontable({
        data: arrayOfArrays(),
        minSpareRows: 1
      });
      expect(spliceCol(1, 0, 2, 'test', 'test', 'test')).toEqual(['Kia', 10]);
      expect(getData(0, 1, 4, 1)).toEqual([['test'], ['test'], ['test'], [20], [30]]);
    });
  });
  describe('spliceRow', function () {
    it('should remove data from specified row', function () {
      handsontable({
        data: arrayOfArrays(),
        minSpareCols: 1
      });
      expect(spliceRow(0, 0, 3)).toEqual(['', 'Kia', 'Nissan']);
      expect(getData(0, 0, 0, 4)).toEqual([['Toyota', 'Honda', null, null, null]]);
    });
    it('should insert data into specified row', function () {
      handsontable({
        data: arrayOfArrays(),
        minSpareCols: 1
      });
      expect(spliceRow(0, 0, 0, 'test', 'test', 'test')).toEqual([]);
      expect(getData(0, 0, 0, 7)).toEqual([['test', 'test', 'test', '', 'Kia', 'Nissan', 'Toyota', 'Honda']]);
    });
    it('should remove and insert data into specified row', function () {
      handsontable({
        data: arrayOfArrays(),
        minSpareCols: 1
      });
      expect(spliceRow(0, 0, 2, 'test', 'test', 'test')).toEqual(['', 'Kia']);
      expect(getData(0, 0, 0, 5)).toEqual([['test', 'test', 'test', 'Nissan', 'Toyota', 'Honda']]);
    });
  });
});

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

describe('Core_updateSettings', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should inherit cell type', function () {
    handsontable({
      data: [[1, 2]],
      columns: [{}, {
        type: 'checkbox'
      }],
      cells: function cells(row, col) {
        if (row === 0 && col === 0) {
          return {
            type: 'numeric'
          };
        }
      }
    });
    expect(getCellMeta(0, 0).type).toEqual('numeric');
    expect(getCellMeta(0, 1).type).toEqual('checkbox');
  });
  it('should inherit cell type when columns is a function', function () {
    handsontable({
      data: [[1, 2]],
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {};
        } else if (column === 1) {
          colMeta = {
            type: 'checkbox'
          };
        }

        return colMeta;
      },
      cells: function cells(row, col) {
        if (row === 0 && col === 0) {
          return {
            type: 'numeric'
          };
        }
      }
    });
    expect(getCellMeta(0, 0).type).toEqual('numeric');
    expect(getCellMeta(0, 1).type).toEqual('checkbox');
  });
  it('should ignore mixed in properties to the cell array option', function () {
    /* eslint-disable no-array-constructor */

    /* eslint-disable no-extend-native */
    Array.prototype.willFail = 'BOOM';
    handsontable({
      data: [[1, true]],
      columns: [{
        type: 'numeric'
      }, {
        type: 'checkbox'
      }]
    });
    expect(function () {
      updateSettings({
        cell: new Array()
      });
    }).not.toThrow();
  });
  it('should ignore mixed in properties to the cell array option when columns is a function', function () {
    /* eslint-disable no-array-constructor */

    /* eslint-disable no-extend-native */
    Array.prototype.willFail = 'BOOM';
    handsontable({
      data: [[1, true]],
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            type: 'numeric'
          };
        } else if (column === 1) {
          colMeta = {
            type: 'checkbox'
          };
        }

        return colMeta;
      }
    });
    expect(function () {
      updateSettings({
        cell: new Array()
      });
    }).not.toThrow();
  });
  it('should not reset columns types to text', function () {
    handsontable({
      data: [[1, true]],
      columns: [{
        type: 'numeric'
      }, {
        type: 'checkbox'
      }]
    });
    var td = spec().$container.find('td');
    expect(td.eq(0).text()).toEqual('1');
    expect(td.eq(1).text()).toEqual('');
    updateSettings({});
    expect(td.eq(0).text()).toEqual('1');
    expect(td.eq(1).text()).toEqual('');
  });
  it('should not reset columns types to text when columns is a function', function () {
    handsontable({
      data: [[1, true]],
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            type: 'numeric'
          };
        } else if (column === 1) {
          colMeta = {
            type: 'checkbox'
          };
        }

        return colMeta;
      }
    });
    var td = spec().$container.find('td');
    expect(td.eq(0).text()).toEqual('1');
    expect(td.eq(1).text()).toEqual('');
    updateSettings({});
    expect(td.eq(0).text()).toEqual('1');
    expect(td.eq(1).text()).toEqual('');
  });
  it('should update readOnly global setting', function () {
    handsontable({
      readOnly: true,
      data: [['foo', 'bar']],
      columns: [{}, {}]
    });
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);
    expect(getCellMeta(0, 1).readOnly).toBe(true);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);
    updateSettings({
      readOnly: false
    });
    expect(getCellMeta(0, 0).readOnly).toBe(false);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);
    expect(getCellMeta(0, 1).readOnly).toBe(false);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);
  });
  it('should update readOnly global setting when columns is a function', function () {
    handsontable({
      readOnly: true,
      data: [['foo', 'bar']],
      columns: function columns(column) {
        var colMeta = {};

        if ([0, 1].indexOf(column) < 0) {
          colMeta = null;
        }

        return colMeta;
      }
    });
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);
    expect(getCellMeta(0, 1).readOnly).toBe(true);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);
    updateSettings({
      readOnly: false
    });
    expect(getCellMeta(0, 0).readOnly).toBe(false);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);
    expect(getCellMeta(0, 1).readOnly).toBe(false);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);
  });
  it('should update readOnly columns setting', function () {
    handsontable({
      data: [['foo', true]],
      columns: [{
        type: 'text',
        readOnly: true
      }, {
        type: 'checkbox'
      }]
    });
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);
    expect(getCellMeta(0, 1).readOnly).toBe(false);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);
    updateSettings({
      columns: [{
        type: 'text',
        readOnly: false
      }, {
        type: 'checkbox'
      }]
    });
    expect(getCellMeta(0, 0).readOnly).toBe(false);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);
    expect(getCellMeta(0, 1).readOnly).toBe(false);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);
  });
  it('should update readOnly columns setting when columns is a function', function () {
    handsontable({
      data: [['foo', true]],
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            type: 'text',
            readOnly: true
          };
        } else if (column === 1) {
          colMeta = {
            type: 'checkbox'
          };
        }

        return colMeta;
      }
    });
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);
    expect(getCellMeta(0, 1).readOnly).toBe(false);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);
    updateSettings({
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            type: 'text',
            readOnly: false
          };
        } else if (column === 1) {
          colMeta = {
            type: 'checkbox'
          };
        }

        return colMeta;
      }
    });
    expect(getCellMeta(0, 0).readOnly).toBe(false);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);
    expect(getCellMeta(0, 1).readOnly).toBe(false);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);
  });
  it('should update readOnly columns setting and override global setting', function () {
    handsontable({
      readOnly: true,
      data: [['foo', true]],
      columns: [{
        type: 'text'
      }, {
        type: 'checkbox'
      }]
    });
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);
    expect(getCellMeta(0, 1).readOnly).toBe(true);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);
    updateSettings({
      columns: [{
        type: 'text',
        readOnly: false
      }, {
        type: 'checkbox'
      }]
    });
    expect(getCellMeta(0, 0).readOnly).toBe(false);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);
    expect(getCellMeta(0, 1).readOnly).toBe(true);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);
  });
  it('should update readOnly columns setting and override global setting when columns is a function', function () {
    handsontable({
      readOnly: true,
      data: [['foo', true]],
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            type: 'text'
          };
        } else if (column === 1) {
          colMeta = {
            type: 'checkbox'
          };
        }

        return colMeta;
      }
    });
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);
    expect(getCellMeta(0, 1).readOnly).toBe(true);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);
    updateSettings({
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            type: 'text',
            readOnly: false
          };
        } else if (column === 1) {
          colMeta = {
            type: 'checkbox'
          };
        }

        return colMeta;
      }
    });
    expect(getCellMeta(0, 0).readOnly).toBe(false);
    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);
    expect(getCellMeta(0, 1).readOnly).toBe(true);
    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);
  });
  it('should not alter the columns object during init', function () {
    var columns = [{
      type: 'text'
    }];
    var columnsCopy = JSON.parse(JSON.stringify(columns));
    handsontable({
      columns: columns
    });
    expect(columns).toEqual(columnsCopy);
  });
  it('should update column type', function () {
    var columns = [{
      type: 'text'
    }];
    handsontable({
      columns: columns
    });
    expect(getCellMeta(0, 0).type).toEqual('text');
    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.TextRenderer);
    expect(getCellEditor(0, 0)).toBe(Handsontable.editors.TextEditor);
    columns[0].type = 'date';
    updateSettings({
      columns: columns
    });
    expect(getCellMeta(0, 0).type).toEqual('date');
    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.AutocompleteRenderer);
    expect(getCellEditor(0, 0)).toEqual(Handsontable.editors.DateEditor);
  });
  it('should update cell type functions, even if new type does not implement all of those functions', function () {
    var columns = [{
      type: 'numeric'
    }];
    handsontable({
      columns: columns
    });
    expect(getCellMeta(0, 0).type).toEqual('numeric');
    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.NumericRenderer);
    expect(getCellEditor(0, 0)).toBe(Handsontable.editors.NumericEditor);
    expect(getCellValidator(0, 0)).toBe(Handsontable.cellTypes.numeric.validator);
    columns[0].type = 'text';
    updateSettings({
      columns: columns
    });
    expect(getCellMeta(0, 0).type).toEqual('text');
    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.TextRenderer);
    expect(getCellEditor(0, 0)).toEqual(Handsontable.editors.TextEditor);
    expect(Handsontable.cellTypes.text.validator).toBeUndefined();
    expect(getCellValidator(0, 0)).toBeUndefined();
  });
  it('should allow updating the table height', function () {
    handsontable({
      startRows: 22,
      startCols: 5
    });
    var initialHeight = parseInt(spec().$container[0].style.height, 10);
    updateSettings({
      height: 300
    });
    expect(parseInt(spec().$container[0].style.height, 10)).toEqual(300);
    expect(parseInt(spec().$container[0].style.height, 10)).not.toEqual(initialHeight);
  });
  it('should not reset the table height, when the updateSettings config object doesn\'t have any height specified', function () {
    handsontable({
      startRows: 22,
      startCols: 5,
      height: 300
    });
    var initialHeight = spec().$container[0].style.height;
    updateSettings({
      rowHeaders: true
    });
    expect(parseInt(spec().$container[0].style.height, 10)).toEqual(parseInt(initialHeight, 10));
  });
  it('should allow resetting the table height', function () {
    handsontable({
      startRows: 22,
      startCols: 5,
      height: 300
    });
    var initialHeight = spec().$container[0].style.height;
    updateSettings({
      height: null
    });
    expect(parseInt(spec().$container[0].style.height, 10)).not.toEqual(parseInt(initialHeight, 10));
  });
  it('should allow updating the stretching type', function () {
    var hot = handsontable({
      stretchH: 'last'
    });
    expect(hot.view.wt.getSetting('stretchH')).toEqual('last');
    updateSettings({
      stretchH: 'all'
    });
    expect(hot.view.wt.getSetting('stretchH')).toEqual('all');
    updateSettings({
      stretchH: 'none'
    });
    expect(hot.view.wt.getSetting('stretchH')).toEqual('none');
    updateSettings({
      stretchH: 'last'
    });
    expect(hot.view.wt.getSetting('stretchH')).toEqual('last');
  });
  it('should change colHeader\'s row height if is needed', function () {
    handsontable({
      colHeaders: true,
      rowHeaders: true
    });
    var rowHeights = [];
    rowHeights.push(spec().$container.find('.ht_clone_top_left_corner thead th')[0].clientHeight);
    updateSettings({
      colHeaders: ['A<br/>A']
    });
    rowHeights.push(spec().$container.find('.ht_clone_top_left_corner thead th')[0].clientHeight);
    expect(rowHeights[0]).toBeLessThan(rowHeights[1]);
  });
  it('should not overwrite properties (created by columns defined as function) of cells below the viewport by updateSettings #4029', function () {
    var rows = 50;
    var columns = 2;
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(columns, rows),
      columns: function columns(col) {
        var colProp = {
          data: "prop".concat(col),
          readOnly: true
        };

        if (col === 1) {
          colProp.type = 'checkbox';
        }

        return colProp;
      }
    });
    updateSettings({});
    expect(getCellMeta(rows, 0).readOnly).toEqual(true);
    expect(getCellMeta(rows, 1).type).toEqual('checkbox');
    rows = 100;
    updateSettings({
      data: Handsontable.helper.createSpreadsheetObjectData(columns, rows)
    });
    expect(getCellMeta(rows, 0).readOnly).toEqual(true);
    expect(getCellMeta(rows, 1).type).toEqual('checkbox');
    updateSettings({
      columns: function columns(col) {
        var colProp = {
          data: "prop".concat(col),
          type: 'numeric'
        };
        return colProp;
      }
    });
    expect(getCellMeta(0, 1).type).toEqual('numeric');
    expect(getCellMeta(0, 1).readOnly).toEqual(false);
    expect(getCellMeta(rows, 1).type).toEqual('numeric');
    expect(getCellMeta(rows, 1).readOnly).toEqual(false);
  });
  it('should not overwrite properties (created by columns defined as array) of cells below the viewport by updateSettings #4029', function () {
    var rows = 50;
    var columns = 2;
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(columns, rows),
      columns: [{
        type: 'numeric',
        numericFormat: {
          pattern: '0,0.00 $'
        }
      }, {
        type: 'text',
        readOnly: true
      }]
    });
    updateSettings({});
    expect(getCellMeta(rows, 0).type).toEqual('numeric');
    expect(getCellMeta(rows, 1).readOnly).toEqual(true);
    rows = 100;
    updateSettings({
      data: Handsontable.helper.createSpreadsheetObjectData(columns, rows)
    });
    expect(getCellMeta(rows, 0).type).toEqual('numeric');
    expect(_typeof(getCellMeta(rows, 0).numericFormat)).toEqual('object');
    expect(getCellMeta(rows, 1).readOnly).toEqual(true);
    updateSettings({
      columns: [{
        type: 'text',
        readOnly: true
      }, {
        type: 'numeric',
        numericFormat: {
          pattern: '0,0.00 $'
        }
      }]
    });
    expect(getCellMeta(0, 0).type).toEqual('text');
    expect(getCellMeta(0, 0).readOnly).toEqual(true);
    expect(getCellMeta(0, 1).type).toEqual('numeric');
    expect(_typeof(getCellMeta(0, 1).numericFormat)).toEqual('object');
    expect(getCellMeta(0, 1).readOnly).toEqual(false);
    expect(getCellMeta(rows, 0).type).toEqual('text');
    expect(getCellMeta(rows, 1).type).toEqual('numeric');
  });
  it('should call `afterUpdateSettings` hook with proper parameter', function () {
    var afterUpdateSettings = jasmine.createSpy('afterUpdateSettings');
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
      readOnly: true,
      afterUpdateSettings: afterUpdateSettings
    });
    var newSettings = {
      readOnly: false
    };
    updateSettings(newSettings);
    expect(afterUpdateSettings).toHaveBeenCalledWith(newSettings, undefined, undefined, undefined, undefined, undefined);
  });
  it('should not extend parameter passed to `afterUpdateSettings` hook by another properties', function () {
    var updatedSetting = {
      fillHandle: true
    };
    var newSettings;
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
      readOnly: true,
      afterUpdateSettings: function afterUpdateSettings(settings) {
        newSettings = settings;
      }
    });
    updateSettings(updatedSetting);
    expect(Object.keys(updatedSetting)).toEqual(Object.keys(newSettings));
  });
});

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('Core_validate', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      id: 1,
      name: 'Ted',
      lastName: 'Right'
    }, {
      id: 2,
      name: 'Frank',
      lastName: 'Honest'
    }, {
      id: 3,
      name: 'Joan',
      lastName: 'Well'
    }, {
      id: 4,
      name: 'Sid',
      lastName: 'Strong'
    }, {
      id: 5,
      name: 'Jane',
      lastName: 'Neat'
    }, {
      id: 6,
      name: 'Chuck',
      lastName: 'Jackson'
    }, {
      id: 7,
      name: 'Meg',
      lastName: 'Jansen'
    }, {
      id: 8,
      name: 'Rob',
      lastName: 'Norris'
    }, {
      id: 9,
      name: 'Sean',
      lastName: 'O\'Hara'
    }, {
      id: 10,
      name: 'Eve',
      lastName: 'Branson'
    }];
  };

  it('should call beforeValidate', function () {
    var fired = null;
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      beforeValidate: function beforeValidate() {
        fired = true;
      }
    });
    setDataAtCell(2, 0, 'test');
    expect(fired).toEqual(true);
  });
  it('should call beforeValidate when columns is a function', function () {
    var fired = null;
    handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
          colMeta.type = 'numeric';
        } else if (column === 1) {
          colMeta.data = 'name';
        } else if (column === 2) {
          colMeta.data = 'lastName';
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      beforeValidate: function beforeValidate() {
        fired = true;
      }
    });
    setDataAtCell(2, 0, 'test');
    expect(fired).toBe(true);
  });
  it('should call afterValidate', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 'test');
    setTimeout(function () {
      expect(onAfterValidate.calls.count()).toBe(1);
      done();
    }, 200);
  });
  it('should call afterValidate when columns is a function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
          colMeta.type = 'numeric';
        } else if (column === 1) {
          colMeta.data = 'name';
        } else if (column === 2) {
          colMeta.data = 'lastName';
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 'test');
    setTimeout(function () {
      expect(onAfterValidate.calls.count()).toBe(1);
      done();
    }, 200);
  });
  it('beforeValidate can manipulate value', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var result = null;
    onAfterValidate.and.callFake(function (valid, value) {
      result = value;
    });
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      beforeValidate: function beforeValidate() {
        return 999;
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 123);
    setTimeout(function () {
      expect(result).toBe(999);
      done();
    }, 200);
  });
  it('beforeValidate can manipulate value when columns is a function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var result = null;
    onAfterValidate.and.callFake(function (valid, value) {
      result = value;
    });
    handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = {};

        if (column === 0) {
          colMeta.data = 'id';
          colMeta.type = 'numeric';
        } else if (column === 1) {
          colMeta.data = 'name';
        } else if (column === 2) {
          colMeta.data = 'lastName';
        } else {
          colMeta = null;
        }

        return colMeta;
      },
      beforeValidate: function beforeValidate() {
        return 999;
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 123);
    setTimeout(function () {
      expect(result).toBe(999);
      done();
    }, 200);
  });
  it('should be able to define custom validator function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        validator: function validator(value, cb) {
          cb(true);
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 123);
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);
      done();
    }, 200);
  });
  it('should be able to define custom validator function when columns is a function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id',
            validator: function validator(value, cb) {
              cb(true);
            }
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        } else if (column === 2) {
          colMeta = {
            data: 'lastName'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 123);
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);
      done();
    }, 200);
  });
  it('should be able to define custom validator RegExp', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        validator: /^\d+$/
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 'test');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);
      done();
    }, 200);
  });
  it('should be able to define custom validator RegExp when columns is a function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id',
            validator: /^\d+$/
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        } else if (column === 2) {
          colMeta = {
            data: 'lastName'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 'test');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);
      done();
    }, 200);
  });
  it('this in validator should point to cellProperties', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var result = null;
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        validator: function validator(value, cb) {
          result = this;
          cb(true);
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 123);
    setTimeout(function () {
      expect(result.instance).toEqual(getInstance());
      done();
    }, 200);
  });
  it('this in validator should point to cellProperties when columns is a function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var result = null;
    handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id',
            validator: function validator(value, cb) {
              result = this;
              cb(true);
            }
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        } else if (column === 2) {
          colMeta = {
            data: 'lastName'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 123);
    setTimeout(function () {
      expect(result.instance).toEqual(getInstance());
      done();
    }, 200);
  });
  it('should not throw error after calling validateCells without first argument', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        if (value === 'B1') {
          callb(false);
        } else {
          callb(true);
        }
      },
      afterValidate: onAfterValidate
    });
    expect(function () {
      return hot.validateCells();
    }).not.toThrow();
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
      done();
    }, 200);
  });
  it('should throw error after calling validateRows first argument not array', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        callb(true);
      },
      afterValidate: onAfterValidate
    });
    expect(function () {
      return hot.validateRows();
    }).toThrow();
    expect(function () {
      return hot.validateRows(0, function () {});
    }).toThrow();
    expect(function () {
      return hot.validateRows({}, function () {});
    }).toThrow();
    expect(function () {
      return hot.validateRows(function () {});
    }).toThrow();
    done();
  });
  it('should throw error after calling validateColumns first argument not array', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        callb(true);
      },
      afterValidate: onAfterValidate
    });
    expect(function () {
      return hot.validateColumns();
    }).toThrow();
    expect(function () {
      return hot.validateColumns(0, function () {});
    }).toThrow();
    expect(function () {
      return hot.validateColumns({}, function () {});
    }).toThrow();
    expect(function () {
      return hot.validateColumns(function () {});
    }).toThrow();
    done();
  });
  it('should not throw error after calling validateRows without second argument', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        callb(true);
      },
      afterValidate: onAfterValidate
    });
    expect(function () {
      return hot.validateRows([]);
    }).not.toThrow();
    expect(function () {
      return hot.validateRows([0, 1]);
    }).not.toThrow();
    expect(function () {
      return hot.validateRows([100, 101]);
    }).not.toThrow();
    done();
  });
  it('should not throw error after calling validateColumns without second argument', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        callb(true);
      },
      afterValidate: onAfterValidate
    });
    expect(function () {
      return hot.validateColumns([]);
    }).not.toThrow();
    expect(function () {
      return hot.validateColumns([0, 1]);
    }).not.toThrow();
    expect(function () {
      return hot.validateColumns([100, 101]);
    }).not.toThrow();
    done();
  });
  it('should add class name `htInvalid` to an cell that does not validate - on validateCells', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        if (value === 'B1') {
          callb(false);
        } else {
          callb(true);
        }
      },
      afterValidate: onAfterValidate
    });
    hot.validateCells(function () {
      hot.render();
    });
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
      done();
    }, 200);
  });
  it('should add class name `htInvalid` to an cell that does not validate - on validateRows', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        if (value === 'B1') {
          callb(false);
        } else {
          callb(true);
        }
      },
      afterValidate: onAfterValidate
    });
    hot.validateRows([], function () {
      hot.render();
    });
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(0);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);
      hot.updateSettings({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      hot.validateRows([0], function () {
        hot.render();
      });
    }, 100);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
      hot.updateSettings({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      hot.validateRows([1], function () {
        hot.render();
      });
    }, 200);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(0);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);
      hot.updateSettings({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      hot.validateRows([0, 1], function () {
        hot.render();
      });
    }, 300);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
      hot.updateSettings({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      hot.validateRows([0, 1, 100], function () {
        hot.render();
      });
    }, 400);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
      hot.updateSettings({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      hot.validateRows([100, 101], function () {
        hot.render();
      });
    }, 500);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(0);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);
      done();
    }, 600);
  });
  it('should add class name `htInvalid` to an cell that does not validate - on validateColumns',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        if (value === 'B1') {
          callb(false);
        } else {
          callb(true);
        }
      },
      afterValidate: onAfterValidate
    });
    yield promisfy(function (resolve) {
      return hot.validateColumns([], resolve);
    });
    expect(spec().$container.find('td.htInvalid').length).toEqual(0);
    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);
    hot.updateSettings({
      data: Handsontable.helper.createSpreadsheetData(2, 2)
    });
    yield promisfy(function (resolve) {
      return hot.validateColumns([0], resolve);
    });
    expect(spec().$container.find('td.htInvalid').length).toEqual(0);
    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);
    hot.updateSettings({
      data: Handsontable.helper.createSpreadsheetData(2, 2)
    });
    yield promisfy(function (resolve) {
      return hot.validateColumns([1], resolve);
    });
    expect(spec().$container.find('td.htInvalid').length).toEqual(1);
    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
    hot.updateSettings({
      data: Handsontable.helper.createSpreadsheetData(2, 2)
    });
    yield promisfy(function (resolve) {
      return hot.validateColumns([0, 1], resolve);
    });
    expect(spec().$container.find('td.htInvalid').length).toEqual(1);
    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
    hot.updateSettings({
      data: Handsontable.helper.createSpreadsheetData(2, 2)
    });
    yield promisfy(function (resolve) {
      return hot.validateColumns([0, 1, 100], resolve);
    });
    expect(spec().$container.find('td.htInvalid').length).toEqual(1);
    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
    hot.updateSettings({
      data: Handsontable.helper.createSpreadsheetData(2, 2)
    });
    yield promisfy(function (resolve) {
      return hot.validateColumns([100, 101], resolve);
    });
    expect(spec().$container.find('td.htInvalid').length).toEqual(0);
    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);
  }));
  it('should add class name `htInvalid` to an cell that does not validate - when we trigger validateCell',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, cb) {
        cb(false);
      },
      afterValidate: onAfterValidate
    });
    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(4);
    hot.validateCell(hot.getDataAtCell(1, 1), hot.getCellMeta(1, 1), function () {});
    yield sleep(200);
    expect(spec().$container.find('td.htInvalid').length).toEqual(1);
    expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);
  }));
  it('should remove class name `htInvalid` from an cell that does validate - when we change validator rules', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var isValid = false;

    var _validator = function validator() {
      return isValid;
    };

    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, cb) {
        cb(_validator());
      },
      afterValidate: onAfterValidate
    });
    hot.validateCells(function () {});
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(4);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(0);
      isValid = true;
      onAfterValidate.calls.reset();
      hot.validateCell(hot.getDataAtCell(1, 1), hot.getCellMeta(1, 1), function () {});
    }, 200);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(3);
      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(1);
      done();
    }, 400);
  });
  it('should add class name `htInvalid` to an cell that does not validate - on edit', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        if (value === 'test') {
          callb(false);
        } else {
          callb(true);
        }
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 'test');
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);
      done();
    }, 200);
  });
  it('should add class name `htInvalid` to a cell without removing other classes', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var validator = jasmine.createSpy('validator');
    validator.and.callFake(function (value, callb) {
      if (value === 123) {
        callb(false);
      } else {
        callb(true);
      }
    });
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      type: 'numeric',
      validator: validator,
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 123);
    setTimeout(function () {
      expect(validator.calls.count()).toEqual(1);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htNumeric')).toEqual(true);
      onAfterValidate.calls.reset();
      setDataAtCell(0, 0, 124);
    }, 200);
    setTimeout(function () {
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htNumeric')).toEqual(true);
      done();
    }, 400);
  });
  it('should add class name `htInvalid` to an cell that does not validate - after validateCells', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 'test');
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(0);
      updateSettings({
        validator: function validator(value, callb) {
          if (value === 'test') {
            callb(false);
          } else {
            callb(true);
          }
        }
      });
      onAfterValidate.calls.reset();
      hot.validateCells(function () {});
    }, 200);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);
      done();
    }, 400);
  });
  it('should add class name `htInvalid` to an cell that does not validate - after validateRows', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 'test');
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(0);
      updateSettings({
        validator: function validator(value, callb) {
          if (value === 'test') {
            callb(false);
          } else {
            callb(true);
          }
        }
      });
      onAfterValidate.calls.reset();
      hot.validateRows([0], function () {});
    }, 200);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);
      done();
    }, 400);
  });
  it('should add class name `htInvalid` to an cell that does not validate - after validateColumns', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 'test');
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(0);
      updateSettings({
        validator: function validator(value, callb) {
          if (value === 'test') {
            callb(false);
          } else {
            callb(true);
          }
        }
      });
      onAfterValidate.calls.reset();
      hot.validateColumns([0], function () {});
    }, 200);
    setTimeout(function () {
      expect(spec().$container.find('td.htInvalid').length).toEqual(1);
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);
      done();
    }, 400);
  });
  it('should remove class name `htInvalid` when cell is edited to validate', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callb) {
        if (value === 'A1') {
          callb(false);
        } else {
          callb(true);
        }
      },
      afterValidate: onAfterValidate
    });
    hot.validateCells(function () {
      hot.render();
    });
    setTimeout(function () {
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);
      onAfterValidate.calls.reset();
      setDataAtCell(0, 0, 'test');
    }, 200);
    setTimeout(function () {
      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);
      done();
    }, 400);
  });
  it('should call callback with first argument as `true` if all cells are valid', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callback) {
        callback(true);
      },
      afterValidate: onAfterValidate
    });
    hot.validateCells(onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(true);
      done();
    }, 200);
  });
  it('should call callback with first argument as `true` if all cells are valid - on validateRows', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callback) {
        callback(true);
      },
      afterValidate: onAfterValidate
    });
    hot.validateRows([0, 1], onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(true);
      done();
    }, 200);
  });
  it('should call callback with first argument as `true` if all cells are valid - on validateColumns', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callback) {
        callback(true);
      },
      afterValidate: onAfterValidate
    });
    hot.validateColumns([0, 1], onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(true);
      done();
    }, 200);
  });
  it('should call callback with first argument as `false` if one of cells is invalid', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callback) {
        callback(false);
      },
      afterValidate: onAfterValidate
    });
    hot.validateCells(onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      done();
    }, 200);
  });
  it('should call callback with first argument as `false` if one of cells is invalid - on validateRows', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callback) {
        callback(false);
      },
      afterValidate: onAfterValidate
    });
    hot.validateRows([0, 1], onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      done();
    }, 200);
  });
  it('should call callback with first argument as `false` if one of cells is invalid - on validateColumns', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(2, 2),
      validator: function validator(value, callback) {
        callback(false);
      },
      afterValidate: onAfterValidate
    });
    hot.validateColumns([0, 1], onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      done();
    }, 200);
  });
  it('should not allow for changes where data is invalid (multiple changes, async)', function (done) {
    var validatedChanges;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callb) {
        setTimeout(function () {
          if (value === 'fail') {
            callb(false);
          } else {
            callb(true);
          }
        }, 10);
      },
      afterChange: function afterChange(changes, source) {
        if (source !== 'loadData') {
          validatedChanges = changes;
        }
      }
    });
    populateFromArray(0, 0, [['A1-new'], ['fail'], ['A3-new']]);
    setTimeout(function () {
      expect(validatedChanges.length).toEqual(2);
      expect(validatedChanges[0]).toEqual([0, 0, 'A1', 'A1-new']);
      expect(validatedChanges[1]).toEqual([2, 0, 'A3', 'A3-new']);
      expect(getDataAtCell(0, 0)).toEqual('A1-new');
      expect(getDataAtCell(1, 0)).toEqual('A2');
      expect(getDataAtCell(2, 0)).toEqual('A3-new');
      expect(getCellMeta(0, 0).valid).toBe(true);
      expect(getCellMeta(1, 0).valid).toBe(true);
      expect(getCellMeta(2, 0).valid).toBe(true);
      done();
    }, 200);
  });
  it('should call beforeChange exactly once after cell value edit and validator is synchronous', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var onBeforeChange = jasmine.createSpy('onBeforeChange');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        callback(true);
      },
      beforeChange: onBeforeChange,
      afterValidate: onAfterValidate
    });
    expect(onBeforeChange.calls.count()).toEqual(0);
    hot.setDataAtCell(0, 0, 10);
    setTimeout(function () {
      expect(onBeforeChange.calls.count()).toEqual(1);
      done();
    }, 200);
  });
  it('should call beforeChange exactly once after cell value edit and validator is asynchronous', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var onBeforeChange = jasmine.createSpy('onBeforeChange');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          callback(true);
        }, 10);
      },
      beforeChange: onBeforeChange,
      afterValidate: onAfterValidate
    });
    expect(onBeforeChange.calls.count()).toEqual(0);
    hot.setDataAtCell(0, 0, 10);
    setTimeout(function () {
      expect(onBeforeChange.calls.count()).toEqual(1);
      done();
    }, 200);
  });
  it('should call afterChange exactly once after cell value edit and validator is synchronous', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var onAfterChange = jasmine.createSpy('onAfterChange');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        callback(true);
      },
      afterChange: onAfterChange,
      afterValidate: onAfterValidate
    });
    expect(onAfterChange.calls.count()).toEqual(1); // loadData

    hot.setDataAtCell(0, 0, 10);
    setTimeout(function () {
      expect(onAfterChange.calls.count()).toEqual(2);
      done();
    }, 200);
  });
  it('should call afterChange exactly once after cell value edit and validator is asynchronous', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var onAfterChange = jasmine.createSpy('onAfterChange');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          callback(true);
        }, 10);
      },
      afterChange: onAfterChange,
      afterValidate: onAfterValidate
    });
    expect(onAfterChange.calls.count()).toEqual(1); // loadData

    hot.setDataAtCell(0, 0, 10);
    setTimeout(function () {
      expect(onAfterChange.calls.count()).toEqual(2);
      done();
    }, 200);
  });
  it('edited cell should stay on screen until value is validated', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var onAfterChange = jasmine.createSpy('onAfterChange');
    var isEditorVisibleBeforeChange;
    var isEditorVisibleAfterChange;
    onAfterValidate.and.callFake(function () {
      isEditorVisibleBeforeChange = isEditorVisible();
    });
    onAfterChange.and.callFake(function () {
      isEditorVisibleAfterChange = isEditorVisible();
    });
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      afterValidate: onAfterValidate,
      afterChange: onAfterChange,
      validator: function validator(value, callback) {
        setTimeout(function () {
          callback(true);
        }, 100);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    onAfterValidate.calls.reset();
    onAfterChange.calls.reset();
    keyDown('enter');
    expect(document.activeElement.nodeName).toEqual('TEXTAREA');
    setTimeout(function () {
      expect(isEditorVisibleBeforeChange).toBe(true);
      expect(isEditorVisibleAfterChange).toBe(true);
      expect(isEditorVisible()).toBe(false);
      done();
    }, 200);
  });
  it('should validate edited cell after selecting another cell',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var validatedValue;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          validatedValue = value;
          callback(true);
        }, 50);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    selectCell(0, 1);
    yield sleep(150);
    expect(validatedValue).toEqual('Ted');
  }));
  it('should leave the new value in editor if it does not validate (async validation), after hitting ENTER', function (done) {
    var validationResult;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          validationResult = value.length === 2;
          callback(validationResult);
        }, 100);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    keyDown('enter');
    setTimeout(function () {
      expect(validationResult).toBe(false);
      expect(document.activeElement.value).toEqual('Ted');
      done();
    }, 200);
  });
  it('should leave the new value in editor if it does not validate (sync validation), after hitting ENTER', function (done) {
    var validationResult;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        validationResult = value.length === 2;
        callback(validationResult);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    keyDown('enter');
    setTimeout(function () {
      expect(validationResult).toBe(false);
      expect(document.activeElement.value).toEqual('Ted');
      done();
    }, 200);
  });
  it('should leave the new value in editor if it does not validate (async validation), after selecting another cell', function (done) {
    var validationResult;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          validationResult = value.length === 2;
          callback(validationResult);
        }, 100);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    selectCell(1, 0);
    setTimeout(function () {
      expect(validationResult).toBe(false);
      expect(document.activeElement.value).toEqual('Ted');
      done();
    }, 200);
  });
  it('should leave the new value in editor if it does not validate (sync validation), after selecting another cell', function (done) {
    var validationResult;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        validationResult = value.length === 2;
        callback(validationResult);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    selectCell(1, 0);
    setTimeout(function () {
      expect(validationResult).toBe(false);
      expect(document.activeElement.value).toEqual('Ted');
      done();
    }, 200);
  });
  it('should remove htInvalid class properly after cancelling change, when physical indexes are not equal to visual indexes', function (done) {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      columnSorting: {
        column: 0,
        sortOrder: 'desc'
      },
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          callback(value.length === 2);
        }, 100);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    keyDown('enter');
    setTimeout(function () {
      var $cell = $(getCell(0, 0));
      expect($cell.hasClass('htInvalid')).toEqual(false);
      done();
    }, 200);
  });
  it('should not attempt to remove the htInvalid class if the validated cell is no longer rendered', function (done) {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(20, 2),
      columnSorting: {
        column: 0,
        sortOrder: 'desc'
      },
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          callback(value.length === 2);
        }, 100);
      },
      height: 40
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    selectCell(19, 0);
    setTimeout(function () {
      var $cell = $(getCell(0, 0));
      expect($cell.hasClass('htInvalid')).toEqual(false);
      done();
    }, 200);
  });
  it('should close the editor and save the new value if validation fails and allowInvalid is set to "true"', function (done) {
    var validationResult;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: true,
      validator: function validator(value, callback) {
        setTimeout(function () {
          validationResult = value.length === 2;
          callback(validationResult);
        }, 100);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'Ted';
    selectCell(1, 0);
    setTimeout(function () {
      expect(validationResult).toBe(false);
      expect(getDataAtCell(0, 0)).toEqual('Ted');
      expect(getCell(0, 0).className).toMatch(/htInvalid/);
      done();
    }, 200);
  });
  it('should close the editor and save the new value after double clicking on a cell, if the previously edited cell validated correctly',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var validationResult;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          validationResult = value.length === 2;
          callback(validationResult);
        }, 100);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    expect(isEditorVisible()).toBe(true);
    document.activeElement.value = 'AA';
    expect(document.activeElement.value).toEqual('AA');
    var cell = $(getCell(1, 0));
    yield sleep();
    mouseDown(cell);
    mouseUp(cell);
    yield sleep(100);
    mouseDown(cell);
    mouseUp(cell);
    yield sleep(200);
    expect(isEditorVisible()).toBe(false);
    expect(validationResult).toBe(true);
    expect(getDataAtCell(0, 0)).toEqual('AA');
  }));
  it('should close the editor and restore the original value after double clicking on a cell, if the previously edited cell have not validated', function (done) {
    var validationResult;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      allowInvalid: false,
      validator: function validator(value, callback) {
        setTimeout(function () {
          validationResult = value.length === 2;
          callback(validationResult);
        }, 100);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'AAA';
    expect(document.activeElement.value).toEqual('AAA');
    var cell = $(getCell(1, 0));
    setTimeout(function () {
      mouseDown(cell);
      mouseUp(cell);
    }, 0);
    setTimeout(function () {
      mouseDown(cell);
      mouseUp(cell);
    }, 100);
    setTimeout(function () {
      expect(validationResult).toBe(false);
      expect(getDataAtCell(0, 0)).toEqual('A1');
      done();
    }, 300);
  });
  it('should listen to key changes after cell is corrected (allowInvalid: false)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      allowInvalid: false,
      columns: [{
        data: 'id',
        type: 'numeric',
        validator: function validator(val, cb) {
          cb(parseInt(val, 10) > 100);
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    selectCell(2, 0);
    keyDownUp('enter');
    document.activeElement.value = '99';
    onAfterValidate.calls.reset();
    keyDownUp('enter'); // should be ignored

    yield sleep(200);
    expect(isEditorVisible()).toBe(true);
    document.activeElement.value = '999';
    onAfterValidate.calls.reset();
    keyDownUp('enter'); // should be accepted

    yield sleep(200);
    expect(isEditorVisible()).toBe(false);
    expect(getSelected()).toEqual([[3, 0, 3, 0]]);
    keyDownUp('arrow_up');
    expect(getSelected()).toEqual([[2, 0, 2, 0]]);
  }));
  it('should allow keyboard movement when cell is being validated (move DOWN)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      allowInvalid: false,
      columns: [{
        data: 'id',
        type: 'numeric',
        validator: function validator(val, cb) {
          setTimeout(function () {
            cb(parseInt(val, 10) > 100);
          }, 100);
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    selectCell(2, 0);
    keyDownUp('enter');
    document.activeElement.value = '999';
    keyDownUp('enter');
    expect(getSelected()).toEqual([[3, 0, 3, 0]]);
    keyDownUp('arrow_down');
    keyDownUp('arrow_down');
    expect(isEditorVisible()).toBe(true);
    expect(getSelected()).toEqual([[5, 0, 5, 0]]);
    yield sleep(200);
    expect(isEditorVisible()).toBe(false);
    expect(getSelected()).toEqual([[5, 0, 5, 0]]); // only enterMove and first arrow_down is performed
  }));
  it('should not allow keyboard movement until cell is validated (move UP)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      allowInvalid: false,
      columns: [{
        data: 'id',
        type: 'numeric',
        validator: function validator(val, cb) {
          setTimeout(function () {
            cb(parseInt(val, 10) > 100);
          }, 100);
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    selectCell(2, 0);
    keyDownUp('enter');
    document.activeElement.value = '999';
    keyDownUp('enter');
    expect(getSelected()).toEqual([[3, 0, 3, 0]]);
    keyDownUp('arrow_up');
    keyDownUp('arrow_up');
    expect(isEditorVisible()).toBe(true);
    expect(getSelected()).toEqual([[1, 0, 1, 0]]);
    setTimeout(function () {
      expect(isEditorVisible()).toBe(false);
      expect(getSelected()).toEqual([[1, 0, 1, 0]]);
      done();
    }, 200);
  });
  it('should not allow keyboard movement until cell is validated (move RIGHT)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      allowInvalid: false,
      columns: [{
        data: 'id',
        type: 'numeric',
        validator: function validator(val, cb) {
          setTimeout(function () {
            cb(parseInt(val, 10) > 100);
          }, 100);
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    selectCell(2, 0);
    keyDownUp('enter');
    document.activeElement.value = '999';
    keyDownUp('enter'); // should be accepted but only after 100 ms

    expect(getSelected()).toEqual([[3, 0, 3, 0]]);
    keyDownUp('arrow_right');
    keyDownUp('arrow_right');
    expect(isEditorVisible()).toBe(true);
    expect(getSelected()).toEqual([[3, 2, 3, 2]]);
    setTimeout(function () {
      expect(isEditorVisible()).toBe(false);
      expect(getSelected()).toEqual([[3, 2, 3, 2]]);
      done();
    }, 200);
  });
  it('should not allow keyboard movement until cell is validated (move LEFT)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    hot = handsontable({
      data: arrayOfObjects(),
      allowInvalid: false,
      columns: [{
        data: 'name'
      }, {
        data: 'lastName'
      }, {
        data: 'id',
        type: 'numeric',
        validator: function validator(val, cb) {
          setTimeout(function () {
            cb(parseInt(val, 10) > 100);
          }, 100);
        }
      }],
      afterValidate: onAfterValidate
    });
    selectCell(2, 2);
    keyDownUp('enter');
    document.activeElement.value = '999';
    keyDownUp('enter'); // should be accepted but only after 100 ms

    expect(getSelected()).toEqual([[3, 2, 3, 2]]);
    spec().$container.simulate('keydown', {
      keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT
    });
    spec().$container.simulate('keyup', {
      keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT
    });
    spec().$container.simulate('keydown', {
      keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT
    });
    spec().$container.simulate('keyup', {
      keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT
    });
    expect(isEditorVisible()).toBe(true);
    expect(getSelected()).toEqual([[3, 0, 3, 0]]);
    yield sleep(200);
    expect(isEditorVisible()).toBe(false);
    expect(getSelected()).toEqual([[3, 0, 3, 0]]);
  }));
  it('should not validate cell if editing has been canceled', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    selectCell(0, 0);
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor

    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing

    setTimeout(function () {
      expect(onAfterValidate).not.toHaveBeenCalled();
      done();
    }, 100);
  });
  it('should not validate cell if editing has been canceled when columns is a function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id'
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        } else if (column === 2) {
          colMeta = {
            data: 'lastName'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    selectCell(0, 0);
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor

    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing

    setTimeout(function () {
      expect(onAfterValidate).not.toHaveBeenCalled();
      done();
    }, 100);
  });
  it('should leave cell invalid if editing has been canceled', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        validator: function validator(value, cb) {
          cb(false);
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 'foo');
    setTimeout(function () {
      expect(getCellMeta(0, 0).valid).toBe(false);
      selectCell(0, 0);
      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor

      keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing

      expect(getCellMeta(0, 0).valid).toBe(false);
      done();
    }, 200);
  });
  it('should leave cell invalid if editing has been canceled when columns is a function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id',
            validator: function validator(value, cb) {
              cb(false);
            }
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        } else if (column === 2) {
          colMeta = {
            data: 'lastName'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 'foo');
    setTimeout(function () {
      expect(getCellMeta(0, 0).valid).toBe(false);
      selectCell(0, 0);
      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor

      keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing

      expect(getCellMeta(0, 0).valid).toBe(false);
      done();
    }, 200);
  });
  it('should open an appropriate editor after cell value is valid again', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        validator: function validator(value, cb) {
          // eslint-disable-next-line
          cb(value == parseInt(value, 10));
        },
        allowInvalid: false
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    selectCell(0, 0);
    var activeEditor = hot.getActiveEditor();
    expect(activeEditor.row).toEqual(0);
    expect(activeEditor.col).toEqual(0);
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor

    activeEditor.setValue('foo');
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes, close editor

    setTimeout(function () {
      onAfterValidate.calls.reset();
      activeEditor = hot.getActiveEditor();
      expect(activeEditor.isOpened()).toBe(true); // value is invalid, so editor stays opened

      expect(activeEditor.row).toEqual(0);
      expect(activeEditor.col).toEqual(0);
      activeEditor.setValue(2);
      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes and move to cell below (row: 1, col: ś0)
    }, 200);
    setTimeout(function () {
      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor

      activeEditor = hot.getActiveEditor();
      expect(activeEditor.row).toEqual(1);
      expect(activeEditor.col).toEqual(0);
      done();
    }, 400);
  });
  it('should open an appropriate editor after cell value is valid again when columns is a function', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: arrayOfObjects(),
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id',
            validator: function validator(value, cb) {
              // eslint-disable-next-line
              cb(value == parseInt(value, 10));
            },
            allowInvalid: false
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        } else if (column === 2) {
          colMeta = {
            data: 'lastName'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    selectCell(0, 0);
    var activeEditor = hot.getActiveEditor();
    expect(activeEditor.row).toEqual(0);
    expect(activeEditor.col).toEqual(0);
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor

    activeEditor.setValue('foo');
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes, close editor

    setTimeout(function () {
      onAfterValidate.calls.reset();
      activeEditor = hot.getActiveEditor();
      expect(activeEditor.isOpened()).toBe(true); // value is invalid, so editor stays opened

      expect(activeEditor.row).toEqual(0);
      expect(activeEditor.col).toEqual(0);
      activeEditor.setValue(2);
      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes and move to cell below (row: 1, col: ś0)
    }, 200);
    setTimeout(function () {
      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor

      activeEditor = hot.getActiveEditor();
      expect(activeEditor.row).toEqual(1);
      expect(activeEditor.col).toEqual(0);
      done();
    }, 400);
  });
  it('should call the validation callback only once, when using the validateCells method on a mixed set of data', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: [{
        id: 'sth',
        name: 'Steve'
      }, {
        id: 'sth else',
        name: 'Bob'
      }],
      columns: [{
        data: 'id',
        validator: function validator(value, cb) {
          cb(value === parseInt(value, 10));
        }
      }, {
        data: 'name'
      }],
      afterValidate: onAfterValidate
    });
    hot.validateCells(onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      expect(onValidate.calls.count()).toEqual(1);
      done();
    }, 200);
  });
  it('should call the validation callback only once, when using the validateRows method on a mixed set of data', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: [{
        id: 'sth',
        name: 'Steve'
      }, {
        id: 'sth else',
        name: 'Bob'
      }],
      columns: [{
        data: 'id',
        validator: function validator(value, cb) {
          cb(value === parseInt(value, 10));
        }
      }, {
        data: 'name'
      }],
      afterValidate: onAfterValidate
    });
    hot.validateRows([0, 1], onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      expect(onValidate.calls.count()).toEqual(1);
      done();
    }, 200);
  });
  it('should call the validation callback only once, when using the validateColumns method on a mixed set of data', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: [{
        id: 'sth',
        name: 'Steve'
      }, {
        id: 'sth else',
        name: 'Bob'
      }],
      columns: [{
        data: 'id',
        validator: function validator(value, cb) {
          cb(value === parseInt(value, 10));
        }
      }, {
        data: 'name'
      }],
      afterValidate: onAfterValidate
    });
    hot.validateColumns([0, 1], onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      expect(onValidate.calls.count()).toEqual(1);
      done();
    }, 200);
  });
  it('should call the validation callback only once, when using the validateCells method on a mixed set of data and when columns is a function', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: [{
        id: 'sth',
        name: 'Steve'
      }, {
        id: 'sth else',
        name: 'Bob'
      }],
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id',
            validator: function validator(value, cb) {
              cb(value === parseInt(value, 10));
            }
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    hot.validateCells(onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      expect(onValidate.calls.count()).toEqual(1);
      done();
    }, 200);
  });
  it('should call the validation callback only once, when using the validateRows method on a mixed set of data and when columns is a function', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: [{
        id: 'sth',
        name: 'Steve'
      }, {
        id: 'sth else',
        name: 'Bob'
      }],
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id',
            validator: function validator(value, cb) {
              cb(value === parseInt(value, 10));
            }
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    hot.validateRows([0, 1], onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      expect(onValidate.calls.count()).toEqual(1);
      done();
    }, 200);
  });
  it('should call the validation callback only once, when using the validateColumns method on a mixed set of data and when columns is a function', function (done) {
    var onValidate = jasmine.createSpy('onValidate');
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: [{
        id: 'sth',
        name: 'Steve'
      }, {
        id: 'sth else',
        name: 'Bob'
      }],
      columns: function columns(column) {
        var colMeta = null;

        if (column === 0) {
          colMeta = {
            data: 'id',
            validator: function validator(value, cb) {
              cb(value === parseInt(value, 10));
            }
          };
        } else if (column === 1) {
          colMeta = {
            data: 'name'
          };
        }

        return colMeta;
      },
      afterValidate: onAfterValidate
    });
    hot.validateColumns([0, 1], onValidate);
    setTimeout(function () {
      expect(onValidate).toHaveBeenCalledWith(false);
      expect(onValidate.calls.count()).toEqual(1);
      done();
    }, 200);
  });
});

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('Core_view', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should focus cell after viewport is scrolled using down arrow', function () {
    spec().$container[0].style.width = '400px';
    spec().$container[0].style.height = '60px';
    handsontable({
      startRows: 20
    });
    selectCell(0, 0);
    keyDown('arrow_down');
    keyDown('arrow_down');
    keyDown('arrow_down');
    keyDown('arrow_down');
    expect(getSelected()).toEqual([[4, 0, 4, 0]]);
    keyDown('enter');
    expect(isEditorVisible()).toEqual(true);
  });
  it('should scroll viewport if selected cell is out of the viewport and renderAllRows is enabled', function () {
    spec().$container[0].style.width = '400px';
    spec().$container[0].style.height = '50px';
    spec().$container[0].style.overflow = 'hidden';
    var hot = handsontable({
      startRows: 20,
      renderAllRows: true
    });
    selectCell(0, 0);
    var scrollableElement = hot.view.wt.wtOverlays.topOverlay.mainTableScrollableElement;
    var initialScrollTop = scrollableElement.scrollTop;
    keyDown('arrow_down');
    keyDown('arrow_down');
    keyDown('arrow_down');
    keyDown('arrow_down');
    expect(scrollableElement.scrollTop).toBeGreaterThan(initialScrollTop);
  });
  it('should not render "undefined" class name', function () {
    spec().$container[0].style.width = '501px';
    spec().$container[0].style.height = '100px';
    spec().$container[0].style.overflow = 'hidden';
    handsontable({
      startRows: 10,
      startCols: 5,
      colWidths: [47, 47, 47, 47, 47],
      rowHeaders: true,
      colHeaders: true,
      stretchH: 'all'
    });
    selectCell(0, 0);
    expect(spec().$container.find('.undefined').length).toBe(0);
  });
  it('should scroll viewport when partially visible cell is clicked', function () {
    spec().$container[0].style.width = '400px';
    spec().$container[0].style.height = '60px';
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 3),
      height: 60
    });
    var htCore = getHtCore();
    var scrollTop = hot.rootElement.querySelector('.wtHolder').scrollTop;
    expect(scrollTop).toBe(0);
    expect(spec().$container.height()).toEqual(60);
    expect(spec().$container.find('.wtHolder .wtHider').height()).toBeGreaterThan(60);
    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
    htCore.find('tr:eq(3) td:eq(0)').simulate('mousedown');
    expect(hot.rootElement.querySelector('.wtHolder').scrollTop).toBeGreaterThan(scrollTop);
    expect(getSelected()).toEqual([[3, 0, 3, 0]]);
  });
  it('should scroll viewport without cell selection', function () {
    spec().$container[0].style.width = '400px';
    var hot1 = handsontable({
      data: Handsontable.helper.createSpreadsheetData(20, 20),
      height: 100
    });
    hot1.scrollViewportTo(10, 10);
    var wtHolder = spec().$container.find('.ht_master .wtHolder');
    expect(wtHolder[0].scrollTop).toEqual(230);
    expect(wtHolder[0].scrollLeft).toEqual(500);
  });
  it('should not throw error while scrolling viewport to 0, 0 (empty data)', function () {
    spec().$container[0].style.width = '400px';
    var hot1 = handsontable({
      data: [],
      height: 100
    });
    expect(function () {
      hot1.view.scrollViewport({
        row: 0,
        col: 0
      });
    }).not.toThrow();
  });
  it('should throw error while scrolling viewport below 0 (empty data)', function () {
    spec().$container[0].style.width = '400px';
    var hot1 = handsontable({
      data: [],
      height: 100
    });
    expect(hot1.view.scrollViewport({
      row: -1,
      col: 0
    })).toBe(false);
    expect(hot1.view.scrollViewport({
      row: 0,
      col: -1
    })).toBe(false);
    expect(hot1.view.scrollViewport({
      row: -1,
      col: -1
    })).toBe(false);
  });
  it('should scroll viewport, respecting fixed rows', function () {
    spec().$container[0].style.width = '400px';
    spec().$container[0].style.height = '60px';
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 9),
      fixedRowsTop: 1,
      height: 60
    });
    var htCore = getHtCore();
    var scrollTop = hot.rootElement.querySelector('.wtHolder').scrollTop;
    expect(scrollTop).toBe(0);
    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(htCore.find('tr:eq(0) td:eq(1)').html()).toEqual('B1');
    expect(htCore.find('tr:eq(0) td:eq(2)').html()).toEqual('C1');
    selectCell(0, 0);
    keyDown('arrow_down');
    keyDown('arrow_down');
    keyDown('arrow_down');
    keyDown('arrow_down');
    expect(hot.rootElement.querySelector('.wtHolder').scrollTop).toBeGreaterThan(scrollTop);
  });
  it('should enable to change fixedRowsTop with updateSettings', function () {
    spec().$container[0].style.width = '400px';
    spec().$container[0].style.height = '60px';
    var HOT = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 9),
      fixedRowsTop: 1,
      width: 200,
      height: 100
    });
    selectCell(0, 0);
    var htCore = getHtCore();
    var topClone = getTopClone();
    expect(topClone.find('tr').length).toEqual(1);
    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
    expect(htCore.find('tr:eq(3) td:eq(0)').html()).toEqual('A4');
    keyDown('arrow_down');
    keyDown('arrow_down');
    keyDown('arrow_down');
    keyDown('arrow_down');
    expect(topClone.find('tr').length).toEqual(1);
    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    HOT.updateSettings({
      fixedRowsTop: 2
    });
    expect(topClone.find('tr').length).toEqual(2);
    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(topClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
    expect(htCore.find('tr:eq(3) td:eq(0)').html()).toEqual('A4');
  });
  it('should scroll viewport, respecting fixed columns', function () {
    spec().$container[0].style.width = '200px';
    spec().$container[0].style.height = '100px';
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 9),
      fixedColumnsLeft: 1
    });
    var htCore = getHtCore();
    var leftClone = spec().$container.find('.ht_clone_left');
    expect(leftClone.find('tr:eq(0) td').length).toEqual(1);
    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
    selectCell(0, 3);
    keyDown('arrow_right');
    keyDown('arrow_right');
    keyDown('arrow_right');
    keyDown('arrow_right');
    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
  });
  it('should enable to change fixedColumnsLeft with updateSettings', function () {
    spec().$container[0].style.width = '200px';
    spec().$container[0].style.height = '100px';
    var HOT = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 9),
      fixedColumnsLeft: 1
    });
    selectCell(0, 0);
    var leftClone = spec().$container.find('.ht_clone_left');
    expect(leftClone.find('tr:eq(0) td').length).toEqual(1);
    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
    keyDown('arrow_right');
    keyDown('arrow_right');
    keyDown('arrow_right');
    keyDown('arrow_right');
    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
    selectCell(0, 0);
    HOT.updateSettings({
      fixedColumnsLeft: 2
    });
    expect(leftClone.find('tr:eq(0) td').length).toEqual(2);
    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');
    expect(leftClone.find('tr:eq(0) td:eq(1)').html()).toEqual('B1');
    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');
    expect(leftClone.find('tr:eq(1) td:eq(1)').html()).toEqual('B2');
    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
    expect(leftClone.find('tr:eq(2) td:eq(1)').html()).toEqual('B3');
  });
  it('should not scroll viewport when last cell is clicked', function () {
    handsontable({
      startRows: 40
    });
    $(window).scrollTop(10000);
    var lastScroll = $(window).scrollTop();
    render(); // renders synchronously so we don't have to put stuff in waits/runs

    selectCell(39, 0);
    expect($(window).scrollTop()).toEqual(lastScroll);
    keyDown('arrow_right');
    expect(getSelected()).toEqual([[39, 1, 39, 1]]);
    expect($(window).scrollTop()).toEqual(lastScroll);
  });
  it('should not shrink table when width and height is not specified for container',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container[0].style.overflow = 'hidden';
    spec().$container.wrap('<div style="width: 50px;"></div>');
    handsontable({
      startRows: 10,
      startCols: 10
    });
    yield sleep(250);
    var initHeight = spec().$container.height();
    yield sleep(250);
    expect(spec().$container.height()).toEqual(initHeight);
  }));
  it('should allow height to be a number', function () {
    handsontable({
      startRows: 10,
      startCols: 10,
      height: 107
    });
    expect(spec().$container.height()).toEqual(107);
  });
  it('should allow height to be a function', function () {
    handsontable({
      startRows: 10,
      startCols: 10,
      height: function height() {
        return 107;
      }
    });
    expect(spec().$container.height()).toEqual(107);
  });
  it('should allow width to be a number', function () {
    handsontable({
      startRows: 10,
      startCols: 10,
      width: 107
    });
    expect(spec().$container.width()).toEqual(107); // rootElement is full width but this should do the trick
  });
  it('should allow width to be a function', function () {
    handsontable({
      startRows: 10,
      startCols: 10,
      width: function width() {
        return 107;
      }
    });
    expect(spec().$container.width()).toEqual(107); // rootElement is full width but this should do the trick
  });
  it('should fire beforeRender event after table has been scrolled',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container[0].style.width = '400px';
    spec().$container[0].style.height = '60px';
    spec().$container[0].style.overflow = 'hidden';
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(100, 3)
    });
    var beforeRenderCallback = jasmine.createSpy('beforeRenderCallback');
    hot.addHook('beforeRender', beforeRenderCallback);
    spec().$container.find('.ht_master .wtHolder').scrollTop(1000);
    yield sleep(200);
    expect(beforeRenderCallback.calls.count()).toBe(1);
  }));
  it('should fire afterRender event after table has been scrolled',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container[0].style.width = '400px';
    spec().$container[0].style.height = '60px';
    spec().$container[0].style.overflow = 'hidden';
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(20, 3)
    });
    var afterRenderCallback = jasmine.createSpy('afterRenderCallback');
    hot.addHook('afterRender', afterRenderCallback);
    spec().$container.find('.ht_master .wtHolder').first().scrollTop(1000);
    yield sleep(200);
    expect(afterRenderCallback.calls.count()).toBe(1);
  }));
  it('should fire afterRender event after table physically rendered',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container[0].style.width = '400px';
    spec().$container[0].style.height = '60px';
    spec().$container[0].style.overflow = 'hidden';
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(20, 3)
    });
    hot.addHook('afterRender', function () {
      hot.view.wt.wtTable.holder.style.overflow = 'scroll';
      hot.view.wt.wtTable.holder.style.width = '220px';
    });
    spec().$container.find('.ht_master .wtHolder').first().scrollTop(1000);
    yield sleep(100); // after afterRender hook triggered element style shouldn't changed

    expect(hot.view.wt.wtTable.holder.style.overflow).toBe('scroll');
    expect(hot.view.wt.wtTable.holder.style.width).toBe('220px');
  })); // TODO fix these tests - https://github.com/handsontable/handsontable/issues/1559

  describe('maximumVisibleElementWidth', function () {
    it('should return maximum width until right edge of the viewport', function () {
      var hot = handsontable({
        startRows: 2,
        startCols: 10,
        width: 100,
        height: 100
      });
      expect(hot.view.maximumVisibleElementWidth(0)).toEqual(100);
    });
    it('should return maximum width until right edge of the viewport (excluding the scrollbar)', function () {
      var hot = handsontable({
        startRows: 10,
        startCols: 10,
        width: 100,
        height: 100
      });
      expect(hot.view.maximumVisibleElementWidth(200)).toBeLessThan(100);
    });
  });
  describe('maximumVisibleElementHeight', function () {
    it('should return maximum height until bottom edge of the viewport', function () {
      var hot = handsontable({
        startRows: 10,
        startCols: 2,
        width: 120,
        height: 100
      });
      expect(hot.view.maximumVisibleElementHeight(0)).toEqual(100);
    });
    it('should return maximum height until bottom edge of the viewport (excluding the scrollbar)', function () {
      var hot = handsontable({
        startRows: 10,
        startCols: 10,
        width: 120,
        height: 100
      });
      expect(hot.view.maximumVisibleElementHeight()).toBeLessThan(100);
    });
  });
  describe('fixed column row heights', function () {
    it('should be the same as the row heights in the main table', function () {
      var hot = handsontable({
        data: [['A', 'B', 'C', 'D'], ['a', 'b', 'c\nc', 'd'], ['aa', 'bb', 'cc', 'dd']],
        startRows: 3,
        startCols: 4,
        fixedColumnsLeft: 2
      });
      expect(hot.getCell(1, 2).clientHeight).toEqual(hot.getCell(1, 1).clientHeight);
      hot.setDataAtCell(1, 2, 'c');
      expect(hot.getCell(1, 2).clientHeight).toEqual(hot.getCell(1, 1).clientHeight);
    });
    it('should be the same as the row heights in the main table (after scroll)', function () {
      var myData = Handsontable.helper.createSpreadsheetData(20, 4);
      myData[1][3] = 'very\nlong\ntext';
      myData[5][3] = 'very\nlong\ntext';
      myData[10][3] = 'very\nlong\ntext';
      myData[15][3] = 'very\nlong\ntext';
      var hot = handsontable({
        data: myData,
        startRows: 3,
        startCols: 4,
        fixedRowsTop: 2,
        fixedColumnsLeft: 2,
        width: 200,
        height: 200
      });
      var mainHolder = hot.view.wt.wtTable.holder;
      $(mainHolder).scrollTop(200);
      hot.render();
      var masterTD = spec().$container.find('.ht_master tbody tr:eq(5) td:eq(1)')[0];
      var cloneTD = spec().$container.find('.ht_clone_left tbody tr:eq(5) td:eq(1)')[0];
      expect(cloneTD.clientHeight).toEqual(masterTD.clientHeight);
    });
    it('should be the same as the row heights in the main table (after scroll, in corner)', function () {
      var myData = Handsontable.helper.createSpreadsheetData(20, 4);
      myData[1][3] = 'very\nlong\ntext';
      myData[5][3] = 'very\nlong\ntext';
      myData[10][3] = 'very\nlong\ntext';
      myData[15][3] = 'very\nlong\ntext';
      var hot = handsontable({
        data: myData,
        startRows: 3,
        startCols: 4,
        fixedRowsTop: 2,
        fixedColumnsLeft: 2,
        width: 200,
        height: 200
      });
      var rowHeight = hot.getCell(1, 3).clientHeight;
      var mainHolder = hot.view.wt.wtTable.holder;
      expect(spec().$container.find('.ht_clone_top_left_corner tbody tr:eq(1) td:eq(1)')[0].clientHeight).toEqual(rowHeight);
      $(mainHolder).scrollTop(200);
      hot.render();
      expect(spec().$container.find('.ht_clone_top_left_corner tbody tr:eq(1) td:eq(1)')[0].clientHeight).toEqual(rowHeight);
    });
  });
  describe('fixed column widths', function () {
    it('should set the columns width correctly after changes made during updateSettings', function () {
      var hot = handsontable({
        startRows: 2,
        fixedColumnsLeft: 2,
        columns: [{
          width: 50
        }, {
          width: 80
        }, {
          width: 110
        }, {
          width: 140
        }, {
          width: 30
        }, {
          width: 30
        }, {
          width: 30
        }]
      });
      var leftClone = spec().$container.find('.ht_clone_left');
      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);
      hot.updateSettings({
        manualColumnMove: [2, 0, 1],
        fixedColumnsLeft: 1
      });
      expect(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0]).toBe(undefined);
      hot.updateSettings({
        manualColumnMove: false,
        fixedColumnsLeft: 2
      });
      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);
    });
    it('should set the columns width correctly after changes made during updateSettings when columns is a function', function () {
      var hot = handsontable({
        startCols: 7,
        startRows: 2,
        fixedColumnsLeft: 2,
        columns: function columns(column) {
          var colMeta = {};

          if (column === 0) {
            colMeta.width = 50;
          } else if (column === 1) {
            colMeta.width = 80;
          } else if (column === 2) {
            colMeta.width = 110;
          } else if (column === 3) {
            colMeta.width = 140;
          } else if ([4, 5, 6].indexOf(column) > -1) {
            colMeta.width = 30;
          } else {
            colMeta = null;
          }

          return colMeta;
        }
      });
      var leftClone = spec().$container.find('.ht_clone_left');
      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);
      hot.updateSettings({
        manualColumnMove: [2, 0, 1],
        fixedColumnsLeft: 1
      });
      expect(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0]).toBe(undefined);
      hot.updateSettings({
        manualColumnMove: false,
        fixedColumnsLeft: 2
      });
      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);
    });
  });
  describe('stretchH', function () {
    it('should stretch all visible columns with the ratio appropriate to the container\'s width', function () {
      spec().$container[0].style.width = '300px';
      var hot = handsontable({
        startRows: 5,
        startCols: 5,
        rowHeaders: true,
        colHeaders: true,
        stretchH: 'all'
      });
      var rowHeaderWidth = hot.view.wt.wtViewport.getRowHeaderWidth();
      var expectedCellWidth = (parseInt(spec().$container[0].style.width, 10) - rowHeaderWidth) / 5;
      expect(getCell(0, 0).offsetWidth).toEqual(expectedCellWidth);
      expect(getCell(0, 1).offsetWidth).toEqual(expectedCellWidth);
      expect(getCell(0, 2).offsetWidth).toEqual(expectedCellWidth);
      expect(getCell(0, 3).offsetWidth).toEqual(expectedCellWidth);
      expect(getCell(0, 4).offsetWidth).toEqual(expectedCellWidth);
      spec().$container[0].style.width = '';
      spec().$container.wrap('<div class="temp_wrapper" style="width:400px;"></div>');
      hot.render();
      expectedCellWidth = (parseInt($('.temp_wrapper')[0].style.width, 10) - rowHeaderWidth) / 5;
      expect(getCell(0, 0).offsetWidth).toEqual(expectedCellWidth);
      expect(getCell(0, 1).offsetWidth).toEqual(expectedCellWidth);
      expect(getCell(0, 2).offsetWidth).toEqual(expectedCellWidth);
      expect(getCell(0, 3).offsetWidth).toEqual(expectedCellWidth);
      expect(getCell(0, 4).offsetWidth).toEqual(expectedCellWidth);
      spec().$container.unwrap();
    });
    it('should stretch all visible columns with overflow hidden', function () {
      spec().$container[0].style.width = '501px';
      spec().$container[0].style.height = '100px';
      spec().$container[0].style.overflow = 'hidden';
      handsontable({
        startRows: 10,
        startCols: 5,
        colWidths: [47, 47, 47, 47, 47],
        rowHeaders: true,
        colHeaders: true,
        stretchH: 'all'
      });
      var masterTH = spec().$container[0].querySelectorAll('.ht_master thead tr th');
      var overlayTH = spec().$container[0].querySelectorAll('.ht_clone_top thead tr th');
      expect(masterTH[0].offsetWidth).toEqual(50);
      expect(overlayTH[0].offsetWidth).toEqual(50);
      expect(masterTH[1].offsetWidth).toBeInArray([86, 87, 88, 90]);
      expect(overlayTH[1].offsetWidth).toBeInArray([86, 87, 88, 90]); // if you get 90, it means it is calculated before scrollbars were applied, or show scroll on scrolling is enabled

      expect(masterTH[2].offsetWidth).toEqual(overlayTH[2].offsetWidth);
      expect(masterTH[3].offsetWidth).toEqual(overlayTH[3].offsetWidth);
      expect(masterTH[4].offsetWidth).toEqual(overlayTH[4].offsetWidth);
      expect(masterTH[5].offsetWidth).toEqual(overlayTH[5].offsetWidth);
    });
    it('should respect stretched widths returned in beforeStretchingColumnWidth hook', function () {
      spec().$container[0].style.width = '501px';
      spec().$container[0].style.height = '100px';
      spec().$container[0].style.overflow = 'hidden';
      var callbackSpy = jasmine.createSpy();
      callbackSpy.and.callFake(function (width, column) {
        if (column === 1) {
          return 150;
        }

        return width;
      });
      handsontable({
        startRows: 2,
        startCols: 5,
        rowHeaders: true,
        colHeaders: true,
        stretchH: 'all',
        beforeStretchingColumnWidth: callbackSpy
      });
      var $columnHeaders = spec().$container.find('thead tr:eq(0) th');
      expect($columnHeaders.eq(0).width()).toEqual(48);
      expect($columnHeaders.eq(1).width()).toEqual(73);
      expect($columnHeaders.eq(2).width()).toEqual(149);
      expect($columnHeaders.eq(3).width()).toEqual(74);
      expect($columnHeaders.eq(4).width()).toEqual(74);
      expect(callbackSpy).toHaveBeenCalled(); // First cycle to check what columns has permanent width

      expect(callbackSpy.calls.argsFor(0)[0]).not.toBeDefined();
      expect(callbackSpy.calls.argsFor(0)[1]).toBe(0);
      expect(callbackSpy.calls.argsFor(1)[0]).not.toBeDefined();
      expect(callbackSpy.calls.argsFor(1)[1]).toBe(1);
      expect(callbackSpy.calls.argsFor(2)[0]).not.toBeDefined();
      expect(callbackSpy.calls.argsFor(2)[1]).toBe(2);
      expect(callbackSpy.calls.argsFor(3)[0]).not.toBeDefined();
      expect(callbackSpy.calls.argsFor(3)[1]).toBe(3);
      expect(callbackSpy.calls.argsFor(4)[0]).not.toBeDefined();
      expect(callbackSpy.calls.argsFor(4)[1]).toBe(4); // // Second cycle retrieve stretched width or permanent width

      expect(callbackSpy.calls.argsFor(5)[0]).toBe(75);
      expect(callbackSpy.calls.argsFor(6)[0]).toBe(75);
      expect(callbackSpy.calls.argsFor(7)[0]).toBe(75);
      expect(callbackSpy.calls.argsFor(8)[0]).toBe(75);
      expect(callbackSpy.calls.argsFor(9)[0]).toBe(75);
    });
  });
});

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Handsontable.Dom', function () {
  describe('offset', function () {
    var $window = $(window);
    var $forceScrollbar = $('<div id="forceScrollbar"></div>').css({
      position: 'absolute',
      height: '4000px',
      width: '4000px',
      top: 0,
      left: 0
    });
    beforeEach(function () {
      $forceScrollbar.appendTo(document.body);
      this.$div = $('<div id="test"></div>').appendTo($forceScrollbar);
      this.div = this.$div[0];
    });
    afterEach(function () {
      this.$div.remove();
      $forceScrollbar.remove();
    });
    describe('top', function () {
      it('should return offset top with position absolute', function () {
        this.$div.css({
          position: 'absolute',
          top: 200
        });
        expect(Handsontable.dom.offset(this.div).top).toEqual(200);
      });
      it('should return offset top with position absolute & scrolled window', function () {
        this.$div.css({
          position: 'absolute',
          top: 200
        });
        $window.scrollTop(1900);
        expect(Handsontable.dom.offset(this.div).top).toEqual(200);
        $window.scrollTop(0);
      });
      it('should return offset top with position fixed', function () {
        this.$div.css({
          position: 'fixed',
          top: 200
        });
        expect(Handsontable.dom.offset(this.div).top).toEqual(200);
      });
      it('should return offset top with position fixed & scrolled window', function () {
        this.$div.css({
          position: 'fixed',
          top: 200
        });
        $window.scrollTop(1900);
        expect(Handsontable.dom.offset(this.div).top).toEqual(2100); // this is the same jQuery offset returns

        $window.scrollTop(0);
      });
    });
    describe('left', function () {
      it('should return offset left with position absolute', function () {
        this.$div.css({
          position: 'absolute',
          left: 200
        });
        expect(Handsontable.dom.offset(this.div).left).toEqual(200);
      });
      it('should return offset left with position absolute & scrolled window', function () {
        this.$div.css({
          position: 'absolute',
          left: 200
        });
        $window.scrollLeft(1900);
        expect(Handsontable.dom.offset(this.div).left).toEqual(200);
        $window.scrollLeft(0);
      });
      it('should return offset left with position fixed', function () {
        this.$div.css({
          position: 'fixed',
          left: 200
        });
        expect(Handsontable.dom.offset(this.div).left).toEqual(200);
      });
      it('should return offset left with position fixed & scrolled window', function () {
        this.$div.css({
          position: 'fixed',
          left: 200
        });
        $window.scrollLeft(1900);
        expect(Handsontable.dom.offset(this.div).left).toEqual(2100); // this is the same jQuery offset returns

        $window.scrollLeft(0);
      });
    });
  });
  describe('isVisible', function () {
    it('should return true for appended table', function () {
      var $table = $('<table></table>').appendTo('body');
      expect(Handsontable.dom.isVisible($table[0])).toBe(true);
      $table.remove();
    });
    it('should return false for not appended table', function () {
      var $table = $('<table></table>');
      expect(Handsontable.dom.isVisible($table[0])).toBe(false);
      $table.remove();
    });
    it('should return false for table with `display: none`', function () {
      var $table = $('<table style="display: none"></table>').appendTo('body');
      expect(Handsontable.dom.isVisible($table[0])).toBe(false);
      $table.remove();
    });
    it('should return false for table with parent `display: none`', function () {
      var $div = $('<div style="display: none"></div>').appendTo('body');
      var $table = $('<table></table>').appendTo($div);
      expect(Handsontable.dom.isVisible($table[0])).toBe(false);
      $table.remove();
    });
    it('should return false for something detached from DOM', function () {
      var $table = $('<table><tr><td></td></tr></table>').appendTo('body');
      var TD = $table.find('td')[0];
      var TR = TD.parentNode;
      expect(Handsontable.dom.isVisible(TD)).toBe(true);
      TR.parentNode.removeChild(TR);
      expect(Handsontable.dom.isVisible(TD)).toBe(false);
      $table.remove();
    });
  });
  describe('outerHeight', function () {
    it('should return correct outerHeight for table', function () {
      var $table = $('<table style="border-width: 0;"><tbody><tr><td style="border: 1px solid black"><div style="height: 30px">test</div></td>' + '</tr></tbody></table>').appendTo('body');
      expect(Handsontable.dom.outerHeight($table[0])).toBe(38); // this is according to current stylesheet

      expect($table.outerHeight()).toBe(38); // jQuery check to confirm

      $table.remove();
    });
    it('should return correct outerHeight for table (with caption)', function () {
      var $table = $('<table style="border-width: 0;"><caption style="padding: 0; margin:0"><div style="height: 30px">caption</div></caption><tbody>' + '<tr><td style="border: 1px solid black"><div style="height: 30px">test</div></td></tr></tbody></table>').appendTo('body');
      expect(Handsontable.dom.outerHeight($table[0])).toBe(68); // this is according to current stylesheet

      $table.remove();
    });
  });
  it('should return correct offset for table cell (table with caption)', function () {
    var $table = $('<table style="border-width: 0;"><caption style="padding: 0; margin:0"><div style="height: 30px">caption</div></caption><tbody>' + '<tr><td style="border: 1px solid black"><div style="height: 30px">test</div></td></tr></tbody></table>').appendTo('body');
    var tableOffset = Handsontable.dom.offset($table[0]);
    var tdOffset = Handsontable.dom.offset($table.find('td')[0]);
    expect(parseInt(tdOffset.left - tableOffset.left, 10)).toBeAroundValue(2); // this is according to current stylesheet

    expect(parseInt(tdOffset.top - tableOffset.top, 10)).toBeAroundValue(32); // this is according to current stylesheet

    $table.remove();
  });
  it('should return font size', function () {
    var $html = $('<style>.bigText{font: 12px serif;}</style><div class="bigText"><span id="testable"></span></div>').appendTo('body');
    var span = document.getElementById('testable');
    var compStyle = Handsontable.dom.getComputedStyle(span);
    expect(compStyle.fontSize).toBe('12px');
    $html.remove();
  });
  it('should return top border width', function () {
    var $html = $('<style>.redBorder{border: 10px solid red;}</style><div class="redBorder" id="testable"></div>').appendTo('body');
    var div = document.getElementById('testable');
    var compStyle = Handsontable.dom.getComputedStyle(div);
    expect(compStyle.borderTopWidth).toBe('10px');
    $html.remove();
  });
  it('should insert HTML properly', function () {
    var $html = $('<div id="testable"></div>').appendTo('body');
    var text = '<span>test<br>test</span>';
    var div = document.getElementById('testable');
    Handsontable.dom.fastInnerHTML(div, text);
    Handsontable.dom.fastInnerHTML(div, text);
    expect(div.childNodes[0].childNodes.length).toEqual(3);
    $html.remove();
  });
  it('should set the immediatePropagation properties properly for given event', function () {
    var event = document.createEvent('MouseEvents');
    event.initMouseEvent('mousedown', true, true, window, null, null, null, null, null, null, null, null, null, null, null);
    Handsontable.dom.stopImmediatePropagation(event);
    expect(event.isImmediatePropagationEnabled).toBe(false);
    expect(Handsontable.dom.isImmediatePropagationStopped(event)).toBe(true);
  });
  describe('getScrollableElement', function () {
    it('should return scrollable element with \'scroll\' value of \'overflow\', \'overflowX\' or \'overflowY\' property', function () {
      var $html = $(['<div style="overflow: scroll"><span class="overflow"></span></div>', '<div style="overflow-x: scroll"><span class="overflowX"></span></div>', '<div style="overflow-y: scroll"><span class="overflowY"></span></div>'].join('')).appendTo('body');
      expect(Handsontable.dom.getScrollableElement($html.find('.overflow')[0])).toBe($html[0]);
      expect(Handsontable.dom.getScrollableElement($html.find('.overflowX')[0])).toBe($html[1]);
      expect(Handsontable.dom.getScrollableElement($html.find('.overflowY')[0])).toBe($html[2]);
      $html.remove();
    });
    it('should return scrollable element with \'auto\' value of \'overflow\' or \'overflowY\' property', function () {
      var $html = $(['<div style="overflow: auto; height: 50px;"><div class="knob" style="height: 100px"></div></div>', '<div style="overflow-y: auto; height: 50px;"><div class="knob" style="height: 100px"></div></div>', '<div style="overflow-y: auto; height: 50px;">', '<div>', '<div class="knob" style="height: 100px;"></div>', '</div>', '</div>'].join('')).appendTo('body');
      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe($html[0]);
      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe($html[1]);
      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[2])).toBe($html[2]);
      $html.remove();
    });
    it('should return scrollable element with \'auto\' value of \'overflow\' or \'overflowX\' property', function () {
      var $html = $(['<div style="overflow: auto; width: 50px; height: 10px"><div class="knob" style="width: 100px; height: 5px"></div></div>', '<div style="overflow-x: auto; width: 50px; height: 10px"><div class="knob" style="width: 100px; height: 5px"></div></div>', '<div style="overflow-x: auto; width: 50px; height: 10px">', '<div>', '<div class="knob" style="width: 100px; height: 5px"></div>', '</div>', '</div>'].join('')).appendTo('body');
      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe($html[0]);
      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe($html[1]);
      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[2])).toBe($html[2]);
      $html.remove();
    });
    it('should return window object as scrollable element', function () {
      var $html = $(['<div style="overflow: hidden; width: 50px; height: 10px"><div class="knob" style="width: 100px; height: 5px"></div></div>', '<div style="width: 50px; height: 10px"><div class="knob" style="width: 100px; height: 5px"></div></div>'].join('')).appendTo('body');
      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe(window);
      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe(window);
      $html.remove();
    });
  }); //
  // Handsontable.dom.isChildOfWebComponentTable
  //

  describe('isChildOfWebComponentTable', function () {
    it('should return correct Boolean value depending on whether an element exists in `hot-table` or not', function () {
      // skip if browser not support Shadow DOM natively
      if (!document.createElement('div').createShadowRoot) {
        // Fix for "no exceptations" warnings
        expect(true).toBe(true);
        return;
      }

      var hotTable = document.createElement('hot-table');
      var outsideDiv = document.createElement('div');
      expect(Handsontable.dom.isChildOfWebComponentTable(hotTable)).toBe(true);
      expect(Handsontable.dom.isChildOfWebComponentTable(outsideDiv)).toBe(false);
      var hotTableDiv = document.createElement('div');
      hotTable.appendChild(hotTableDiv);
      expect(Handsontable.dom.isChildOfWebComponentTable(hotTableDiv)).toBe(true);
      var fragment = document.createDocumentFragment();
      expect(Handsontable.dom.isChildOfWebComponentTable(fragment)).toBe(false);
      var myElement = document.createElement('my-element');
      expect(Handsontable.dom.isChildOfWebComponentTable(myElement)).toBe(false);
      var shadowRoot = myElement.createShadowRoot();
      var insideDiv = shadowRoot.appendChild(document.createElement('div'));
      hotTable.createShadowRoot().appendChild(myElement);
      expect(Handsontable.dom.isChildOfWebComponentTable(myElement)).toBe(true);
      expect(Handsontable.dom.isChildOfWebComponentTable(insideDiv)).toBe(true);
    });
  }); //
  // Handsontable.dom.polymerWrap
  //

  describe('polymerWrap', function () {
    it('should wrap element into polymer wrapper if exists', function () {
      expect(Handsontable.dom.polymerWrap(1)).toBe(1);

      window.wrap = function () {
        return 'wrapped';
      };

      window.Polymer = {};
      expect(Handsontable.dom.polymerWrap(1)).toBe('wrapped'); // Test https://github.com/handsontable/handsontable/issues/2283

      window.wrap = document.createElement('div');
      expect(Handsontable.dom.polymerWrap(1)).toBe(1);
      delete window.wrap;
      delete window.Polymer;
    });
  }); //
  // Handsontable.dom.polymerUnwrap
  //

  describe('polymerUnwrap', function () {
    it('should unwrap element from polymer wrapper if exists', function () {
      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe('wrapped');

      window.unwrap = function () {
        return 1;
      };

      window.Polymer = {};
      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe(1);
      window.unwrap = document.createElement('div');
      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe('wrapped');
      delete window.unwrap;
      delete window.Polymer;
    });
  }); //
  // Handsontable.dom.addClass
  //

  describe('addClass', function () {
    it('should add class names as string to an element', function () {
      var element = document.createElement('div');
      expect(element.className).toBe('');
      Handsontable.dom.addClass(element, 'test');
      expect(element.className).toBe('test');
      Handsontable.dom.addClass(element, 'test test1 test2');
      expect(element.className).toBe('test test1 test2');
      Handsontable.dom.addClass(element, 'test3');
      expect(element.className).toBe('test test1 test2 test3');
      Handsontable.dom.addClass(element, '');
      expect(element.className).toBe('test test1 test2 test3');
    });
    it('should add class names as array to an element', function () {
      var element = document.createElement('div');
      expect(element.className).toBe('');
      Handsontable.dom.addClass(element, ['test']);
      expect(element.className).toBe('test');
      Handsontable.dom.addClass(element, ['test1', 'test2', 'test3']);
      expect(element.className).toBe('test test1 test2 test3');
      Handsontable.dom.addClass(element, 'test4');
      expect(element.className).toBe('test test1 test2 test3 test4');
      Handsontable.dom.addClass(element, '');
      expect(element.className).toBe('test test1 test2 test3 test4');
    });
  }); //
  // Handsontable.dom.removeClass
  //

  describe('removeClass', function () {
    it('should remove class names as string from an element', function () {
      var element = document.createElement('div');
      element.className = 'test test1 test2 test3 test4';
      Handsontable.dom.removeClass(element, 'not-exists');
      expect(element.className).toBe('test test1 test2 test3 test4');
      Handsontable.dom.removeClass(element, 'test');
      expect(element.className).toBe('test1 test2 test3 test4');
      Handsontable.dom.removeClass(element, 'test test1 test4');
      expect(element.className).toBe('test2 test3');
      Handsontable.dom.removeClass(element, '');
      expect(element.className).toBe('test2 test3');
    });
    it('should remove class names as array from an element', function () {
      var element = document.createElement('div');
      element.className = 'test test1 test2 test3 test4';
      Handsontable.dom.removeClass(element, ['not-exists']);
      expect(element.className).toBe('test test1 test2 test3 test4');
      Handsontable.dom.removeClass(element, ['test']);
      expect(element.className).toBe('test1 test2 test3 test4');
      Handsontable.dom.removeClass(element, ['test', 'test1', 'test4']);
      expect(element.className).toBe('test2 test3');
      Handsontable.dom.removeClass(element, ['test', '', '']);
      expect(element.className).toBe('test2 test3');
    });
  }); //
  // Handsontable.dom.hasClass
  //

  describe('hasClass', function () {
    it('should checks if an element has passed class name', function () {
      var element = document.createElement('div');
      element.className = 'test test1 test2 test3 test4';
      expect(Handsontable.dom.hasClass(element, 'not-exists')).toBe(false);
      expect(Handsontable.dom.hasClass(element, 'test3')).toBe(true);
      expect(Handsontable.dom.hasClass(element, 'test')).toBe(true);
      expect(Handsontable.dom.hasClass(element, '')).toBe(false);
    });
  });
});

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Performance', function () {
  var id = 'testContainer'; // this is a test suite to test if there are no redundant operations

  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should call renderer once for one cell (fixed column width)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      colWidths: 100,
      rowHeights: 23,
      renderer: function renderer() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        Handsontable.renderers.TextRenderer.apply(this, args);
        count += 1;
      }
    });
    expect(count).toEqual(1); // only for master table
  });
  it('should call renderer twice for one cell (auto column width)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      rowHeights: 23,
      renderer: function renderer() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        Handsontable.renderers.TextRenderer.apply(this, args);
        count += 1;
      }
    });
    expect(count).toEqual(2); // 1 for autoColumnSize, 1 for actual cell render
  });
  it('should call renderer twice for one cell (auto row height)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      colWidths: 50,
      renderer: function renderer() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        Handsontable.renderers.TextRenderer.apply(this, args);
        count += 1;
      }
    });
    expect(count).toEqual(1); // 1 for actual cell render (colWidths prevent autoColumnSize to enable)
  });
  it('should call renderer triple times for one cell (auto row height, auto column width)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      autoRowSize: true,
      autoColumnSize: true,
      renderer: function renderer() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        Handsontable.renderers.TextRenderer.apply(this, args);
        count += 1;
      }
    });
    expect(count).toEqual(3); // 1 for autoColumnSize, 1 for autoRowSize, 1 for actual cell render
  });
  it('should call getCellMeta minimum number of times for one cell (auto column width, without overlays)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      rowHeights: 23,
      beforeGetCellMeta: function beforeGetCellMeta() {
        count += 1;
      }
    });
    expect(count).toEqual(8);
  });
  it('should call getCellMeta minimum number of times for one cell (auto row height, without overlays)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      colWidths: 50,
      beforeGetCellMeta: function beforeGetCellMeta() {
        count += 1;
      }
    });
    expect(count).toEqual(5);
  });
  it('should call getCellMeta minimum number of times for one cell (auto column width, with left overlay)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      colHeaders: true,
      rowHeights: 23,
      beforeGetCellMeta: function beforeGetCellMeta() {
        count += 1;
      }
    });
    expect(count).toEqual(9);
  });
  it('should call getCellMeta minimum number of times for one cell (auto row height, with left overlay)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      colHeaders: true,
      colWidths: 50,
      beforeGetCellMeta: function beforeGetCellMeta() {
        count += 1;
      }
    });
    expect(count).toEqual(6);
  });
  it('should call getCellMeta minimum number of times for one cell (auto column width, with top overlay)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      rowHeaders: true,
      rowHeights: 23,
      beforeGetCellMeta: function beforeGetCellMeta() {
        count += 1;
      }
    });
    expect(count).toEqual(8);
  });
  it('should call getCellMeta minimum number of times for one cell (auto row height, with top overlay)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      rowHeaders: true,
      colWidths: 50,
      beforeGetCellMeta: function beforeGetCellMeta() {
        count += 1;
      }
    });
    expect(count).toEqual(5);
  });
  it('should call getCellMeta minimum number of times for one cell (auto column width, with all overlays)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      colHeaders: true,
      rowHeaders: true,
      rowHeights: 23,
      beforeGetCellMeta: function beforeGetCellMeta() {
        count += 1;
      }
    });
    expect(count).toEqual(9);
  });
  it('should call getCellMeta minimum number of times for one cell (auto row height, with all overlays)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(1, 1),
      colHeaders: true,
      rowHeaders: true,
      colWidths: 50,
      beforeGetCellMeta: function beforeGetCellMeta() {
        count += 1;
      }
    });
    expect(count).toEqual(6);
  });
  it('should call renderer twice for each cell (auto column width)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      rowHeights: 23,
      autoColumnSize: true,
      renderer: function renderer() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        Handsontable.renderers.TextRenderer.apply(this, args);
        count += 1;
      }
    });
    expect(count).toEqual(28);
  });
  it('should call renderer twice for each cell (auto row height)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      colWidths: 50,
      autoRowSize: true,
      renderer: function renderer() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        Handsontable.renderers.TextRenderer.apply(this, args);
        count += 1;
      }
    });
    expect(count).toEqual(28); // 16 in main table and 4 rows for autoRowSize
  });
  it('should call renderer twice for each cell (auto row height, auto column width)', function () {
    var count = 0;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      autoRowSize: true,
      autoColumnSize: true,
      renderer: function renderer() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        Handsontable.renderers.TextRenderer.apply(this, args);
        count += 1;
      }
    });
    expect(count).toEqual(40); // 16x2 in main table, 4 rows for autoRowSize and 4 cols for autoColumnSize
  });
});

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('PluginHooks', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should add a many local hooks at init (as array)', function () {
    var handler1 = jasmine.createSpy('handler1');
    var handler2 = jasmine.createSpy('handler2');
    var handler3 = jasmine.createSpy('handler3');
    handsontable({
      afterInit: [handler1, handler2, handler3]
    });
    expect(handler1).toHaveBeenCalled();
    expect(handler2).toHaveBeenCalled();
    expect(handler3).toHaveBeenCalled();
  });
  it('should remove a global hook', function () {
    var test = 0;

    var hook = function hook() {
      test = 5;
    };

    Handsontable.hooks.add('afterInit', hook);
    Handsontable.hooks.remove('afterInit', hook);
    handsontable();
    expect(test).toEqual(0);
  });
  it('should remove a local hook', function () {
    var test = 0;

    var hook = function hook() {
      test = 5;
    };

    handsontable();
    getInstance().addHook('afterInit', hook);
    getInstance().removeHook('afterInit', hook);
    expect(test).toEqual(0);
  });
  it('should run global hook', function () {
    var test = 0;
    Handsontable.hooks.add('afterInit', function () {
      test = 5;
    });
    handsontable();
    expect(test).toEqual(5);
  });
  it('should run local hook', function () {
    var test = 0;
    handsontable();
    getInstance().addHook('myHook', function () {
      test += 5;
    });
    getInstance().runHooks('myHook');
    getInstance().runHooks('myHook');
    expect(test).toEqual(10);
  });
  it('should run local hook once', function () {
    var test = 0;
    handsontable();
    getInstance().addHookOnce('myHook', function () {
      test += 5;
    });
    getInstance().runHooks('myHook');
    getInstance().runHooks('myHook');
    expect(test).toEqual(5);
  });
  it('should run all hooks', function () {
    var test = 0;
    Handsontable.hooks.add('afterInit', function () {
      test += 5;
    });
    handsontable({
      afterInit: function afterInit() {
        test += 5;
      }
    });
    expect(test).toEqual(10);
  });
  it('list of all avaliable plugin hooks should be exposed as a public method', function () {
    var hooks = Handsontable.hooks.getRegistered(); // this is used in demo/callbacks.html

    expect(hooks.indexOf('beforeInit')).toBeGreaterThan(-1);
  });
  it('should add a local hook with addHooks method', function () {
    var hot1 = handsontable();
    var test = 0;
    hot1.addHook('myHook', function () {
      test += 5;
    });
    hot1.runHooks('myHook');
    expect(test).toEqual(5);
  });
  it('should remove a local hook with removeHook method', function () {
    var hot1 = handsontable();
    var test = 0;

    var handler = function handler() {
      test += 5;
    };

    hot1.addHook('myHook', handler);
    hot1.runHooks('myHook');
    hot1.runHooks('myHook');
    expect(test).toEqual(10);
    hot1.removeHook('myHook', handler);
    hot1.runHooks('myHook');
    expect(test).toEqual(10);
  });
  it('should add a local hook with addHookOnce method and run it just once', function () {
    var hot1 = handsontable();
    var test = 0;

    var handler = function handler() {
      test += 5;
    };

    hot1.addHookOnce('myHook', handler);
    hot1.runHooks('myHook');
    hot1.runHooks('myHook');
    expect(test).toEqual(5);
  });
  it('should run hook with runHooks and return value', function () {
    var hot = handsontable();

    var handler = function handler() {
      return 5;
    };

    hot.addHook('myHook', handler);
    expect(hot.runHooks('myHook')).toEqual(5);
  });
  it('should run two "once" hooks in desired order', function () {
    var hot = handsontable();
    var arr = [];
    hot.addHookOnce('myHook', function () {
      arr.push(1);
    });
    hot.addHookOnce('myHook', function () {
      arr.push(2);
    });
    hot.runHooks('myHook');
    expect(arr).toEqual([1, 2]);
  });
  it('should execute two "once" hooks in desired order', function () {
    var hot = handsontable();
    var str = 'a';
    hot.addHookOnce('myHook', function (value) {
      return "".concat(value, "b");
    });
    hot.addHookOnce('myHook', function (value) {
      return "".concat(value, "c");
    });
    expect(hot.runHooks('myHook', str)).toEqual('abc');
  });
  it('adding same hook twice should register it only once (without an error)', function () {
    var i = 0;

    var fn = function fn() {
      i += 1;
    };

    var hot = handsontable({
      afterOnCellMouseOver: fn
    });
    hot.getInstance().updateSettings({
      afterOnCellMouseOver: fn
    });
    hot.runHooks('afterOnCellMouseOver');
    expect(i).toEqual(1);
  });
  it('should mark the hook callbacks added with Handsontable initialization', function () {
    var fn = function fn() {};

    var fn2 = function fn2() {};

    var hot = handsontable({
      afterChange: fn
    });
    hot.addHook('afterChange', fn2);
    expect(fn.initialHook).toEqual(true);
    expect(fn2.initialHook).toEqual(void 0);
  });
  it('should mark the hook callbacks added using the updateSettings method', function () {
    var fn = function fn() {};

    var fn2 = function fn2() {};

    var hot = handsontable();
    hot.updateSettings({
      afterChange: fn
    });
    hot.addHook('afterChange', fn2);
    expect(fn.initialHook).toEqual(true);
    expect(fn2.initialHook).toEqual(void 0);
  });
  it('should replace the existing hook callbacks, if they\'re updated using the updateSettings method (when there was a hook ' + 'already declared in the initialization)', function () {
    var fn = function fn() {};

    var fn2 = function fn2() {};

    var hot = handsontable({
      afterGetCellMeta: fn
    });
    var initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;
    hot.updateSettings({
      afterGetCellMeta: function afterGetCellMeta() {
        return {
          a: 'another function'
        };
      }
    });
    hot.updateSettings({
      afterGetCellMeta: function afterGetCellMeta() {
        return {
          a: 'yet another function'
        };
      }
    });
    hot.updateSettings({
      afterGetCellMeta: fn2
    });
    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount);
  });
  it('should replace the existing hook callbacks, if they\'re updated using the updateSettings method', function () {
    var fn = function fn() {};

    var fn2 = function fn2() {};

    var hot = handsontable();
    hot.addHook('afterGetCellMeta', function () {
      return 'doesn\'t matter 1';
    });
    hot.addHook('afterGetCellMeta', function () {
      return 'doesn\'t matter 2';
    });
    hot.addHook('afterGetCellMeta', function () {
      return 'doesn\'t matter 3';
    });
    hot.updateSettings({
      afterGetCellMeta: fn
    });
    var initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;
    hot.updateSettings({
      afterGetCellMeta: function afterGetCellMeta() {
        return {
          a: 'another function'
        };
      }
    });
    hot.updateSettings({
      afterGetCellMeta: function afterGetCellMeta() {
        return {
          a: 'yet another function'
        };
      }
    });
    hot.updateSettings({
      afterGetCellMeta: fn2
    });
    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount);
  });
  it('should NOT replace existing hook callbacks, if the\'re added using the addHook method', function () {
    var fn = function fn() {};

    var fn2 = function fn2() {};

    var hot = handsontable();
    hot.updateSettings({
      afterGetCellMeta: fn
    });
    var initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;
    hot.addHook('afterGetCellMeta', function () {
      return {
        a: 'another function'
      };
    });
    hot.addHook('afterGetCellMeta', function () {
      return {
        a: 'yet another function'
      };
    });
    hot.addHook('afterGetCellMeta', fn2); // should not add this one, as it's a duplicate

    hot.addHook('afterGetCellMeta', fn);
    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount + 3);
  });
  describe('controlling handler queue execution', function () {
    it('should execute all handlers if none of them hasn\'t skipped', function () {
      var handler1 = jasmine.createSpy('handler1');
      var handler2 = jasmine.createSpy('handler2');
      var handler3 = jasmine.createSpy('handler3');
      var hot = handsontable();
      hot.addHook('fakeEvent', handler1);
      hot.addHook('fakeEvent', handler2);
      hot.addHook('fakeEvent', handler3);
      expect(handler1).not.toHaveBeenCalled();
      expect(handler2).not.toHaveBeenCalled();
      expect(handler3).not.toHaveBeenCalled();
      hot.runHooks('fakeEvent');
      expect(handler1).toHaveBeenCalled();
      expect(handler2).toHaveBeenCalled();
      expect(handler3).toHaveBeenCalled();
    });
  });
});

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('RowHeader', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should not show row headers by default', function () {
    handsontable();
    expect(spec().$container.find('tbody th').length).toEqual(0);
  });
  it('should show row headers if true', function () {
    handsontable({
      rowHeaders: true
    });
    expect(spec().$container.find('tbody th').length).toBeGreaterThan(0);
  });
  it('should show row headers numbered 1-10 by default', function () {
    var startRows = 5;
    handsontable({
      startRows: startRows,
      rowHeaders: true
    });
    var ths = getLeftClone().find('tbody th');
    expect(ths.length).toEqual(startRows);
    expect($.trim(ths.eq(0).text())).toEqual('1');
    expect($.trim(ths.eq(1).text())).toEqual('2');
    expect($.trim(ths.eq(2).text())).toEqual('3');
    expect($.trim(ths.eq(3).text())).toEqual('4');
    expect($.trim(ths.eq(4).text())).toEqual('5');
  });
  it('should show row headers with custom label', function () {
    var startRows = 5;
    handsontable({
      startRows: startRows,
      rowHeaders: ['First', 'Second', 'Third']
    });
    var ths = getLeftClone().find('tbody th');
    expect(ths.length).toEqual(startRows);
    expect($.trim(ths.eq(0).text())).toEqual('First');
    expect($.trim(ths.eq(1).text())).toEqual('Second');
    expect($.trim(ths.eq(2).text())).toEqual('Third');
    expect($.trim(ths.eq(3).text())).toEqual('4');
    expect($.trim(ths.eq(4).text())).toEqual('5');
  });
  it('should not show row headers if false', function () {
    handsontable({
      rowHeaders: false
    });
    expect(getLeftClone().find('tbody th').length).toEqual(0);
  });
  it('should hide rows headers after updateSetting', function () {
    var hot = handsontable({
      startRows: 5,
      rowHeaders: true
    });
    expect(getHtCore().find('tbody th').length).toEqual(5);
    expect(getLeftClone().find('tbody th').length).toEqual(5);
    hot.updateSettings({
      rowHeaders: false
    });
    expect(getHtCore().find('tbody th').length).toEqual(0);
  });
  it('should show rows headers after updateSettings', function () {
    var hot = handsontable({
      startRows: 5,
      rowHeaders: false
    });
    expect(getHtCore().find('tbody th').length).toEqual(0);
    expect(getLeftClone().find('tbody th').length).toEqual(0);
    hot.updateSettings({
      rowHeaders: true
    });
    expect(getHtCore().find('tbody th').length).toEqual(5);
    expect(getLeftClone().find('tbody th').length).toEqual(5);
  });
  it('should show/hide rows headers after multiple updateSettings', function () {
    var hot = handsontable({
      startRows: 5,
      rowHeaders: false
    });
    expect(getHtCore().find('tbody th').length).toEqual(0);
    expect(getLeftClone().find('tbody th').length).toEqual(0);
    hot.updateSettings({
      rowHeaders: true
    });
    expect(getHtCore().find('tbody th').length).toEqual(5);
    expect(getLeftClone().width()).toBeGreaterThan(0);
    hot.updateSettings({
      rowHeaders: false
    });
    expect(getHtCore().find('tbody th').length).toEqual(0);
    expect(getLeftClone().width()).toEqual(0);
    hot.updateSettings({
      rowHeaders: true
    });
    expect(getHtCore().find('tbody th').length).toEqual(5);
    expect(getLeftClone().width()).toBeGreaterThan(0);
  });
  it('should show new rows headers after updateSettings', function () {
    var hot = handsontable({
      startCols: 3,
      rowHeaders: ['A', 'B', 'C']
    });
    var leftClone = getLeftClone();
    expect(leftClone.find('tbody tr:eq(0) th:eq(0)').text()).toEqual('A');
    expect(leftClone.find('tbody tr:eq(1) th:eq(0)').text()).toEqual('B');
    expect(leftClone.find('tbody tr:eq(2) th:eq(0)').text()).toEqual('C');
    hot.updateSettings({
      rowHeaders: ['X', 'Y', 'Z']
    });
    expect(leftClone.find('tbody tr:eq(0) th:eq(0)').text()).toEqual('X');
    expect(leftClone.find('tbody tr:eq(1) th:eq(0)').text()).toEqual('Y');
    expect(leftClone.find('tbody tr:eq(2) th:eq(0)').text()).toEqual('Z');
  });
  it('should allow defining custom row header width using the rowHeaderWidth config option', function () {
    handsontable({
      startCols: 3,
      rowHeaders: true,
      rowHeaderWidth: 150
    });
    expect(spec().$container.find('th').eq(0).outerWidth()).toEqual(150);
    expect(spec().$container.find('col').first().css('width')).toEqual('150px');
  });
  it('should allow defining custom column header heights using the columnHeaderHeight config option, when multiple column header levels are defined', function () {
    var hot = handsontable({
      startCols: 3,
      rowHeaders: true,
      rowHeaderWidth: [66, 96],
      afterGetRowHeaderRenderers: function afterGetRowHeaderRenderers(array) {
        array.push(function (index, TH) {
          TH.innerHTML = '';
          var div = document.createElement('div');
          var span = document.createElement('span');
          div.className = 'relative';
          span.className = 'rowHeader';
          span.innerText = index;
          div.appendChild(span);
          TH.appendChild(div);
        });
        return array;
      }
    });
    hot.render();
    expect(spec().$container.find('.handsontable.ht_clone_left tr:nth-child(1) th:nth-child(1)').outerWidth()).toEqual(66);
    expect(spec().$container.find('.handsontable.ht_clone_left tr:nth-child(1) th:nth-child(2)').outerWidth()).toEqual(96);
    expect(spec().$container.find('col').first().css('width')).toEqual('66px');
    expect(spec().$container.find('col').eq(1).css('width')).toEqual('96px');
  });
});

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('cellTypes', function () {
  var id = 'testContainer';
  var _Handsontable$cellTyp = Handsontable.cellTypes,
      registerCellType = _Handsontable$cellTyp.registerCellType,
      getCellType = _Handsontable$cellTyp.getCellType;
  var _Handsontable$editors = Handsontable.editors,
      getEditor = _Handsontable$editors.getEditor,
      BaseEditor = _Handsontable$editors.BaseEditor;
  var getRenderer = Handsontable.renderers.getRenderer;
  var getValidator = Handsontable.validators.getValidator;
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should register custom cell type (with custom editor, renderer and validator)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var MyEditor =
    /*#__PURE__*/
    function (_BaseEditor) {
      _inherits(MyEditor, _BaseEditor);

      function MyEditor() {
        _classCallCheck(this, MyEditor);

        return _possibleConstructorReturn(this, _getPrototypeOf(MyEditor).apply(this, arguments));
      }

      _createClass(MyEditor, [{
        key: "init",
        value: function init() {
          this.TEXTAREA = document.createElement('TEXTAREA');
          this.TEXTAREA_PARENT = document.createElement('DIV');
          this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
          this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);
        }
      }, {
        key: "getValue",
        value: function getValue() {
          return "**".concat(this.TEXTAREA.value, "**");
        }
      }, {
        key: "setValue",
        value: function setValue(value) {
          this.TEXTAREA.value = value;
        }
      }, {
        key: "open",
        value: function open() {}
      }, {
        key: "close",
        value: function close() {}
      }, {
        key: "focus",
        value: function focus() {
          this.TEXTAREA.focus();
        }
      }]);

      return MyEditor;
    }(BaseEditor);

    registerCellType('myCellType', {
      editor: MyEditor,
      renderer: function renderer(hot, td, row, col, prop, value) {
        td.innerHTML = "--".concat(value, "--");
      },
      validator: function validator(value, cb) {
        cb(value === 10);
      }
    });
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: [[1, 6, 10]],
      columns: [{
        type: 'myCellType'
      }],
      afterValidate: onAfterValidate
    });
    hot.setDataAtCell(1, 0, 10);
    yield sleep(100);
    expect(onAfterValidate).toHaveBeenCalledWith(true, 10, 1, 0, undefined, undefined);
    expect(getCell(1, 0).innerHTML).toBe('--10--');
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'hello';
    destroyEditor();
    yield sleep(100);
    expect(onAfterValidate).toHaveBeenCalledWith(false, '**hello**', 0, 0, 'edit', undefined);
    expect(getCell(0, 0).innerHTML).toBe('--**hello**--');
  }));
  it('should retrieve predefined cell types by its names', function () {
    var _Handsontable = Handsontable,
        editors = _Handsontable.editors,
        renderers = _Handsontable.renderers,
        validators = _Handsontable.validators;
    expect(getCellType('autocomplete').editor).toBe(editors.AutocompleteEditor);
    expect(getCellType('autocomplete').renderer).toBe(renderers.AutocompleteRenderer);
    expect(getCellType('autocomplete').validator).toBe(validators.AutocompleteValidator);
    expect(getCellType('checkbox').editor).toBe(editors.CheckboxEditor);
    expect(getCellType('checkbox').renderer).toBe(renderers.CheckboxRenderer);
    expect(getCellType('checkbox').validator).not.toBeDefined();
    expect(getCellType('date').editor).toBe(editors.DateEditor);
    expect(getCellType('date').renderer).toBe(renderers.AutocompleteRenderer);
    expect(getCellType('date').validator).toBe(validators.DateValidator);
    expect(getCellType('dropdown').editor).toBe(editors.DropdownEditor);
    expect(getCellType('dropdown').renderer).toBe(renderers.AutocompleteRenderer);
    expect(getCellType('dropdown').validator).toBe(validators.AutocompleteValidator);
    expect(getCellType('handsontable').editor).toBe(editors.HandsontableEditor);
    expect(getCellType('handsontable').renderer).toBe(renderers.AutocompleteRenderer);
    expect(getCellType('handsontable').validator).not.toBeDefined();
    expect(getCellType('numeric').editor).toBe(editors.NumericEditor);
    expect(getCellType('numeric').renderer).toBe(renderers.NumericRenderer);
    expect(getCellType('numeric').validator).toBe(validators.NumericValidator);
    expect(getCellType('numeric').dataType).toBe('number');
    expect(getCellType('password').editor).toBe(editors.PasswordEditor);
    expect(getCellType('password').renderer).toBe(renderers.PasswordRenderer);
    expect(getCellType('password').validator).not.toBeDefined();
    expect(getCellType('password').copyable).toBe(false);
    expect(getCellType('text').editor).toBe(editors.TextEditor);
    expect(getCellType('text').renderer).toBe(renderers.TextRenderer);
    expect(getCellType('text').validator).not.toBeDefined();
    expect(getCellType('time').editor).toBe(editors.TextEditor);
    expect(getCellType('time').renderer).toBe(renderers.TextRenderer);
    expect(getCellType('time').validator).toBe(validators.TimeValidator);
  });
  it('should register custom cell type into renderers, editors and validators', function () {
    var MyEditor = function MyEditor() {
      _classCallCheck(this, MyEditor);
    };

    function myRenderer() {}

    function myValidator() {}

    registerCellType('myCellType', {
      editor: MyEditor,
      renderer: myRenderer,
      validator: myValidator
    });
    expect(getEditor('myCellType')).toBe(MyEditor);
    expect(getRenderer('myCellType')).toBe(myRenderer);
    expect(getValidator('myCellType')).toBe(myValidator);
  });
  it('should overwrite cell types under the same name', function () {
    var MyEditor = function MyEditor() {
      _classCallCheck(this, MyEditor);
    };

    function myRenderer() {}

    function myValidator() {}

    registerCellType('myCellType', {
      editor: MyEditor,
      renderer: myRenderer,
      validator: myValidator
    });
    expect(getEditor('myCellType')).toBe(MyEditor);
    expect(getRenderer('myCellType')).toBe(myRenderer);
    expect(getValidator('myCellType')).toBe(myValidator);

    function myRenderer2() {}

    function myValidator2() {}

    registerCellType('myCellType', {
      renderer: myRenderer2,
      validator: myValidator2
    });
    expect(getEditor('myCellType')).toBe(MyEditor);
    expect(getRenderer('myCellType')).toBe(myRenderer2);
    expect(getValidator('myCellType')).toBe(myValidator2);
  });
  it('should retrieve custom cell type by its names', function () {
    var MyEditor = function MyEditor() {
      _classCallCheck(this, MyEditor);
    };

    function myRenderer() {}

    function myValidator() {}

    registerCellType('myCellType', {
      editor: MyEditor,
      renderer: myRenderer,
      validator: myValidator
    });
    expect(getCellType('myCellType').editor).toBe(MyEditor);
    expect(getCellType('myCellType').renderer).toBe(myRenderer);
    expect(getCellType('myCellType').validator).toBe(myValidator);
  });
});

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.colToProp', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return the property name for the provided column number', function () {
    handsontable({
      data: [{
        id: 1,
        firstName: 'Tobias',
        lastName: 'Forge'
      }]
    });
    expect(colToProp(0)).toBe('id');
    expect(colToProp(1)).toBe('firstName');
    expect(colToProp(2)).toBe('lastName');
  });
  it('it should return the provided property name, when the user passes a property name as a column number', function () {
    handsontable({
      data: [{
        id: 1,
        sort: true,
        length: 2
      }]
    });
    expect(colToProp('id')).toBe('id');
    expect(colToProp('sort')).toBe('sort');
    expect(colToProp('length')).toBe('length');
  });
});

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.countSourceCols', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return properly index from ', function () {
    var hot = handsontable({
      data: [['', '', '', '', '', '', '', '', '', '', '', '', '', '', '']],
      columns: function columns(column) {
        return [1, 5, 9].indexOf(column) > -1 ? {} : null;
      }
    });
    expect(hot.countSourceCols()).toBe(15);
  });
});

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.emptySelectedCells', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should make all selected cells empty', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(9, 8),
      selectionMode: 'multiple'
    });
    $(getCell(5, 4)).simulate('mousedown');
    $(getCell(1, 1)).simulate('mouseover');
    $(getCell(1, 1)).simulate('mouseup');
    keyDown('ctrl');
    $(getCell(2, 2)).simulate('mousedown');
    $(getCell(7, 2)).simulate('mouseover');
    $(getCell(7, 2)).simulate('mouseup');
    $(getCell(2, 4)).simulate('mousedown');
    $(getCell(2, 4)).simulate('mouseover');
    $(getCell(2, 4)).simulate('mouseup');
    $(getCell(7, 6)).simulate('mousedown');
    $(getCell(8, 7)).simulate('mouseover');
    $(getCell(8, 7)).simulate('mouseup');
    emptySelectedCells();
    /* eslint-disable no-multi-spaces, comma-spacing */

    var snapshot = [['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1'], ['A2', '', '', '', '', 'F2', 'G2', 'H2'], ['A3', '', '', '', '', 'F3', 'G3', 'H3'], ['A4', '', '', '', '', 'F4', 'G4', 'H4'], ['A5', '', '', '', '', 'F5', 'G5', 'H5'], ['A6', '', '', '', '', 'F6', 'G6', 'H6'], ['A7', 'B7', '', 'D7', 'E7', 'F7', 'G7', 'H7'], ['A8', 'B8', '', 'D8', 'E8', 'F8', '', ''], ['A9', 'B9', 'C9', 'D9', 'E9', 'F9', '', '']];
    /* eslint-enable no-multi-spaces, comma-spacing */

    expect(getData()).toEqual(snapshot);
  });
});

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getCellMetaAtRow', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return a row of cell meta in a form of an array', function () {
    handsontable();
    var rowOfMeta = getCellMetaAtRow(0);
    expect(rowOfMeta.length).toBe(5);
    expect(rowOfMeta[0].row).toBe(0);
    expect(rowOfMeta[1].row).toBe(0);
    expect(rowOfMeta[2].row).toBe(0);
    expect(rowOfMeta[3].row).toBe(0);
    expect(rowOfMeta[4].row).toBe(0);
    expect(rowOfMeta[0].col).toBe(0);
    expect(rowOfMeta[1].col).toBe(1);
    expect(rowOfMeta[2].col).toBe(2);
    expect(rowOfMeta[3].col).toBe(3);
    expect(rowOfMeta[4].col).toBe(4);
    expect(rowOfMeta[0].prop).toBe(0);
    expect(rowOfMeta[1].prop).toBe(1);
    expect(rowOfMeta[2].prop).toBe(2);
    expect(rowOfMeta[3].prop).toBe(3);
    expect(rowOfMeta[4].prop).toBe(4);
  });
});

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getCellsMeta', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return all initialized cells meta as flatten array', function () {
    handsontable();
    var metas = getCellsMeta();
    expect(metas.length).toBe(25); // default data size

    expect(metas[0].row).toBe(0);
    expect(metas[0].col).toBe(0);
    expect(metas[0].prop).toBe(0);
    expect(metas[19].row).toBe(3);
    expect(metas[19].col).toBe(4);
    expect(metas[19].prop).toBe(4);
  });
});

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getCopyableData', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return copyable data when `copyable` option is enabled', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 10),
      copyable: true
    });
    expect(getCopyableData(0, 0)).toBe('A1');
    expect(getCopyableData(1, 1)).toBe('B2');
    expect(getCopyableData(5, 1)).toBe('B6');
    expect(getCopyableData(8, 9)).toBe('J9');
  });
  it('should return empty string as copyable data when `copyable` option is disabled', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 10),
      copyable: false
    });
    expect(getCopyableData(0, 0)).toBe('');
    expect(getCopyableData(1, 1)).toBe('');
    expect(getCopyableData(5, 1)).toBe('');
    expect(getCopyableData(8, 9)).toBe('');
  });
});

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getCopyableText', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return copyable string when `copyable` option is enabled', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      copyable: true
    });
    expect(getCopyableText(0, 0)).toBe('A1');
    expect(getCopyableText(0, 0, 1, 2)).toBe('A1\tB1\tC1\nA2\tB2\tC2');
  });
  it('should return empty string as copyable data when `copyable` option is disabled', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      copyable: false
    });
    expect(getCopyableText(0, 0)).toBe('');
    expect(getCopyableText(0, 0, 1, 2)).toBe('\t\t\n\t\t');
  });
});

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getSelected', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid coordinates', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
      selectionMode: 'multiple'
    });
    var snapshot = [[5, 4, 1, 1], [2, 2, 7, 2], [2, 4, 2, 4], [7, 6, 8, 7]];
    $(getCell(5, 4)).simulate('mousedown');
    $(getCell(1, 1)).simulate('mouseover');
    $(getCell(1, 1)).simulate('mouseup');
    expect(getSelected()).toEqual([snapshot[0]]);
    keyDown('ctrl');
    $(getCell(2, 2)).simulate('mousedown');
    $(getCell(7, 2)).simulate('mouseover');
    $(getCell(7, 2)).simulate('mouseup');
    expect(getSelected()).toEqual([snapshot[0], snapshot[1]]);
    $(getCell(2, 4)).simulate('mousedown');
    $(getCell(2, 4)).simulate('mouseover');
    $(getCell(2, 4)).simulate('mouseup');
    expect(getSelected()).toEqual([snapshot[0], snapshot[1], snapshot[2]]);
    $(getCell(7, 6)).simulate('mousedown');
    $(getCell(8, 7)).simulate('mouseover');
    $(getCell(8, 7)).simulate('mouseup');
    expect(getSelected()).toEqual(snapshot);
  });
});

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getSelectedLast', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid coordinates', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
      selectionMode: 'multiple'
    });
    var snapshot = [[5, 4, 1, 1], [2, 2, 7, 2], [2, 4, 2, 4], [7, 6, 8, 7]];
    $(getCell(5, 4)).simulate('mousedown');
    $(getCell(1, 1)).simulate('mouseover');
    $(getCell(1, 1)).simulate('mouseup');
    expect(getSelectedLast()).toEqual(snapshot[0]);
    keyDown('ctrl');
    $(getCell(2, 2)).simulate('mousedown');
    $(getCell(7, 2)).simulate('mouseover');
    $(getCell(7, 2)).simulate('mouseup');
    expect(getSelectedLast()).toEqual(snapshot[1]);
    $(getCell(2, 4)).simulate('mousedown');
    $(getCell(2, 4)).simulate('mouseover');
    $(getCell(2, 4)).simulate('mouseup');
    expect(getSelectedLast()).toEqual(snapshot[2]);
    $(getCell(7, 6)).simulate('mousedown');
    $(getCell(8, 7)).simulate('mouseover');
    $(getCell(8, 7)).simulate('mouseup');
    expect(getSelectedLast()).toEqual(snapshot[3]);
  });
  it('should return valid coordinates when `.getSelectedRange` and `.getSelectedRangeLast` is called', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
      selectionMode: 'multiple'
    });
    var snapshot = [{
      from: {
        row: 5,
        col: 4
      },
      to: {
        row: 1,
        col: 1
      }
    }, {
      from: {
        row: 2,
        col: 2
      },
      to: {
        row: 7,
        col: 2
      }
    }, {
      from: {
        row: 2,
        col: 4
      },
      to: {
        row: 2,
        col: 4
      }
    }, {
      from: {
        row: 7,
        col: 6
      },
      to: {
        row: 8,
        col: 7
      }
    }];
    $(getCell(5, 4)).simulate('mousedown');
    $(getCell(1, 1)).simulate('mouseover');
    $(getCell(1, 1)).simulate('mouseup');
    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[0]);
    expect(getSelectedRange().map(function (cellRange) {
      return cellRange.toObject();
    })).toEqual([snapshot[0]]);
    keyDown('ctrl');
    $(getCell(2, 2)).simulate('mousedown');
    $(getCell(7, 2)).simulate('mouseover');
    $(getCell(7, 2)).simulate('mouseup');
    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[1]);
    expect(getSelectedRange().map(function (cellRange) {
      return cellRange.toObject();
    })).toEqual([snapshot[0], snapshot[1]]);
    $(getCell(2, 4)).simulate('mousedown');
    $(getCell(2, 4)).simulate('mouseover');
    $(getCell(2, 4)).simulate('mouseup');
    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[2]);
    expect(getSelectedRange().map(function (cellRange) {
      return cellRange.toObject();
    })).toEqual([snapshot[0], snapshot[1], snapshot[2]]);
    $(getCell(7, 6)).simulate('mousedown');
    $(getCell(8, 7)).simulate('mouseover');
    $(getCell(8, 7)).simulate('mouseup');
    var selectedRange = getSelectedRange().map(function (cellRange) {
      return cellRange.toObject();
    });
    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[3]);
    expect(selectedRange).toEqual(snapshot);
  });
});

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getSelectedRange', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid coordinates', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
      selectionMode: 'multiple'
    });
    var snapshot = [{
      from: {
        row: 5,
        col: 4
      },
      to: {
        row: 1,
        col: 1
      }
    }, {
      from: {
        row: 2,
        col: 2
      },
      to: {
        row: 7,
        col: 2
      }
    }, {
      from: {
        row: 2,
        col: 4
      },
      to: {
        row: 2,
        col: 4
      }
    }, {
      from: {
        row: 7,
        col: 6
      },
      to: {
        row: 8,
        col: 7
      }
    }];
    $(getCell(5, 4)).simulate('mousedown');
    $(getCell(1, 1)).simulate('mouseover');
    $(getCell(1, 1)).simulate('mouseup');
    expect(getSelectedRange().map(function (cellRange) {
      return cellRange.toObject();
    })).toEqual([snapshot[0]]);
    keyDown('ctrl');
    $(getCell(2, 2)).simulate('mousedown');
    $(getCell(7, 2)).simulate('mouseover');
    $(getCell(7, 2)).simulate('mouseup');
    expect(getSelectedRange().map(function (cellRange) {
      return cellRange.toObject();
    })).toEqual([snapshot[0], snapshot[1]]);
    $(getCell(2, 4)).simulate('mousedown');
    $(getCell(2, 4)).simulate('mouseover');
    $(getCell(2, 4)).simulate('mouseup');
    expect(getSelectedRange().map(function (cellRange) {
      return cellRange.toObject();
    })).toEqual([snapshot[0], snapshot[1], snapshot[2]]);
    $(getCell(7, 6)).simulate('mousedown');
    $(getCell(8, 7)).simulate('mouseover');
    $(getCell(8, 7)).simulate('mouseup');
    var selectedRange = getSelectedRange().map(function (cellRange) {
      return cellRange.toObject();
    });
    expect(selectedRange).toEqual(snapshot);
  });
});

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getSelectedRangeLast', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid coordinates', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
      selectionMode: 'multiple'
    });
    var snapshot = [{
      from: {
        row: 5,
        col: 4
      },
      to: {
        row: 1,
        col: 1
      }
    }, {
      from: {
        row: 2,
        col: 2
      },
      to: {
        row: 7,
        col: 2
      }
    }, {
      from: {
        row: 2,
        col: 4
      },
      to: {
        row: 2,
        col: 4
      }
    }, {
      from: {
        row: 7,
        col: 6
      },
      to: {
        row: 8,
        col: 7
      }
    }];
    $(getCell(5, 4)).simulate('mousedown');
    $(getCell(1, 1)).simulate('mouseover');
    $(getCell(1, 1)).simulate('mouseup');
    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[0]);
    keyDown('ctrl');
    $(getCell(2, 2)).simulate('mousedown');
    $(getCell(7, 2)).simulate('mouseover');
    $(getCell(7, 2)).simulate('mouseup');
    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[1]);
    $(getCell(2, 4)).simulate('mousedown');
    $(getCell(2, 4)).simulate('mouseover');
    $(getCell(2, 4)).simulate('mouseup');
    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[2]);
    $(getCell(7, 6)).simulate('mousedown');
    $(getCell(8, 7)).simulate('mouseover');
    $(getCell(8, 7)).simulate('mouseup');
    expect(getSelectedRangeLast().toObject()).toEqual(snapshot[3]);
  });
});

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getSourceDataArray', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return data as an array when provided data was an array of arrays', function () {
    handsontable({
      data: [[1, 2, 3], ['a', 'b', 'c']],
      copyable: true
    });
    expect(getSourceDataArray()).toEqual([[1, 2, 3], ['a', 'b', 'c']]);
    expect(getSourceDataArray(0, 1, 1, 2)).toEqual([[2, 3], ['b', 'c']]);
  });
  it('should return data as an array when provided data was an array of objects', function () {
    handsontable({
      data: [{
        a: 1,
        b: 2,
        c: 3
      }, {
        a: 'a',
        b: 'b',
        c: 'c'
      }],
      copyable: true
    });
    expect(getSourceDataArray()).toEqual([[1, 2, 3], ['a', 'b', 'c']]);
    expect(getSourceDataArray(0, 1, 1, 2)).toEqual([[2, 3], ['b', 'c']]);
  });
});

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getSourceDataAtCell', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return null when is call without arguments', function () {
    handsontable({
      data: [[1, 2, 3], ['a', 'b', 'c']]
    });
    expect(getSourceDataAtCell()).toBeNull();
  });
  it('should return cell value when provided data was an array of arrays', function () {
    handsontable({
      data: [[1, 2, 3], ['a', 'b', 'c']]
    });
    expect(getSourceDataAtCell(1, 1)).toEqual('b');
  });
  it('should return cell value when provided data was an array of objects', function () {
    handsontable({
      data: [{
        a: 1,
        b: 2,
        c: 3
      }, {
        a: 'a',
        b: 'b',
        c: 'c'
      }],
      copyable: true
    });
    expect(getSourceDataAtCell(1, 'b')).toEqual('b');
  });
  it('should return cell value when provided data was an array of objects (nested structure)', function () {
    handsontable({
      data: [{
        a: 1,
        b: {
          a: 21,
          b: 22
        },
        c: 3
      }, {
        a: 'a',
        b: {
          a: 'ba',
          b: 'bb'
        },
        c: 'c'
      }],
      columns: [{
        data: 'a'
      }, {
        data: 'b.a'
      }, {
        data: 'b.b'
      }, {
        data: 'c'
      }]
    });
    expect(getSourceDataAtCell(1, 'b.b')).toEqual('bb');
  });
  it('should return cell value when data is provided by dataSchema', function () {
    handsontable({
      data: [model({
        id: 1,
        name: 'Ted Right',
        address: ''
      }), model({
        id: 2,
        name: 'Frank Honest',
        address: ''
      }), model({
        id: 3,
        name: 'Joan Well',
        address: ''
      }), model({
        id: 4,
        name: 'Gail Polite',
        address: ''
      }), model({
        id: 5,
        name: 'Michael Fair',
        address: ''
      })],
      dataSchema: model,
      columns: [{
        data: property('id')
      }, {
        data: property('name')
      }, {
        data: property('address')
      }]
    });

    function model(opts) {
      var _pub = {};
      var _priv = {
        id: undefined,
        name: undefined,
        address: undefined
      };
      Handsontable.helper.objectEach(opts, function (value, key) {
        _priv[key] = value;
      });

      _pub.attr = function (attr, val) {
        if (typeof val === 'undefined') {
          return _priv[attr];
        }

        _priv[attr] = val;
        return _pub;
      };

      return _pub;
    }

    function property(attr) {
      return function (row, value) {
        return row.attr(attr, value);
      };
    }

    expect(getSourceDataAtCell(1, 1)).toEqual('Frank Honest');
  });
  describe('`modifyRowData` hook', function () {
    it('should be possible to change data for row on the fly ', function () {
      handsontable({
        data: [['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['2008', 10, 11, 12, 13], ['2009', 20, 11, 14, 13], ['2010', 30, 15, 12, 13]],
        modifyRowData: function modifyRowData(row) {
          var newDataset = [];

          if (row === 1) {
            newDataset.push('2016', 0, 0, 0, 0);
          }

          return newDataset.length ? newDataset : void 0;
        }
      });
      expect(getSourceDataAtCell(1, 0)).toEqual('2016');
    });
  });
});

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.getSourceDataAtCol', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return col values when data is provided by dataSchema', function () {
    handsontable({
      data: [model({
        id: 1,
        name: 'Ted Right',
        address: ''
      }), model({
        id: 2,
        name: 'Frank Honest',
        address: ''
      }), model({
        id: 3,
        name: 'Joan Well',
        address: ''
      }), model({
        id: 4,
        name: 'Gail Polite',
        address: ''
      }), model({
        id: 5,
        name: 'Michael Fair',
        address: ''
      })],
      dataSchema: model,
      columns: [{
        data: property('id')
      }, {
        data: property('name')
      }, {
        data: property('address')
      }]
    });

    function model(opts) {
      var _pub = {};
      var _priv = {
        id: undefined,
        name: undefined,
        address: undefined
      };
      Handsontable.helper.objectEach(opts, function (value, key) {
        _priv[key] = value;
      });

      _pub.attr = function (attr, val) {
        if (typeof val === 'undefined') {
          return _priv[attr];
        }

        _priv[attr] = val;
        return _pub;
      };

      return _pub;
    }

    function property(attr) {
      return function (row, value) {
        return row.attr(attr, value);
      };
    }

    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);
  });
});

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.propToCol', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid index for newly added column when manualColumnMove is enabled', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 10),
      manualColumnMove: true
    });
    hot.alter('insert_col', 5);
    expect(propToCol(0)).toBe(0);
    expect(propToCol(10)).toBe(10);
  });
});

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.selectAll', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should select all cells and clear previous selection', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(15, 20),
      width: 200,
      height: 100,
      selectionMode: 'multiple',
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[1, 1, 2, 2], [2, 2, 4, 4]]);
    hot.view.wt.wtTable.holder.scrollTop = 100;
    hot.view.wt.wtTable.holder.scrollLeft = 100;
    selectAll();
    expect("\n      |   \u2551 * : * : * : * : * : * |\n      |===:===:===:===:===:===:===|\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 : 0 : 0 |\n      ").toBeMatchToSelectionPattern(); // "Select all" shouldn't scroll te table.

    expect(hot.view.wt.wtTable.holder.scrollTop).toBe(100);
    expect(hot.view.wt.wtTable.holder.scrollLeft).toBe(100);
  });
});

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.selectCell', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should mark single cell visually (default selectionMode, without headers)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: false,
      rowHeaders: false
    });
    selectCell(2, 2);
    expect("\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   : # :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single cell visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectCell(2, 2);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the cells visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectCell(1, 2, 2, 3);
    expect("\n      |   \u2551   :   : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : A : 0 |\n      | - \u2551   :   : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single cell visually when selectionMode is set as `single', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'single',
      colHeaders: true,
      rowHeaders: true
    });
    selectCell(2, 2);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not mark the range of the cells visually when selectionMode is set as `single`', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'single',
      colHeaders: true,
      rowHeaders: true
    });
    selectCell(1, 2, 2, 3);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single cell visually when selectionMode is set as `range', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'range',
      colHeaders: true,
      rowHeaders: true
    });
    selectCell(2, 2);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark the range of the cells visually when selectionMode is set as `range`', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'range',
      colHeaders: true,
      rowHeaders: true
    });
    selectCell(1, 2, 2, 3);
    expect("\n      |   \u2551   :   : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : A : 0 |\n      | - \u2551   :   : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark the headers when whole column and row is selected', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectCell(0, 2, 5, 3);
    expect("\n      |   \u2551   :   : - : - |\n      |===:===:===:===:===|\n      | - \u2551   :   : A : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      ").toBeMatchToSelectionPattern();
    selectCell(1, 0, 2, 3);
    expect("\n      |   \u2551 - : - : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | - \u2551 A : 0 : 0 : 0 |\n      | - \u2551 0 : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not deselect current selection when sellectCell is called without arguments', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    selectCell(0, 0, 2, 2);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    selectCell();
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    selectCell(1);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
  });
  it('should not deselect current selection when sellectCell is called with one argument', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectCell(1);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when sellectCell is called with negative values', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectCell(0, -1, 0, 0);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCell(-1, 0, 0, 0);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCell(0, 0, -1, 0);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCell(0, 0, 0, -1);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when sellectCell is called with coordinates beyond the table data range', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(3, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectCell(3, 0);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCell(0, 4);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCell(0, 0, 3, 0);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCell(0, 0, 0, 4);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when sellectCell is called with undefined column property', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectCell(0, 'notExistProp');
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCell(0, 0, 0, 'notExistProp');
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should select only one cell when two arguments are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(1, 1);
    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select only one cell when two arguments are passed (column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(1, 'prop1');
    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when at least the three arguments are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 0, 1);
    expect(getSelected()).toEqual([[0, 0, 1, 0]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when at least the three arguments are passed (column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 'prop0', 1);
    expect(getSelected()).toEqual([[0, 0, 1, 0]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the four arguments are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(1, 1, 2, 3);
    expect(getSelected()).toEqual([[1, 1, 2, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the four arguments are passed (column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(1, 'prop1', 2, 'prop3');
    expect(getSelected()).toEqual([[1, 1, 2, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from right-bottom to left-top)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(2, 3, 1, 1);
    expect(getSelected()).toEqual([[2, 3, 1, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from right-bottom to left-top using column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(2, 'prop3', 1, 'prop1');
    expect(getSelected()).toEqual([[2, 3, 1, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from left-bottom to right-top)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(2, 1, 1, 3);
    expect(getSelected()).toEqual([[2, 1, 1, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from left-bottom to right-top using column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(2, 'prop1', 1, 'prop3');
    expect(getSelected()).toEqual([[2, 1, 1, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from right-top to left-bottom)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(1, 3, 2, 1);
    expect(getSelected()).toEqual([[1, 3, 2, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from right-top to left-bottom using column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(1, 'prop3', 2, 'prop1');
    expect(getSelected()).toEqual([[1, 3, 2, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should by default scroll the viewport to the selected cell (bottom of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(15, 0);
    expect(getCell(15, 0)).toBeVisibleAtBottomOfViewport();
  });
  it('should by default scroll the viewport to the selected cell using column props (bottom of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(15, 'prop0');
    expect(getCell(15, 0)).toBeVisibleAtBottomOfViewport();
  });
  it('should by default scroll the viewport to the selected cell (right of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(5, 15);
    expect(getCell(5, 15)).toBeVisibleAtRightOfViewport();
  });
  it('should by default scroll the viewport to the selected cell using column props (right of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(5, 'prop15');
    expect(getCell(5, 15)).toBeVisibleAtRightOfViewport();
  });
  it('should by default scroll the viewport to the selected cell (left of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(5, 15); // Scroll to the right of the table.

    selectCell(5, 0);
    expect(getCell(5, 0)).toBeVisibleAtLeftOfViewport();
  });
  it('should by default scroll the viewport to the selected cell using column props (left of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(5, 15); // Scroll to the right of the table.

    selectCell(5, 'prop0');
    expect(getCell(5, 0)).toBeVisibleAtLeftOfViewport();
  });
  it('should by default scroll the viewport to the selected cell (top of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(19, 0); // Scroll to the bottom of the table.

    selectCell(1, 0);
    expect(getCell(1, 0)).toBeVisibleAtTopOfViewport();
  });
  it('should by default scroll the viewport to the selected cell using column props (top of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(19, 0); // Scroll to the bottom of the table.

    selectCell(1, 'prop0');
    expect(getCell(1, 0)).toBeVisibleAtTopOfViewport();
  });
  it('should not the scroll the viewport when `false` argument is passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(15, 0, 15, 0, false);
    expect(getCell(15, 0)).not.toBeVisibleInViewport();
  });
  it('should by default change the listener to handsontable instance from the action was triggered', function () {
    var afterListen = jasmine.createSpy();
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterListen: afterListen
    });
    selectCell(15, 0);
    expect(afterListen).toHaveBeenCalled();
  });
  it('should not change the listening state when `false` argument is passed', function () {
    var afterListen = jasmine.createSpy();
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterListen: afterListen
    });
    selectCell(15, 0, 15, 0, true, false);
    expect(afterListen).not.toHaveBeenCalled();
  });
  it('should fire hooks with proper context', function () {
    var _jasmine$createSpyObj = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj.beforeSetRangeEnd;

    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectCell(1, 2);
    expect(afterSelection.calls.first().object).toBe(hot);
    expect(afterSelectionByProp.calls.first().object).toBe(hot);
    expect(afterSelectionEnd.calls.first().object).toBe(hot);
    expect(afterSelectionEndByProp.calls.first().object).toBe(hot);
    expect(beforeSetRangeStartOnly.calls.first().object).toBe(hot);
  });
  it('should fire hooks with proper arguments when a single cell is selected', function () {
    var _jasmine$createSpyObj2 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj2.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj2.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj2.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj2.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj2.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj2.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj2.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectCell(1, 2);
    expect(afterSelection.calls.count()).toBe(1);
    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 1, 2, jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.count()).toBe(1);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 1, 'prop2', jasmine.any(Object), 0]);
    expect(afterSelectionEnd.calls.count()).toBe(1);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 1, 2, 0, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(1);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 1, 'prop2', 0, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);
  });
  it('should fire hooks with proper arguments when range of the cells are selected', function () {
    var _jasmine$createSpyObj3 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj3.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj3.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj3.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj3.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj3.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj3.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj3.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectCell(1, 2, 2, 4);
    expect(afterSelection.calls.count()).toBe(1);
    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 2, 4, jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.count()).toBe(1);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', jasmine.any(Object), 0]);
    expect(afterSelectionEnd.calls.count()).toBe(1);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 2, 4, 0, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(1);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', 0, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);
  });
});

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.selectCells', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should mark single cell visually (default selectionMode, without headers)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: false,
      rowHeaders: false
    });
    selectCells([[2, 2]]);
    expect("\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   : # :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single cell visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[2, 2]]);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the cells visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[1, 2, 2, 3]]);
    expect("\n      |   \u2551   :   : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : A : 0 |\n      | - \u2551   :   : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark non-contiguous cells visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[0, 0], [5, 1, 2, 2], [4, 3, 1, 2], [3, 0, 3, 2], [4, 2], [4, 2]]);
    expect("\n      |   \u2551 - : - : - : - |\n      |===:===:===:===:===|\n      | - \u2551 0 :   :   :   |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   : 0 : 1 : 0 |\n      | - \u2551 0 : 1 : 2 : 0 |\n      | - \u2551   : 0 : D : 0 |\n      | - \u2551   : 0 : 0 :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single cell visually when selectionMode is set as `single', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'single',
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[2, 2]]);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not mark range of the cells visually when selectionMode is set as `single', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'single',
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[1, 2, 2, 3]]);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not mark non-contiguous cells visually when selectionMode is set as `single', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'single',
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[0, 0], [5, 1, 2, 2], [4, 3, 1, 2], [3, 0, 3, 2], [4, 2], [4, 2]]);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single cell visually when selectionMode is set as `range', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'range',
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[2, 2]]);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the cells visually when selectionMode is set as `range', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'range',
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[1, 2, 2, 3]]);
    expect("\n      |   \u2551   :   : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | - \u2551   :   : A : 0 |\n      | - \u2551   :   : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not mark non-contiguous cells visually when selectionMode is set as `range', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      selectionMode: 'range'
    });
    selectCells([[0, 0], [5, 1, 2, 2], [4, 3, 1, 2], [3, 0, 3, 2], [4, 2], [4, 2]]);
    expect("\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   : # :   |\n      |   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark the headers when whole column and row is selected', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectCells([[0, 1, 5, 1], [0, 3, 5, 3]]);
    expect("\n      |   \u2551   : - :   : - |\n      |===:===:===:===:===|\n      | - \u2551   : 0 :   : A |\n      | - \u2551   : 0 :   : 0 |\n      | - \u2551   : 0 :   : 0 |\n      | - \u2551   : 0 :   : 0 |\n      | - \u2551   : 0 :   : 0 |\n      | - \u2551   : 0 :   : 0 |\n      ").toBeMatchToSelectionPattern();
    selectCells([[1, 0, 1, 3], [3, 0, 3, 3]]);
    expect("\n      |   \u2551 - : - : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | - \u2551 0 : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      | - \u2551 A : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not deselect current selection when sellectCells is called without arguments', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.

    selectCells();
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
  });
  it('should throw an exception when the coordinates are passed in invalid format', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.

    expect(function () {
      return selectCells(1);
    }).toThrow();
    expect(function () {
      return selectCells([1]);
    }).toThrow();
    expect(function () {
      return selectCells('prop0');
    }).toThrow();
    expect(function () {
      return selectCells(['prop0']);
    }).toThrow();
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
  });
  it('should not deselect current selection when sellectCells is called with one argument', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(true);
    /* eslint-disable no-empty */

    try {
      selectCells([[1]]);
    } catch (ex) {}

    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
  });
  it('should not deselect current selection when sellectCells is called with negative values', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectCells([[0, -1, 0, 0]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[-1, 0, 0, 0]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[0, 0, -1, 0]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[0, 0, 0, -1]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[0, 0, 0, 0], [0, 0, 0, -1]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when sellectCells is called with coordinates beyond the table data range', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(3, 4)
    });
    var wasSelected = selectCells([[0, 0, 2, 2], [1, 1, 2, 2]]); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectCells([[3, 0]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[0, 4]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[0, 0, 3, 0]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[0, 0, 0, 4]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[0, 0], [0, 0, 0, 4]]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when sellectCells is called with undefined column property', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[0, 0, 2, 2], [1, 1, 3, 3]]); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectCells([[0, 'notExistProp']]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[0, 0, 0, 'notExistProp']]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectCells([[1, 1], [0, 0, 0, 'notExistProp']]);
    expect(getSelected()).toEqual([[0, 0, 2, 2], [1, 1, 3, 3]]);
    expect(wasSelected).toBe(false);
  });
  it('should select only one cell when two arguments are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[1, 1]]);
    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select only one cell when two arguments are passed (column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[1, 'prop1']]);
    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when at least the three arguments are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[0, 0, 1]]);
    expect(getSelected()).toEqual([[0, 0, 1, 0]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when at least the three arguments are passed (column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[0, 'prop0', 1]]);
    expect(getSelected()).toEqual([[0, 0, 1, 0]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the four arguments are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[1, 1, 2, 3]]);
    expect(getSelected()).toEqual([[1, 1, 2, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the four arguments are passed (column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[1, 'prop1', 2, 'prop3']]);
    expect(getSelected()).toEqual([[1, 1, 2, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select multiple cells when the multiple ranges are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[0, 0], [5, 1, 2, 2], [4, 3, 1, 2], [3, 0, 3, 2], [4, 2], [4, 2]]);
    expect(getSelected()).toEqual([[0, 0, 0, 0], [5, 1, 2, 2], [4, 3, 1, 2], [3, 0, 3, 2], [4, 2, 4, 2], [4, 2, 4, 2]]);
    expect(wasSelected).toBe(true);
  });
  it('should select multiple cells when the multiple ranges are passed (column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[0, 'prop0'], [5, 'prop1', 2, 'prop2'], [4, 'prop3', 1, 'prop2'], [3, 'prop0', 3, 'prop2'], [4, 'prop2'], [4, 'prop2']]);
    expect(getSelected()).toEqual([[0, 0, 0, 0], [5, 1, 2, 2], [4, 3, 1, 2], [3, 0, 3, 2], [4, 2, 4, 2], [4, 2, 4, 2]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from right-bottom to left-top)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[2, 3, 1, 1]]);
    expect(getSelected()).toEqual([[2, 3, 1, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from right-bottom to left-top using column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[2, 'prop3', 1, 'prop1']]);
    expect(getSelected()).toEqual([[2, 3, 1, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from left-bottom to right-top)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[2, 1, 1, 3]]);
    expect(getSelected()).toEqual([[2, 1, 1, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from left-bottom to right-top using column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[2, 'prop1', 1, 'prop3']]);
    expect(getSelected()).toEqual([[2, 1, 1, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from right-top to left-bottom)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[1, 3, 2, 1]]);
    expect(getSelected()).toEqual([[1, 3, 2, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of cells when the coordinates are passed in reversed order (from right-top to left-bottom using column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCells([[1, 'prop3', 2, 'prop1']]);
    expect(getSelected()).toEqual([[1, 3, 2, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should by default scroll the viewport to the selected cell (bottom of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCells([[15, 0]]);
    expect(getCell(15, 0)).toBeVisibleAtBottomOfViewport();
  });
  it('should by default scroll the viewport to the selected cell using column props (bottom of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCells([[15, 'prop0']]);
    expect(getCell(15, 0)).toBeVisibleAtBottomOfViewport();
  });
  it('should by default scroll the viewport to the selected cell (right of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCells([[5, 15]]);
    expect(getCell(5, 15)).toBeVisibleAtRightOfViewport();
  });
  it('should by default scroll the viewport to the selected cell using column props (right of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCells([[5, 'prop15']]);
    expect(getCell(5, 15)).toBeVisibleAtRightOfViewport();
  });
  it('should by default scroll the viewport to the selected cell (left of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(5, 15); // Scroll to the right of the table.

    selectCells([[5, 0]]);
    expect(getCell(5, 0)).toBeVisibleAtLeftOfViewport();
  });
  it('should by default scroll the viewport to the selected cell using column props (left of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(5, 15); // Scroll to the right of the table.

    selectCells([[5, 'prop0']]);
    expect(getCell(5, 0)).toBeVisibleAtLeftOfViewport();
  });
  it('should by default scroll the viewport to the selected cell (top of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(19, 0); // Scroll to the bottom of the table.

    selectCells([[1, 0]]);
    expect(getCell(1, 0)).toBeVisibleAtTopOfViewport();
  });
  it('should by default scroll the viewport to the selected cell using column props (top of the viewport)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(19, 0); // Scroll to the bottom of the table.

    selectCells([[1, 'prop0']]);
    expect(getCell(1, 0)).toBeVisibleAtTopOfViewport();
  });
  it('should not the scroll the viewport when `false` argument is passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCells([[15, 0]], false);
    expect(getCell(15, 0)).not.toBeVisibleInViewport();
  });
  it('should by default change the listener to handsontable instance from the action was triggered', function () {
    var afterListen = jasmine.createSpy();
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterListen: afterListen
    });
    selectCells([[15, 0]]);
    expect(afterListen).toHaveBeenCalled();
  });
  it('should not change the listening state when `false` argument is passed', function () {
    var afterListen = jasmine.createSpy();
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterListen: afterListen
    });
    selectCells([[15, 0]], true, false);
    expect(afterListen).not.toHaveBeenCalled();
  });
  it('should fire hooks with proper context', function () {
    var _jasmine$createSpyObj = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj.beforeSetRangeEnd;

    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectCells([[1, 2, 2, 4], [2, 1, 3, 2], [7, 7], [8, 4, 0, 4], [2, 4]]);
    expect(afterSelection.calls.first().object).toBe(hot);
    expect(afterSelectionByProp.calls.first().object).toBe(hot);
    expect(afterSelectionEnd.calls.first().object).toBe(hot);
    expect(afterSelectionEndByProp.calls.first().object).toBe(hot);
    expect(beforeSetRangeStartOnly.calls.first().object).toBe(hot);
  });
  it('should fire hooks with proper arguments when a single cell is selected', function () {
    var _jasmine$createSpyObj2 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj2.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj2.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj2.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj2.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj2.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj2.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj2.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectCells([[1, 2]]);
    expect(afterSelection.calls.count()).toBe(1);
    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 1, 2, jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.count()).toBe(1);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 1, 'prop2', jasmine.any(Object), 0]);
    expect(afterSelectionEnd.calls.count()).toBe(1);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 1, 2, 0, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(1);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 1, 'prop2', 0, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);
  });
  it('should fire hooks with proper arguments when range of the cells are selected', function () {
    var _jasmine$createSpyObj3 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj3.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj3.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj3.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj3.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj3.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj3.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj3.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectCells([[1, 2, 2, 4]]);
    expect(afterSelection.calls.count()).toBe(1);
    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 2, 4, jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.count()).toBe(1);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', jasmine.any(Object), 0]);
    expect(afterSelectionEnd.calls.count()).toBe(1);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 2, 4, 0, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(1);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', 0, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);
  });
  it('should fire hooks with proper arguments when the non-contiguous selection is added', function () {
    var _jasmine$createSpyObj4 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj4.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj4.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj4.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj4.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj4.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj4.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj4.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectCells([[1, 2, 2, 4], [2, 1, 3, 2], [7, 7], [8, 4, 0, 4], [2, 4]]);
    expect(afterSelection.calls.count()).toBe(5);
    expect(afterSelection.calls.argsFor(0)).toEqual([1, 2, 2, 4, jasmine.any(Object), 0]);
    expect(afterSelection.calls.argsFor(1)).toEqual([2, 1, 3, 2, jasmine.any(Object), 1]);
    expect(afterSelection.calls.argsFor(2)).toEqual([7, 7, 7, 7, jasmine.any(Object), 2]);
    expect(afterSelection.calls.argsFor(3)).toEqual([8, 4, 0, 4, jasmine.any(Object), 3]);
    expect(afterSelection.calls.argsFor(4)).toEqual([2, 4, 2, 4, jasmine.any(Object), 4]);
    expect(afterSelectionByProp.calls.count()).toBe(5);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.argsFor(1)).toEqual([2, 'prop1', 3, 'prop2', jasmine.any(Object), 1]);
    expect(afterSelectionByProp.calls.argsFor(2)).toEqual([7, 'prop7', 7, 'prop7', jasmine.any(Object), 2]);
    expect(afterSelectionByProp.calls.argsFor(3)).toEqual([8, 'prop4', 0, 'prop4', jasmine.any(Object), 3]);
    expect(afterSelectionByProp.calls.argsFor(4)).toEqual([2, 'prop4', 2, 'prop4', jasmine.any(Object), 4]);
    expect(afterSelectionEnd.calls.count()).toBe(5);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 2, 2, 4, 0, void 0]);
    expect(afterSelectionEnd.calls.argsFor(1)).toEqual([2, 1, 3, 2, 1, void 0]);
    expect(afterSelectionEnd.calls.argsFor(2)).toEqual([7, 7, 7, 7, 2, void 0]);
    expect(afterSelectionEnd.calls.argsFor(3)).toEqual([8, 4, 0, 4, 3, void 0]);
    expect(afterSelectionEnd.calls.argsFor(4)).toEqual([2, 4, 2, 4, 4, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(5);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop2', 2, 'prop4', 0, void 0]);
    expect(afterSelectionEndByProp.calls.argsFor(1)).toEqual([2, 'prop1', 3, 'prop2', 1, void 0]);
    expect(afterSelectionEndByProp.calls.argsFor(2)).toEqual([7, 'prop7', 7, 'prop7', 2, void 0]);
    expect(afterSelectionEndByProp.calls.argsFor(3)).toEqual([8, 'prop4', 0, 'prop4', 3, void 0]);
    expect(afterSelectionEndByProp.calls.argsFor(4)).toEqual([2, 'prop4', 2, 'prop4', 4, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(5);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(2);
    expect(beforeSetRangeStartOnly.calls.argsFor(1)[0].row).toBe(2);
    expect(beforeSetRangeStartOnly.calls.argsFor(1)[0].col).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(2)[0].row).toBe(7);
    expect(beforeSetRangeStartOnly.calls.argsFor(2)[0].col).toBe(7);
    expect(beforeSetRangeStartOnly.calls.argsFor(3)[0].row).toBe(8);
    expect(beforeSetRangeStartOnly.calls.argsFor(3)[0].col).toBe(4);
    expect(beforeSetRangeStartOnly.calls.argsFor(4)[0].row).toBe(2);
    expect(beforeSetRangeStartOnly.calls.argsFor(4)[0].col).toBe(4);
  });
});

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.selectColumns', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should mark single column visually (default selectionMode, without headers)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: false,
      rowHeaders: false
    });
    selectColumns(2);
    expect("\n      |   :   : A :   |\n      |   :   : 0 :   |\n      |   :   : 0 :   |\n      |   :   : 0 :   |\n      |   :   : 0 :   |\n      |   :   : 0 :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single column visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectColumns(2);
    expect("\n      |   \u2551   :   : * :   |\n      |===:===:===:===:===|\n      | - \u2551   :   : A :   |\n      | - \u2551   :   : 0 :   |\n      | - \u2551   :   : 0 :   |\n      | - \u2551   :   : 0 :   |\n      | - \u2551   :   : 0 :   |\n      | - \u2551   :   : 0 :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark non-contiquous selection when CTRL key is pressed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectColumns(2);
    keyDown('ctrl');
    selectColumns(0);
    expect("\n      |   \u2551 * :   : * :   |\n      |===:===:===:===:===|\n      | - \u2551 A :   : 0 :   |\n      | - \u2551 0 :   : 0 :   |\n      | - \u2551 0 :   : 0 :   |\n      | - \u2551 0 :   : 0 :   |\n      | - \u2551 0 :   : 0 :   |\n      | - \u2551 0 :   : 0 :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single column visually (default selectionMode, fixedColumnsLeft enabled)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true,
      fixedColumnsLeft: 2
    });
    selectColumns(1, 2);
    expect("\n      |   \u2551   : * | * :   |\n      |===:===:===:===:===|\n      | - \u2551   : A | 0 :   |\n      | - \u2551   : 0 | 0 :   |\n      | - \u2551   : 0 | 0 :   |\n      | - \u2551   : 0 | 0 :   |\n      | - \u2551   : 0 | 0 :   |\n      | - \u2551   : 0 | 0 :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single column visually (default selectionMode) using column property', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectColumns('prop2');
    expect("\n      |   \u2551   :   : * :   |\n      |===:===:===:===:===|\n      | - \u2551   :   : A :   |\n      | - \u2551   :   : 0 :   |\n      | - \u2551   :   : 0 :   |\n      | - \u2551   :   : 0 :   |\n      | - \u2551   :   : 0 :   |\n      | - \u2551   :   : 0 :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the columns visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectColumns(2, 3);
    expect("\n      |   \u2551   :   : * : * |\n      |===:===:===:===:===|\n      | - \u2551   :   : A : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the columns visually (default selectionMode, reversed selection)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectColumns(3, 2);
    expect("\n      |   \u2551   :   : * : * |\n      |===:===:===:===:===|\n      | - \u2551   :   : 0 : A |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the columns visually (default selectionMode) using column property', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectColumns('prop2', 'prop3');
    expect("\n      |   \u2551   :   : * : * |\n      |===:===:===:===:===|\n      | - \u2551   :   : A : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the columns visually (default selectionMode, reversed selection) using column property', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectColumns('prop3', 'prop2');
    expect("\n      |   \u2551   :   : * : * |\n      |===:===:===:===:===|\n      | - \u2551   :   : 0 : A |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      | - \u2551   :   : 0 : 0 |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark only single cell visually when selectionMode is set as `single', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true,
      selectionMode: 'single'
    });
    selectColumns(2);
    expect("\n      |   \u2551   :   : - :   |\n      |===:===:===:===:===|\n      | - \u2551   :   : # :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark the range of the columns visually when selectionMode is set as `range`', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true,
      selectionMode: 'range'
    });
    selectColumns(1, 2);
    expect("\n      |   \u2551   : * : * :   |\n      |===:===:===:===:===|\n      | - \u2551   : A : 0 :   |\n      | - \u2551   : 0 : 0 :   |\n      | - \u2551   : 0 : 0 :   |\n      | - \u2551   : 0 : 0 :   |\n      | - \u2551   : 0 : 0 :   |\n      | - \u2551   : 0 : 0 :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not deselect current selection when selectColumns is called without arguments', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    selectCell(1, 1); // Initial selection.

    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    selectColumns();
    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
  });
  it('should not deselect current selection when selectColumns is called with negative values', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectColumns(0, -1);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectColumns(-1, 0);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectColumns(-3, -1);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectColumns(-2);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when selectColumns is called with coordinates beyond the table data range', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(3, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectColumns(3, 4);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectColumns(0, 4);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectColumns(4);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectColumns(200);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when selectColumns is called with undefined column property', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectColumns(0, 'notExistProp');
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectColumns('notExistProp');
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should select only one column when two the same arguments are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectColumns(1, 1);
    expect(getSelected()).toEqual([[0, 1, 5, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select only one column when two the same arguments are passed (column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectColumns(1, 'prop1');
    expect(getSelected()).toEqual([[0, 1, 5, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of columns when the coordinates are passed in reversed order (from right to left)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectColumns(2, 1);
    expect(getSelected()).toEqual([[0, 2, 5, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of columns when the coordinates are passed in reversed order (from right to left using column property)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectColumns('prop2', 'prop1');
    expect(getSelected()).toEqual([[0, 2, 5, 1]]);
    expect(wasSelected).toBe(true);
  });
  it('should not the scroll the viewport when column is selected', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(15, 1); // Scroll to the bottom of the Hot viewport.

    var scrollTop = hot.view.wt.wtTable.holder.scrollTop;
    selectColumns(1);
    expect(hot.view.wt.wtTable.holder.scrollTop).toBe(scrollTop);
  });
  it('should fire hooks with proper context', function () {
    var _jasmine$createSpyObj = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj.beforeSetRangeEnd;

    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectColumns(1, 2);
    expect(afterSelection.calls.first().object).toBe(hot);
    expect(afterSelectionByProp.calls.first().object).toBe(hot);
    expect(afterSelectionEnd.calls.first().object).toBe(hot);
    expect(afterSelectionEndByProp.calls.first().object).toBe(hot);
    expect(beforeSetRangeStartOnly.calls.first().object).toBe(hot);
  });
  it('should fire hooks with proper arguments when a single column is selected', function () {
    var _jasmine$createSpyObj2 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj2.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj2.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj2.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj2.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj2.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj2.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj2.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectColumns(1);
    expect(afterSelection.calls.count()).toBe(1);
    expect(afterSelection.calls.argsFor(0)).toEqual([0, 1, 19, 1, jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.count()).toBe(1);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([0, 'prop1', 19, 'prop1', jasmine.any(Object), 0]);
    expect(afterSelectionEnd.calls.count()).toBe(1);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([0, 1, 19, 1, 0, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(1);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([0, 'prop1', 19, 'prop1', 0, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(0);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(1);
  });
  it('should fire hooks with proper arguments when range of the columns are selected', function () {
    var _jasmine$createSpyObj3 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj3.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj3.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj3.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj3.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj3.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj3.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj3.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectColumns(1, 2);
    expect(afterSelection.calls.count()).toBe(1);
    expect(afterSelection.calls.argsFor(0)).toEqual([0, 1, 19, 2, jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.count()).toBe(1);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([0, 'prop1', 19, 'prop2', jasmine.any(Object), 0]);
    expect(afterSelectionEnd.calls.count()).toBe(1);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([0, 1, 19, 2, 0, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(1);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([0, 'prop1', 19, 'prop2', 0, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(0);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(1);
  });
});

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.selectRows', function () {
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should mark single row visually (default selectionMode, without headers)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    selectRows(2);
    expect("\n      |   :   :   :   |\n      |   :   :   :   |\n      | A : 0 : 0 : 0 |\n      |   :   :   :   |\n      |   :   :   :   |\n      |   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark single row visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectRows(2);
    expect("\n      |   \u2551 - : - : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | * \u2551 A : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark non-contiquous selection when CTRL key is pressed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectRows(2);
    keyDown('ctrl');
    selectRows(0);
    expect("\n      |   \u2551 - : - : - : - |\n      |===:===:===:===:===|\n      | * \u2551 A : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      | * \u2551 0 : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the rows visually (default selectionMode)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectRows(2, 3);
    expect("\n      |   \u2551 - : - : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | * \u2551 A : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark range of the rows visually (default selectionMode, reversed selection)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true
    });
    selectRows(3, 2);
    expect("\n      |   \u2551 - : - : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | * \u2551 0 : 0 : 0 : 0 |\n      | * \u2551 A : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark only single cell visually when selectionMode is set as `single', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true,
      selectionMode: 'single'
    });
    selectRows(2);
    expect("\n      |   \u2551 - :   :   :   |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      | - \u2551 # :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should mark the range of the rows visually when selectionMode is set as `range`', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4),
      colHeaders: true,
      rowHeaders: true,
      selectionMode: 'range'
    });
    selectRows(1, 2);
    expect("\n      |   \u2551 - : - : - : - |\n      |===:===:===:===:===|\n      |   \u2551   :   :   :   |\n      | * \u2551 A : 0 : 0 : 0 |\n      | * \u2551 0 : 0 : 0 : 0 |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      |   \u2551   :   :   :   |\n      ").toBeMatchToSelectionPattern();
  });
  it('should not deselect current selection when selectRows is called without arguments', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    selectCell(1, 1); // Initial selection.

    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
    selectRows();
    expect(getSelected()).toEqual([[1, 1, 1, 1]]);
  });
  it('should not deselect current selection when selectRows is called with negative values', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectRows(0, -1);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectRows(-1, 0);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectRows(-3, -1);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectRows(-2);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when selectRows is called with coordinates beyond the table data range', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(3, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectRows(3, 4);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectRows(0, 4);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectRows(4);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectRows(200);
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should not deselect current selection when selectRows is called with undefined column property', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectCell(0, 0, 2, 2); // Initial selection.

    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(true);
    wasSelected = selectRows(0, 'notExistProp');
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
    wasSelected = selectRows('notExistProp');
    expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    expect(wasSelected).toBe(false);
  });
  it('should select only one row when two the same arguments are passed', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectRows(1, 1);
    expect(getSelected()).toEqual([[1, 0, 1, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should select range of rows when the coordinates are passed in reversed order (from right to left)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(6, 4)
    });
    var wasSelected = selectRows(2, 1);
    expect(getSelected()).toEqual([[2, 0, 1, 3]]);
    expect(wasSelected).toBe(true);
  });
  it('should not the scroll the viewport when row is selected', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300
    });
    selectCell(1, 15); // Scroll to the bottom of the Hot viewport.

    var scrollTop = hot.view.wt.wtTable.holder.scrollTop;
    selectRows(1);
    expect(hot.view.wt.wtTable.holder.scrollTop).toBe(scrollTop);
  });
  it('should fire hooks with proper context', function () {
    var _jasmine$createSpyObj = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj.beforeSetRangeEnd;

    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectRows(1, 2);
    expect(afterSelection.calls.first().object).toBe(hot);
    expect(afterSelectionByProp.calls.first().object).toBe(hot);
    expect(afterSelectionEnd.calls.first().object).toBe(hot);
    expect(afterSelectionEndByProp.calls.first().object).toBe(hot);
    expect(beforeSetRangeStartOnly.calls.first().object).toBe(hot);
  });
  it('should fire hooks with proper arguments when a single row is selected', function () {
    var _jasmine$createSpyObj2 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj2.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj2.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj2.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj2.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj2.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj2.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj2.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectRows(1);
    expect(afterSelection.calls.count()).toBe(1);
    expect(afterSelection.calls.argsFor(0)).toEqual([1, 0, 1, 19, jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.count()).toBe(1);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop0', 1, 'prop19', jasmine.any(Object), 0]);
    expect(afterSelectionEnd.calls.count()).toBe(1);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 0, 1, 19, 0, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(1);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop0', 1, 'prop19', 0, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(0);
  });
  it('should fire hooks with proper arguments when range of the columns are selected', function () {
    var _jasmine$createSpyObj3 = jasmine.createSpyObj('hooks', ['afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'beforeSetRangeStart', 'beforeSetRangeStartOnly', 'beforeSetRangeEnd']),
        afterSelection = _jasmine$createSpyObj3.afterSelection,
        afterSelectionByProp = _jasmine$createSpyObj3.afterSelectionByProp,
        afterSelectionEnd = _jasmine$createSpyObj3.afterSelectionEnd,
        afterSelectionEndByProp = _jasmine$createSpyObj3.afterSelectionEndByProp,
        beforeSetRangeStart = _jasmine$createSpyObj3.beforeSetRangeStart,
        beforeSetRangeStartOnly = _jasmine$createSpyObj3.beforeSetRangeStartOnly,
        beforeSetRangeEnd = _jasmine$createSpyObj3.beforeSetRangeEnd;

    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(20, 20),
      height: 300,
      width: 300,
      afterSelection: afterSelection,
      afterSelectionByProp: afterSelectionByProp,
      afterSelectionEnd: afterSelectionEnd,
      afterSelectionEndByProp: afterSelectionEndByProp,
      beforeSetRangeStart: beforeSetRangeStart,
      beforeSetRangeStartOnly: beforeSetRangeStartOnly,
      beforeSetRangeEnd: beforeSetRangeEnd
    });
    selectRows(1, 2);
    expect(afterSelection.calls.count()).toBe(1);
    expect(afterSelection.calls.argsFor(0)).toEqual([1, 0, 2, 19, jasmine.any(Object), 0]);
    expect(afterSelectionByProp.calls.count()).toBe(1);
    expect(afterSelectionByProp.calls.argsFor(0)).toEqual([1, 'prop0', 2, 'prop19', jasmine.any(Object), 0]);
    expect(afterSelectionEnd.calls.count()).toBe(1);
    expect(afterSelectionEnd.calls.argsFor(0)).toEqual([1, 0, 2, 19, 0, void 0]);
    expect(afterSelectionEndByProp.calls.count()).toBe(1);
    expect(afterSelectionEndByProp.calls.argsFor(0)).toEqual([1, 'prop0', 2, 'prop19', 0, void 0]);
    expect(beforeSetRangeStart.calls.count()).toBe(0);
    expect(beforeSetRangeStartOnly.calls.count()).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].row).toBe(1);
    expect(beforeSetRangeStartOnly.calls.argsFor(0)[0].col).toBe(0);
  });
});

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.setCellMeta', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should set correct meta className for cell', function () {
    var className = 'htCenter htMiddle';
    handsontable({
      afterCellMetaReset: function afterCellMetaReset() {
        this.setCellMeta(0, 0, 'className', className);
      }
    });
    var cellMeta = getCellMeta(0, 0);
    expect(cellMeta.className).not.toBeUndefined();
    expect(cellMeta.className).toEqual(className);
  });
  it('should set proper cell meta when indexes was modified', function () {
    handsontable({
      modifyRow: function modifyRow(row) {
        return row + 10;
      },
      modifyCol: function modifyCol(col) {
        return col + 10;
      }
    });
    setCellMeta(0, 1, 'key', 'value');
    expect(getCellMeta(0, 1).key).toEqual('value');
  });
  it('should set correct meta className for non existed cell', function () {
    var className = 'htCenter htMiddle';
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      afterCellMetaReset: function afterCellMetaReset() {
        this.setCellMeta(100, 100, 'className', className);
      }
    });
    var cellMeta = getCellMeta(100, 100);
    expect(cellMeta.className).not.toBeUndefined();
    expect(cellMeta.className).toEqual(className);
  });
  it('should set correct meta classNames for cells using cell in configuration', function () {
    var classNames = ['htCenter htTop', 'htRight htBottom'];
    handsontable({
      cell: [{
        row: 0,
        col: 0,
        className: classNames[0]
      }, {
        row: 1,
        col: 1,
        className: classNames[1]
      }]
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[0]);
    expect(spec().$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[1]);
  });
  it('should change cell meta data with updateSettings when the cell option is defined', function () {
    var classNames = ['htCenter htTop', 'htRight htBottom'];
    handsontable({
      cell: [{
        row: 0,
        col: 0,
        className: classNames[0]
      }, {
        row: 1,
        col: 1,
        className: classNames[1]
      }]
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[0]);
    expect(spec().$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[1]);
    updateSettings({
      cell: []
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual('');
    expect(spec().$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual('');
    updateSettings({
      cell: [{
        row: 0,
        col: 0,
        className: classNames[1]
      }, {
        row: 1,
        col: 1,
        className: classNames[0]
      }]
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[1]);
    expect(spec().$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[0]);
  });
  it('should call `afterSetCellMeta` plugin hook with visual indexes as parameters', function () {
    var className = 'htCenter htMiddle';
    var afterSetCellMeta = jasmine.createSpy('afterSetCellMeta');
    var hot = handsontable({
      afterSetCellMeta: afterSetCellMeta,
      modifyRow: function modifyRow(row) {
        return row + 10;
      },
      modifyCol: function modifyCol(col) {
        return col + 10;
      }
    });
    hot.setCellMeta(0, 1, 'className', className);
    expect(afterSetCellMeta).toHaveBeenCalledWith(0, 1, 'className', className, undefined, undefined);
  });
});

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.spliceCellsMeta', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should splice the cell meta array analogously to the native `splice` method', function () {
    handsontable();
    var allMeta = getCellsMeta();
    expect(allMeta.length).toBe(25);
    spliceCellsMeta(3, 1);
    allMeta = getCellsMeta();
    expect(allMeta.length).toBe(20);
    var metaAtRow = getCellMetaAtRow(2);
    expect(metaAtRow[0].row).toEqual(2);
    metaAtRow = getCellMetaAtRow(3);
    expect(metaAtRow[0].row).toEqual(4);
  });
});

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.spliceCol', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should remove from the second column three rows starting from the beginning', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5)
    });
    var removedData = hot.spliceCol(1, 0, 3);
    expect(removedData).toEqual(['B1', 'B2', 'B3']);
    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B4', 'C1', 'D1', 'E1']);
    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B5', 'C2', 'D2', 'E2']);
    expect(hot.getDataAtRow(2)).toEqual(['A3', null, 'C3', 'D3', 'E3']);
    expect(hot.getDataAtRow(3)).toEqual(['A4', null, 'C4', 'D4', 'E4']);
    expect(hot.getDataAtRow(4)).toEqual(['A5', null, 'C5', 'D5', 'E5']);
  });
  it('should remove from the third column three rows starting from the second row', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5)
    });
    var removedData = hot.spliceCol(2, 1, 3);
    expect(removedData).toEqual(['C2', 'C3', 'C4']);
    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);
    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B2', 'C5', 'D2', 'E2']);
    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', null, 'D3', 'E3']);
    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', null, 'D4', 'E4']);
    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', null, 'D5', 'E5']);
  });
  it('should replace and append new rows in the second column starting from the second row', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5)
    });
    var removedData = hot.spliceCol(1, 1, 3, 'X1', 'X2', 'X3', 'X4', 'X5');
    expect(removedData).toEqual(['B2', 'B3', 'B4']);
    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);
    expect(hot.getDataAtRow(1)).toEqual(['A2', 'X1', 'C2', 'D2', 'E2']);
    expect(hot.getDataAtRow(2)).toEqual(['A3', 'X2', 'C3', 'D3', 'E3']);
    expect(hot.getDataAtRow(3)).toEqual(['A4', 'X3', 'C4', 'D4', 'E4']);
    expect(hot.getDataAtRow(4)).toEqual(['A5', 'X4', 'C5', 'D5', 'E5']);
    expect(hot.getDataAtRow(5)).toEqual([null, 'X5', null, null, null]);
    expect(hot.getDataAtRow(6)).toEqual([null, 'B5', null, null, null]);
  });
  it('should trigger beforeChange and afterChange hook with proper arguments', function () {
    var spyAfter = jasmine.createSpy('after');
    var spyBefore = jasmine.createSpy('before');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      beforeChange: spyBefore,
      afterChange: spyAfter
    });
    hot.spliceCol(2, 1, 3, 'X1');
    expect(spyBefore.calls.argsFor(0)[0]).toEqual([[1, 2, 'C2', 'X1'], [2, 2, 'C3', 'C5'], [3, 2, 'C4', null], [4, 2, 'C5', null], [5, 2, null, null]]);
    expect(spyBefore.calls.argsFor(0)[1]).toBe('spliceCol');
    expect(spyAfter.calls.argsFor(1)[0]).toEqual([[1, 2, 'C2', 'X1'], [2, 2, 'C3', 'C5'], [3, 2, 'C4', null], [4, 2, 'C5', null], [5, 2, null, null]]);
    expect(spyAfter.calls.argsFor(1)[1]).toBe('spliceCol');
  });
  it('should trigger beforeCreateRow and afterCreateRow hook with proper arguments', function () {
    var spyAfter = jasmine.createSpy('after');
    var spyBefore = jasmine.createSpy('before');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      beforeCreateRow: spyBefore,
      afterCreateRow: spyAfter
    });
    hot.spliceCol(2, 1, 3, 'X1', 'X2', 'X3', 'X4');
    expect(spyBefore).toHaveBeenCalledWith(5, 1, 'spliceCol', undefined, undefined, undefined);
    expect(spyAfter).toHaveBeenCalledWith(5, 1, 'spliceCol', undefined, undefined, undefined);
  });
});

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.spliceRow', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should remove from the second row three columns starting from the beginning', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5)
    });
    var removedData = hot.spliceRow(1, 0, 3);
    expect(removedData).toEqual(['A2', 'B2', 'C2']);
    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);
    expect(hot.getDataAtRow(1)).toEqual(['D2', 'E2', null, null, null]);
    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', 'C3', 'D3', 'E3']);
    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4']);
    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5']);
  });
  it('should remove from the third row three columns starting from the second column', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5)
    });
    var removedData = hot.spliceRow(2, 1, 3);
    expect(removedData).toEqual(['B3', 'C3', 'D3']);
    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);
    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B2', 'C2', 'D2', 'E2']);
    expect(hot.getDataAtRow(2)).toEqual(['A3', 'E3', null, null, null]);
    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4']);
    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5']);
  });
  it('should replace and append new columns in the second row starting from the second column', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5)
    });
    var removedData = hot.spliceRow(1, 1, 3, 'X1', 'X2', 'X3', 'X4', 'X5');
    expect(removedData).toEqual(['B2', 'C2', 'D2']);
    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', null, null]);
    expect(hot.getDataAtRow(1)).toEqual(['A2', 'X1', 'X2', 'X3', 'X4', 'X5', 'E2']);
    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', 'C3', 'D3', 'E3', null, null]);
    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4', null, null]);
    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5', null, null]);
  });
  it('should trigger beforeChange and afterChange hook with proper arguments', function () {
    var spyAfter = jasmine.createSpy('after');
    var spyBefore = jasmine.createSpy('before');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      beforeChange: spyBefore,
      afterChange: spyAfter
    });
    hot.spliceRow(2, 1, 3, 'X1');
    expect(spyBefore.calls.argsFor(0)[0]).toEqual([[2, 1, 'B3', 'X1'], [2, 2, 'C3', 'E3'], [2, 3, 'D3', null], [2, 4, 'E3', null], [2, 5, undefined, null]]);
    expect(spyBefore.calls.argsFor(0)[1]).toBe('spliceRow');
    expect(spyAfter.calls.argsFor(1)[0]).toEqual([[2, 1, 'B3', 'X1'], [2, 2, 'C3', 'E3'], [2, 3, 'D3', null], [2, 4, 'E3', null], [2, 5, undefined, null]]);
    expect(spyAfter.calls.argsFor(1)[1]).toBe('spliceRow');
  });
  it('should trigger beforeCreateCol and afterCreateCol hook with proper arguments', function () {
    var spyAfter = jasmine.createSpy('after');
    var spyBefore = jasmine.createSpy('before');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      beforeCreateCol: spyBefore,
      afterCreateCol: spyAfter
    });
    hot.spliceRow(2, 1, 3, 'X1', 'X2', 'X3', 'X4');
    expect(spyBefore).toHaveBeenCalledWith(5, 1, 'spliceRow', undefined, undefined, undefined);
    expect(spyAfter).toHaveBeenCalledWith(5, 1, 'spliceRow', undefined, undefined, undefined);
  });
});

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.toPhysicalColumn', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid physical row index', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 10),
      modifyCol: function modifyCol(column) {
        return column + 3;
      }
    });
    expect(hot.toPhysicalColumn(0)).toBe(3);
    expect(hot.toPhysicalColumn(1)).toBe(4);
    expect(hot.toPhysicalColumn(2)).toBe(5);
  });
});

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.toPhysicalRow', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid physical row index', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 10),
      modifyRow: function modifyRow(row) {
        return row + 3;
      }
    });
    expect(hot.toPhysicalRow(0)).toBe(3);
    expect(hot.toPhysicalRow(1)).toBe(4);
    expect(hot.toPhysicalRow(2)).toBe(5);
  });
});

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.toVisualColumn', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid visual row index', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 10),
      unmodifyCol: function unmodifyCol(column) {
        return column + 3;
      }
    });
    expect(hot.toVisualColumn(0)).toBe(3);
    expect(hot.toVisualColumn(1)).toBe(4);
    expect(hot.toVisualColumn(2)).toBe(5);
  });
});

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Core.toVisualRow', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should return valid visual row index', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 10),
      unmodifyRow: function unmodifyRow(row) {
        return row + 3;
      }
    });
    expect(hot.toVisualRow(0)).toBe(3);
    expect(hot.toVisualRow(1)).toBe(4);
    expect(hot.toVisualRow(2)).toBe(5);
  });
});

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('AutocompleteEditor', function () {
  var id = 'testContainer';
  var choices = ['yellow', 'red', 'orange', 'green', 'blue', 'gray', 'black', 'white', 'purple', 'lime', 'olive', 'cyan'];
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\" style=\"width: 300px; height: 200px; overflow: auto\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('open editor', function () {
    it('should display editor (after hitting ENTER)', function () {
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      expect(isEditorVisible()).toBe(false);
      keyDownUp('enter');
      expect(isEditorVisible()).toBe(true);
    });
    it('should display editor (after hitting F2)', function () {
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      expect(isEditorVisible()).toBe(false);
      keyDownUp('f2');
      expect(isEditorVisible()).toBe(true);
    });
    it('should display editor (after doubleclicking)', function () {
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      expect(isEditorVisible()).toBe(false);
      mouseDoubleClick($(getCell(0, 0)));
      expect(isEditorVisible()).toBe(true);
    }); // see https://github.com/handsontable/handsontable/issues/3380

    it('should not throw error while selecting the next cell by hitting enter key', function () {
      var spy = jasmine.createSpyObj('error', ['test']);
      var prevError = window.onerror;

      window.onerror = function () {
        spy.test();
      };

      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      keyDownUp('enter');
      keyDownUp('enter');
      expect(spy.test.calls.count()).toBe(0);
      window.onerror = prevError;
    });
  });
  describe('choices', function () {
    it('should display given choices (array)', function (done) {
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      var editor = $('.autocompleteEditor');
      keyDownUp('enter');
      setTimeout(function () {
        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);
        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);
        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);
        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);
        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);
        done();
      }, 100);
    });
    it('should call source function with context set as cellProperties', function (done) {
      var source = jasmine.createSpy('source');
      var context;
      source.and.callFake(function (query, process) {
        process(choices);
        context = this;
      });
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: source
        }]
      });
      selectCell(0, 0);
      source.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        expect(context.instance).toBe(hot);
        expect(context.row).toBe(0);
        expect(context.col).toBe(0);
        done();
      }, 200);
    });
    it('should display given choices (sync function)', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      var editor = $('.autocompleteEditor');
      syncSources.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);
        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);
        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);
        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);
        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);
        done();
      }, 200);
    });
    it('should display given choices (async function)', function (done) {
      var asyncSources = jasmine.createSpy('asyncSources');
      asyncSources.and.callFake(function (process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: function source(query, process) {
            setTimeout(function () {
              asyncSources(process);
            }, 0);
          }
        }]
      });
      selectCell(0, 0);
      var editor = $('.autocompleteEditor');
      keyDownUp('enter');
      setTimeout(function () {
        expect(asyncSources.calls.count()).toEqual(1);
        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);
        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);
        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);
        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);
        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);
        done();
      }, 200);
    });
    it('should NOT update choices list, after cursor leaves and enters the list (#1330)', function (done) {
      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();
      var updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      var editor = hot.getActiveEditor();
      keyDownUp('enter');
      setTimeout(function () {
        updateChoicesList.calls.reset();
        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseenter();
        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseleave();
        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseenter();
      }, 200);
      setTimeout(function () {
        expect(updateChoicesList).not.toHaveBeenCalled();
        done();
      }, 300);
    });
    it('should update choices list exactly once after a key is pressed (#1330)', function (done) {
      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();
      var updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      var editor = hot.getActiveEditor();
      updateChoicesList.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        updateChoicesList.calls.reset();
        editor.TEXTAREA.value = 'red';
        $(editor.TEXTAREA).simulate('keydown', {
          keyCode: 'd'.charCodeAt(0)
        });
      }, 200);
      setTimeout(function () {
        expect(updateChoicesList.calls.count()).toEqual(1);
        done();
      }, 100);
    });
    it('should not initialize the dropdown with unneeded scrollbars (scrollbar causing a scrollbar issue)', function (done) {
      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();
      var updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;
      var hot = handsontable({
        data: [['blue'], [], [], []],
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      var editor = hot.getActiveEditor();
      updateChoicesList.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        expect(editor.htContainer.scrollWidth).toEqual(editor.htContainer.clientWidth);
        done();
      }, 200);
    });
    it('autocomplete list should have textarea dimensions', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        colWidths: [200],
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      var editor = $('.handsontableInputHolder');
      syncSources.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        // -2 for transparent borders
        expect(editor.find('.autocompleteEditor .htCore td').width()).toEqual(editor.find('.handsontableInput').width() - 2);
        expect(editor.find('.autocompleteEditor .htCore td').width()).toBeGreaterThan(187);
        done();
      }, 200);
    });
    it('autocomplete list should have the suggestion table dimensions, when trimDropdown option is set to false', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(['long text', 'even longer text', 'extremely long text in the suggestion list', 'short text', 'text', 'another', 'yellow', 'black']);
      });
      handsontable({
        colWidths: [200],
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }],
        trimDropdown: false
      });
      selectCell(0, 0);
      var editor = $('.handsontableInputHolder');
      syncSources.calls.reset();
      keyDownUp('enter');
      setTimeout(function () {
        expect(editor.find('.autocompleteEditor .htCore td').eq(0).width()).toBeGreaterThan(editor.find('.handsontableInput').width());
        done();
      }, 200);
    }); // TODO: This test never properly tests the case of refreshing editor after re-render the table. Previously this
    // test passes because sleep timeout was small enough to read the valid width before the editor element was resized.
    // Related issue #5103

    xit('autocomplete textarea should have cell dimensions (after render)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var data = [['a', 'b'], ['c', 'd']];
      handsontable({
        data: data,
        minRows: 4,
        minCols: 4,
        minSpareRows: 4,
        minSpareCols: 4,
        cells: function cells() {
          return {
            type: Handsontable.AutocompleteCell
          };
        }
      });
      selectCell(1, 1);
      keyDownUp('enter');
      yield sleep(10);
      data[1][1] = 'dddddddddddddddddddd';
      render();
      yield sleep(10);
      var $td = spec().$container.find('.htCore tbody tr:eq(1) td:eq(1)');
      expect(autocompleteEditor().width()).toEqual($td.width());
    }));
    it('should invoke beginEditing only once after doubleclicking on a cell (#1011)', function () {
      var hot = handsontable({
        columns: [{}, {}, {
          type: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 2);
      spyOn(hot.getActiveEditor(), 'beginEditing');
      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(0);
      mouseDoubleClick(getCell(0, 2));
      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(1);
      mouseDoubleClick(getCell(1, 2));
      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(2);
      mouseDoubleClick(getCell(2, 2));
      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(3);
    });
    it('should not display all the choices from a long source list and not leave any unused space in the dropdown',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        columns: [{
          type: 'autocomplete',
          source: ['Acura', 'Audi', 'BMW', 'Buick', 'Cadillac', 'Chevrolet', 'Chrysler', 'Citroen', 'Dodge', 'Eagle', 'Ferrari', 'Ford', 'General Motors', 'GMC', 'Honda', 'Hummer', 'Hyundai', 'Infiniti', 'Isuzu', 'Jaguar', 'Jeep', 'Kia', 'Lamborghini', 'Land Rover', 'Lexus', 'Lincoln', 'Lotus', 'Mazda', 'Mercedes-Benz', 'Mercury', 'Mitsubishi', 'Nissan', 'Oldsmobile', 'Peugeot', 'Pontiac', 'Porsche', 'Regal', 'Renault', 'Saab', 'Saturn', 'Seat', 'Skoda', 'Subaru', 'Suzuki', 'Toyota', 'Volkswagen', 'Volvo']
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      var $autocomplete = autocomplete();
      var $autocompleteHolder = $autocomplete.find('.ht_master .wtHolder').first();
      yield sleep(100);
      expect($autocomplete.find('td').first().text()).toEqual('Acura');
      $autocompleteHolder.scrollTop($autocompleteHolder[0].scrollHeight);
      yield sleep(100);
      expect($autocomplete.find('td').last().text()).toEqual('Volvo');
    }));
    it('should display the choices, regardless if they\'re declared as string or numeric', function (done) {
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: ['1', '2', 3, '4', 5, 6]
        }]
      });
      selectCell(0, 0);
      var editor = $('.autocompleteEditor');
      keyDownUp('enter');
      setTimeout(function () {
        expect(editor.find('tbody td:eq(0)').text()).toEqual('1');
        expect(editor.find('tbody td:eq(1)').text()).toEqual('2');
        expect(editor.find('tbody td:eq(2)').text()).toEqual('3');
        expect(editor.find('tbody td:eq(3)').text()).toEqual('4');
        expect(editor.find('tbody td:eq(4)').text()).toEqual('5');
        expect(editor.find('tbody td:eq(5)').text()).toEqual('6');
        done();
      }, 100);
    });
    it('should display the choices, regardless if they\'re declared as string or numeric, when data is present', function (done) {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 1),
        columns: [{
          editor: 'autocomplete',
          source: ['1', '2', 3, '4', 5, 6]
        }]
      });
      selectCell(0, 0);
      keyDownUp('backspace');
      var editor = $('.autocompleteEditor');
      keyDownUp('enter');
      setTimeout(function () {
        expect(editor.find('tbody td:eq(0)').text()).toEqual('1');
        expect(editor.find('tbody td:eq(1)').text()).toEqual('2');
        expect(editor.find('tbody td:eq(2)').text()).toEqual('3');
        expect(editor.find('tbody td:eq(3)').text()).toEqual('4');
        expect(editor.find('tbody td:eq(4)').text()).toEqual('5');
        expect(editor.find('tbody td:eq(5)').text()).toEqual('6');
        done();
      }, 100);
    });
    it('should display the dropdown above the editor, when there is not enough space below the cell AND there is more space above the cell', function (done) {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        columns: [{
          editor: 'autocomplete',
          source: choices
        }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}],
        width: 400,
        height: 400
      });
      setDataAtCell(29, 0, '');
      selectCell(29, 0);
      mouseDoubleClick($(getCell(29, 0)));
      setTimeout(function () {
        var autocompleteEditor = $('.autocompleteEditor');
        expect(autocompleteEditor.css('position')).toEqual('absolute');
        expect(autocompleteEditor.css('top')).toEqual("".concat(-1 * autocompleteEditor.height(), "px"));
        done();
      }, 200);
    });
    it('should flip the dropdown upwards when there is no more room left below the cell after filtering the choice list',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        columns: [{
          editor: 'autocomplete',
          source: choices
        }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}],
        width: 400,
        height: 400
      });
      setDataAtCell(26, 0, 'b');
      selectCell(26, 0);
      hot.view.wt.wtTable.holder.scrollTop = 999;
      mouseDoubleClick($(getCell(26, 0)));
      var autocompleteEditor = $('.autocompleteEditor');
      yield sleep(100);
      expect(autocompleteEditor.css('position')).toEqual('relative');
      autocompleteEditor.siblings('textarea').first().val('');
      keyDownUp('backspace');
      yield sleep(100);
      expect(autocompleteEditor.css('position')).toEqual('absolute');
      expect(autocompleteEditor.css('top')).toEqual("".concat(-1 * autocompleteEditor.height(), "px"));
    }));
  });
  describe('closing editor', function () {
    it('should destroy editor when value change with mouse click on suggestion', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        autocomplete().find('tbody td:eq(3)').simulate('mousedown');
        expect(getDataAtCell(0, 0)).toEqual('green');
        done();
      }, 200);
    });
    it('should not change value type from `numeric` to `string` after mouse click suggestion - ' + 'test no. 1 #4143', function (done) {
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: [1, 2, 3, 4, 5, 11, 14]
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        autocomplete().find('tbody td:eq(0)').simulate('mousedown');
        expect(_typeof(getDataAtCell(0, 0))).toEqual('number');
        done();
      }, 200);
    });
    it('should not change value type from `numeric` to `string` after mouse click on suggestion - ' + 'test no. 2 #4143', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      var source = [1, 2, 3, 4, 5, 11, 14];
      syncSources.and.callFake(function (query, process) {
        process(source);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        autocomplete().find('tbody td:eq(0)').simulate('mousedown');
        expect(_typeof(getDataAtCell(0, 0))).toEqual('number');
        done();
      }, 200);
    });
    it('should call `afterChange` hook with proper value types - test no. 1 #4143', function (done) {
      var changesInside;

      var afterChange = function afterChange(changes, source) {
        if (source !== 'loadData') {
          changesInside = changes;
        }
      };

      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: [1, 2, 3, 4, 5, 11, 14]
        }],
        afterChange: afterChange
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        autocomplete().find('tbody td:eq(1)').simulate('mousedown');
        expect(changesInside[0]).toEqual([0, 0, null, 2]);
        done();
      }, 200);
    });
    it('should call `afterChange` hook with proper value types - test no. 2 #4143', function (done) {
      var changesInside;

      var afterChange = function afterChange(changes, source) {
        if (source !== 'loadData') {
          changesInside = changes;
        }
      };

      var syncSources = jasmine.createSpy('syncSources');
      var source = [1, 2, 3, 4, 5, 11, 14];
      syncSources.and.callFake(function (query, process) {
        process(source);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }],
        afterChange: afterChange
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        autocomplete().find('tbody td:eq(1)').simulate('mousedown');
        expect(changesInside[0]).toEqual([0, 0, null, 2]);
        done();
      }, 200);
    });
    it('should not change value type from `numeric` to `string` when written down value from set of suggestions #4143', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      var source = [1, 2, 3, 4, 5, 11, 14];
      syncSources.and.callFake(function (query, process) {
        process(source);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      keyDownUp('backspace');
      document.activeElement.value = '1';
      $(document.activeElement).simulate('keyup');
      setTimeout(function () {
        keyDownUp('enter');
        expect(getDataAtCell(0, 0)).toEqual(1);
        done();
      }, 200);
    });
    it('should destroy editor when value change with Enter on suggestion', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('enter');
        expect(getDataAtCell(0, 0)).toEqual('green');
        done();
      }, 200);
    });
    it('should destroy editor when pressed Enter then Esc',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      yield sleep(200);
      expect(isEditorVisible(autocompleteEditor())).toBe(true);
      keyDownUp('esc');
      expect(isEditorVisible(autocompleteEditor())).toBe(false);
    }));
    it('should destroy editor when mouse double clicked then Esc',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      mouseDoubleClick(getCell(0, 0));
      yield sleep(200);
      expect(isEditorVisible(autocompleteEditor())).toBe(true);
      keyDownUp('esc');
      expect(isEditorVisible(autocompleteEditor())).toBe(false);
    }));
    it('cancel editing (Esc) should restore the previous value', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      setDataAtCell(0, 0, 'black');
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        autocomplete().siblings('.handsontableInput').val('ye');
        keyDownUp(69); // e

        keyDownUp('esc');
        expect(getDataAtCell(0, 0)).toEqual('black');
        done();
      }, 200);
    });
    it('should destroy editor when clicked outside the table',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      mouseDoubleClick(getCell(0, 0));
      yield sleep(200);
      expect(isEditorVisible(autocompleteEditor())).toBe(true);
      $('body').simulate('mousedown');
      expect(isEditorVisible(autocompleteEditor())).toBe(false);
    }));
    it('should show fillHandle element again after close editor', function (done) {
      var syncSources = jasmine.createSpy('syncSources');

      syncSources.plan = function (query, process) {
        process(choices.filter(function (choice) {
          return choice.indexOf(query) !== -1;
        }));
      };

      handsontable({
        columns: [{
          type: 'autocomplete',
          source: syncSources,
          strict: false
        }, {}]
      });
      selectCell(1, 0);
      keyDownUp('x'); // Trigger quick edit mode

      keyDownUp('enter');
      setTimeout(function () {
        expect($('#testContainer.handsontable > .handsontable .wtBorder.current.corner:visible').length).toEqual(1);
        done();
      }, 200);
    });
  });
  describe('non strict mode', function () {
    it('should allow any value in non strict mode (close editor with ENTER)', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        var editor = $('.handsontableInput');
        editor.val('foo');
        keyDownUp('enter');
        expect(getDataAtCell(0, 0)).toEqual('foo');
        done();
      }, 200);
    });
    it('should allow any value in non strict mode (close editor by clicking on table)', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        var editor = $('.handsontableInput');
        editor.val('foo');
        spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mousedown');
        expect(getDataAtCell(0, 0)).toEqual('foo');
        done();
      }, 200);
    });
    it('should save the value from textarea after hitting ENTER', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices.filter(function (choice) {
          return choice.indexOf(query) !== -1;
        }));
      });
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        syncSources.calls.reset();
        editorInput.val('b');
        keyDownUp('b'.charCodeAt(0));
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['blue'], ['black']]);
        var selected = innerHot.getSelected();
        expect(selected).toBeUndefined();
        keyDownUp('enter');
        expect(getDataAtCell(0, 0)).toEqual('b');
        done();
      }, 400);
    });
  });
  describe('strict mode', function () {
    it('strict mode should NOT use value if it DOES NOT match the list (sync reponse is empty)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      var onAfterChange = jasmine.createSpy('onAfterChange');
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process([]); // hardcoded empty result
      });
      handsontable({
        data: [['one', 'two'], ['three', 'four']],
        columns: [{
          type: 'autocomplete',
          source: syncSources,
          allowInvalid: false,
          strict: true
        }, {}],
        afterValidate: onAfterValidate,
        afterChange: onAfterChange
      });
      setDataAtCell(0, 0, 'unexistent');
      setTimeout(function () {
        expect(getData()).toEqual([['one', 'two'], ['three', 'four']]);
        expect(syncSources.calls.count()).toEqual(1);
        expect(onAfterValidate.calls.count()).toEqual(1);
        expect(onAfterChange.calls.count()).toEqual(1); // 1 for loadData (it is not called after failed edit)

        done();
      }, 200);
    });
    it('strict mode should use value if it DOES match the list (sync reponse is not empty)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      var onAfterChange = jasmine.createSpy('onAfterChange');
      var syncSources = jasmine.createSpy('asyncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices); // hardcoded empty result
      });
      handsontable({
        data: [['one', 'two'], ['three', 'four']],
        columns: [{
          type: 'autocomplete',
          source: syncSources,
          allowInvalid: false,
          strict: true
        }, {}],
        afterValidate: onAfterValidate,
        afterChange: onAfterChange
      });
      setDataAtCell(0, 0, 'yellow');
      setTimeout(function () {
        expect(getData()).toEqual([['yellow', 'two'], ['three', 'four']]);
        expect(syncSources.calls.count()).toEqual(1);
        expect(onAfterValidate.calls.count()).toEqual(1);
        expect(onAfterChange.calls.count()).toEqual(2); // 1 for loadData and 1 for setDataAtCell

        done();
      }, 200);
    });
    it('strict mode should NOT use value if it DOES NOT match the list (async reponse is empty)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      var onAfterChange = jasmine.createSpy('onAfterChange');
      var asyncSources = jasmine.createSpy('asyncSources');
      asyncSources.and.callFake(function (query, process) {
        setTimeout(function () {
          process([]); // hardcoded empty result
        });
      });
      handsontable({
        data: [['one', 'two'], ['three', 'four']],
        columns: [{
          type: 'autocomplete',
          source: asyncSources,
          allowInvalid: false,
          strict: true
        }, {}],
        afterValidate: onAfterValidate,
        afterChange: onAfterChange
      });
      setDataAtCell(0, 0, 'unexistent');
      setTimeout(function () {
        expect(getData()).toEqual([['one', 'two'], ['three', 'four']]);
        expect(asyncSources.calls.count()).toEqual(1);
        expect(onAfterValidate.calls.count()).toEqual(1);
        expect(onAfterChange.calls.count()).toEqual(1); // 1 for loadData (it is not called after failed edit)

        done();
      }, 200);
    });
    it('strict mode should use value if it DOES match the list (async reponse is not empty)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      var onAfterChange = jasmine.createSpy('onAfterChange');
      var asyncSources = jasmine.createSpy('asyncSources');
      asyncSources.and.callFake(function (query, process) {
        setTimeout(function () {
          process(choices); // hardcoded empty result
        });
      });
      handsontable({
        data: [['one', 'two'], ['three', 'four']],
        columns: [{
          type: 'autocomplete',
          source: asyncSources,
          allowInvalid: false,
          strict: true
        }, {}],
        afterValidate: onAfterValidate,
        afterChange: onAfterChange
      });
      setDataAtCell(0, 0, 'yellow');
      setTimeout(function () {
        expect(getData()).toEqual([['yellow', 'two'], ['three', 'four']]);
        expect(asyncSources.calls.count()).toEqual(1);
        expect(onAfterValidate.calls.count()).toEqual(1);
        expect(onAfterChange.calls.count()).toEqual(2); // 1 for loadData and 1 for setDataAtCell

        done();
      }, 200);
    });
    it('strict mode mark value as invalid if it DOES NOT match the list (sync reponse is empty)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      var onAfterChange = jasmine.createSpy('onAfterChange');
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process([]); // hardcoded empty result
      });
      handsontable({
        data: [['one', 'two'], ['three', 'four']],
        columns: [{
          type: 'autocomplete',
          source: syncSources,
          allowInvalid: true,
          strict: true
        }, {}],
        afterValidate: onAfterValidate,
        afterChange: onAfterChange
      });
      expect(getCellMeta(0, 0).valid).not.toBe(false);
      expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(false);
      setDataAtCell(0, 0, 'unexistent');
      setTimeout(function () {
        expect(getData()).toEqual([['unexistent', 'two'], ['three', 'four']]);
        expect(getCellMeta(0, 0).valid).toBe(false);
        expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(true);
        done();
      }, 200);
    });
    it('should select the best matching option after hitting ENTER', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices.filter(function (choice) {
          return choice.indexOf(query) !== -1;
        }));
      });
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources,
          strict: true
        }],
        afterValidate: onAfterValidate
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        syncSources.calls.reset();
        editorInput.val('b');
        keyDownUp('b'.charCodeAt(0));
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['blue'], ['black']]);
        var selected = innerHot.getSelected()[0];
        var selectedData = innerHot.getDataAtCell(selected[0], selected[1]);
        expect(selectedData).toEqual('blue');
        onAfterValidate.calls.reset();
        keyDownUp('enter');
      }, 400);
      setTimeout(function () {
        expect(getDataAtCell(0, 0)).toEqual('blue');
        done();
      }, 600);
    });
    it('should select the best matching option after hitting TAB', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices.filter(function (choice) {
          return choice.indexOf(query) !== -1;
        }));
      });
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources,
          strict: true
        }],
        afterValidate: onAfterValidate
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        syncSources.calls.reset();
        editorInput.val('b');
        keyDownUp('b'.charCodeAt(0));
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['blue'], ['black']]);
        var selected = innerHot.getSelected()[0];
        var selectedData = innerHot.getDataAtCell(selected[0], selected[1]);
        expect(selectedData).toEqual('blue');
        onAfterValidate.calls.reset();
        keyDownUp('tab');
      }, 400);
      setTimeout(function () {
        expect(getDataAtCell(0, 0)).toEqual('blue');
        done();
      }, 600);
    });
    it('should mark list item corresponding to current cell value as selected', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);
      });
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources,
          strict: true
        }],
        data: [['yellow'], ['red'], ['blue']]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      setTimeout(function () {
        expect(autocomplete().find('.current').text()).toEqual(getDataAtCell(0, 0));
        done();
      }, 200);
    });
  });
  describe('filtering', function () {
    it('typing in textarea should filter the lookup list', function (done) {
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choices.filter(function (choice) {
          return choice.indexOf(query) !== -1;
        }));
      });
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        syncSources.calls.reset();
        editorInput.val('e');
        keyDownUp(69); // e
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['red'], ['yellow'], ['green'], ['blue'], ['lime'], ['white'], ['olive'], ['orange'], ['purple']]);
        syncSources.calls.reset();
        editorInput.val('ed');
        keyDownUp(68); // d
      }, 400);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['red']]);
        done();
      }, 600);
    });
    it('default filtering should be case insensitive', function (done) {
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      editorInput.val('e');
      keyDownUp(69); // e

      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['red'], ['yellow'], ['green'], ['blue'], ['lime'], ['white'], ['olive'], ['orange'], ['purple']]);
        editorInput.val('e');
        keyDownUp(69); // E (same as 'e')
      }, 50);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['red'], ['yellow'], ['green'], ['blue'], ['lime'], ['white'], ['olive'], ['orange'], ['purple']]);
        done();
      }, 100);
    });
    it('default filtering should be case sensitive when filteringCaseSensitive is false', function (done) {
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices,
          filteringCaseSensitive: true
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      editorInput.val('e');
      keyDownUp(69); // e

      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['red'], ['yellow'], ['green'], ['blue'], ['lime'], ['white'], ['olive'], ['orange'], ['purple']]);
        editorInput.val('E');
        keyDownUp(69); // E (same as 'e')
      }, 50);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([]);
        expect(innerHot.getSourceData()).toEqual([]);
        done();
      }, 200);
    });
    it('typing in textarea should NOT filter the lookup list when filtering is disabled', function (done) {
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices,
          filter: false
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        editorInput.val('e');
        keyDownUp('e'.charCodeAt(0)); // e
      }, 20);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual(Handsontable.helper.pivot([choices]));
        editorInput.val('ed');
        keyDownUp('d'.charCodeAt(0)); // d
      }, 40);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual(Handsontable.helper.pivot([choices]));
        done();
      }, 60);
    });
    it('typing in textarea should highlight the matching phrase', function (done) {
      var choicesList = ['Male', 'Female'];
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choicesList.filter(function (choice) {
          return choice.search(new RegExp(query, 'i')) !== -1;
        }));
      });
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources,
          filter: false
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        syncSources.calls.reset();
        editorInput.val('Male');
        keyDownUp(69); // e
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        var autocompleteList = $(innerHot.rootElement);
        expect(autocompleteList.find('td:eq(0)').html()).toMatch(/<(strong|STRONG)>Male<\/(strong|STRONG)>/); // IE8 makes the tag names UPPERCASE

        expect(autocompleteList.find('td:eq(1)').html()).toMatch(/Fe<(strong|STRONG)>male<\/(strong|STRONG)>/);
        done();
      }, 400);
    });
    it('text in textarea should not be interpreted as regexp', function (done) {
      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'queryChoices').and.callThrough();
      var queryChoices = Handsontable.editors.AutocompleteEditor.prototype.queryChoices;
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        queryChoices.calls.reset();
        editorInput.val('yellow|red');
        keyDownUp('d'.charCodeAt(0));
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData().length).toEqual(0);
        done();
      }, 400);
    });
    it('text in textarea should not be interpreted as regexp when highlighting the matching phrase', function (done) {
      var choicesList = ['Male', 'Female'];
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choicesList.filter(function (choice) {
          return choice.search(new RegExp(query, 'i')) !== -1;
        }));
      });
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources,
          filter: false
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        syncSources.calls.reset();
        editorInput.val('M|F');
        keyDownUp('F'.charCodeAt(0));
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        var autocompleteList = $(innerHot.rootElement);
        expect(autocompleteList.find('td:eq(0)').html()).toEqual('Male');
        expect(autocompleteList.find('td:eq(1)').html()).toEqual('Female');
        done();
      }, 400);
    });
    it('should allow any value if filter === false and allowInvalid === true', function (done) {
      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'queryChoices').and.callThrough();
      var queryChoices = Handsontable.editors.AutocompleteEditor.prototype.queryChoices;
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices,
          filter: false,
          strict: true,
          allowInvalid: true
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        queryChoices.calls.reset();
        editorInput.val('foobar');
        keyDownUp(82); // r
      }, 200);
      setTimeout(function () {
        keyDownUp(Handsontable.helper.KEY_CODES.ENTER);
        expect(getDataAtCell(0, 0)).toEqual('foobar');
        done();
      }, 400);
    });
    it('typing in textarea should highlight best choice, if strict === true', function (done) {
      var choicesList = ['Male', 'Female'];
      var syncSources = jasmine.createSpy('syncSources');
      syncSources.and.callFake(function (query, process) {
        process(choicesList.filter(function (choice) {
          return choice.search(new RegExp(query, 'i')) !== -1;
        }));
      });
      var hot = handsontable({
        columns: [{
          editor: 'autocomplete',
          source: syncSources,
          filter: false,
          strict: true
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        syncSources.calls.reset();
        editorInput.val('e');
        keyDownUp(69); // e
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getSelected()).toEqual([[1, 0, 1, 0]]);
        done();
      }, 400);
    });
  });
  it('should restore the old value when hovered over a autocomplete menu item and then clicked outside of the table', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices);
    });
    handsontable({
      columns: [{
        editor: 'autocomplete',
        source: syncSources
      }]
    });
    selectCell(0, 0);
    expect(getDataAtCell(0, 0)).toBeNull();
    keyDownUp('enter');
    setTimeout(function () {
      autocomplete().find('tbody td:eq(1)').simulate('mouseenter');
      autocomplete().find('tbody td:eq(1)').simulate('mouseleave');
      spec().$container.simulate('mousedown');
      expect(getDataAtCell(0, 0)).toBeNull();
      done();
    }, 200);
  });
  it('should be able to use empty value ("")', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(['', 'BMW', 'Bentley']);
    });
    handsontable({
      data: [['one', 'two'], ['three', 'four']],
      columns: [{
        editor: 'autocomplete',
        source: syncSources,
        filter: false
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    setTimeout(function () {
      expect(getDataAtCell(0, 0)).toEqual('one');
      autocomplete().find('tbody td:eq(0)').simulate('mousedown');
      expect(getDataAtCell(0, 0)).toEqual('');
      done();
    }, 200);
  });
  describe('allow html mode', function () {
    it('should allow inject html items (async mode)', function (done) {
      var hot = handsontable({
        columns: [{
          type: 'autocomplete',
          source: function source(query, cb) {
            cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);
          },
          allowHtml: true
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        editorInput.val('b');
        keyDownUp('b'.charCodeAt(0));
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['<i>bar</i>'], ['<strong>baz</strong>']]);
        editorInput.val('bar');
        keyDownUp('a'.charCodeAt(0));
        keyDownUp('r'.charCodeAt(0));
      }, 400);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['<i>bar</i>']]);
        keyDownUp('arrow_down');
        keyDownUp('enter');
      }, 600);
      setTimeout(function () {
        expect(getCell(0, 0).querySelector('i').textContent).toBe('bar');
        done();
      }, 700);
    });
    it('should allow inject html items (sync mode)', function (done) {
      var hot = handsontable({
        columns: [{
          type: 'autocomplete',
          source: ['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>'],
          allowHtml: true
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      setTimeout(function () {
        editorInput.val('b');
        keyDownUp('b'.charCodeAt(0));
      }, 200);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['<i>bar</i>'], ['<strong>baz</strong>']]);
        editorInput.val('bar');
        keyDownUp('a'.charCodeAt(0));
        keyDownUp('r'.charCodeAt(0));
      }, 400);
      setTimeout(function () {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['<i>bar</i>']]);
        keyDownUp('arrow_down');
        keyDownUp('enter');
      }, 600);
      setTimeout(function () {
        expect(getCell(0, 0).querySelector('i').textContent).toBe('bar');
        done();
      }, 700);
    });
  });
  describe('disallow html mode', function () {
    it('should be disabled by default', function () {
      var hot = handsontable({
        columns: [{
          type: 'autocomplete',
          source: function source(query, cb) {
            cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);
          },
          allowHtml: false
        }]
      });
      expect(hot.getCellMeta(0, 0).allowHtml).toBeFalsy();
    });
    it('should strip html from strings provided in source (async mode)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var hot = handsontable({
        columns: [{
          type: 'autocomplete',
          source: function source(query, cb) {
            cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);
          },
          allowHtml: false
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      yield sleep(200);
      editorInput.val('b');
      keyDownUp('b'.charCodeAt(0));
      yield sleep(200);
      {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['bar'], ['baz']]);
        editorInput.val('bar');
        keyDownUp('a'.charCodeAt(0));
        keyDownUp('r'.charCodeAt(0));
      }
      yield sleep(200);
      {
        var _ac = hot.getActiveEditor();

        var _innerHot = _ac.htEditor;
        expect(_innerHot.getData()).toEqual([['bar']]);
        keyDownUp('arrow_down');
        keyDownUp('enter');
      }
      yield sleep(200);
      expect(getCell(0, 0).querySelector('i')).toBeNull();
      expect(getCell(0, 0).textContent).toMatch('bar');
    }));
    it('should strip html from strings provided in source (sync mode)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var hot = handsontable({
        columns: [{
          type: 'autocomplete',
          source: ['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>'],
          allowHtml: false
        }]
      });
      selectCell(0, 0);
      var editorInput = $('.handsontableInput');
      expect(getDataAtCell(0, 0)).toBeNull();
      keyDownUp('enter');
      yield sleep(200);
      editorInput.val('b');
      keyDownUp('b'.charCodeAt(0));
      yield sleep(200);
      {
        var ac = hot.getActiveEditor();
        var innerHot = ac.htEditor;
        expect(innerHot.getData()).toEqual([['bar'], ['baz']]);
      }
      editorInput.val('bar');
      keyDownUp('a'.charCodeAt(0));
      keyDownUp('r'.charCodeAt(0));
      yield sleep(200);
      {
        var _ac2 = hot.getActiveEditor();

        var _innerHot2 = _ac2.htEditor;
        expect(_innerHot2.getData()).toEqual([['bar']]);
      }
      keyDownUp('arrow_down');
      keyDownUp('enter');
      yield sleep(100);
      expect(getCell(0, 0).querySelector('i')).toBeNull();
      expect(getCell(0, 0).textContent).toMatch('bar');
    }));
  });
  describe('Autocomplete helper functions:', function () {
    describe('sortByRelevance', function () {
      it('should sort the provided array, so items more relevant to the provided value are listed first', function () {
        var choicesList = ['Wayne', // 0
        'Draven', // 1
        'Banner', // 2
        'Stark', // 3
        'Parker', // 4
        'Kent', // 5
        'Gordon', // 6
        'Kyle', // 7
        'Simmons' // 8
        ];
        var value = 'a';
        var sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choicesList);
        expect(sorted).toEqual([0, 2, 4, 3, 1]);
        value = 'o';
        sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choicesList);
        expect(sorted).toEqual([6, 8]);
        value = 'er';
        sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choicesList);
        expect(sorted).toEqual([2, 4]);
      });
    });
  });
  it('should not modify the suggestion lists\' order, when the sortByRelevance option is set to false', function (done) {
    var choicesList = ['Wayne', 'Draven', 'Banner', 'Stark', 'Parker', 'Kent', 'Gordon', 'Kyle', 'Simmons'];
    handsontable({
      columns: [{
        editor: 'autocomplete',
        source: choicesList,
        sortByRelevance: false
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    var $editorInput = $('.handsontableInput');
    $editorInput.val('a');
    keyDownUp('a'.charCodeAt(0));
    Handsontable.dom.setCaretPosition($editorInput[0], 1);
    setTimeout(function () {
      var dropdownList = $('.autocompleteEditor tbody').first();
      var listLength = dropdownList.find('tr').size();
      expect(listLength).toBe(9);

      for (var i = 1; i <= listLength; i++) {
        expect(dropdownList.find("tr:nth-child(".concat(i, ") td")).text()).toEqual(choicesList[i - 1]);
      }

      done();
    }, 30);
  });
  it('should fire one afterChange event when value is changed', function (done) {
    var onAfterChange = jasmine.createSpy('onAfterChange');
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices);
    });
    handsontable({
      columns: [{
        editor: 'autocomplete',
        source: syncSources
      }],
      afterChange: onAfterChange
    });
    selectCell(0, 0);
    keyDownUp('enter');
    setTimeout(function () {
      onAfterChange.calls.reset();
      autocomplete().find('tbody td:eq(1)').simulate('mousedown');
      expect(getDataAtCell(0, 0)).toEqual('red');
      expect(onAfterChange.calls.count()).toEqual(1);
      expect(onAfterChange).toHaveBeenCalledWith([[0, 0, null, 'red']], 'edit', undefined, undefined, undefined, undefined);
      done();
    }, 200);
  });
  it('should not affect other cell values after clicking on autocomplete cell (#1021)', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices);
    });
    handsontable({
      columns: [{}, {}, {
        editor: 'autocomplete',
        source: syncSources
      }, {}],
      data: [[null, null, 'yellow', null], [null, null, 'red', null], [null, null, 'blue', null]]
    });
    expect($(getCell(0, 2)).text()).toMatch('yellow');
    mouseDoubleClick(getCell(0, 2));
    expect($(getCell(1, 2)).text()).toMatch('red');
    mouseDoubleClick(getCell(1, 2));
    expect($(getCell(2, 2)).text()).toMatch('blue');
    mouseDoubleClick(getCell(2, 2));
    setTimeout(function () {
      expect(getDataAtCol(2)).toEqual(['yellow', 'red', 'blue']);
      done();
    }, 200);
  });
  it('should handle editor if cell data is a function', function (done) {
    spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();
    var afterValidateCallback = jasmine.createSpy('afterValidateCallbak');
    var hot = handsontable({
      data: [new Model({
        id: 1,
        name: 'Ted Right',
        address: ''
      }), new Model({
        id: 2,
        name: 'Frank Honest',
        address: ''
      }), new Model({
        id: 3,
        name: 'Joan Well',
        address: ''
      })],
      dataSchema: Model,
      colHeaders: ['ID', 'Name', 'Address'],
      columns: [{
        data: createAccessorForProperty('id'),
        type: 'autocomplete',
        source: ['1', '2', '3'],
        filter: false,
        strict: true
      }, {
        data: createAccessorForProperty('name')
      }, {
        data: createAccessorForProperty('address')
      }],
      minSpareRows: 1,
      afterValidate: afterValidateCallback
    });
    selectCell(0, 0);
    expect(hot.getActiveEditor().isOpened()).toBe(false);
    keyDownUp('enter');
    setTimeout(function () {
      expect(hot.getActiveEditor().isOpened()).toBe(true);
      afterValidateCallback.calls.reset();
      $(hot.getActiveEditor().htContainer).find('tr:eq(1) td:eq(0)').simulate('mousedown');
    }, 200);
    setTimeout(function () {
      expect(getDataAtCell(0, 0)).toEqual('2');
      done();
    }, 400);
  }); // Input element should be focused on cell selection othrwise it breaks IME editor functionality for Asian users.

  it('should not lose the focus on input element while inserting new characters (#839)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var focusListener = jasmine.createSpy('focus');
    var hot = handsontable({
      data: [['one', 'two'], ['three', 'four']],
      columns: [{
        type: 'autocomplete',
        source: choices
      }, {}]
    });
    selectCell(0, 0);
    hot.getActiveEditor().TEXTAREA.addEventListener('focus', focusListener);
    yield sleep(50);
    expect(focusListener).toHaveBeenCalled();
    hot.getActiveEditor().TEXTAREA.removeEventListener('focus', focusListener);
  }));
  it('should not lose the focus from the editor after selecting items from the choice list',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [['', 'two'], ['three', 'four']],
      columns: [{
        type: 'autocomplete',
        source: ['brown', 'yellow', 'green']
      }, {}]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    yield sleep(0);
    keyDownUp('arrow_down');
    keyDownUp('arrow_down');
    keyDownUp('arrow_down');
    hot.getActiveEditor().TEXTAREA.value = 'r';
    keyDownUp('R'.charCodeAt(0));
    yield sleep(0); // Check if ESCAPE key is responsive.

    keyDownUp('esc');
    expect(hot.isListening()).toBeTruthy();
    expect(isEditorVisible($(hot.getActiveEditor().htEditor.rootElement))).toBeFalsy();
  }));
  it('should not call the `source` has been selected', function () {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process([]); // hardcoded empty result
    });
    handsontable({
      data: [['one', 'two'], ['three', 'four']],
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        allowInvalid: false,
        strict: true
      }, {}],
      cells: function cells(row, col) {
        var cellProperties = {};

        if (row === 0 && col === 0) {
          cellProperties.readOnly = true;
        }

        return cellProperties;
      }
    });
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    expect(syncSources).not.toHaveBeenCalled();
    selectCell(0, 0);
    expect(syncSources).not.toHaveBeenCalled();
    expect(getCellMeta(1, 0).readOnly).toBeFalsy();
    selectCell(1, 0);
    expect(syncSources).not.toHaveBeenCalled();
  });
  it('should not call the `source` method if cell is read only and the arrow has been clicked', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process([]); // hardcoded empty result
    });
    handsontable({
      data: [['one', 'two'], ['three', 'four']],
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        allowInvalid: false,
        strict: true
      }, {}],
      cells: function cells(row, col) {
        var cellProperties = {};

        if (row === 0 && col === 0) {
          cellProperties.readOnly = true;
        }

        return cellProperties;
      }
    });
    expect(getCellMeta(0, 0).readOnly).toBe(true);
    expect(syncSources).not.toHaveBeenCalled();
    selectCell(0, 0);
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
    setTimeout(function () {
      expect(syncSources).not.toHaveBeenCalled();
      syncSources.calls.reset();
      expect(getCellMeta(1, 0).readOnly).toBeFalsy();
      selectCell(1, 0);
      $(getCell(1, 0)).find('.htAutocompleteArrow').simulate('mousedown');
    }, 100);
    setTimeout(function () {
      expect(syncSources).toHaveBeenCalled();
      expect(syncSources.calls.count()).toEqual(1);
      done();
    }, 200);
  });
  it('should add a scrollbar to the autocomplete dropdown, only if number of displayed choices exceeds 10',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [['', 'two', 'three'], ['four', 'five', 'six']],
      columns: [{
        type: 'autocomplete',
        source: choices,
        allowInvalid: false,
        strict: false
      }, {}, {}]
    });
    spec().$container.css({
      height: 600
    });
    expect(choices.length).toBeGreaterThan(10);
    selectCell(0, 0);
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
    var dropdownHolder = hot.getActiveEditor().htEditor.view.wt.wtTable.holder;
    yield sleep(30);
    expect(dropdownHolder.scrollHeight).toBeGreaterThan(dropdownHolder.clientHeight);
    keyDownUp('esc');
    hot.getSettings().columns[0].source = hot.getSettings().columns[0].source.slice(0).splice(3);
    hot.updateSettings({});
    selectCell(0, 0);
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
    yield sleep(30);
    expect(dropdownHolder.scrollHeight > dropdownHolder.clientHeight).toBe(false);
  }));
  it('should not close editor on scrolling',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [['', 'two', 'three'], ['four', 'five', 'six']],
      columns: [{
        type: 'autocomplete',
        source: choices,
        allowInvalid: false,
        strict: false
      }, {}, {}]
    });
    expect(choices.length).toBeGreaterThan(10);
    selectCell(0, 0);
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');
    var dropdown = hot.getActiveEditor().htContainer;
    hot.view.wt.wtOverlays.topOverlay.scrollTo(1);
    yield sleep(50);
    expect($(dropdown).is(':visible')).toBe(true);
    selectCell(0, 0);
    yield sleep(50);
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');
    hot.view.wt.wtOverlays.topOverlay.scrollTo(3);
    yield sleep(50);
    expect($(dropdown).is(':visible')).toBe(true);
  }));
  it('should keep textarea caret position, after moving the selection to the suggestion list (pressing down arrow)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    var $editorInput = $('.handsontableInput');
    $editorInput.val('an');
    keyDownUp(65); // a

    keyDownUp(78); // n

    yield sleep(0);
    Handsontable.dom.setCaretPosition($editorInput[0], 1);
    yield sleep(200);
    keyDownUp('arrow_down');
    expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);
    keyDownUp('arrow_down');
    expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);
  }));
  it('should keep textarea selection, after moving the selection to the suggestion list (pressing down arrow)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    var $editorInput = $('.handsontableInput');
    $editorInput.val('an');
    keyDownUp(65); // a

    keyDownUp(78); // n

    yield sleep(0);
    Handsontable.dom.setCaretPosition($editorInput[0], 1, 2);
    yield sleep(200);
    keyDownUp('arrow_down');
    expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);
    expect(Handsontable.dom.getSelectionEndPosition($editorInput[0])).toEqual(2);
    keyDownUp('arrow_down');
    expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);
    expect(Handsontable.dom.getSelectionEndPosition($editorInput[0])).toEqual(2);
  }));
  it('should jump to the sibling cell, after pressing up key in quick edit mode', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}]
    });
    selectCell(1, 0);
    keyDownUp('x'); // trigger quick edit mode

    var $editorInput = $('.handsontableInput');
    $editorInput.val('an');
    keyDownUp(65); // a

    keyDownUp(78); // n

    setTimeout(function () {
      keyDownUp('arrow_up');
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      done();
    }, 200);
  });
  it('should jump to the next cell, after pressing right key in quick edit mode', function (done) {
    var syncSources = jasmine.createSpy('syncSources');

    syncSources.plan = function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    };

    handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}]
    });
    selectCell(1, 0);
    keyDownUp('x'); // trigger quick edit mode

    var $editorInput = $('.handsontableInput');
    $editorInput.val('an');
    keyDownUp(65); // a

    keyDownUp(78); // n

    setTimeout(function () {
      keyDownUp('arrow_right');
      expect(getSelected()).toEqual([[1, 1, 1, 1]]);
      done();
    }, 200);
  });
  it('should jump to the next cell, after pressing left key in quick edit mode', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    handsontable({
      columns: [{}, {
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }]
    });
    selectCell(1, 1);
    keyDownUp('x'); // trigger quick edit mode

    var $editorInput = $('.handsontableInput');
    $editorInput.val('an');
    keyDownUp(65); // a

    keyDownUp(78); // n
    // put caret on the end of the text to ensure that editor will be closed after hit left arrow key

    Handsontable.dom.setCaretPosition($editorInput[0], 2, 2);
    setTimeout(function () {
      keyDownUp('arrow_left');
      expect(getSelected()).toEqual([[1, 0, 1, 0]]);
      done();
    }, 200);
  });
  it('should jump to the next cell, after pressing down key in quick edit mode', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}]
    });
    selectCell(1, 0);
    keyDownUp('x'); // trigger quick edit mode

    var $editorInput = $('.handsontableInput');
    $editorInput.val('an');
    keyDownUp(65); // a

    keyDownUp(78); // n

    setTimeout(function () {
      keyDownUp('arrow_down');
      expect(getSelected()).toEqual([[1, 0, 1, 0]]);
      done();
    }, 200);
  });
  it('should jump to the next cell, after pressing down key in quick edit mode when no matching option list found', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}]
    });
    selectCell(1, 0);
    keyDownUp('x'); // trigger quick edit mode

    var $editorInput = $('.handsontableInput');
    $editorInput.val('anananan');
    keyDownUp(65); // a

    keyDownUp(78); // n

    keyDownUp(65); // a

    keyDownUp(78); // n

    keyDownUp(65); // a

    keyDownUp(78); // n

    keyDownUp(65); // a

    keyDownUp(78); // n

    setTimeout(function () {
      keyDownUp('arrow_down');
      expect(getSelected()).toEqual([[2, 0, 2, 0]]);
      done();
    }, 200);
  });
  it('should not jump to the next cell, after pressing down key in quick edit mode when options list was opened', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}]
    });
    selectCell(1, 0);
    keyDownUp('x'); // trigger quick edit mode

    var $editorInput = $('.handsontableInput');
    $editorInput.val('an');
    keyDownUp(65); // a

    keyDownUp(78); // n

    setTimeout(function () {
      keyDownUp('arrow_down');
      expect(getSelected()).toEqual([[1, 0, 1, 0]]);
      done();
    }, 200);
  });
  it('should select option in opened editor after pressing down key in quick edit mode', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    var hot = handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}]
    });
    selectCell(1, 0);
    keyDownUp('x'); // Trigger quick edit mode

    setTimeout(function () {
      keyDownUp('arrow_down');
      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[0, 0, 0, 0]]);
      keyDownUp('arrow_down');
      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[1, 0, 1, 0]]);
      keyDownUp('arrow_down');
      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[2, 0, 2, 0]]);
      done();
    }, 200);
  });
  it('should select option in opened editor after pressing up key in quick edit mode', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    var hot = handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}],
      autoWrapCol: false,
      autoWrapRow: false
    });
    selectCell(1, 0);
    keyDownUp('x'); // Trigger quick edit mode

    setTimeout(function () {
      hot.getActiveEditor().htEditor.selectCell(2, 0);
      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[2, 0, 2, 0]]);
      keyDownUp('arrow_up');
      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[1, 0, 1, 0]]);
      keyDownUp('arrow_up');
      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[0, 0, 0, 0]]);
      keyDownUp('arrow_up');
      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[0, 0, 0, 0]]);
      done();
    }, 200);
  });
  it('should not close editor in quick edit mode after pressing down key when last option is selected', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    var hot = handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}]
    });
    selectCell(1, 0);
    keyDownUp('x'); // Trigger quick edit mode

    setTimeout(function () {
      hot.getActiveEditor().htEditor.selectCell(7, 0);
      hot.listen();
      keyDownUp('arrow_down');
      keyDownUp('arrow_down');
      keyDownUp('arrow_down');
      keyDownUp('arrow_down');
      keyDownUp('arrow_down');
      expect(hot.getActiveEditor().isOpened()).toBe(true);
      done();
    }, 200);
  });
  it('should close editor in quick edit mode after pressing up key when no option is selected', function (done) {
    var syncSources = jasmine.createSpy('syncSources');
    syncSources.and.callFake(function (query, process) {
      process(choices.filter(function (choice) {
        return choice.indexOf(query) !== -1;
      }));
    });
    var hot = handsontable({
      columns: [{
        type: 'autocomplete',
        source: syncSources,
        strict: false
      }, {}]
    });
    selectCell(1, 0);
    keyDownUp('x'); // Trigger quick edit mode

    setTimeout(function () {
      hot.getActiveEditor().htEditor.selectCell(1, 0);
      hot.listen();
      keyDownUp('arrow_up');
      keyDownUp('arrow_up');
      keyDownUp('arrow_up');
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      done();
    }, 200);
  });
  describe('IME support', function () {
    it('should focus editable element after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        columns: [{
          editor: 'autocomplete',
          source: choices
        }]
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    }));
  });
});

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('BaseEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\" style=\"width: 300px; height: 200px; overflow: auto\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('ctrl + enter when editor is active', function () {
    it('should populate value from the currently active cell to every cell in the selected range', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(6, 6)
      });
      selectCell(1, 1, 2, 2);
      expect(getDataAtCell(1, 1)).toEqual('B2');
      expect(getDataAtCell(2, 2)).toEqual('C3');
      keyDown(Handsontable.helper.KEY_CODES.ENTER);
      keyDown('ctrl+enter');
      expect(getDataAtCell(1, 1)).toEqual('B2');
      expect(getDataAtCell(1, 2)).toEqual('B2');
      expect(getDataAtCell(2, 1)).toEqual('B2');
      expect(getDataAtCell(2, 2)).toEqual('B2');
      loadData(Handsontable.helper.createSpreadsheetData(6, 6));
      selectCell(1, 2, 2, 1);
      expect(getDataAtCell(1, 2)).toEqual('C2');
      expect(getDataAtCell(2, 1)).toEqual('B3');
      keyDown(Handsontable.helper.KEY_CODES.ENTER);
      keyDown('ctrl+enter');
      expect(getDataAtCell(1, 1)).toEqual('C2');
      expect(getDataAtCell(1, 2)).toEqual('C2');
      expect(getDataAtCell(2, 1)).toEqual('C2');
      expect(getDataAtCell(2, 2)).toEqual('C2');
      loadData(Handsontable.helper.createSpreadsheetData(6, 6));
      selectCell(2, 2, 1, 1);
      expect(getDataAtCell(2, 2)).toEqual('C3');
      keyDown(Handsontable.helper.KEY_CODES.ENTER);
      keyDown('ctrl+enter');
      expect(getDataAtCell(1, 1)).toEqual('C3');
      expect(getDataAtCell(1, 2)).toEqual('C3');
      expect(getDataAtCell(2, 1)).toEqual('C3');
      expect(getDataAtCell(2, 2)).toEqual('C3');
      loadData(Handsontable.helper.createSpreadsheetData(6, 6));
      selectCell(2, 1, 1, 2);
      expect(getDataAtCell(2, 1)).toEqual('B3');
      keyDown(Handsontable.helper.KEY_CODES.ENTER);
      keyDown('ctrl+enter');
      expect(getDataAtCell(1, 1)).toEqual('B3');
      expect(getDataAtCell(1, 2)).toEqual('B3');
      expect(getDataAtCell(2, 1)).toEqual('B3');
      expect(getDataAtCell(2, 2)).toEqual('B3');
    });
  });
  it('should exported all editors into Handsontable.editors object', function () {
    expect(Handsontable.editors.AutocompleteEditor).toBeDefined();
    expect(Handsontable.editors.BaseEditor).toBeDefined();
    expect(Handsontable.editors.CheckboxEditor).toBeDefined();
    expect(Handsontable.editors.DateEditor).toBeDefined();
    expect(Handsontable.editors.DropdownEditor).toBeDefined();
    expect(Handsontable.editors.HandsontableEditor).toBeDefined();
    expect(Handsontable.editors.NumericEditor).toBeDefined();
    expect(Handsontable.editors.PasswordEditor).toBeDefined();
    expect(Handsontable.editors.SelectEditor).toBeDefined();
    expect(Handsontable.editors.TextEditor).toBeDefined();
  });
  describe('IME support', function () {
    it('should not throw an error when composition is started in multiple instances environment',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var errorSpy = jasmine.createSpyObj('error', ['test']);
      var prevError = window.onerror;
      window.onerror = errorSpy.test;
      var hot1 = handsontable({});
      var container2 = $("<div id=\"".concat(id, "2\" style=\"width: 300px; height: 200px; overflow: auto\"></div>")).appendTo('body');
      var hot2 = container2.handsontable().handsontable('getInstance');
      $(hot1.getCell(1, 1)).simulate('mousedown');
      $(hot1.getCell(1, 1)).simulate('mouseover');
      $(hot1.getCell(1, 1)).simulate('mouseup');
      document.documentElement.dispatchEvent(new CompositionEvent('compositionstart'));
      $(hot2.getCell(1, 1)).simulate('mousedown');
      $(hot2.getCell(1, 1)).simulate('mouseover');
      $(hot2.getCell(1, 1)).simulate('mouseup');
      document.documentElement.dispatchEvent(new CompositionEvent('compositionstart'));
      expect(errorSpy.test).not.toHaveBeenCalled();
      hot2.destroy();
      container2.remove();
      window.onerror = prevError;
    }));
  });
});

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('DateEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  function getDates() {
    return [['01/14/2006'], ['12/01/2008'], ['11/19/2011'], ['02/02/2004'], ['07/24/2011']];
  }

  it('should display Pikday calendar', function () {
    handsontable({
      data: getDates(),
      columns: [{
        type: 'date'
      }]
    });
    expect($('.pika-single').is(':visible')).toBe(false);
    selectCell(0, 0);
    keyDown('enter');
    expect($('.pika-single').is(':visible')).toBe(true);
  });
  it('should pass date picker config object to Pikday', function () {
    var onOpenSpy = jasmine.createSpy('open');
    var onCloseSpy = jasmine.createSpy('close');
    var hot = handsontable({
      data: getDates(),
      columns: [{
        type: 'date',
        datePickerConfig: {
          firstDay: 1,
          field: 'field',
          // read only - shouldn't overwrite
          trigger: 'trigger',
          // read only - shouldn't overwrite
          container: 'container',
          // read only - shouldn't overwrite
          bound: true,
          // read only - shouldn't overwrite
          i18n: {
            previousMonth: 'Poprzedni',
            nextMonth: 'Następny',
            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
          },
          onOpen: onOpenSpy,
          onClose: onCloseSpy
        }
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    keyDown('esc');
    var config = hot.getActiveEditor().$datePicker.config();
    expect(config.field instanceof HTMLElement).toBe(true);
    expect(config.trigger instanceof HTMLElement).toBe(true);
    expect(config.container instanceof HTMLElement).toBe(true);
    expect(config.bound).toBe(false);
    expect(config.firstDay).toBe(1);
    expect(config.i18n.previousMonth).toBe('Poprzedni');
    expect(config.i18n.nextMonth).toBe('Następny');
    expect(onOpenSpy).toHaveBeenCalled();
    expect(onCloseSpy).toHaveBeenCalled();
  });
  it('should remove any HTML connected with Pikaday Calendar', function () {
    handsontable({
      data: getDates(),
      columns: [{
        type: 'date'
      }]
    });
    expect($('.pika-single').length).toBe(0);
    selectCell(0, 0);
    keyDown('enter');
    expect($('.pika-single').length).toBe(1);
    destroy();
    expect($('.pika-single').length).toBe(0);
  });
  it('should select date corresponding to cell value', function () {
    handsontable({
      data: getDates(),
      columns: [{
        type: 'date',
        dateFormat: 'MM/DD/YYYY'
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    var date = new Date(getDates()[0][0]);
    expect($('.pika-single').find('.pika-select-year').find(':selected').val()).toMatch(date.getFullYear().toString());
    expect($('.pika-single').find('.pika-select-month').find(':selected').val()).toMatch(date.getMonth().toString());
    expect($('.pika-single').find('.pika-table .is-selected').text()).toMatch(date.getDate().toString());
  });
  it('should save new date after clicked on calendar', function (done) {
    handsontable({
      data: getDates(),
      columns: [{
        type: 'date',
        dateFormat: 'MM/DD/YYYY'
      }]
    });
    selectCell(0, 0);
    expect(getDataAtCell(0, 0)).toMatch('01/14/2006');
    keyDown('enter');
    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));
    setTimeout(function () {
      expect(getDataAtCell(0, 0)).toMatch('01/01/2006');
      done();
    }, 150);
  });
  it('should display fill handle after selected date on calendar', function (done) {
    handsontable({
      data: getDates(),
      columns: [{
        type: 'date',
        dateFormat: 'MM/DD/YYYY'
      }]
    });
    selectCell(0, 0);
    expect(getDataAtCell(0, 0)).toMatch('01/14/2006');
    keyDown('enter');
    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));
    setTimeout(function () {
      expect(getDataAtCell(0, 0)).toMatch('01/01/2006');
      expect($('.htBorders .current.corner').is(':visible')).toBe(true);
      done();
    }, 150);
  });
  it('should setup in settings and display defaultDate on calendar', function (done) {
    handsontable({
      data: getDates(),
      minSpareRows: 1,
      columns: [{
        type: 'date',
        dateFormat: 'MM/DD/YYYY',
        defaultDate: '01/01/1900'
      }]
    });
    selectCell(5, 0);
    expect(getDataAtCell(5, 0)).toBe(null);
    keyDown('enter');
    var date = new Date('01/01/1900');
    expect($('.pika-single').find('.pika-select-year').find(':selected').val()).toMatch(date.getFullYear().toString());
    expect($('.pika-single').find('.pika-select-month').find(':selected').val()).toMatch(date.getMonth().toString());
    expect($('.pika-single').find('.pika-table .is-selected').text()).toMatch(date.getDate().toString());
    keyDown('enter');
    setTimeout(function () {
      expect(getDataAtCell(5, 0)).toMatch('01/01/1900');
      done();
    }, 150);
  });
  it('should close calendar after picking new date', function () {
    handsontable({
      data: getDates(),
      columns: [{
        type: 'date',
        dateFormat: 'MM/DD/YYYY'
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    expect($('.pika-single').is(':visible')).toBe(true);
    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));
    expect($('.pika-single').is(':visible')).toBe(false);
  });
  it('should enable to input any value in textarea',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: getDates(),
      columns: [{
        type: 'date'
      }]
    });
    selectCell(0, 0);
    var editor = hot.getActiveEditor();
    editor.beginEditing();
    expect(editor.isOpened()).toBe(true);
    editor.TEXTAREA.value = 'foo';
    keyDownUp('o'.charCodeAt(0));
    expect(editor.getValue()).toEqual('foo');
    editor.finishEditing();
    yield sleep(30);
    expect(getDataAtCell(0, 0)).toEqual('foo');
  }));
  it('should not close editor when inserting wrong value and allowInvalid is set to false, (#5419)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: getDates(),
      allowInvalid: false,
      columns: [{
        type: 'date'
      }]
    });
    selectCell(0, 0);
    var editor = hot.getActiveEditor();
    editor.beginEditing();
    expect(editor.isOpened()).toBe(true);
    editor.TEXTAREA.value = 'foo';
    expect(editor.getValue()).toEqual('foo');
    editor.finishEditing();
    yield sleep(30);
    expect(editor.isOpened()).toBe(true);
    expect(editor.getValue()).toEqual('foo');
  })); // Input element can not lose the focus while entering new characters. It breaks IME editor functionality for Asian users.

  it('should not lose the focus on input element while inserting new characters (#839)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var blured = false;

    var listener = function listener() {
      blured = true;
    };

    var hot = handsontable({
      data: [['one', 'two'], ['three', 'four']],
      columns: [{
        type: 'date'
      }, {}]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    hot.getActiveEditor().TEXTAREA.addEventListener('blur', listener);
    yield sleep(200);
    hot.getActiveEditor().TEXTAREA.value = 't';
    keyDownUp('t'.charCodeAt(0));
    hot.getActiveEditor().TEXTAREA.value = 'te';
    keyDownUp('e'.charCodeAt(0));
    hot.getActiveEditor().TEXTAREA.value = 'teo';
    keyDownUp('o'.charCodeAt(0));
    expect(blured).toBeFalsy();
    hot.getActiveEditor().TEXTAREA.removeEventListener('blur', listener);
  }));
  it('should restore original when edited and pressed ESC ',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: getDates(),
      columns: [{
        type: 'date'
      }]
    });
    selectCell(0, 0);
    var editor = hot.getActiveEditor();
    editor.beginEditing();
    expect(editor.isOpened()).toBe(true);
    editor.TEXTAREA.value = 'foo';
    expect(editor.getValue()).toEqual('foo');
    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing

    yield sleep(30);
    editor.finishEditing();
    expect(getDataAtCell(0, 0)).toEqual('01/14/2006');
  }));
  it('should display a calendar based on a current date, even if a date in a wrong format was entered previously', function (done) {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      columns: [{
        type: 'date'
      }, {
        type: 'date',
        dateFormat: 'YYYY-MM-DD'
      }],
      minSpareRows: 1
    });
    setDataAtCell(4, 1, '15-11-11');
    setTimeout(function () {
      selectCell(5, 1);
      keyDown('enter');
      expect($('.pika-single').is(':visible')).toBe(true);
      mouseDown($('.pika-single').find('.pika-table tbody tr:eq(3) td:eq(3) button'));
    }, 150);
    setTimeout(function () {
      var resultDate = getDataAtCell(5, 1);
      expect(moment(resultDate).year()).toEqual(moment().year());
      expect(moment(resultDate).month()).toEqual(moment().month());
      done();
    }, 300);
  });
  it('should display Pikaday Calendar bottom of the selected cell', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      columns: [{
        type: 'date'
      }, {
        type: 'date'
      }]
    });
    selectCell(1, 1);
    keyDown('enter');
    var cellOffset = $(hot.getActiveEditor().TD).offset();
    var datePickerOffset = $('.pika-single').offset(); // 23 is a height of the editor cell

    expect(cellOffset.top + 23).toBeCloseTo(datePickerOffset.top, 0);
    expect(cellOffset.left).toBeCloseTo(datePickerOffset.left, 0);
  });
  it('should display Pikaday Calendar bottom of the selected cell when table have scrolls', function () {
    var container = $('#testContainer');
    container[0].style.height = '300px';
    container[0].style.width = '200px';
    container[0].style.overflow = 'hidden';
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(30, 10),
      colWidths: 60,
      columns: [{
        type: 'date'
      }, {
        type: 'date'
      }, {
        type: 'date'
      }, {
        type: 'date'
      }, {
        type: 'date'
      }, {
        type: 'date'
      }, {
        type: 'date'
      }]
    });
    selectCell(20, 6);
    keyDown('enter');
    var cellOffset = $(hot.getActiveEditor().TD).offset();
    var datePickerOffset = $('.pika-single').offset();
    expect(cellOffset.top + 23).toBeCloseTo(datePickerOffset.top, 0);
    expect(cellOffset.left).toBeCloseTo(datePickerOffset.left, 0);
  });
  it('should not modify the edited date and time, when opening the editor', function () {
    var hot = handsontable({
      data: [['02/02/2015 8:00 AM']],
      columns: [{
        type: 'date',
        dateFormat: 'MM/DD/YYYY h:mm A',
        correctFormat: true,
        defaultDate: '01/01/1900',
        allowEmpty: false
      }]
    }); // setDataAtCell(0, 0, '02/02/2015 8:00 AM');

    var cellValue = getDataAtCell(0, 0);
    selectCell(0, 0);
    keyDown('enter');
    var editor = hot.getActiveEditor();
    expect(editor.TEXTAREA.value).toEqual(cellValue);
  });
  describe('IME support', function () {
    it('should focus editable element after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        columns: [{
          editor: 'date'
        }]
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    }));
  });
});

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('DropdownEditor', function () {
  var id = 'testContainer';
  var choices = ['yellow', 'red', 'orange', 'green', 'blue', 'gray', 'black', 'white', 'purple', 'lime', 'olive', 'cyan'];
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\" style=\"width: 300px; height: 200px; overflow: auto\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('open editor', function () {
    // see https://github.com/handsontable/handsontable/issues/3380
    it('should not throw error while selecting the next cell by hitting enter key', function () {
      var spy = jasmine.createSpyObj('error', ['test']);
      var prevError = window.onerror;

      window.onerror = function () {
        spy.test();
      };

      handsontable({
        columns: [{
          editor: 'dropdown',
          source: choices
        }]
      });
      selectCell(0, 0);
      keyDownUp('enter');
      keyDownUp('enter');
      keyDownUp('enter');
      expect(spy.test.calls.count()).toBe(0);
      window.onerror = prevError;
    });
  });
  describe('closing the editor', function () {
    it('should not close editor on scrolling',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var hot = handsontable({
        data: [['', 'two', 'three'], ['four', 'five', 'six']],
        columns: [{
          type: 'dropdown',
          source: choices
        }, {}, {}]
      });
      selectCell(0, 0);
      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');
      hot.view.wt.wtOverlays.topOverlay.scrollTo(1);
      var dropdown = hot.getActiveEditor();
      yield sleep(50);
      expect($(dropdown.htContainer).is(':visible')).toBe(true);
      selectCell(0, 0);
      yield sleep(50);
      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');
      hot.view.wt.wtOverlays.topOverlay.scrollTo(3);
      yield sleep(50);
      expect($(dropdown.htContainer).is(':visible')).toBe(true);
    }));
  });
  it('should mark all invalid values as invalid, after pasting them into dropdown-type cells', function (done) {
    handsontable({
      data: [['', 'two', 'three'], ['four', 'five', 'six']],
      columns: [{
        type: 'dropdown',
        source: choices
      }, {}, {}]
    });
    populateFromArray(0, 0, [['invalid'], ['input']], null, null, 'paste');
    setTimeout(function () {
      expect(Handsontable.dom.hasClass(getCell(0, 0), 'htInvalid')).toBe(true);
      expect(Handsontable.dom.hasClass(getCell(1, 0), 'htInvalid')).toBe(true);
      done();
    }, 40);
  }); // Input element can not lose the focus while entering new characters. It breaks IME editor functionality for Asian users.

  it('should not lose the focus on input element while inserting new characters (#839)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var focusListener = jasmine.createSpy('focus');
    var hot = handsontable({
      data: [['one', 'two'], ['three', 'four']],
      columns: [{
        type: 'dropdown',
        source: choices
      }, {}]
    });
    selectCell(0, 0);
    hot.getActiveEditor().TEXTAREA.addEventListener('focus', focusListener);
    yield sleep(50);
    expect(focusListener).toHaveBeenCalled();
    hot.getActiveEditor().TEXTAREA.removeEventListener('focus', focusListener);
  }));
  describe('IME support', function () {
    it('should focus editable element after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        columns: [{
          type: 'dropdown',
          source: choices
        }]
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    }));
  });
});

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('HandsontableEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  function getManufacturerData() {
    return [{
      name: 'BMW',
      country: 'Germany',
      owner: 'Bayerische Motoren Werke AG'
    }, {
      name: 'Chrysler',
      country: 'USA',
      owner: 'Chrysler Group LLC'
    }, {
      name: 'Nissan',
      country: 'Japan',
      owner: 'Nissan Motor Company Ltd'
    }, {
      name: 'Suzuki',
      country: 'Japan',
      owner: 'Suzuki Motor Corporation'
    }, {
      name: 'Toyota',
      country: 'Japan',
      owner: 'Toyota Motor Corporation'
    }, {
      name: 'Volvo',
      country: 'Sweden',
      owner: 'Zhejiang Geely Holding Group'
    }];
  }

  it('should create an editor that is a Handsontable instance', function () {
    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData()
        }
      }]
    });
    selectCell(2, 0);
    keyDownUp('enter');
    expect(spec().$container.find('.handsontableEditor:visible').length).toEqual(1);
  });
  it('should create an editor directly below the textarea element', function () {
    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData()
        }
      }]
    });
    selectCell(2, 0);
    keyDownUp('enter');
    expect(spec().$container.find('.handsontableEditor')[0].offsetTop).toEqual(spec().$container.find('.handsontableInput')[0].offsetHeight);
  });
  it('should prepare the editor only once per instance', function () {
    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData()
        }
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    expect(spec().$container.find('.handsontableEditor').length).toEqual(1);
  });
  it('should reuse the container and display them after select the same or different cell', function () {
    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData()
        }
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    var container = spec().$container.find('.handsontableEditor')[0];
    expect(container.clientHeight).toBeGreaterThan(2);
    selectCell(0, 0);
    keyDownUp('enter');
    container = spec().$container.find('.handsontableEditor')[0];
    expect(container.clientHeight).toBeGreaterThan(2);
    selectCell(1, 0);
    keyDownUp('enter');
    container = spec().$container.find('.handsontableEditor')[0];
    expect(container.clientHeight).toBeGreaterThan(2);
    selectCell(1, 0);
    keyDownUp('enter');
    container = spec().$container.find('.handsontableEditor')[0];
    expect(container.clientHeight).toBeGreaterThan(2);
  });
  it('should destroy the editor when Esc is pressed', function () {
    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData()
        }
      }]
    });
    selectCell(2, 0);
    keyDownUp('enter');
    keyDownUp('esc');
    expect(spec().$container.find('.handsontableEditor:visible').length).toEqual(0);
  }); // see https://github.com/handsontable/handsontable/issues/3380

  it('should not throw error while selecting the next cell by hitting enter key', function () {
    var spy = jasmine.createSpyObj('error', ['test']);
    var prevError = window.onerror;

    window.onerror = function () {
      spy.test();
    };

    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          data: [['Marque'], ['Country'], ['Parent company']]
        }
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    keyDownUp('enter');
    keyDownUp('enter');
    expect(spy.test.calls.count()).toBe(0);
    window.onerror = prevError;
  });
  it('Enter pressed in nested HT should set the value and hide the editor', function () {
    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData()
        }
      }]
    });
    selectCell(2, 0);
    keyDownUp('enter');
    keyDownUp('arrow_down');
    keyDownUp('enter');
    expect(spec().$container.find('.handsontableEditor:visible').length).toEqual(0);
    expect(getDataAtCell(2, 0)).toEqual('BMW');
  });
  it('should keep focus on textarea after arrow is pressed', function () {
    var hot = handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData()
        }
      }]
    });
    selectCell(2, 0);
    keyDownUp('enter');
    keyDownUp('arrow_down');
    expect(document.activeElement).toEqual(hot.getActiveEditor().TEXTAREA);
  });
  it('should focus the TD after HT editor is prepared and destroyed', function () {
    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData()
        }
      }]
    });
    selectCell(2, 0);
    keyDownUp('arrow_down');
    keyDownUp('arrow_down');
    expect(getSelected()).toEqual([[4, 0, 4, 0]]);
  });
  it('should focus the TD after HT editor is prepared, finished (by keyboard) and destroyed', function () {
    var selections = [];
    handsontable({
      columns: [{
        type: 'handsontable',
        handsontable: {
          colHeaders: ['Marque', 'Country', 'Parent company'],
          data: getManufacturerData(),
          afterSelection: function afterSelection(row) {
            selections.push(['inner', row]);
          }
        }
      }],
      afterSelection: function afterSelection(row) {
        selections.push(['outer', row]);
      }
    });
    expect(selections.length).toBe(0);
    selectCell(1, 0);
    expect(selections[0]).toEqual(['outer', 1]);
    keyDownUp('arrow_down');
    expect(selections[1]).toEqual(['outer', 2]);
    keyDownUp('enter');
    keyDownUp('arrow_down');
    expect(selections[2]).toEqual(['inner', 0]);
    keyDownUp('esc');
    keyDownUp('arrow_down');
    expect(selections[3]).toEqual(['outer', 3]);
    expect(selections.length).toBe(4);
  });
  describe('strict mode', function () {
    it('should open editor and select cell (0, 0) in inner HOT', function () {
      var hot = handsontable({
        columns: [{
          type: 'handsontable',
          handsontable: {
            colHeaders: ['Marque', 'Country', 'Parent company'],
            data: getManufacturerData()
          },
          strict: true
        }]
      });
      selectCell(2, 0);
      keyDownUp('enter');
      var ht = hot.getActiveEditor();
      var innerHot = ht.htEditor;
      expect(innerHot.getSelected()).toEqual([[0, 0, 0, 0]]);
    });
  });
  describe('non strict mode', function () {
    it('should open editor and DO NOT select any cell in inner HOT', function () {
      var hot = handsontable({
        columns: [{
          type: 'handsontable',
          handsontable: {
            colHeaders: ['Marque', 'Country', 'Parent company'],
            data: getManufacturerData()
          }
        }]
      });
      selectCell(2, 0);
      keyDownUp('enter');
      var ht = hot.getActiveEditor();
      var innerHot = ht.htEditor;
      expect(innerHot.getSelected()).toBeUndefined();
    });
    it('should show textarea', function () {
      var hot = handsontable({
        columns: [{
          type: 'handsontable',
          handsontable: {
            colHeaders: ['Marque', 'Country', 'Parent company'],
            data: getManufacturerData()
          }
        }]
      });
      selectCell(2, 0);
      keyDownUp('enter');
      expect(hot.getActiveEditor().TEXTAREA.parentElement.style.zIndex).toEqual('');
      expect(hot.getActiveEditor().TEXTAREA.style.visibility).toEqual('');
    });
  });
  describe('IME support', function () {
    it('should focus editable element after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        columns: [{
          type: 'handsontable',
          handsontable: {
            colHeaders: ['Marque', 'Country', 'Parent company'],
            data: getManufacturerData()
          }
        }]
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    }));
  });
});

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

describe('editors', function () {
  var id = 'testContainer';
  var _Handsontable$editors = Handsontable.editors,
      registerEditor = _Handsontable$editors.registerEditor,
      getEditor = _Handsontable$editors.getEditor;
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should register custom editor', function () {
    var MyEditor =
    /*#__PURE__*/
    function (_Handsontable$editors2) {
      _inherits(MyEditor, _Handsontable$editors2);

      function MyEditor() {
        _classCallCheck(this, MyEditor);

        return _possibleConstructorReturn(this, _getPrototypeOf(MyEditor).apply(this, arguments));
      }

      _createClass(MyEditor, [{
        key: "init",
        value: function init() {
          this.TEXTAREA = document.createElement('TEXTAREA');
          this.TEXTAREA_PARENT = document.createElement('DIV');
          this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
          this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);
        }
      }, {
        key: "getValue",
        value: function getValue() {
          return "--".concat(this.TEXTAREA.value, "--");
        }
      }, {
        key: "setValue",
        value: function setValue(value) {
          this.TEXTAREA.value = value;
        }
      }, {
        key: "open",
        value: function open() {}
      }, {
        key: "close",
        value: function close() {}
      }, {
        key: "focus",
        value: function focus() {
          this.TEXTAREA.focus();
        }
      }]);

      return MyEditor;
    }(Handsontable.editors.BaseEditor);

    registerEditor('myEditor', MyEditor);
    handsontable({
      data: [[1, 6, 10]],
      columns: [{
        editor: 'myEditor'
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = 'hello';
    destroyEditor();
    expect(getDataAtCell(0, 0)).toBe('--hello--');
  });
  it('should retrieve predefined editors by its names', function () {
    expect(getEditor('autocomplete')).toBeFunction();
    expect(getEditor('base')).toBeFunction();
    expect(getEditor('checkbox')).toBeFunction();
    expect(getEditor('date')).toBeFunction();
    expect(getEditor('dropdown')).toBeFunction();
    expect(getEditor('handsontable')).toBeFunction();
    expect(getEditor('numeric')).toBeFunction();
    expect(getEditor('password')).toBeFunction();
    expect(getEditor('select')).toBeFunction();
    expect(getEditor('text')).toBeFunction();
  });
  it('should retrieve custom editor by its names', function () {
    var MyEditor = function MyEditor() {
      _classCallCheck(this, MyEditor);
    };

    registerEditor('myEditor', MyEditor);
    expect(getEditor('myEditor')).toBe(MyEditor);
  });
  it('should reset previous value when printable character was entered to selected, non-empty cell',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [{
        id: 10,
        name: 'Cup'
      }, {
        id: 23,
        name: 'Newspaper'
      }, {
        id: 31,
        name: 'Car'
      }],
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }]
    });
    selectCell(0, 0);
    keyDownUp('1'.charCodeAt(0));
    destroyEditor();
    yield sleep(100);
    expect(getCell(0, 0).innerHTML).not.toEqual('10');
    selectCell(0, 1);
    keyDownUp('a'.charCodeAt(0));
    destroyEditor();
    yield sleep(100);
    expect(getCell(1, 0).innerHTML).not.toEqual('Cup');
  }));
});

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('noEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\" style=\"width: 300px; height: 200px; overflow: auto\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('shouldn\'t begin editing when enterBeginsEditing equals true', function () {
    handsontable({
      enterBeginsEditing: true,
      editor: false
    });
    selectCell(2, 2);
    keyDown('enter');
    expect(getSelected()).toEqual([[2, 2, 2, 2]]);
    expect(isEditorVisible()).toEqual(false);
  });
  it('shouldn\'t move down after editing', function () {
    handsontable({
      editor: false
    });
    selectCell(2, 2);
    keyDown('enter');
    keyDown('enter');
    expect(getSelected()).toEqual([[2, 2, 2, 2]]);
  });
  it('shouldn\'t move down when enterBeginsEditing equals false', function () {
    handsontable({
      enterBeginsEditing: false,
      editor: false
    });
    selectCell(2, 2);
    keyDown('enter');
    expect(getSelected()).toEqual([[3, 2, 3, 2]]);
    expect(isEditorVisible()).toEqual(false);
  });
  it('shouldn\'t render any value in editor', function () {
    handsontable({
      editor: false
    });
    setDataAtCell(2, 2, 'string');
    selectCell(2, 2);
    keyDown('enter');
    expect(keyProxy().length).toEqual(0);
  });
  it('shouldn\'t open editor after hitting F2', function () {
    handsontable({
      editor: false
    });
    selectCell(2, 2);
    expect(isEditorVisible()).toEqual(false);
    keyDown('f2');
    expect(isEditorVisible()).toEqual(false);
  });
  it('shouldn\'t open editor after hitting CapsLock', function () {
    handsontable({
      editor: false
    });
    selectCell(2, 2);
    expect(isEditorVisible()).toEqual(false);
    keyDown(Handsontable.helper.KEY_CODES.CAPS_LOCK);
    expect(isEditorVisible()).toEqual(false);
  });
  it('shouldn\'t open editor after double clicking on a cell', function (done) {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2),
      editor: false
    });
    var cell = $(getCell(0, 0));
    var clicks = 0;
    window.scrollTo(0, cell.offset().top);
    setTimeout(function () {
      mouseDown(cell);
      mouseUp(cell);
      clicks += 1;
    }, 0);
    setTimeout(function () {
      mouseDown(cell);
      mouseUp(cell);
      clicks += 1;
    }, 100);
    setTimeout(function () {
      expect(clicks).toBe(2);
      expect(hot.getActiveEditor()).toBe(undefined);
      expect(isEditorVisible()).toBe(false);
      done();
    }, 200);
  });
  it('should not open editor after pressing a printable character', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3),
      editor: false
    });
    selectCell(0, 0);
    expect(isEditorVisible()).toBe(false);
    spec().$container.simulate('keydown', {
      keyCode: 'a'.charCodeAt(0)
    });
    expect(isEditorVisible()).toBe(false);
  });
  it('should not open editor after pressing a printable character with shift key', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3),
      editor: false
    });
    selectCell(0, 0);
    expect(isEditorVisible()).toBe(false);
    spec().$container.simulate('keydown', {
      keyCode: 'a'.charCodeAt(0),
      shiftKey: true
    });
    expect(isEditorVisible()).toBe(false);
  });
  it('should not not open editor after hitting ALT', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      editor: false
    });
    expect(getDataAtCell(0, 0)).toEqual('A1');
    selectCell(0, 0);
    keyDown(Handsontable.helper.KEY_CODES.ALT);
    expect(isEditorVisible()).toBe(false);
  });
  describe('IME support', function () {
    it('should focus editable element (from copyPaste plugin) after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        editor: false
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(document.querySelector('#HandsontableCopyPaste'));
    }));
  });
});

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('NumericEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      id: 1,
      name: 'Ted',
      lastName: 'Right'
    }, {
      id: 2,
      name: 'Frank',
      lastName: 'Honest'
    }, {
      id: 3,
      name: 'Joan',
      lastName: 'Well'
    }, {
      id: 4,
      name: 'Sid',
      lastName: 'Strong'
    }, {
      id: 5,
      name: 'Jane',
      lastName: 'Neat'
    }, {
      id: 6,
      name: 'Chuck',
      lastName: 'Jackson'
    }, {
      id: 7,
      name: 'Meg',
      lastName: 'Jansen'
    }, {
      id: 8,
      name: 'Rob',
      lastName: 'Norris'
    }, {
      id: 9,
      name: 'Sean',
      lastName: 'O\'Hara'
    }, {
      id: 10,
      name: 'Eve',
      lastName: 'Branson'
    }];
  };

  it('should convert "integer like" input value to number (object data source)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '999';
    destroyEditor();
    yield sleep(100);
    expect(_typeof(getDataAtCell(2, 0))).toEqual('number');
    expect(getDataAtCell(2, 0)).toEqual(999);
  }));
  it('should not convert formatted "float like" input value to number (object data source) #4706',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'price_eur',
        type: 'numeric'
      }, {
        data: 'price_pln',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'en-US'
        }
      }, {
        data: 'price_aud',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'de-DE'
        }
      }]
    });
    selectCell(0, 1);
    keyDown('enter');
    document.activeElement.value = '100.000,0';
    destroyEditor();
    yield sleep(100);
    selectCell(1, 1);
    keyDown('enter');
    document.activeElement.value = '200,000.5';
    destroyEditor();
    yield sleep(100);
    selectCell(0, 2);
    keyDown('enter');
    document.activeElement.value = '300,000.5';
    destroyEditor();
    yield sleep(100);
    selectCell(1, 2);
    keyDown('enter');
    document.activeElement.value = '300.000,5';
    destroyEditor();
    yield sleep(100);
    selectCell(0, 3);
    keyDown('enter');
    document.activeElement.value = '400.000,5';
    destroyEditor();
    yield sleep(100);
    selectCell(1, 3);
    keyDown('enter');
    document.activeElement.value = '400,000.5';
    destroyEditor();
    yield sleep(100);
    expect(getDataAtCell(0, 1)).toEqual('100.000,0');
    expect(getDataAtCell(1, 1)).toEqual('200,000.5');
    expect(getDataAtCell(0, 2)).toEqual('300,000.5');
    expect(getDataAtCell(1, 2)).toEqual('300.000,5');
    expect(getDataAtCell(0, 3)).toEqual('400.000,5');
    expect(getDataAtCell(1, 3)).toEqual('400,000.5');
  }));
  it('should convert "float like" input value with dot as determiner to number (object data source)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'price'
      }, {
        data: 'lastName'
      }]
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '77.70';
    destroyEditor();
    yield sleep(100);
    expect(_typeof(getDataAtCell(2, 0))).toEqual('number');
    expect(getDataAtCell(2, 0)).toEqual(77.7);
  }));
  it('should convert "float like" input value with comma as determiner to number (object data source)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '77,70';
    destroyEditor();
    yield sleep(100);
    expect(_typeof(getDataAtCell(2, 0))).toEqual('number');
    expect(getDataAtCell(2, 0)).toEqual(77.7);
  }));
  it('should convert "float like" input without leading zero to a float',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '.74';
    destroyEditor();
    yield sleep(100);
    expect(getDataAtCell(2, 0)).toEqual(0.74);
  }));
  it('should apply changes to editor after validation',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }]
    });
    selectCell(0, 0);
    keyDown('delete');
    yield sleep(100);
    expect(getActiveEditor().originalValue).toEqual('');
  }));
  it('should not validate string input data containing numbers ',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'price',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'de-DE'
        }
      }, {
        data: 'lastName'
      }]
    }); // Column with default formatting

    selectCell(0, 0);
    keyDown('enter');
    document.activeElement.value = '12aaa34';
    destroyEditor();
    yield sleep(100);
    selectCell(1, 0);
    keyDown('enter');
    document.activeElement.value = 'aaa34';
    destroyEditor();
    yield sleep(100);
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '12aaa';
    destroyEditor(); // Column with specified formatting

    yield sleep(100);
    selectCell(0, 1);
    keyDown('enter');
    document.activeElement.value = '12aaa34';
    destroyEditor();
    yield sleep(100);
    selectCell(1, 1);
    keyDown('enter');
    document.activeElement.value = 'aaa34';
    destroyEditor();
    yield sleep(100);
    selectCell(2, 1);
    keyDown('enter');
    document.activeElement.value = '12aaa';
    destroyEditor();
    yield sleep(100);
    expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(true);
    expect(getDataAtCell(0, 0)).toEqual('12aaa34');
    expect($(getCell(1, 0)).hasClass('htInvalid')).toBe(true);
    expect(getDataAtCell(1, 0)).toEqual('aaa34');
    expect($(getCell(2, 0)).hasClass('htInvalid')).toBe(true);
    expect(getDataAtCell(2, 0)).toEqual('12aaa');
    expect($(getCell(0, 1)).hasClass('htInvalid')).toBe(true);
    expect(getDataAtCell(0, 1)).toEqual('12aaa34');
    expect($(getCell(1, 1)).hasClass('htInvalid')).toBe(true);
    expect(getDataAtCell(1, 1)).toEqual('aaa34');
    expect($(getCell(2, 1)).hasClass('htInvalid')).toBe(true);
    expect(getDataAtCell(2, 1)).toEqual('12aaa');
  }));
  it('should display a string in a format \'$X,XXX.XX\' when using language=en, appropriate format in column settings and \'XXXX.XX\' as ' + 'an input string',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'en-US'
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '2456.22';
    destroyEditor();
    yield sleep(100);
    expect(getCell(2, 0).innerHTML).toEqual('$2,456.22');
  }));
  it('should display a string in a format \'X.XXX,XX €\' when using language=de, appropriate format in column settings and \'XXXX,XX\' as an ' + 'input string (that comes from manual input)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric',
        numericFormat: {
          pattern: '0,0.00 $',
          culture: 'de-DE'
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '2456,22';
    destroyEditor();
    yield sleep(100);
    expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');
  }));
  it('should display a string in a format \'X.XXX,XX €\' when using language=de, appropriate format in column settings and \'XXXX.XX\' as an ' + 'input string (that comes from paste)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric',
        numericFormat: {
          pattern: '0,0.00 $',
          culture: 'de-DE'
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '2456.22';
    destroyEditor();
    yield sleep(100);
    expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');
  }));
  it('should display a string in a format \'X XXX,XX €\' when using language=de, appropriate format in column settings and \'XXXX,XX\' as an ' + 'input string and ignore not needed zeros at the end',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [{
        id: 1,
        name: 'Ted',
        lastName: 'Right',
        money: 0
      }, {
        id: 2,
        name: 'Frank',
        lastName: 'Honest',
        money: 0
      }, {
        id: 3,
        name: 'Joan',
        lastName: 'Well',
        money: 0
      }, {
        id: 4,
        name: 'Sid',
        lastName: 'Strong',
        money: 0
      }, {
        id: 5,
        name: 'Jane',
        lastName: 'Neat',
        money: 0
      }, {
        id: 6,
        name: 'Chuck',
        lastName: 'Jackson',
        money: 0
      }, {
        id: 7,
        name: 'Meg',
        lastName: 'Jansen',
        money: 0
      }, {
        id: 8,
        name: 'Rob',
        lastName: 'Norris',
        money: 0
      }, {
        id: 9,
        name: 'Sean',
        lastName: 'O\'Hara',
        money: 0
      }, {
        id: 10,
        name: 'Eve',
        lastName: 'Branson',
        money: 0
      }],
      columns: [{
        data: 'id',
        type: 'numeric',
        numericFormat: {
          pattern: '0,0.00 $',
          culture: 'de-DE'
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }, {
        data: 'money',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'en-US'
        }
      }]
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '2456,220';
    destroyEditor();
    yield sleep(100);
    expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');
    selectCell(2, 3);
    keyDown('enter');
    document.activeElement.value = '2456.220';
    destroyEditor();
    yield sleep(100);
    expect(getCell(2, 3).innerHTML).toEqual('$2,456.22');
  }));
  it('should display values as "float like" string with dot as determiner after pressing enter ' + 'and not change value after closing editor',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [{
        id: 1,
        price_eur: 222.5,
        price_pln: 1222.6,
        price_aud: 1333.5
      }],
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'price_eur',
        type: 'numeric'
      }, {
        data: 'price_pln',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'en-US'
        }
      }, {
        data: 'price_aud',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'de-DE'
        }
      }]
    });
    selectCell(0, 1);
    keyDown('enter');
    yield sleep(100);
    expect(document.activeElement.value).toEqual('222.5'); // closing editor

    keyDown('enter');
    yield sleep(100);
    expect(getDataAtCell(0, 1)).toEqual(222.5);
    selectCell(0, 2);
    keyDown('enter');
    yield sleep(100);
    expect(document.activeElement.value).toEqual('1222.6'); // closing editor

    keyDown('enter');
    yield sleep(100);
    expect(getDataAtCell(0, 2)).toEqual(1222.6);
    selectCell(0, 3);
    keyDown('enter');
    yield sleep(100);
    expect(document.activeElement.value).toEqual('1333.5'); // closing editor

    keyDown('enter');
    yield sleep(100);
    expect(getDataAtCell(0, 3)).toEqual(1333.5);
  }));
  it('should display values as "float like" string with dot as determiner after double click ' + 'and not change value after closing editor',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [{
        id: 1,
        price_eur: 222.5,
        price_pln: 1222.6,
        price_aud: 1333.5
      }],
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'price_eur',
        type: 'numeric'
      }, {
        data: 'price_pln',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'en-US'
        }
      }, {
        data: 'price_aud',
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'de-DE'
        }
      }]
    });
    mouseDoubleClick(getCell(0, 1));
    yield sleep(100);
    expect(document.activeElement.value).toEqual('222.5'); // closing editor

    keyDown('enter');
    yield sleep(100);
    expect(getDataAtCell(0, 1)).toEqual(222.5);
    mouseDoubleClick(getCell(0, 2));
    yield sleep(100);
    expect(document.activeElement.value).toEqual('1222.6'); // closing editor

    keyDown('enter');
    yield sleep(100);
    expect(getDataAtCell(0, 2)).toEqual(1222.6);
    mouseDoubleClick(getCell(0, 3));
    yield sleep(100);
    expect(document.activeElement.value).toEqual('1333.5'); // closing editor

    keyDown('enter');
    yield sleep(100);
    expect(getDataAtCell(0, 3)).toEqual(1333.5);
  }));
  it('should mark text as invalid without removing when using `setDataAtCell`',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    hot.setDataAtCell(0, 0, 'abc');
    yield sleep(200);
    expect(hot.getDataAtCell(0, 0)).toEqual('abc');
    expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(true);
  }));
  it('should allow custom validator',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      allowInvalid: false,
      columns: [{
        data: 'id',
        type: 'numeric',
        validator: function validator(val, cb) {
          cb(parseInt(val, 10) > 100);
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    selectCell(2, 0);
    keyDown('enter');
    document.activeElement.value = '99';
    destroyEditor();
    yield sleep(100);
    expect(getDataAtCell(2, 0)).not.toEqual(99); // should be ignored

    document.activeElement.value = '999';
    destroyEditor();
    yield sleep(100);
    expect(getDataAtCell(2, 0)).toEqual(999);
  })); // Input element can not lose the focus while entering new characters. It breaks IME editor functionality for Asian users.

  it('should not lose the focus on input element while inserting new characters (#839)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var blured = false;

    var listener = function listener() {
      blured = true;
    };

    var hot = handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric',
        numericFormat: {
          pattern: '0,0.00',
          culture: 'en-US'
        }
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    hot.getActiveEditor().TEXTAREA.addEventListener('blur', listener);
    yield sleep(200);
    hot.getActiveEditor().TEXTAREA.value = '1';
    keyDownUp('1'.charCodeAt(0));
    hot.getActiveEditor().TEXTAREA.value = '12';
    keyDownUp('2'.charCodeAt(0));
    hot.getActiveEditor().TEXTAREA.value = '123';
    keyDownUp('3'.charCodeAt(0));
    expect(blured).toBeFalsy();
    hot.getActiveEditor().TEXTAREA.removeEventListener('blur', listener);
  }));
  it('should not throw error on closing editor when column data is defined as \'length\'', function () {
    hot = handsontable({
      data: [{
        length: 4
      }, {
        length: 5
      }],
      columns: [{
        data: 'length',
        type: 'numeric'
      }, {}, {}]
    });
    selectCell(1, 0);
    keyDown('enter');
    document.activeElement.value = '999';
    expect(function () {
      destroyEditor();
    }).not.toThrow();
  });
  describe('Cell corner is showed properly when changing focused cells #3877', function () {
    var isFocusedCellDisplayingCornerTest = function isFocusedCellDisplayingCornerTest(settings) {
      var moveFromRow = settings.moveFromRow;
      var moveFromCol = settings.moveFromCol;
      var moveToRow = settings.moveToRow;
      var moveToCol = settings.moveToCol;
      var doneFunc = settings.doneFunc;
      var $corner = settings.$container.find('.wtBorder.current.corner');
      selectCell(moveFromRow, moveFromCol);
      keyDown('enter');
      selectCell(moveToRow, moveToCol);
      setTimeout(function () {
        expect($corner.css('display')).toEqual('block');
        doneFunc();
      }, 100);
    };

    it('Moving from numeric editor to text editor', function (done) {
      handsontable({
        data: [{
          id: 1,
          name: 'Ted',
          lastName: 'Right',
          money: 0
        }],
        columns: [{
          data: 'id'
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }, {
          data: 'money',
          type: 'numeric',
          numericFormat: {
            pattern: '$0,0.00',
            culture: 'en-US'
          }
        }]
      });
      isFocusedCellDisplayingCornerTest({
        moveFromRow: 0,
        moveFromCol: 3,
        moveToRow: 0,
        moveToCol: 0,
        $container: spec().$container,
        doneFunc: done
      });
    });
    it('Moving from text editor to numeric editor', function (done) {
      handsontable({
        data: [{
          id: 1,
          name: 'Ted',
          lastName: 'Right',
          money: 0
        }],
        columns: [{
          data: 'id'
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }, {
          data: 'money',
          type: 'numeric',
          numericFormat: {
            pattern: '$0,0.00',
            culture: 'en-US'
          }
        }]
      });
      isFocusedCellDisplayingCornerTest({
        moveFromRow: 0,
        moveFromCol: 1,
        moveToRow: 0,
        moveToCol: 3,
        $container: spec().$container,
        doneFunc: done
      });
    });
  });
  describe('IME support', function () {
    it('should focus editable element after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        type: 'numeric',
        numericFormat: {
          pattern: '$0,0.00',
          culture: 'en-US'
        }
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    }));
  });
});

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('PasswordEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\" style=\"width: 300px; height: 300px;\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should display editor as password field', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        editor: Handsontable.editors.PasswordEditor
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    var editor = $('.handsontableInput');
    expect(editor.is(':visible')).toBe(true);
    expect(editor.is(':password')).toBe(true);
  });
  it('should set passwordEditor using \'password\' alias', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        editor: 'password'
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    var editor = $('.handsontableInput');
    expect(editor.is(':visible')).toBe(true);
    expect(editor.is(':password')).toBe(true);
  });
  it('should set passwordEditor using column type \'password\' ', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        type: 'password'
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    var editorHolder = $('.handsontableInputHolder');
    var editor = editorHolder.find('.handsontableInput');
    expect(editorHolder.is(':visible')).toBe(true);
    expect(editor.is(':password')).toBe(true);
  });
  it('should save values typed in passwordEditor', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        editor: 'password'
      }]
    });
    selectCell(0, 0);
    expect(getDataAtCell(0, 0)).toMatch('Joe');
    expect(getRenderedValue(0, 0)).toMatch('Joe');
    keyDown('enter');
    var editorHolder = $('.handsontableInputHolder');
    var editor = editorHolder.find('.handsontableInput');
    expect(parseInt(editorHolder.css('z-index'), 10)).toBeGreaterThan(0);
    editor.val('Edgar');
    selectCell(1, 0); // closes editor and saves current value

    expect(editorHolder.css('z-index')).toBe('-1');
    expect(getDataAtCell(0, 0)).toMatch('Edgar');
    expect(getRenderedValue(0, 0)).toMatch('Edgar');
  }); // Input element can not lose the focus while entering new characters. It breaks IME editor functionality for Asian users.

  it('should not lose the focus on input element while inserting new characters (#839)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var blured = false;

    var listener = function listener() {
      blured = true;
    };

    var hot = handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        data: 'id',
        type: 'password'
      }]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    hot.getActiveEditor().TEXTAREA.addEventListener('blur', listener);
    yield sleep(200);
    hot.getActiveEditor().TEXTAREA.value = '1';
    keyDownUp('1'.charCodeAt(0));
    hot.getActiveEditor().TEXTAREA.value = '12';
    keyDownUp('2'.charCodeAt(0));
    hot.getActiveEditor().TEXTAREA.value = '123';
    keyDownUp('3'.charCodeAt(0));
    expect(blured).toBeFalsy();
    hot.getActiveEditor().TEXTAREA.removeEventListener('blur', listener);
  }));
  describe('IME support', function () {
    it('should focus editable element after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        type: 'password'
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    }));
  });
});

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('SelectEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should display select', function () {
    handsontable({
      columns: [{
        editor: 'select'
      }]
    });
    selectCell(0, 0);
    var editor = $('.htSelectEditor');
    expect(editor.length).toEqual(1);
    expect(editor.is('select')).toBe(true);
    expect(editor.is(':visible')).toBe(false);
    keyDown('enter');
    expect(editor.is(':visible')).toBe(true);
    expect(editor.offset()).toEqual($(getCell(0, 0)).offset());
  });
  it('should display and correctly reposition select editor while scrolling', function (done) {
    var hot = handsontable({
      width: 200,
      height: 200,
      data: Handsontable.helper.createSpreadsheetData(100, 100),
      columns: [{
        editor: 'select'
      }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
        editor: 'select'
      }]
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    selectCell(0, 0);
    keyDown('enter');
    keyUp('enter');
    mainHolder.scrollTop = 10;
    mainHolder.scrollLeft = 20;
    var editor = $('.htSelectEditor');
    setTimeout(function () {
      expect(editor.css('top')).toEqual('-10px');
      expect(editor.css('left')).toEqual('-20px');
      done();
    }, 200);
  });
  it('should populate select with given options (array)', function () {
    var options = ['Misubishi', 'Chevrolet', 'Lamborgini'];
    handsontable({
      columns: [{
        editor: 'select',
        selectOptions: options
      }]
    });
    selectCell(0, 0);
    var editor = $('.htSelectEditor');
    keyDown('enter');
    var $options = editor.find('option');
    expect($options.length).toEqual(options.length);
    expect($options.eq(0).val()).toMatch(options[0]);
    expect($options.eq(0).html()).toMatch(options[0]);
    expect($options.eq(1).val()).toMatch(options[1]);
    expect($options.eq(1).html()).toMatch(options[1]);
    expect($options.eq(2).val()).toMatch(options[2]);
    expect($options.eq(2).html()).toMatch(options[2]);
  });
  it('should populate select with given options (object)', function () {
    var options = {
      mit: 'Misubishi',
      che: 'Chevrolet',
      lam: 'Lamborgini'
    };
    handsontable({
      columns: [{
        editor: 'select',
        selectOptions: options
      }]
    });
    selectCell(0, 0);
    var editor = $('.htSelectEditor');
    keyDown('enter');
    var $options = editor.find('option');
    expect($options.eq(0).val()).toMatch('mit');
    expect($options.eq(0).html()).toMatch(options.mit);
    expect($options.eq(1).val()).toMatch('che');
    expect($options.eq(1).html()).toMatch(options.che);
    expect($options.eq(2).val()).toMatch('lam');
    expect($options.eq(2).html()).toMatch(options.lam);
  });
  it('should populate select with given options (function:array)', function () {
    var options = function options() {
      return ['Misubishi', 'Chevrolet', 'Lamborgini'];
    };

    handsontable({
      columns: [{
        editor: 'select',
        selectOptions: options
      }]
    });
    selectCell(0, 0);
    var editor = $('.htSelectEditor');
    keyDown('enter');
    var $options = editor.find('option');
    expect($options.length).toEqual(options().length);
    expect($options.eq(0).val()).toMatch(options()[0]);
    expect($options.eq(0).html()).toMatch(options()[0]);
    expect($options.eq(1).val()).toMatch(options()[1]);
    expect($options.eq(1).html()).toMatch(options()[1]);
    expect($options.eq(2).val()).toMatch(options()[2]);
    expect($options.eq(2).html()).toMatch(options()[2]);
  });
  it('should populate select with given options (function:object)', function () {
    var options = function options() {
      return {
        mit: 'Misubishi',
        che: 'Chevrolet',
        lam: 'Lamborgini'
      };
    };

    handsontable({
      columns: [{
        editor: 'select',
        selectOptions: options
      }]
    });
    selectCell(0, 0);
    var editor = $('.htSelectEditor');
    keyDown('enter');
    var $options = editor.find('option');
    expect($options.eq(0).val()).toMatch('mit');
    expect($options.eq(0).html()).toMatch(options().mit);
    expect($options.eq(1).val()).toMatch('che');
    expect($options.eq(1).html()).toMatch(options().che);
    expect($options.eq(2).val()).toMatch('lam');
    expect($options.eq(2).html()).toMatch(options().lam);
  });
  it('should mark option matching cell value as selected', function () {
    var options = ['Misubishi', 'Chevrolet', 'Lamborgini'];
    handsontable({
      data: [['Misubishi'], ['Lamborgini'], ['Chevrolet']],
      columns: [{
        editor: 'select',
        selectOptions: options
      }]
    });
    selectCell(0, 0);
    var editor = $('.htSelectEditor');
    keyDown('enter');
    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(0, 0));
    keyDown('enter');
    selectCell(1, 0);
    keyDown('enter');
    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(1, 0));
    keyDown('enter');
    selectCell(2, 0);
    keyDown('enter');
    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(2, 0));
    keyDown('enter');
  });
  it('should not prevent the default event action when select is clicked', function () {
    var options = function options() {
      return ['Misubishi', 'Chevrolet', 'Lamborgini'];
    };

    handsontable({
      columns: [{
        editor: 'select',
        selectOptions: options
      }]
    });
    selectCell(0, 0);
    var editor = $('.htSelectEditor');
    keyDown('enter');
    var selectMouseDownListener = jasmine.createSpy('selectMouseDownListener');
    $('body').on('mousedown', selectMouseDownListener);
    editor.mousedown();
    expect(selectMouseDownListener.calls.count()).toEqual(1);
    var event = selectMouseDownListener.calls.argsFor(0)[0];
    expect(event).toBeDefined();
    expect(event.isDefaultPrevented()).toBe(false);
  });
  describe('IME support', function () {
    it('should focus editable element (from copyPaste plugin) after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        editor: false
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(document.querySelector('#HandsontableCopyPaste'));
    }));
  });
});

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('TextEditor', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\" style=\"width: 300px; height: 200px; overflow: hidden;\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should begin editing when enterBeginsEditing equals true', function () {
    handsontable({
      enterBeginsEditing: true,
      editor: 'text'
    });
    selectCell(2, 2);
    keyDown('enter');
    var selection = getSelected();
    expect(selection).toEqual([[2, 2, 2, 2]]);
    expect(isEditorVisible()).toEqual(true);
  });
  it('should move down after editing', function () {
    handsontable({
      editor: 'text'
    });
    selectCell(2, 2);
    keyDown('enter');
    keyDown('enter');
    var selection = getSelected();
    expect(selection).toEqual([[3, 2, 3, 2]]);
  });
  it('should move down when enterBeginsEditing equals false', function () {
    handsontable({
      enterBeginsEditing: false
    });
    selectCell(2, 2);
    keyDown('enter');
    var selection = getSelected();
    expect(selection).toEqual([[3, 2, 3, 2]]);
    expect(isEditorVisible()).toEqual(false);
  });
  it('should create editor holder after cell selection', function () {
    handsontable({
      editor: 'text'
    });
    var container = spec().$container;
    expect(container.find('.handsontableInputHolder').length).toBe(0);
    selectCell(0, 0);
    expect(container.find('.handsontableInputHolder').length).toBe(1);
  });
  it('should prepare editor with proper styles after selection', function () {
    handsontable({
      editor: 'text'
    });
    selectCell(0, 0);

    var _spec$$container$find = spec().$container.find('.handsontableInputHolder').css(['left', 'position', 'top', 'zIndex']),
        left = _spec$$container$find.left,
        position = _spec$$container$find.position,
        top = _spec$$container$find.top,
        zIndex = _spec$$container$find.zIndex;

    expect(left).toBe('-9999px');
    expect(position).toBe('fixed');
    expect(top).toBe('-9999px');
    expect(zIndex).toBe('-1');
  });
  it('should change editor\'s CSS properties during switching to being visible', function () {
    handsontable({
      editor: 'text'
    });
    selectCell(0, 0);
    keyDownUp('enter');
    var cell = getCell(0, 0);
    var _ref = [cell.offsetTop, cell.offsetLeft],
        cellOffsetTop = _ref[0],
        cellOffsetLeft = _ref[1];

    var _spec$$container$find2 = spec().$container.find('.handsontableInputHolder').css(['left', 'position', 'top', 'zIndex']),
        left = _spec$$container$find2.left,
        position = _spec$$container$find2.position,
        top = _spec$$container$find2.top,
        zIndex = _spec$$container$find2.zIndex;

    expect(parseInt(left, 10)).toBeAroundValue(cellOffsetLeft);
    expect(position).toBe('absolute');
    expect(parseInt(top, 10)).toBeAroundValue(cellOffsetTop);
    expect(zIndex).not.toBe('-1');
  });
  it('should render string in textarea', function () {
    handsontable();
    setDataAtCell(2, 2, 'string');
    selectCell(2, 2);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('string');
  });
  it('should render proper value after cell coords manipulation', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      modifyRow: function modifyRow(row) {
        return row === 4 ? 0 : row + 1;
      },
      modifyCol: function modifyCol(column) {
        return column === 4 ? 0 : column + 1;
      }
    });
    selectCell(0, 0);
    getActiveEditor().beginEditing();
    getActiveEditor().refreshValue();
    expect(getActiveEditor().originalValue).toEqual('B2');
  });
  it('should render textarea editor with tabindex=-1 attribute',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable();
    selectCell(0, 0);
    keyDown('enter');
    yield sleep(10);
    expect(hot.getActiveEditor().TEXTAREA.getAttribute('tabindex')).toBe('-1');
  }));
  it('should render textarea editor in specified size at cell 0, 0 without headers', function (done) {
    var hot = handsontable();
    selectCell(0, 0);
    keyDown('enter');
    setTimeout(function () {
      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');
      expect(hot.getActiveEditor().TEXTAREA.style.width).toBe('40px');
      done();
    }, 200);
  });
  it('should render textarea editor in specified size at cell 1, 0 without headers', function (done) {
    var hot = handsontable();
    selectCell(1, 1);
    keyDown('enter');
    setTimeout(function () {
      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');
      done();
    }, 200);
  });
  it('should render textarea editor in specified size at cell 0, 0 with headers', function (done) {
    var hot = handsontable({
      rowHeaders: true,
      colHeaders: true
    });
    selectCell(0, 0);
    keyDown('enter');
    setTimeout(function () {
      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');
      expect(hot.getActiveEditor().TEXTAREA.style.width).toBe('40px');
      expect(hot.getActiveEditor().textareaParentStyle.top).toBe('26px');
      done();
    }, 200);
  });
  it('should render textarea editor in specified size at cell 0, 0 with headers defined in columns', function (done) {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
      columns: [{
        data: 'prop0',
        title: 'Prop 0'
      }, {
        data: 'prop1',
        title: 'Prop 1'
      }, {
        data: 'prop2',
        title: 'Prop 2'
      }, {
        data: 'prop3',
        title: 'Prop 3'
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    setTimeout(function () {
      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');
      expect(parseInt(hot.getActiveEditor().TEXTAREA.style.width, 10)).toBeAroundValue(50, 4);
      expect(hot.getActiveEditor().textareaParentStyle.top).toBe('26px');
      done();
    }, 200);
  });
  it('should hide whole editor when it is higher then header', function (done) {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(50, 50),
      rowHeaders: true,
      colHeaders: true
    });
    setDataAtCell(2, 2, 'string\nstring\nstring');
    selectCell(2, 2);
    keyDown('enter');
    keyUp('enter');
    var mainHolder = hot.view.wt.wtTable.holder;
    mainHolder.scrollTop = 150;
    mainHolder.scrollLeft = 150;
    setTimeout(function () {
      expect(parseInt(hot.getActiveEditor().textareaParentStyle.top, 10)).toBeAroundValue(-77);
      expect(parseInt(hot.getActiveEditor().textareaParentStyle.left, 10)).toBeAroundValue(-1);
      done();
    }, 200);
  });
  it('should hide editor when quick navigation by click scrollbar was triggered',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(50, 50),
      rowHeaders: true,
      colHeaders: true
    });
    setDataAtCell(2, 2, 'string\nstring\nstring');
    selectCell(2, 2);
    keyDown('enter');
    keyUp('enter');
    hot.scrollViewportTo(49);
    yield sleep(100);
    expect(isEditorVisible()).toBe(false);
  }));
  it('should render textarea editor in specified height (single line)', function (done) {
    var hot = handsontable();
    setDataAtCell(2, 2, 'first line');
    selectCell(2, 2);
    keyDown('enter');
    setTimeout(function () {
      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');
      done();
    }, 200);
  });
  it('should render textarea editor in specified height (multi line)', function (done) {
    var hot = handsontable();
    setDataAtCell(2, 2, 'first line\n second line\n third line...');
    selectCell(2, 2);
    keyDown('enter');
    setTimeout(function () {
      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('64px');
      done();
    }, 200);
  });
  it('should render number in textarea', function () {
    handsontable();
    setDataAtCell(2, 2, 13);
    selectCell(2, 2);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('13');
  });
  it('should render boolean true in textarea', function () {
    handsontable();
    setDataAtCell(2, 2, true);
    selectCell(2, 2);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('true');
  });
  it('should render boolean false in textarea', function () {
    handsontable();
    setDataAtCell(2, 2, false);
    selectCell(2, 2);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('false');
  });
  it('should render null in textarea', function () {
    handsontable();
    setDataAtCell(2, 2, null);
    selectCell(2, 2);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('');
  });
  it('should render undefined in textarea', function () {
    handsontable();
    setDataAtCell(2, 2, void 0);
    selectCell(2, 2);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('');
  });
  it('should render nested object value in textarea', function () {
    handsontable({
      data: [{
        name: {
          first: 'Tom',
          last: 'Kowalski',
          obj: {}
        }
      }, {
        name: {
          first: 'John',
          last: 'Cage',
          obj: {
            foo: 'bar'
          }
        }
      }],
      columns: [{
        data: 'name.last'
      }, {
        data: 'name.obj.foo'
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('Kowalski');
    selectCell(1, 1);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('bar');
  });
  it('should render nested object value in textarea after change rows order', function () {
    var hot = handsontable({
      data: [{
        name: {
          first: 'Tom',
          last: 'Kowalski',
          obj: {}
        }
      }, {
        name: {
          first: 'John',
          last: 'Cage',
          obj: {
            foo: 'bar'
          }
        }
      }],
      columns: [{
        data: 'name.last'
      }, {
        data: 'name.obj.foo'
      }],
      manualRowMove: true
    });
    hot.getPlugin('manualRowMove').moveRow(1, 0);
    hot.render();
    selectCell(0, 0);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('Cage');
    keyDown('enter');
    expect(hot.getDataAtCell(0, 0)).toEqual('Cage');
    selectCell(1, 1);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('');
    keyDown('enter');
    expect(hot.getDataAtCell(1, 1)).toEqual('');
  });
  it('should render nested object value in textarea after change columns order', function () {
    var hot = handsontable({
      data: [{
        name: {
          first: 'Tom',
          last: 'Kowalski',
          obj: {}
        }
      }, {
        name: {
          first: 'John',
          last: 'Cage',
          obj: {
            foo: 'bar'
          }
        }
      }],
      columns: [{
        data: 'name.last'
      }, {
        data: 'name.obj.foo'
      }],
      manualColumnMove: true
    });
    hot.getPlugin('manualColumnMove').moveColumn(1, 0);
    hot.render();
    selectCell(0, 0);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('');
    keyDown('enter');
    expect(hot.getDataAtCell(0, 0)).toEqual('');
    selectCell(1, 1);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('Cage');
    keyDown('enter');
    expect(hot.getDataAtCell(1, 1)).toEqual('Cage');
  });
  it('should render array value defined by columns settings in textarea', function () {
    handsontable({
      data: [['', 'Kia'], ['2012', 10], ['2013', 10]],
      columns: [{
        data: '1'
      }, {
        data: '0'
      }]
    });
    selectCell(0, 0);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('Kia');
    selectCell(1, 1);
    keyDown('enter');
    expect(keyProxy().val()).toEqual('2012');
  });
  it('should open editor after hitting F2', function () {
    handsontable();
    selectCell(2, 2);
    expect(isEditorVisible()).toEqual(false);
    keyDown('f2');
    expect(isEditorVisible()).toEqual(true);
  });
  it('should close editor after hitting ESC', function () {
    handsontable();
    selectCell(2, 2);
    expect(isEditorVisible()).toEqual(false);
    keyDown('f2');
    expect(isEditorVisible()).toEqual(true);
    keyDown('esc');
    expect(isEditorVisible()).toEqual(false);
  });
  it('should NOT open editor after hitting CapsLock', function () {
    handsontable();
    selectCell(2, 2);
    expect(isEditorVisible()).toEqual(false);
    keyDown(Handsontable.helper.KEY_CODES.CAPS_LOCK);
    expect(isEditorVisible()).toEqual(false);
  });
  it('should open editor after cancelling edit and beginning it again', function () {
    handsontable();
    selectCell(2, 2);
    expect(isEditorVisible()).toEqual(false);
    keyDown('f2');
    expect(isEditorVisible()).toEqual(true);
    keyDown('esc');
    expect(isEditorVisible()).toEqual(false);
    keyDown('f2');
    expect(isEditorVisible()).toEqual(true);
  });
  it('loadData should not destroy editor', function () {
    handsontable();
    selectCell(2, 2);
    keyDown('f2');
    loadData(getData());
    expect(isEditorVisible()).toEqual(true);
  });
  it('updateSettings should not destroy editor', function () {
    handsontable();
    selectCell(2, 2);
    keyDown('f2');
    updateSettings({
      data: getData()
    });
    expect(isEditorVisible()).toEqual(true);
  });
  it('textarea should have cell dimensions (after render)', function () {
    var data = [['a', 'b'], ['c', 'd']];
    handsontable({
      data: data,
      minRows: 4,
      minCols: 4,
      minSpareRows: 4,
      minSpareCols: 4,
      enterMoves: false
    });
    selectCell(1, 1);
    var $td = getHtCore().find('tbody tr:eq(1) td:eq(1)');
    keyDownUp('enter');
    expect(keyProxy().width()).toEqual($td.width());
    keyDownUp('enter');
    data[1][1] = 'dddddddddddddddddddd';
    render();
    keyDownUp('enter');
    expect(keyProxy().width()).toEqual($td.width());
  });
  it('global shortcuts (like CTRL+A) should be blocked when cell is being edited', function () {
    handsontable();
    selectCell(2, 2);
    keyDownUp('enter');
    keyDown(65, {
      ctrlKey: true
    }); // CTRL+A should NOT select all table when cell is edited

    var selection = getSelected();
    expect(selection).toEqual([[2, 2, 2, 2]]);
    expect(isEditorVisible()).toEqual(true);
  });
  it('should open editor after double clicking on a cell', function (done) {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 2)
    });
    var cell = $(getCell(0, 0));
    var clicks = 0;
    window.scrollTo(0, cell.offset().top);
    setTimeout(function () {
      mouseDown(cell);
      mouseUp(cell);
      clicks += 1;
    }, 0);
    setTimeout(function () {
      mouseDown(cell);
      mouseUp(cell);
      clicks += 1;
    }, 100);
    setTimeout(function () {
      var editor = hot.getActiveEditor();
      expect(clicks).toBe(2);
      expect(editor.isOpened()).toBe(true);
      expect(editor.isInFullEditMode()).toBe(true);
      done();
    }, 200);
  });
  it('should call editor focus() method after opening an editor', function () {
    var hot = handsontable();
    selectCell(2, 2);
    var editor = hot.getActiveEditor();
    spyOn(editor, 'focus');
    expect(editor.isOpened()).toEqual(false);
    expect(editor.focus).not.toHaveBeenCalled();
    keyDown('f2');
    expect(editor.isOpened()).toEqual(true);
    expect(editor.focus).toHaveBeenCalled();
  });
  it('editor size should not exceed the viewport after text edit', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 5),
      width: 200,
      height: 200
    });
    selectCell(2, 2);
    keyDown('enter');
    expect(isEditorVisible()).toEqual(true);
    document.activeElement.value = 'Very very very very very very very very very very very very very very very very very long text';
    keyDownUp(32); // space - trigger textarea resize

    var $textarea = $(document.activeElement);
    var $wtHider = spec().$container.find('.wtHider');
    expect($textarea.offset().left + $textarea.outerWidth()).not.toBeGreaterThan($wtHider.offset().left + spec().$container.outerWidth());
    expect($textarea.offset().top + $textarea.outerHeight()).not.toBeGreaterThan($wtHider.offset().top + $wtHider.outerHeight());
  });
  it('should open editor after selecting cell in another table and hitting enter', function () {
    spec().$container2 = $("<div id=\"".concat(id, "-2\"></div>")).appendTo('body');
    var hot1 = handsontable();
    var hot2 = handsontable2.call(this);
    spec().$container.find('tbody tr:eq(0) td:eq(0)').simulate('mousedown');
    spec().$container.find('tbody tr:eq(0) td:eq(0)').simulate('mouseup'); // Open editor in HOT1

    keyDown('enter');
    expect(isEditorVisible($(hot1.getActiveEditor().TEXTAREA))).toBe(true); // Close editor in HOT1

    keyDown('enter');
    expect(isEditorVisible($(hot1.getActiveEditor().TEXTAREA))).toBe(false);
    spec().$container2.find('tbody tr:eq(0) td:eq(0)').simulate('mousedown');
    spec().$container2.find('tbody tr:eq(0) td:eq(0)').simulate('mouseup');
    expect(hot1.getSelected()).toBeUndefined();
    expect(hot2.getSelected()).toEqual([[0, 0, 0, 0]]); // Open editor in HOT2

    keyDown('enter');
    expect(isEditorVisible($(hot2.getActiveEditor().TEXTAREA))).toBe(true);
    spec().$container2.handsontable('destroy');
    spec().$container2.remove();

    function handsontable2(options) {
      var container = spec().$container2;
      container.handsontable(options);
      container[0].focus(); // otherwise TextEditor tests do not pass in IE8

      return container.data('handsontable');
    }
  });
  it('should open editor after pressing a printable character', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3)
    });
    selectCell(0, 0);
    expect(isEditorVisible()).toBe(false);
    spec().$container.simulate('keydown', {
      keyCode: 'A'.charCodeAt(0)
    });
    expect(isEditorVisible()).toBe(true);
  });
  it('should open editor after pressing a printable character with shift key', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3)
    });
    selectCell(0, 0);
    expect(isEditorVisible()).toBe(false);
    spec().$container.simulate('keydown', {
      keyCode: 'A'.charCodeAt(0),
      shiftKey: true
    });
    expect(isEditorVisible()).toBe(true);
  });
  it('should be able to open editor after clearing cell data with DELETE', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3)
    });
    selectCell(0, 0);
    expect(isEditorVisible()).toBe(false);
    spec().$container.simulate('keydown', {
      keyCode: 46
    });
    spec().$container.simulate('keydown', {
      keyCode: 'A'.charCodeAt(0)
    });
    expect(isEditorVisible()).toBe(true);
  });
  it('should be able to open editor after clearing cell data with BACKSPACE', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3)
    });
    selectCell(0, 0);
    expect(isEditorVisible()).toBe(false);
    spec().$container.simulate('keydown', {
      keyCode: 8 // backspace

    });
    spec().$container.simulate('keydown', {
      keyCode: 'A'.charCodeAt(0)
    });
    expect(isEditorVisible()).toBe(true);
  });
  it('should scroll editor to a cell, if trying to edit cell that is outside of the viewport', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(20, 20),
      width: 100,
      height: 50
    });
    selectCell(0, 0);
    expect(getCell(0, 0)).not.toBeNull();
    expect(getCell(19, 19)).toBeNull();
    hot.view.scrollViewport({
      row: 19,
      col: 19
    });
    hot.render();
    expect(getCell(0, 0)).toBeNull();
    expect(getCell(19, 19)).not.toBeNull();
    keyDown('enter');
    expect(getCell(0, 0)).not.toBeNull();
    expect(getCell(19, 19)).toBeNull();
  });
  it('should open empty editor after clearing cell value width BACKSPACE', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4)
    });
    expect(getDataAtCell(0, 0)).toEqual('A1');
    selectCell(0, 0);
    keyDown(Handsontable.helper.KEY_CODES.BACKSPACE);
    expect(getDataAtCell(0, 0)).toEqual('');
    expect(hot.getActiveEditor().isOpened()).toBe(false);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect(hot.getActiveEditor().isOpened()).toBe(true);
    expect(hot.getActiveEditor().getValue()).toEqual('');
  });
  it('should open empty editor after clearing cell value width DELETE', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4)
    });
    expect(getDataAtCell(0, 0)).toEqual('A1');
    selectCell(0, 0);
    keyDown(Handsontable.helper.KEY_CODES.DELETE);
    expect(getDataAtCell(0, 0)).toEqual('');
    expect(hot.getActiveEditor().isOpened()).toBe(false);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect(hot.getActiveEditor().isOpened()).toBe(true);
    expect(hot.getActiveEditor().getValue()).toEqual('');
  });
  it('should not open editor after hitting ALT (#1239)', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4)
    });
    expect(getDataAtCell(0, 0)).toEqual('A1');
    selectCell(0, 0);
    keyDown(Handsontable.helper.KEY_CODES.ALT);
    expect(hot.getActiveEditor().isOpened()).toBe(false);
  });
  it('should open editor at the same coordinates as the edited cell', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(16, 8),
      fixedColumnsLeft: 2,
      fixedRowsTop: 2
    });
    var mainHolder = hot.view.wt.wtTable.holder; // corner

    selectCell(1, 1);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    var $inputHolder = $('.handsontableInputHolder');
    expect($(getCell(1, 1)).offset().left).toEqual($inputHolder.offset().left + 1);
    expect($(getCell(1, 1)).offset().top).toEqual($inputHolder.offset().top + 1); // top

    selectCell(1, 4);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect($(getCell(1, 4)).offset().left).toEqual($inputHolder.offset().left + 1);
    expect($(getCell(1, 4)).offset().top).toEqual($inputHolder.offset().top + 1); // left

    selectCell(4, 1);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect($(getCell(4, 1)).offset().left).toEqual($inputHolder.offset().left + 1);
    expect($(getCell(4, 1)).offset().top).toEqual($inputHolder.offset().top + 1); // non-fixed

    selectCell(4, 4);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect($(getCell(4, 4)).offset().left).toEqual($inputHolder.offset().left + 1);
    expect($(getCell(4, 4)).offset().top).toEqual($inputHolder.offset().top + 1);
    $(mainHolder).scrollTop(1000);
  });
  it('should open editor at the same coordinates as the edited cell if preventOverflow is set as horizontal after the table had been scrolled',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container[0].style = 'width: 400px';
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(30, 30),
      preventOverflow: 'horizontal',
      fixedColumnsLeft: 2,
      fixedRowsTop: 2,
      rowHeaders: true,
      colHeaders: true
    });
    var $holder = $(hot.view.wt.wtTable.holder);
    $holder.scrollTop(100);
    $holder.scrollLeft(100);
    hot.render();
    yield sleep(50); // corner

    selectCell(1, 1);
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER);
    var $inputHolder = $('.handsontableInputHolder');
    expect($(getCell(1, 1, true)).offset().left).toEqual($inputHolder.offset().left + 1);
    expect($(getCell(1, 1, true)).offset().top).toEqual($inputHolder.offset().top + 1); // top

    selectCell(1, 4);
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER);
    expect($(getCell(1, 4, true)).offset().left).toEqual($inputHolder.offset().left + 1);
    expect($(getCell(1, 4, true)).offset().top).toEqual($inputHolder.offset().top + 1); // left

    selectCell(4, 1);
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER);
    expect($(getCell(4, 1, true)).offset().left).toEqual($inputHolder.offset().left + 1);
    expect($(getCell(4, 1, true)).offset().top).toEqual($inputHolder.offset().top + 1); // non-fixed

    selectCell(4, 4);
    keyDownUp(Handsontable.helper.KEY_CODES.ENTER);
    expect($(getCell(4, 4, true)).offset().left).toEqual($inputHolder.offset().left + 1);
    expect($(getCell(4, 4, true)).offset().top).toEqual($inputHolder.offset().top + 1);
  }));
  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (corner)', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(16, 8),
      fixedColumnsLeft: 2,
      fixedRowsTop: 2
    });
    var $holder = $(hot.view.wt.wtTable.holder);
    $holder.scrollTop(100);
    $holder.scrollLeft(100);
    hot.render(); // corner

    selectCell(1, 1);
    var currentCell = hot.getCell(1, 1, true);
    var left = $(currentCell).offset().left;
    var top = $(currentCell).offset().top;
    var $inputHolder = $('.handsontableInputHolder');
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect(left).toEqual($inputHolder.offset().left + 1);
    expect(top).toEqual($inputHolder.offset().top + 1);
  });
  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (top)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(50, 50),
      fixedColumnsLeft: 2,
      fixedRowsTop: 2
    });
    var $holder = $(hot.view.wt.wtTable.holder);
    $holder[0].scrollTop = 500;
    yield sleep(100);
    $holder[0].scrollLeft = 500;
    yield sleep(100); // top

    selectCell(1, 6);
    yield sleep(100);
    var currentCell = hot.getCell(1, 6, true);
    var left = $(currentCell).offset().left;
    var top = $(currentCell).offset().top;
    var $inputHolder = $('.handsontableInputHolder');
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect(left).toEqual($inputHolder.offset().left + 1);
    expect(top).toEqual($inputHolder.offset().top + 1);
  }));
  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (left)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(50, 50),
      fixedColumnsLeft: 2,
      fixedRowsTop: 2
    });
    var $holder = $(hot.view.wt.wtTable.holder);
    $holder.scrollTop(500);
    $holder.scrollLeft(500);
    yield sleep(100);
    selectCell(6, 1);
    yield sleep(100);
    var currentCell = hot.getCell(6, 1, true);
    var left = $(currentCell).offset().left;
    var top = $(currentCell).offset().top;
    var $inputHolder = $('.handsontableInputHolder');
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect(left).toEqual($inputHolder.offset().left + 1);
    expect(top).toEqual($inputHolder.offset().top + 1);
  }));
  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (non-fixed)', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(50, 50),
      fixedColumnsLeft: 2,
      fixedRowsTop: 2
    });
    var $holder = $(hot.view.wt.wtTable.holder);
    $holder.scrollTop(500);
    $holder.scrollLeft(500);
    hot.render(); // non-fixed

    selectCell(7, 7);
    var currentCell = hot.getCell(7, 7, true);
    var left = $(currentCell).offset().left;
    var top = $(currentCell).offset().top;
    var $inputHolder = $('.handsontableInputHolder');
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect(left).toEqual($inputHolder.offset().left + 1);
    expect(top).toEqual($inputHolder.offset().top + 1);
  });
  it('should open editor at the same backgroundColor as the edited cell',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [['', 5, 12, 13]],
      renderer: function renderer(instance, td, row, col, prop, value) {
        if (!value || value === '') {
          td.style.background = '#EEE';
        }
      }
    });
    mouseDoubleClick(getCell(0, 0));
    yield sleep(100);
    expect($('.handsontableInput')[0].style.backgroundColor).toEqual('rgb(238, 238, 238)');
    mouseDoubleClick(getCell(0, 1));
    yield sleep(100);
    expect($('.handsontableInput')[0].style.backgroundColor).toEqual('');
    mouseDoubleClick(getCell(0, 2));
    yield sleep(100);
    expect($('.handsontableInput')[0].style.backgroundColor).toEqual('');
  }));
  it('should display editor with the proper size, when the edited column is beyond the tables container', function () {
    spec().$container.css('overflow', '');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 9)
    });
    selectCell(0, 7);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect(Handsontable.dom.outerWidth(hot.getActiveEditor().TEXTAREA)).toBeAroundValue(Handsontable.dom.outerWidth(hot.getCell(0, 7)));
  });
  it('should display editor with the proper size, when editing a last row after the table is scrolled to the bottom', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 8),
      minSpareRows: 1,
      height: 100
    });
    selectCell(0, 2);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    var regularHeight = Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA);
    selectCell(3, 2);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    keyDown(Handsontable.helper.KEY_CODES.ENTER); // lame check, needs investigating why sometimes it leaves 2px error

    if (Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA) === regularHeight) {
      expect(Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA)).toEqual(regularHeight);
    } else {
      expect(Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA)).toEqual(regularHeight - 2);
    }
  });
  it('should render the text without trimming out the whitespace, if trimWhitespace is set to false', function () {
    spec().$container.css('overflow', '');
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 9),
      trimWhitespace: false
    });
    selectCell(0, 2);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    hot.getActiveEditor().TEXTAREA.value = '       test    of    whitespace      ';
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    expect(getDataAtCell(0, 2).length).toEqual(37);
  });
  it('should insert new line on caret position when pressing ALT + ENTER', function () {
    var data = [['Maserati', 'Mazda'], ['Honda', 'Mini']];
    var hot = handsontable({
      data: data
    });
    selectCell(0, 0);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    var $editorInput = $('.handsontableInput');
    Handsontable.dom.setCaretPosition($editorInput[0], 2);
    $editorInput.simulate('keydown', {
      altKey: true,
      keyCode: Handsontable.helper.KEY_CODES.ENTER
    });
    expect(hot.getActiveEditor().TEXTAREA.value).toEqual('Ma\nserati');
  });
  it('should be displayed and resized properly, so it doesn\'t exceed the viewport dimensions', function () {
    var data = [['', '', '', '', ''], ['', 'The Dude abides. I don\'t know about you but I take comfort in that. It\'s good knowin\' he\'s out there. The ' + 'Dude. Takin\' \'er easy for all us sinners. Shoosh. I sure hope he makes the finals.', '', '', ''], ['', '', '', '', '']];
    var hot = handsontable({
      data: data,
      colWidths: 40,
      width: 300,
      height: 200,
      minSpareRows: 20,
      minSpareCols: 20
    });
    selectCell(1, 1);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    var $editorInput = $('.handsontableInput');
    var $editedCell = $(hot.getCell(1, 1));
    expect($editorInput.outerWidth()).toEqual(hot.view.wt.wtTable.holder.clientWidth - $editedCell.position().left + 1);
    hot.scrollViewportTo(void 0, 3);
    hot.render();
    expect($editorInput.width() + $editorInput.offset().left).toBeLessThan(hot.view.wt.wtTable.holder.clientWidth);
  });
  it('should resize editor to properly size after focus', function (done) {
    var data = [['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', 'sadiasdoadoajdoasjdoij doi ajdoiasjdasoidasoid'], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '', '']];
    handsontable({
      data: data,
      colWidths: 40,
      rowHeights: 25,
      width: 500,
      height: 220
    });
    selectCell(4, 10);
    keyDown(Handsontable.helper.KEY_CODES.ENTER);
    var $editorInput = $('.handsontableInput');
    setTimeout(function () {
      expect([105, 119]).toEqual(jasmine.arrayContaining([$editorInput.height()]));
      done();
    }, 150);
  }); // Input element can not lose the focus while entering new characters. It breaks IME editor functionality.

  it('should not lose the focus on input element while inserting new characters (#839)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var blured = false;

    var listener = function listener() {
      blured = true;
    };

    var hot = handsontable({
      data: [['']]
    });
    selectCell(0, 0);
    keyDownUp('enter');
    hot.getActiveEditor().TEXTAREA.addEventListener('blur', listener);
    yield sleep(200);
    hot.getActiveEditor().TEXTAREA.value = 'a';
    keyDownUp('a'.charCodeAt(0));
    hot.getActiveEditor().TEXTAREA.value = 'ab';
    keyDownUp('b'.charCodeAt(0));
    hot.getActiveEditor().TEXTAREA.value = 'abc';
    keyDownUp('c'.charCodeAt(0));
    expect(blured).toBeFalsy();
    hot.getActiveEditor().TEXTAREA.removeEventListener('blur', listener);
  }));
  it('should not throw an exception when window.attachEvent is defined but the text area does not have attachEvent', function (done) {
    var hot = handsontable();
    window.attachEvent = true;
    selectCell(1, 1);
    expect(function () {
      hot.getActiveEditor().autoResize.init(hot.getActiveEditor().TEXTAREA);
    }).not.toThrow();
    done();
  });
  it('should keep editor open, focusable and with untouched value when allowInvalid is set as false',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      allowInvalid: false,
      validator: function validator(val, cb) {
        cb(false);
      }
    });
    selectCell(0, 0);
    keyDown('enter');
    destroyEditor();
    document.activeElement.value = '999';
    yield sleep(10);
    expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    expect(isEditorVisible()).toBe(true);
    expect(getActiveEditor().TEXTAREA.value).toBe('999');
    keyDown('enter');
    expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    expect(isEditorVisible()).toBe(true);
    expect(getActiveEditor().TEXTAREA.value).toBe('999');
    var cell = $(getCell(1, 1));
    mouseDown(cell);
    mouseUp(cell);
    mouseDown(cell);
    mouseUp(cell);
    yield sleep(10);
    expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    expect(isEditorVisible()).toBe(true);
    expect(getActiveEditor().TEXTAREA.value).toBe('999');
  }));
  describe('IME support', function () {
    it('should focus editable element after selecting the cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        type: 'text'
      });
      selectCell(0, 0, 0, 0, true, false);
      yield sleep(10);
      expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    }));
    it('editor size should change after composition started',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 5),
        width: 400,
        height: 400
      });
      selectCell(2, 2);
      keyDownUp('enter');
      var textarea = getActiveEditor().TEXTAREA;
      textarea.value = 'test, test, test, test, test, test';
      textarea.dispatchEvent(new CompositionEvent('compositionstart')); // Trigger textarea resize

      textarea.dispatchEvent(new CompositionEvent('compositionupdate')); // Trigger textarea resize

      textarea.dispatchEvent(new CompositionEvent('compositionend')); // Trigger textarea resize

      yield sleep(100);
      expect($(textarea).width()).toBe(201);
      expect($(textarea).height()).toBe(23);
    }));
  });
});

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('i18n', function () {
  var id = 'testContainer';
  var DEFAULT_LANGUAGE_CODE = 'en-US';
  var NOT_EXISTING_LANGUAGE_CODE = 'bs-GY';
  var NOT_EXISTING_LANGUAGE_CODE2 = 'dd-Da';
  var POLISH_LANGUAGE_CODE = 'pl-PL';
  var INSERT_ROW_ABOVE_IN_DEFAULT_LANGUAGE = 'Insert row above';
  var INSERT_ROW_ABOVE_IN_POLISH_LANGUAGE = 'Wstaw wiersz powyżej';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should not propagate `language` key to meta of cells', function () {
    handsontable({
      language: POLISH_LANGUAGE_CODE
    });
    expect(getCellMeta(0, 0).language).toBeUndefined();
  });
  describe('Hook `beforeLanguageChange`', function () {
    it('should not call the `beforeLanguageChange` at start (`language` key have not been set)', function () {
      var beforeLanguageChangeCalled = false;
      handsontable({
        beforeLanguageChange: function beforeLanguageChange() {
          beforeLanguageChangeCalled = true;
        }
      });
      expect(beforeLanguageChangeCalled).toEqual(false);
    });
    it('should not call the `beforeLanguageChange` at start (`language` key have been set)', function () {
      var beforeLanguageChangeCalled = false;
      handsontable({
        language: POLISH_LANGUAGE_CODE,
        beforeLanguageChange: function beforeLanguageChange() {
          beforeLanguageChangeCalled = true;
        }
      });
      expect(beforeLanguageChangeCalled).toEqual(false);
    });
    it('should call the `beforeLanguageChange` before updating settings', function () {
      var languageInsideHook;
      handsontable({
        beforeLanguageChange: function beforeLanguageChange() {
          var settings = this.getSettings();
          languageInsideHook = settings.language;
        }
      });
      updateSettings({
        language: POLISH_LANGUAGE_CODE
      });
      expect(languageInsideHook).toEqual(DEFAULT_LANGUAGE_CODE);
    });
  });
  describe('Hook `afterLanguageChange`', function () {
    it('should not call the `afterLanguageChange` at start (`language` key have not been set)', function () {
      var afterLanguageChangeCalled = false;
      handsontable({
        afterLanguageChange: function afterLanguageChange() {
          afterLanguageChangeCalled = true;
        }
      });
      expect(afterLanguageChangeCalled).toEqual(false);
    });
    it('should not call the `afterLanguageChange` at start (`language` key have been set)', function () {
      var afterLanguageChangeCalled = false;
      handsontable({
        language: POLISH_LANGUAGE_CODE,
        afterLanguageChange: function afterLanguageChange() {
          afterLanguageChangeCalled = true;
        }
      });
      expect(afterLanguageChangeCalled).toEqual(false);
    });
    it('should call the `afterLanguageChange` after updating settings', function () {
      var languageInsideHook;
      handsontable({
        afterLanguageChange: function afterLanguageChange() {
          var settings = this.getSettings();
          languageInsideHook = settings.language;
        }
      });
      updateSettings({
        language: POLISH_LANGUAGE_CODE
      });
      expect(languageInsideHook).toEqual(POLISH_LANGUAGE_CODE);
    });
  });
  describe('translation does not throw exceptions', function () {
    it('should not throw error when setting not existing language code at start',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      spyOn(console, 'error'); // overriding console.error

      var spy = spyOn(window, 'onerror');
      handsontable({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      yield sleep(100);
      expect(spy).not.toHaveBeenCalled();
    }));
    it('should not throw error when setting directly default language code at start',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var spy = spyOn(window, 'onerror');
      handsontable({
        language: DEFAULT_LANGUAGE_CODE
      });
      yield sleep(100);
      expect(spy).not.toHaveBeenCalled();
    }));
    it('should not throw error when trying to set not existing language code by updateSettings',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      spyOn(console, 'error'); // overriding console.error

      var spy = spyOn(window, 'onerror');
      handsontable();
      updateSettings({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      yield sleep(100);
      expect(spy).not.toHaveBeenCalled();
    }));
    it('should not throw error when trying to set directly default language code by updateSettings',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var spy = spyOn(window, 'onerror');
      handsontable();
      updateSettings({
        language: DEFAULT_LANGUAGE_CODE
      });
      yield sleep(100);
      expect(spy).not.toHaveBeenCalled();
    }));
  });
  describe('translation log error when needed', function () {
    it('should log error when setting not existing language code at start', function () {
      var spy = spyOn(console, 'error');
      handsontable({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      expect(spy).toHaveBeenCalled();
    });
    it('should log error when trying to set not existing language code by updateSettings', function () {
      var spy = spyOn(console, 'error');
      handsontable();
      updateSettings({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      expect(spy).toHaveBeenCalled();
    });
    it('should not log error when setting directly default language code at start', function () {
      var spy = spyOn(console, 'error');
      handsontable({
        language: DEFAULT_LANGUAGE_CODE
      });
      expect(spy).not.toHaveBeenCalled();
    });
    it('should not log error when trying to set directly default language code by updateSettings', function () {
      var spy = spyOn(console, 'error');
      handsontable();
      updateSettings({
        language: DEFAULT_LANGUAGE_CODE
      });
      expect(spy).not.toHaveBeenCalled();
    });
  });
  describe('settings', function () {
    it('should set default language code at start', function () {
      var hot = handsontable();
      expect(hot.getSettings().language).toEqual(DEFAULT_LANGUAGE_CODE);
    });
    it('should not set language code as own property of settings object at start', function () {
      var hot = handsontable(); // eslint-disable-next-line no-prototype-builtins

      expect(hot.getSettings().hasOwnProperty('language')).toEqual(false);
    });
    it('should not set language code as own property of settings object when using updateSettings', function () {
      var hot = handsontable();
      updateSettings({
        language: POLISH_LANGUAGE_CODE
      }); // eslint-disable-next-line no-prototype-builtins

      expect(hot.getSettings().hasOwnProperty('language')).toEqual(false);
    });
    it('should set proper `language` key when trying to set not existing language code at start', function () {
      spyOn(console, 'error'); // overriding console.error

      var hot = handsontable({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      expect(hot.getSettings().language).toEqual(DEFAULT_LANGUAGE_CODE);
    });
    it('should set proper `language` key when trying to set not existing language code by updateSettings #1', function () {
      spyOn(console, 'error'); // overriding console.error

      var hot = handsontable();
      updateSettings({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      expect(hot.getSettings().language).toEqual(DEFAULT_LANGUAGE_CODE);
    });
    it('should set proper `language` key when trying to set not existing language code by updateSettings #2', function () {
      spyOn(console, 'error'); // overriding console.error

      var hot = handsontable({
        language: POLISH_LANGUAGE_CODE
      });
      updateSettings({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      expect(hot.getSettings().language).toEqual(POLISH_LANGUAGE_CODE);
    });
    it('should accept not normalized language code by default #1', function () {
      var hot = handsontable({
        language: POLISH_LANGUAGE_CODE.toLowerCase()
      });
      expect(hot.getSettings().language).toEqual(POLISH_LANGUAGE_CODE);
    });
    it('should accept not normalized language code by default #2', function () {
      var hot = handsontable();
      updateSettings({
        language: POLISH_LANGUAGE_CODE.toUpperCase()
      });
      expect(hot.getSettings().language).toEqual(POLISH_LANGUAGE_CODE);
    });
    it('should not change language when `language` key passed to `updateSettings` was not set', function () {
      var hot = handsontable({
        language: POLISH_LANGUAGE_CODE
      });
      updateSettings({
        fillHandle: true
      });
      expect(hot.getSettings().language).toEqual(POLISH_LANGUAGE_CODE);
    });
  });
  describe('contextMenu translation', function () {
    it('should translate contextMenu UI when setting existing language code at start', function () {
      handsontable({
        language: POLISH_LANGUAGE_CODE,
        contextMenu: ['row_above']
      });
      selectCell(0, 0);
      contextMenu();
      var $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_POLISH_LANGUAGE);
    });
    it('should not change default contextMenu UI when trying to set not existing language code at start', function () {
      spyOn(console, 'error'); // overriding console.error

      handsontable({
        language: NOT_EXISTING_LANGUAGE_CODE,
        contextMenu: ['row_above']
      });
      selectCell(0, 0);
      contextMenu();
      var $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_DEFAULT_LANGUAGE);
    });
    it('should translate contextMenu UI when setting existing language code by updateSettings',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        contextMenu: ['row_above']
      });
      updateSettings({
        language: POLISH_LANGUAGE_CODE
      });
      yield sleep(0);
      contextMenu();
      var $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_POLISH_LANGUAGE);
    }));
    it('should not change default contextMenu UI when trying to set not existing language code by updateSettings #1',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      spyOn(console, 'error'); // overriding console.error

      handsontable({
        contextMenu: ['row_above']
      });
      updateSettings({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      yield sleep(0);
      contextMenu();
      var $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_DEFAULT_LANGUAGE);
    }));
    it('should not change default contextMenu UI when trying to set not existing language code by updateSettings #2',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      spyOn(console, 'error'); // overriding console.error

      handsontable({
        language: NOT_EXISTING_LANGUAGE_CODE,
        contextMenu: ['row_above']
      });
      updateSettings({
        language: NOT_EXISTING_LANGUAGE_CODE2
      });
      yield sleep(0);
      contextMenu();
      var $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_DEFAULT_LANGUAGE);
    }));
    it('should not change previously translated contextMenu UI when trying to set not existing language code by updateSettings',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      spyOn(console, 'error'); // overriding console.error

      handsontable({
        language: POLISH_LANGUAGE_CODE,
        contextMenu: ['row_above']
      });
      updateSettings({
        language: NOT_EXISTING_LANGUAGE_CODE
      });
      yield sleep(0);
      contextMenu();
      var $contextMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($contextMenuItem.text()).toEqual(INSERT_ROW_ABOVE_IN_POLISH_LANGUAGE);
    }));
    it('should translate multi-level menu properly',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var ALIGN_LEFT_IN_POLISH = 'Do lewej';
      handsontable({
        language: POLISH_LANGUAGE_CODE,
        contextMenu: ['alignment']
      });
      selectCell(0, 0);
      contextMenu();
      var $menu = $('.htSubmenu');
      $menu.simulate('mouseover');
      yield sleep(300);
      var $submenuItem = $('.htContextMenu').eq(1).find('tbody td:not(.htSeparator)').eq(0);
      expect($submenuItem.text()).toEqual(ALIGN_LEFT_IN_POLISH);
    }));
    it('should choose proper form of phrase when translating', function () {
      var REMOVE_ROW_PLURAL_IN_DEFAULT_LANGUAGE = 'Remove rows';
      var REMOVE_COLUMN_PLURAL_IN_DEFAULT_LANGUAGE = 'Remove columns';
      handsontable({
        contextMenu: ['remove_row', 'remove_col']
      });
      selectCell(0, 0, 2, 2);
      contextMenu();
      var $removeRowItem = $('.htContextMenu').eq(0).find('tbody td:not(.htSeparator)').eq(0);
      var $removeColumnItem = $('.htContextMenu').eq(0).find('tbody td:not(.htSeparator)').eq(1);
      expect($removeRowItem.text()).toEqual(REMOVE_ROW_PLURAL_IN_DEFAULT_LANGUAGE);
      expect($removeColumnItem.text()).toEqual(REMOVE_COLUMN_PLURAL_IN_DEFAULT_LANGUAGE);
    });
    it('should translate item from enabled `freezeColumn` plugin when setting existing language code at start', function () {
      var FREEZE_COLUMN_IN_POLISH_LANGUAGE = 'Zablokuj kolumnę';
      handsontable({
        contextMenu: ['freeze_column'],
        manualColumnFreeze: true,
        language: POLISH_LANGUAGE_CODE
      });
      selectCell(0, 0);
      contextMenu();
      var $freezeColumnMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($freezeColumnMenuItem.text()).toEqual(FREEZE_COLUMN_IN_POLISH_LANGUAGE);
    });
    it('should translate item from enabled `comments` plugin when setting existing language code at start', function () {
      var ADD_COMMENT_IN_POLISH_LANGUAGE = 'Dodaj komentarz';
      handsontable({
        contextMenu: ['commentsAddEdit'],
        comments: true,
        language: POLISH_LANGUAGE_CODE
      });
      selectCell(0, 0);
      contextMenu();
      var $addCommentMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($addCommentMenuItem.text()).toEqual(ADD_COMMENT_IN_POLISH_LANGUAGE);
    });
    it('should translate item from enabled `customBorders` plugin when setting existing language code at start', function () {
      var BORDERS_IN_POLISH = 'Obramowanie';
      handsontable({
        language: POLISH_LANGUAGE_CODE,
        contextMenu: ['borders'],
        customBorders: true
      });
      selectCell(0, 0);
      contextMenu();
      var $bordersMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($bordersMenuItem.text()).toEqual(BORDERS_IN_POLISH);
    });
    it('should translate item from enabled `mergeCells` plugin when setting existing language code at start', function () {
      var MERGE_CELLS_IN_POLISH = 'Scal komórki';
      handsontable({
        language: POLISH_LANGUAGE_CODE,
        contextMenu: ['mergeCells'],
        mergeCells: true
      });
      selectCell(0, 0);
      contextMenu();
      var $mergeCellsMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($mergeCellsMenuItem.text()).toEqual(MERGE_CELLS_IN_POLISH);
    });
    it('should translate item from enabled `copyPaste` plugin when setting existing language code at start', function () {
      var COPY_IN_POLISH = 'Kopiuj';
      handsontable({
        language: POLISH_LANGUAGE_CODE,
        contextMenu: ['copy'],
        copyPaste: true
      });
      selectCell(0, 0);
      contextMenu();
      var $copyMenuItem = $('.htContextMenu tbody td:not(.htSeparator)');
      expect($copyMenuItem.text()).toEqual(COPY_IN_POLISH);
    });
  });
});

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var id = 'testContainer';
describe('Events', function () {
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should translate tap (`touchstart`) to `mousedown`',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var afterOnCellMouseDown = jasmine.createSpy('onAfterOnCellMouseDown');
    var hot = handsontable({
      width: 400,
      height: 400,
      afterOnCellMouseDown: afterOnCellMouseDown
    });
    var cell = hot.getCell(1, 1);
    expect(getSelected()).toBeUndefined();
    triggerTouchEvent('touchstart', cell);
    yield sleep(100);
    expect(getSelected()).toBeDefined();
    expect(afterOnCellMouseDown).toHaveBeenCalled();
  })); // Currently, this test is skipped. There is a problem for test canceling events from simulated events.

  xit('should block default action related to link touch and translate from the touch to click on a cell',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [['<a href="#justForTest">click me!</a>'], []],
      rowHeaders: true,
      colHeaders: true,
      width: 600,
      height: 400,
      columns: [{
        renderer: 'html'
      }]
    });
    var linkElement = hot.getCell(0, 0).firstChild;
    hot.selectCell(0, 0);
    location.hash = '';
    yield sleep(100);
    triggerTouchEvent('touchstart', linkElement);
    triggerTouchEvent('touchend', linkElement);
    expect(location.hash).toBe('#justForTest');
    yield sleep(400); // To prevents double-click detection (emulation)

    location.hash = ''; // selecting cell other than the one with link

    hot.selectCell(1, 0);
    yield sleep(100);
    triggerTouchEvent('touchstart', linkElement);
    triggerTouchEvent('touchend', linkElement);
    expect(location.hash).toBe('');
  }));
});

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var id = 'testContainer';
describe('Scrolling', function () {
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should load cells below the viewport on scroll down (dimensions of the table was set)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      width: 400,
      height: 400,
      data: Handsontable.helper.createSpreadsheetObjectData(100, 15)
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    var $htCore = $(getHtCore());
    var TRs = $htCore.find('tr');

    var lastTR = _toConsumableArray(TRs.toArray()).pop();

    var lastTRTextAtStart = $(lastTR).text();
    $(mainHolder).scrollTop(400);
    yield sleep(300);
    TRs = $htCore.find('tr');
    lastTR = _toConsumableArray(TRs.toArray()).pop();
    var lastTRTextLater = $(lastTR).text();
    expect(lastTRTextLater).not.toEqual(lastTRTextAtStart);
  }));
  it('should load cells below the viewport on scroll down (dimensions of the table was not set)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(100, 15)
    });
    var $htCore = $(getHtCore());
    var TRs = $htCore.find('tr');

    var lastTR = _toConsumableArray(TRs.toArray()).pop();

    var lastTRTextAtStart = $(lastTR).text();
    yield sleep(300);
    $(window).scrollTop(window.innerHeight);
    yield sleep(300);
    TRs = $htCore.find('tr');
    lastTR = _toConsumableArray(TRs.toArray()).pop();
    var lastTRTextLater = $(lastTR).text();
    expect(lastTRTextLater).not.toEqual(lastTRTextAtStart);
  }));
});

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var id = 'testContainer';
describe('Selection', function () {
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should show selection handles', function () {
    var hot = handsontable({
      width: 400,
      height: 400
    });
    hot.selectCell(1, 1);
    var topLeftSelectionHandle = spec().$container.find('.ht_master .htBorders div:first-child .topLeftSelectionHandle')[0];
    var bottomRightSelectionHandle = spec().$container.find('.ht_master .htBorders div:first-child .bottomRightSelectionHandle')[0];
    expect(topLeftSelectionHandle.style.display).toEqual('block');
    expect(bottomRightSelectionHandle.style.display).toEqual('block');
  });
  it('should show both selection handles after drag & drop',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      width: 400,
      height: 400
    });
    hot.selectCell(1, 1);
    yield sleep(100);
    triggerTouchEvent('touchstart', spec().$container.find('.htBorders .bottomRightSelectionHandle-HitArea')[0]);
    triggerTouchEvent('touchmove', spec().$container.find('tbody tr:eq(1) td:eq(2)')[0]);
    triggerTouchEvent('touchmove', spec().$container.find('tbody tr:eq(1) td:eq(3)')[0]);
    triggerTouchEvent('touchend', spec().$container.find('tbody tr:eq(1) td:eq(3)')[0]);
    yield sleep(100);
    var topLeftSelectionHandle = spec().$container.find('.ht_master .htBorders div:last-child .topLeftSelectionHandle')[0];
    var bottomRightSelectionHandle = spec().$container.find('.ht_master .htBorders div:last-child .bottomRightSelectionHandle')[0];
    expect(topLeftSelectionHandle.style.display).toBe('block');
    expect(bottomRightSelectionHandle.style.display).toBe('block');
    expect(hot.getSelected()).toEqual([[1, 1, 1, 2]]);
  }));
  it('should not call the `select` method on the "focusable" textarea when selecting a cell',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [['test']],
      width: 400,
      height: 400
    });
    hot.selectCell(0, 0);
    var copyPastePlugin = hot.getPlugin('copyPaste');
    var focusableElement = copyPastePlugin.focusableElement.getFocusableElement();
    spyOn(focusableElement, 'select');
    hot.selectCell(0, 0);
    expect(focusableElement.select).not.toHaveBeenCalled();
  }));
});

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Public API', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('Plugins', function () {
    it('should expose static method for registering external plugins', function () {
      expect(Handsontable.plugins.registerPlugin).toBeFunction();
    });
    it('should expose BasePlugin class', function () {
      expect(Handsontable.plugins.BasePlugin).toBeFunction();
    });
    it('should expose all registered plugin classes', function () {
      expect(Handsontable.plugins.AutoColumnSize).toBeFunction();
      expect(Handsontable.plugins.AutoRowSize).toBeFunction();
      expect(Handsontable.plugins.ColumnSorting).toBeFunction();
      expect(Handsontable.plugins.Comments).toBeFunction();
      expect(Handsontable.plugins.ContextMenu).toBeFunction();
      expect(Handsontable.plugins.CopyPaste).toBeFunction();
      expect(Handsontable.plugins.CustomBorders).toBeFunction();
      expect(Handsontable.plugins.DragToScroll).toBeFunction();
      expect(Handsontable.plugins.ManualColumnFreeze).toBeFunction();
      expect(Handsontable.plugins.ManualColumnResize).toBeFunction();
      expect(Handsontable.plugins.ManualRowResize).toBeFunction();
      expect(Handsontable.plugins.MultipleSelectionHandles).toBeFunction();
      expect(Handsontable.plugins.TouchScroll).toBeFunction();
      expect(Handsontable.plugins.UndoRedo).toBeFunction();
    });
  });
  describe('Editors', function () {
    it('should expose static method for registering external editors', function () {
      expect(Handsontable.editors.registerEditor).toBeFunction();
    });
    it('should expose static method for retrieving registered editors', function () {
      expect(Handsontable.editors.getEditor).toBeFunction();
    });
    it('should expose BaseEditor class', function () {
      expect(Handsontable.editors.BaseEditor).toBeFunction();
    });
    it('should expose all registered editor classes', function () {
      expect(Handsontable.editors.AutocompleteEditor).toBeFunction();
      expect(Handsontable.editors.CheckboxEditor).toBeFunction();
      expect(Handsontable.editors.DateEditor).toBeFunction();
      expect(Handsontable.editors.DropdownEditor).toBeFunction();
      expect(Handsontable.editors.HandsontableEditor).toBeFunction();
      expect(Handsontable.editors.NumericEditor).toBeFunction();
      expect(Handsontable.editors.PasswordEditor).toBeFunction();
      expect(Handsontable.editors.SelectEditor).toBeFunction();
      expect(Handsontable.editors.TextEditor).toBeFunction();
    });
  });
  describe('Renderers', function () {
    it('should expose static method for registering external renderers', function () {
      expect(Handsontable.renderers.registerRenderer).toBeFunction();
    });
    it('should expose static method for retrieving registered renderers', function () {
      expect(Handsontable.renderers.getRenderer).toBeFunction();
    });
    it('should expose BaseRenderer class', function () {
      expect(Handsontable.renderers.BaseRenderer).toBeFunction();
    });
    it('should expose all registered renderer functions', function () {
      expect(Handsontable.renderers.AutocompleteRenderer).toBeFunction();
      expect(Handsontable.renderers.CheckboxRenderer).toBeFunction();
      expect(Handsontable.renderers.HtmlRenderer).toBeFunction();
      expect(Handsontable.renderers.NumericRenderer).toBeFunction();
      expect(Handsontable.renderers.PasswordRenderer).toBeFunction();
      expect(Handsontable.renderers.TextRenderer).toBeFunction();
    });
  });
  describe('Validators', function () {
    it('should expose static method for registering external validators', function () {
      expect(Handsontable.validators.registerValidator).toBeFunction();
    });
    it('should expose static method for retrieving registered validators', function () {
      expect(Handsontable.validators.getValidator).toBeFunction();
    });
    it('should expose all registered validator functions', function () {
      expect(Handsontable.validators.AutocompleteValidator).toBeFunction();
      expect(Handsontable.validators.DateValidator).toBeFunction();
      expect(Handsontable.validators.NumericValidator).toBeFunction();
      expect(Handsontable.validators.TimeValidator).toBeFunction();
    });
  });
  describe('CellTypes', function () {
    it('should expose static method for registering external cell types', function () {
      expect(Handsontable.cellTypes.registerCellType).toBeFunction();
    });
    it('should expose static method for retrieving registered cell types', function () {
      expect(Handsontable.cellTypes.getCellType).toBeFunction();
    });
    it('should expose all registered cell type objects', function () {
      expect(Handsontable.cellTypes.autocomplete.editor).toBe(Handsontable.editors.AutocompleteEditor);
      expect(Handsontable.cellTypes.autocomplete.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);
      expect(Handsontable.cellTypes.autocomplete.validator).toBe(Handsontable.validators.AutocompleteValidator);
      expect(Handsontable.cellTypes.checkbox.editor).toBe(Handsontable.editors.CheckboxEditor);
      expect(Handsontable.cellTypes.checkbox.renderer).toBe(Handsontable.renderers.CheckboxRenderer);
      expect(Handsontable.cellTypes.checkbox.validator).not.toBeDefined();
      expect(Handsontable.cellTypes.date.editor).toBe(Handsontable.editors.DateEditor);
      expect(Handsontable.cellTypes.date.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);
      expect(Handsontable.cellTypes.date.validator).toBe(Handsontable.validators.DateValidator);
      expect(Handsontable.cellTypes.dropdown.editor).toBe(Handsontable.editors.DropdownEditor);
      expect(Handsontable.cellTypes.dropdown.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);
      expect(Handsontable.cellTypes.dropdown.validator).toBe(Handsontable.validators.AutocompleteValidator);
      expect(Handsontable.cellTypes.handsontable.editor).toBe(Handsontable.editors.HandsontableEditor);
      expect(Handsontable.cellTypes.handsontable.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);
      expect(Handsontable.cellTypes.handsontable.validator).not.toBeDefined();
      expect(Handsontable.cellTypes.numeric.editor).toBe(Handsontable.editors.NumericEditor);
      expect(Handsontable.cellTypes.numeric.renderer).toBe(Handsontable.renderers.NumericRenderer);
      expect(Handsontable.cellTypes.numeric.validator).toBe(Handsontable.validators.NumericValidator);
      expect(Handsontable.cellTypes.password.editor).toBe(Handsontable.editors.PasswordEditor);
      expect(Handsontable.cellTypes.password.renderer).toBe(Handsontable.renderers.PasswordRenderer);
      expect(Handsontable.cellTypes.password.validator).not.toBeDefined();
      expect(Handsontable.cellTypes.text.editor).toBe(Handsontable.editors.TextEditor);
      expect(Handsontable.cellTypes.text.renderer).toBe(Handsontable.renderers.TextRenderer);
      expect(Handsontable.cellTypes.text.validator).not.toBeDefined();
      expect(Handsontable.cellTypes.time.editor).toBe(Handsontable.editors.TextEditor);
      expect(Handsontable.cellTypes.time.renderer).toBe(Handsontable.renderers.TextRenderer);
      expect(Handsontable.cellTypes.time.validator).toBe(Handsontable.validators.TimeValidator);
    });
  });
  describe('Helpers', function () {
    it('should expose all registered helpers', function () {
      expect(Handsontable.dom.addClass).toBeFunction();
      expect(Handsontable.dom.addEvent).toBeFunction();
      expect(Handsontable.dom.closest).toBeFunction();
      expect(Handsontable.dom.closestDown).toBeFunction();
      expect(Handsontable.dom.empty).toBeFunction();
      expect(Handsontable.dom.fastInnerHTML).toBeFunction();
      expect(Handsontable.dom.fastInnerText).toBeFunction();
      expect(Handsontable.dom.getCaretPosition).toBeFunction();
      expect(Handsontable.dom.getComputedStyle).toBeFunction();
      expect(Handsontable.dom.getCssTransform).toBeFunction();
      expect(Handsontable.dom.getParent).toBeFunction();
      expect(Handsontable.dom.getScrollLeft).toBeFunction();
      expect(Handsontable.dom.getScrollTop).toBeFunction();
      expect(Handsontable.dom.getScrollableElement).toBeFunction();
      expect(Handsontable.dom.getScrollbarWidth).toBeFunction();
      expect(Handsontable.dom.getSelectionEndPosition).toBeFunction();
      expect(Handsontable.dom.getSelectionText).toBeFunction();
      expect(Handsontable.dom.getStyle).toBeFunction();
      expect(Handsontable.dom.getTrimmingContainer).toBeFunction();
      expect(Handsontable.dom.getWindowScrollLeft).toBeFunction();
      expect(Handsontable.dom.getWindowScrollTop).toBeFunction();
      expect(Handsontable.dom.hasClass).toBeFunction();
      expect(Handsontable.dom.hasHorizontalScrollbar).toBeFunction();
      expect(Handsontable.dom.hasVerticalScrollbar).toBeFunction();
      expect(Handsontable.dom.index).toBeFunction();
      expect(Handsontable.dom.innerHeight).toBeFunction();
      expect(Handsontable.dom.innerWidth).toBeFunction();
      expect(Handsontable.dom.isChildOf).toBeFunction();
      expect(Handsontable.dom.isChildOfWebComponentTable).toBeFunction();
      expect(Handsontable.dom.isImmediatePropagationStopped).toBeFunction();
      expect(Handsontable.dom.isInput).toBeFunction();
      expect(Handsontable.dom.isLeftClick).toBeFunction();
      expect(Handsontable.dom.isRightClick).toBeFunction();
      expect(Handsontable.dom.isVisible).toBeFunction();
      expect(Handsontable.dom.offset).toBeFunction();
      expect(Handsontable.dom.outerHeight).toBeFunction();
      expect(Handsontable.dom.outerWidth).toBeFunction();
      expect(Handsontable.dom.overlayContainsElement).toBeFunction();
      expect(Handsontable.dom.pageX).toBeFunction();
      expect(Handsontable.dom.pageY).toBeFunction();
      expect(Handsontable.dom.polymerUnwrap).toBeFunction();
      expect(Handsontable.dom.polymerWrap).toBeFunction();
      expect(Handsontable.dom.removeClass).toBeFunction();
      expect(Handsontable.dom.removeEvent).toBeFunction();
      expect(Handsontable.dom.removeTextNodes).toBeFunction();
      expect(Handsontable.dom.resetCssTransform).toBeFunction();
      expect(Handsontable.dom.setCaretPosition).toBeFunction();
      expect(Handsontable.dom.setOverlayPosition).toBeFunction();
      expect(Handsontable.dom.stopImmediatePropagation).toBeFunction();
      expect(Handsontable.dom.stopPropagation).toBeFunction();
    });
  });
});

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('AutocompleteRenderer', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should contain down arrow glyph', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      type: 'autocomplete',
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 2, 'string');
    setTimeout(function () {
      var html = getCell(2, 2).innerHTML;
      expect(html).toContain('string');
      expect(html).toContain("\u25BC");
      done();
    }, 100);
  });
  it('should open cell editor after clicking on arrow glyph', function () {
    var hot = handsontable({
      type: 'autocomplete'
    });
    selectCell(0, 0);
    expect(hot.getActiveEditor().isOpened()).toBe(false);
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
    expect(hot.getActiveEditor().isOpened()).toBe(true);
  });
  it('should open cell editor after clicking on arrow glyph, after the table has been destroyed and reinitialized (#1367)', function () {
    var hot = handsontable({
      type: 'autocomplete'
    });
    destroy();
    hot = handsontable({
      type: 'autocomplete'
    });
    selectCell(0, 0);
    expect(hot.getActiveEditor().isOpened()).toBe(false);
    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');
    expect(hot.getActiveEditor().isOpened()).toBe(true);
  });
  it('should prepend the autocomplete arrow at the start of the cell element (#5124)', function () {
    handsontable({
      type: 'autocomplete'
    });
    var $contents = $(getCell(0, 0)).contents();
    expect($contents.eq(0).hasClass('htAutocompleteArrow')).toBe(true);
  });
});

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('CellDecorator', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      id: 1,
      name: 'Ted',
      lastName: 'Right'
    }, {
      id: 2,
      name: 'Frank',
      lastName: 'Honest'
    }, {
      id: 3,
      name: 'Joan',
      lastName: 'Well'
    }];
  };

  it('should add an appropriate class name to every cell, if wordWrap=false is set to the whole table', function () {
    var hot = handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      wordWrap: false
    });
    var cols = countCols();
    var rows = countRows();

    for (var i = 0; i < cols; i++) {
      for (var j = 0; j < rows; j++) {
        expect($(getCell(i, j)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);
      }
    }
  });
  it('should add an appropriate class name to every cell in a column, if wordWrap=false is set to the column settings', function () {
    var hot = handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'name',
        wordWrap: false
      }, {
        data: 'lastName'
      }]
    });
    var rows = countRows();

    for (var i = 0; i < rows; i++) {
      expect($(getCell(i, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);
    }

    for (var _i = 0; _i < rows; _i++) {
      expect($(getCell(_i, 0)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false); // no class added to other columns

      expect($(getCell(_i, 2)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false);
    }
  });
  it('should add an appropriate class to a cell, if wordWrap=false is set to a single cell', function () {
    var hot = handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    expect($(getCell(1, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false);
    getCellMeta(1, 1).wordWrap = false;
    render();
    expect($(getCell(1, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);
  });
  it('should set "white-space" css parameter to "nowrap" if htNoWrap class is added to a cell', function () {
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    expect(window.getComputedStyle(getCell(1, 1)).whiteSpace).not.toEqual('nowrap');
    getCellMeta(1, 1).wordWrap = false;
    render();
    expect(window.getComputedStyle(getCell(1, 1)).whiteSpace).toEqual('nowrap');
  });
  it('should not add cell `htInvalid` class when trying to add not proper value', function (done) {
    var hot = handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }, {
        data: 'salary',
        type: 'numeric',
        allowInvalid: false
      }]
    });
    setDataAtCell(0, 2, 'non-numeric value');
    setTimeout(function () {
      expect($(getCell(0, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);
      done();
    }, 200);
  });
});

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('CheckboxRenderer', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\" style=\"width: 300px; height: 200px;\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should render values as checkboxes', function () {
    handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    expect($(getRenderedValue(0, 0)).is(':checkbox')).toBe(true);
    expect($(getRenderedValue(1, 0)).is(':checkbox')).toBe(true);
    expect($(getRenderedValue(2, 0)).is(':checkbox')).toBe(true);
  });
  it('should render check checkboxes for cell which value is true', function () {
    handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    expect($(getRenderedContent(0, 0)).prop('checked')).toBe(true);
    expect($(getRenderedContent(1, 0)).prop('checked')).toBe(false);
    expect($(getRenderedContent(2, 0)).prop('checked')).toBe(true);
  });
  it('should use templates to check appropriate checkboxes', function () {
    handsontable({
      data: [['yes'], ['no'], ['yes']],
      columns: [{
        type: 'checkbox',
        checkedTemplate: 'yes',
        uncheckedTemplate: 'no'
      }]
    });
    expect($(getRenderedContent(0, 0)).prop('checked')).toBe(true);
    expect($(getRenderedContent(1, 0)).prop('checked')).toBe(false);
    expect($(getRenderedContent(2, 0)).prop('checked')).toBe(true);
  });
  it('should select cell after checkbox click',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var spy = jasmine.createSpyObj('error', ['test']);

    window.onerror = function () {
      spy.test();
      return false;
    };

    var hot = handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    hot.selectCell(0, 0);
    spec().$container.find(':checkbox').eq(2).simulate('mousedown');
    spec().$container.find(':checkbox').eq(2).simulate('mouseup');
    spec().$container.find(':checkbox').eq(2).simulate('click');
    yield sleep(100);
    expect(spy.test.calls.count()).toBe(0);
    expect(hot.getSelected()).toEqual([[2, 0, 2, 0]]);
  }));
  it('should select cell after label click', function () {
    var hot = handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox',
        label: {
          position: 'before',
          value: 'Sure? '
        }
      }]
    });
    hot.selectCell(0, 0);
    spec().$container.find('td label').eq(2).simulate('mousedown');
    expect(hot.getSelected()).toEqual([[2, 0, 2, 0]]);
  });
  it('should reverse selection in checkboxes', function () {
    handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    spec().$container.find(':checkbox').eq(0).simulate('click');
    spec().$container.find(':checkbox').eq(1).simulate('click');
    spec().$container.find(':checkbox').eq(2).simulate('click');
    expect(getData()).toEqual([[false], [true], [false]]);
  });
  it('shouldn\'t uncheck checkboxes', function () {
    handsontable({
      data: [[true], [true], [true]],
      columns: [{
        type: 'checkbox',
        readOnly: true
      }]
    });
    spec().$container.find(':checkbox').trigger('click');
    expect(getData()).toEqual([[true], [true], [true]]);
  });
  it('should check single box after hitting space', function () {
    handsontable({
      data: [[true], [true], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [true], [true]]);
    selectCell(0, 0); //  spec().$container.find(':checkbox').eq(0).simulate('click');
    //  spec().$container.simulate('keydown',{
    //    keyCode: 32
    //  });

    keyDown('space');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[false], [true], [true]]);
    expect(afterChangeCallback.calls.count()).toEqual(1);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should not check single box after hitting space, if cell is readOnly', function () {
    handsontable({
      data: [[true], [true], [true]],
      columns: [{
        type: 'checkbox',
        readOnly: true
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [true], [true]]);
    selectCell(0, 0);
    keyDown('space');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [true], [true]]);
    expect(afterChangeCallback).not.toHaveBeenCalled();
  });
  it('should not check single box after hitting space, if last column is readOnly (#3562)', function () {
    handsontable({
      data: [[true, true], [false, false], [true, true]],
      columns: [{
        type: 'checkbox'
      }, {
        type: 'checkbox',
        readOnly: true
      }]
    });
    selectCell(0, 0);
    keyDown('space');
    selectCell(0, 1);
    keyDown('space');
    selectCell(1, 0);
    keyDown('space');
    selectCell(1, 1);
    keyDown('space');
    var checkboxes = spec().$container.find(':checkbox'); // column 0

    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(checkboxes.eq(4).prop('checked')).toBe(true); // column 1

    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(3).prop('checked')).toBe(false);
    expect(checkboxes.eq(5).prop('checked')).toBe(true);
    expect(getData()).toEqual([[false, true], [true, false], [true, true]]);
  });
  it('should change checkboxes values properly when data contains null or/and undefined', function () {
    handsontable({
      data: [[null], [undefined]],
      colHeaders: true,
      columns: [{
        type: 'checkbox'
      }]
    });
    selectCell(0, 0, 1, 0);
    keyDown('space');
    expect(getDataAtCol(0)).toEqual([true, true]);
    selectCell(0, 0, 1, 0);
    keyDown('space');
    expect(getDataAtCol(0)).toEqual([false, false]);
  });
  it('should change checkboxes values for cells below the viewport (hot initialized by startRows) #4037', function () {
    handsontable({
      startRows: 200,
      colHeaders: true,
      columns: [{
        type: 'checkbox'
      }]
    });
    selectCell(0, 0, 199, 0);
    keyDown('space');
    expect(getDataAtCell(199, 0)).toEqual(true);
  });
  it('should reverse checkboxes state after hitting space, when multiple cells are selected', function () {
    handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [false], [true]]);
    selectCell(0, 0, 2, 0);
    keyDown('space');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(false);
    expect(getData()).toEqual([[false], [true], [false]]);
    expect(afterChangeCallback.calls.count()).toEqual(1);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false], [1, 0, false, true], [2, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should reverse checkboxes state after hitting space, when multiple cells are selected and selStart > selEnd', function () {
    handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [false], [true]]);
    selectCell(2, 0, 0, 0); // selStart = [2,0], selEnd = [0,0]

    keyDown('space');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(false);
    expect(getData()).toEqual([[false], [true], [false]]);
    expect(afterChangeCallback.calls.count()).toEqual(1);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false], [1, 0, false, true], [2, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should toggle checkbox even if cell value is in another datatype', function () {
    // TODO: we MUST add additional layer in data transport, to filter stored data types into their defined data type (cellMeta.type)
    handsontable({
      data: [['true']],
      columns: [{
        type: 'checkbox'
      }]
    });
    selectCell(0, 0);
    expect(getDataAtCell(0, 0)).toBe('true');
    keyDown('space');
    expect(getDataAtCell(0, 0)).toBe(false);
  });
  it('double click on checkbox cell should invert the value', function () {
    handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    selectCell(0, 0);
    mouseDoubleClick(getCell(0, 0));
    expect(getDataAtCell(0, 0)).toBe(false);
    mouseDoubleClick(getCell(0, 0));
    expect(getDataAtCell(0, 0)).toBe(true);
    mouseDoubleClick(getCell(0, 0));
    expect(getDataAtCell(0, 0)).toBe(false);
  });
  it('should change checkbox state from checked to unchecked after hitting ENTER', function () {
    handsontable({
      data: [[true], [true], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [true], [true]]);
    selectCell(0, 0);
    keyDown('enter');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[false], [true], [true]]);
    expect(afterChangeCallback.calls.count()).toEqual(1);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should move down without changing checkbox state when enterBeginsEditing equals false', function () {
    handsontable({
      enterBeginsEditing: false,
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [false], [true]]);
    selectCell(0, 0);
    keyDown('enter');
    checkboxes = spec().$container.find(':checkbox');
    var selection = getSelected();
    expect(selection).toEqual([[1, 0, 1, 0]]);
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [false], [true]]);
    expect(afterChangeCallback.calls.count()).toEqual(0);
  });
  it('should begin editing and changing checkbox state when enterBeginsEditing equals true', function () {
    handsontable({
      enterBeginsEditing: true,
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [false], [true]]);
    selectCell(0, 0);
    keyDown('enter');
    checkboxes = spec().$container.find(':checkbox');
    var selection = getSelected();
    expect(selection).toEqual([[0, 0, 0, 0]]);
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[false], [false], [true]]);
    expect(afterChangeCallback.calls.count()).toEqual(1);
  });
  it('should change checkbox state from checked to unchecked after hitting ENTER using custom check/uncheck templates', function () {
    handsontable({
      data: [['yes'], ['yes'], ['no']],
      columns: [{
        type: 'checkbox',
        checkedTemplate: 'yes',
        uncheckedTemplate: 'no'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(false);
    expect(getData()).toEqual([['yes'], ['yes'], ['no']]);
    selectCell(0, 0);
    keyDown('enter');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(false);
    expect(getData()).toEqual([['no'], ['yes'], ['no']]);
    expect(afterChangeCallback.calls.count()).toEqual(1);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'yes', 'no']], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should change checkbox state from checked to unchecked after hitting ENTER using custom check/uncheck templates in numeric format', function () {
    handsontable({
      data: [[1], [1], [0]],
      columns: [{
        type: 'checkbox',
        checkedTemplate: 1,
        uncheckedTemplate: 0
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(false);
    expect(getData()).toEqual([[1], [1], [0]]);
    selectCell(0, 0);
    keyDown('enter');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(true);
    expect(checkboxes.eq(2).prop('checked')).toBe(false);
    expect(getData()).toEqual([[0], [1], [0]]);
    expect(afterChangeCallback.calls.count()).toEqual(1);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 1, 0]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should change checkbox state to unchecked after hitting DELETE', function () {
    handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [false], [true]]);
    selectCell(0, 0);
    keyDown('delete');
    selectCell(0, 1);
    keyDown('delete');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[false], [false], [true]]);
    expect(afterChangeCallback.calls.count()).toEqual(2);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should change checkbox notte to unchecked after hitting BACKSPACE', function () {
    handsontable({
      data: [[true], [false], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    var checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(true);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[true], [false], [true]]);
    selectCell(0, 0);
    keyDown('backspace');
    selectCell(0, 1);
    keyDown('backspace');
    checkboxes = spec().$container.find(':checkbox');
    expect(checkboxes.eq(0).prop('checked')).toBe(false);
    expect(checkboxes.eq(1).prop('checked')).toBe(false);
    expect(checkboxes.eq(2).prop('checked')).toBe(true);
    expect(getData()).toEqual([[false], [false], [true]]);
    expect(afterChangeCallback.calls.count()).toEqual(2);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should change  notkbox state to unchecked after hitting DELETE (from #bad-value# state)', function () {
    handsontable({
      data: [['foo'], ['bar']],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    expect(getDataAtCell(0, 0)).toBe('foo');
    expect(getDataAtCell(1, 0)).toBe('bar');
    selectCell(0, 0);
    keyDown('delete');
    selectCell(1, 0);
    keyDown('delete');
    expect(getDataAtCell(0, 0)).toBe(false);
    expect(getDataAtCell(1, 0)).toBe(false);
    expect(getData()).toEqual([[false], [false]]);
    expect(afterChangeCallback.calls.count()).toEqual(2);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'foo', false]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('should change checkbox  note to unchecked after hitting BACKSPACE (from #bad-value# state)', function () {
    handsontable({
      data: [['foo'], ['bar']],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    expect(getDataAtCell(0, 0)).toBe('foo');
    expect(getDataAtCell(1, 0)).toBe('bar');
    selectCell(0, 0);
    keyDown('backspace');
    selectCell(1, 0);
    keyDown('backspace');
    expect(getDataAtCell(0, 0)).toBe(false);
    expect(getDataAtCell(1, 0)).toBe(false);
    expect(getData()).toEqual([[false], [false]]);
    expect(afterChangeCallback.calls.count()).toEqual(2);
    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'foo', false]], 'edit', undefined, undefined, undefined, undefined);
  });
  it('shouldn\'t change checkbo notate after hitting other keys then DELETE or BACKSPACE (from #bad-value# state)', function () {
    handsontable({
      data: [['foo'], ['bar']],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    expect(getDataAtCell(0, 0)).toBe('foo');
    selectCell(0, 0);
    keyDown('space');
    selectCell(0, 0);
    keyDown('c');
    expect(getDataAtCell(0, 0)).toBe('foo');
    expect(getData()).toEqual([['foo'], ['bar']]);
    expect(afterChangeCallback.calls.count()).toEqual(0);
  });
  it('should not change checkbox state after hitting F2 key', function () {
    var onAfterChange = jasmine.createSpy('afterChangeCallback');
    handsontable({
      data: [[false], [true], [true]],
      columns: [{
        type: 'checkbox'
      }],
      onAfterChange: onAfterChange
    });
    selectCell(0, 0);
    keyDown('f2');
    expect(getDataAtCell(0, 0)).toBe(false);
    expect(onAfterChange.calls.count()).toEqual(0);
  });
  it('should not change checkbox state after hitting other keys then SPACE, ENTER, DELETE or BACKSPACE', function () {
    handsontable({
      data: [[false], [true], [true]],
      columns: [{
        type: 'checkbox'
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    selectCell(0, 0);
    keyDown('space');
    expect(getDataAtCell(0, 0)).toBe(true);
    selectCell(0, 0);
    keyDown('c');
    expect(getDataAtCell(0, 0)).toBe(true);
    expect(afterChangeCallback.calls.count()).toEqual(1);
  });
  it('should add label on the beginning of a checkbox element', function () {
    handsontable({
      data: [{
        checked: true,
        label: 'myLabel'
      }, {
        checked: false,
        label: 'myLabel'
      }],
      columns: [{
        type: 'checkbox',
        data: 'checked',
        label: {
          position: 'before',
          property: 'label'
        }
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    selectCell(0, 0);
    keyDown('space');
    expect(getDataAtCell(0, 0)).toBe(false);
    expect(getDataAtCell(1, 0)).toBe(false);
    expect(afterChangeCallback.calls.count()).toEqual(1);
    expect(getCell(0, 0).querySelector('label').firstChild.textContent).toEqual('myLabel');
  });
  it('should add label on the end of a checkbox element', function () {
    handsontable({
      data: [{
        checked: true,
        label: 'myLabel'
      }, {
        checked: false,
        label: 'myLabel'
      }],
      columns: [{
        type: 'checkbox',
        data: 'checked',
        label: {
          position: 'after',
          property: 'label'
        }
      }]
    });
    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
    addHook('afterChange', afterChangeCallback);
    selectCell(0, 0);
    keyDown('space');
    expect(getDataAtCell(0, 0)).toBe(false);
    expect(getDataAtCell(1, 0)).toBe(false);
    expect(afterChangeCallback.calls.count()).toEqual(1);
    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');
  });
  it('should not add label when value is incorrect (#bad-value)', function () {
    handsontable({
      data: [{
        checked: 1,
        label: 'myLabel'
      }, {
        checked: 0,
        label: 'myLabel'
      }],
      columns: [{
        type: 'checkbox',
        data: 'checked',
        label: {
          position: 'after',
          property: 'label'
        }
      }]
    });
    expect(getCell(0, 0).querySelector('label')).toBe(null);
  });
  it('by default should add label on the end of a checkbox element', function () {
    handsontable({
      data: [{
        checked: true,
        label: {
          test: 'Baz'
        }
      }, {
        checked: false,
        label: {
          test: 'Baz'
        }
      }],
      columns: [{
        type: 'checkbox',
        data: 'checked',
        label: {
          property: 'label.test'
        }
      }]
    });
    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('Baz');
  });
  it('should add label with text filled from `value` label setting (passed as string)', function () {
    handsontable({
      data: [{
        checked: true
      }, {
        checked: false
      }],
      columns: [{
        type: 'checkbox',
        data: 'checked',
        label: {
          value: 'myLabel'
        }
      }]
    });
    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');
  });
  it('should add label with text filled from `value` label setting (passed as function)', function () {
    var labelFunction = jasmine.createSpy();
    labelFunction.and.returnValue('myLabel');
    handsontable({
      autoRowSize: false,
      autoColumnSize: false,
      data: [{
        checked: true
      }, {
        checked: false
      }],
      columns: [{
        type: 'checkbox',
        data: 'checked',
        label: {
          value: labelFunction
        }
      }]
    });
    expect(labelFunction.calls.count()).toBe(2);
    expect(labelFunction.calls.argsFor(0)).toEqual([0, 0, 'checked', true]);
    expect(labelFunction.calls.argsFor(1)).toEqual([1, 0, 'checked', false]);
    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');
  });
  describe('CheckboxRenderer with ContextMenu', function () {
    it('should add class name `htRight` after set align in contextMenu', function (done) {
      handsontable({
        startRows: 1,
        startCols: 1,
        contextMenu: ['alignment'],
        cells: function cells() {
          return {
            type: 'checkbox'
          };
        },
        height: 100
      });
      selectCell(0, 0);
      contextMenu();
      var menu = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator');
      menu.simulate('mouseover');
      setTimeout(function () {
        var contextSubMenu = $(".htContextMenuSub_".concat(menu.text())).find('tbody td').eq(2);
        contextSubMenu.simulate('mousedown');
        contextSubMenu.simulate('mouseup');
        expect($('.handsontable.ht_master .htRight').length).toBe(1);
        done();
      }, 500);
    });
  });
});

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('HTMLRenderer', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\" style=\"width: 300px; height: 200px;\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should not fill empty rows with null values', function () {
    handsontable({
      data: [['a', 'b', 'c', 'd', 'e', 'f']],
      colHeaders: true,
      rowHeaders: true,
      minSpareRows: 5,
      renderer: 'html'
    });
    expect($('.handsontable table tr:last-child td:eq(0)').html()).toEqual('');
    expect($('.handsontable table tr:last-child td:eq(1)').html()).toEqual('');
    expect($('.handsontable table tr:last-child td:eq(2)').html()).toEqual('');
    expect($('.handsontable table tr:last-child td:eq(3)').html()).toEqual('');
    expect($('.handsontable table tr:last-child td:eq(4)').html()).toEqual('');
    expect($('.handsontable table tr:last-child td:eq(5)').html()).toEqual('');
  });
});

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('renderers', function () {
  var id = 'testContainer';
  var _Handsontable$rendere = Handsontable.renderers,
      registerRenderer = _Handsontable$rendere.registerRenderer,
      getRenderer = _Handsontable$rendere.getRenderer;
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should register custom renderer', function () {
    registerRenderer('myRenderer', function (hot, td, row, col, prop, value) {
      td.innerHTML = "--".concat(value, "--");
    });
    handsontable({
      data: [[1, 6, 10]],
      columns: [{
        renderer: 'myRenderer'
      }]
    });
    expect(getCell(0, 0).innerHTML).toBe('--1--');
  });
  it('should retrieve predefined renderers by its names', function () {
    expect(getRenderer('autocomplete')).toBeFunction();
    expect(getRenderer('base')).toBeFunction();
    expect(getRenderer('checkbox')).toBeFunction();
    expect(getRenderer('html')).toBeFunction();
    expect(getRenderer('numeric')).toBeFunction();
    expect(getRenderer('password')).toBeFunction();
    expect(getRenderer('text')).toBeFunction();
  });
  it('should retrieve custom renderer by its names', function () {
    var spy = jasmine.createSpy();
    registerRenderer('myRenderer', spy);
    getRenderer('myRenderer')(1, 2, 3, 4, 5, 6);
    expect(spy).toHaveBeenCalledWith(1, 2, 3, 4, 5, 6);
  });
});

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('NumericRenderer', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should render formatted number', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      cells: function cells() {
        return {
          type: 'numeric',
          numericFormat: {
            pattern: '$0,0.00'
          }
        };
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 2, '1000.234');
    setTimeout(function () {
      expect(getCell(2, 2).innerHTML).toEqual('$1,000.23');
      done();
    }, 200);
  });
  it('should render signed number', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      cells: function cells() {
        return {
          type: 'numeric',
          numericFormat: {
            pattern: '$0,0.00'
          }
        };
      },
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 2, '-1000.234');
    setTimeout(function () {
      expect(getCell(2, 2).innerHTML).toEqual('-$1,000.23');
      done();
    }, 200);
  });
  it('should not try to render string as numeral', function (done) {
    handsontable({
      cells: function cells() {
        return {
          type: 'numeric',
          numericFormat: {
            pattern: '$0,0.00'
          }
        };
      }
    });
    setDataAtCell(2, 2, '123 simple test');
    setTimeout(function () {
      expect(getCell(2, 2).innerHTML).toEqual('123 simple test');
      done();
    }, 100);
  });
  it('should add class names `htNumeric` and `htRight` to the cell if it renders a number', function () {
    var DIV = document.createElement('DIV');
    var instance = new Handsontable(DIV, {});
    var TD = document.createElement('TD');
    TD.className = 'someClass';
    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 123, {});
    expect(TD.className).toEqual('someClass htRight htNumeric');
    instance.destroy();
  });
  it('should add class names `htNumeric` and `htRight` to the cell if it renders a numeric string', function () {
    var DIV = document.createElement('DIV');
    var instance = new Handsontable(DIV, {});
    var TD = document.createElement('TD');
    TD.className = 'someClass';
    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, '123', {});
    expect(TD.className).toEqual('someClass htRight htNumeric');
    instance.destroy();
  });
  it('should not add class name `htNumeric` to the cell if it renders a text', function () {
    var DIV = document.createElement('DIV');
    var instance = new Handsontable(DIV, {});
    var TD = document.createElement('TD');
    TD.className = 'someClass';
    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 'abc', {});
    expect(TD.className).toEqual('someClass');
    instance.destroy();
  });
  it('should add class name `htDimmed` to a read only cell', function () {
    var DIV = document.createElement('DIV');
    var instance = new Handsontable(DIV, {});
    var TD = document.createElement('TD');
    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 123, {
      readOnly: true,
      readOnlyCellClassName: 'htDimmed'
    });
    expect(TD.className).toContain('htDimmed');
    instance.destroy();
  });
  describe('NumericRenderer with ContextMenu', function () {
    it('should change class name from default `htRight` to `htLeft` after set align in contextMenu', function (done) {
      handsontable({
        startRows: 1,
        startCols: 1,
        contextMenu: ['alignment'],
        cells: function cells() {
          return {
            type: 'numeric',
            numericFormat: {
              pattern: '$0,0.00'
            }
          };
        },
        height: 100
      });
      setDataAtCell(0, 0, '1000');
      selectCell(0, 0);
      contextMenu();
      var menu = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator');
      menu.simulate('mouseover');
      setTimeout(function () {
        var contextSubMenu = $(".htContextMenuSub_".concat(menu.text())).find('tbody td').eq(0);
        contextSubMenu.simulate('mousedown');
        contextSubMenu.simulate('mouseup');
        expect($('.handsontable.ht_master .htLeft:not(.htRight)').length).toBe(1);
        done();
      }, 500);
    });
  });
});

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('passwordRenderer', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should render strings as a sequence of asterisks', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        renderer: Handsontable.renderers.PasswordRenderer
      }]
    });
    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);
  });
  it('should render numbers as a sequence of asterisks ', function () {
    handsontable({
      data: [[1], [1234], [9090], [0]],
      columns: [{
        renderer: Handsontable.renderers.PasswordRenderer
      }]
    });
    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);
  });
  it('should be possible to set passwordRenderer with column \'type\' parameter', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        type: 'password'
      }]
    });
    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);
  });
  it('should be possible to set passwordRenderer using alias \'password\'', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        renderer: 'password'
      }]
    });
    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);
    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);
  });
  it('should render strings as a sequence of asterisks, of width matching the original value width', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        renderer: Handsontable.renderers.PasswordRenderer
      }]
    });
    expect(getRenderedValue(0, 0).length).toEqual(getDataAtCell(0, 0).length);
    expect(getRenderedValue(1, 0).length).toEqual(getDataAtCell(1, 0).length);
    expect(getRenderedValue(2, 0).length).toEqual(getDataAtCell(2, 0).length);
    expect(getRenderedValue(3, 0).length).toEqual(getDataAtCell(3, 0).length);
  });
  it('should render strings as a sequence of asterisks, of fixed width', function () {
    handsontable({
      data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
      columns: [{
        renderer: Handsontable.renderers.PasswordRenderer,
        hashLength: 10
      }]
    });
    expect(getRenderedValue(0, 0).length).toEqual(10);
    expect(getRenderedValue(1, 0).length).toEqual(10);
    expect(getRenderedValue(2, 0).length).toEqual(10);
    expect(getRenderedValue(3, 0).length).toEqual(10);
  });
  it('should render strings as a sequence of custom symbols', function () {
    handsontable({
      data: [[1, 'Joe'], [2, 'Timothy'], [3, 'Margaret'], [4, 'Jerry']],
      columns: [{
        renderer: Handsontable.renderers.PasswordRenderer,
        hashSymbol: '#'
      }, {
        renderer: Handsontable.renderers.PasswordRenderer,
        hashSymbol: 'x'
      }]
    });
    expect(getRenderedValue(0, 0)).toMatch(/^[#]+$/ig);
    expect(getRenderedValue(1, 0)).toMatch(/^[#]+$/ig);
    expect(getRenderedValue(2, 0)).toMatch(/^[#]+$/ig);
    expect(getRenderedValue(3, 0)).toMatch(/^[#]+$/ig);
    expect(getRenderedValue(0, 1)).toMatch(/^[x]+$/ig);
    expect(getRenderedValue(1, 1)).toMatch(/^[x]+$/ig);
    expect(getRenderedValue(2, 1)).toMatch(/^[x]+$/ig);
    expect(getRenderedValue(3, 1)).toMatch(/^[x]+$/ig);
  });
});

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('TextRenderer', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should render string', function () {
    handsontable();
    setDataAtCell(2, 2, 'string');
    expect(getCell(2, 2).innerHTML).toEqual('string');
  });
  it('should render number', function () {
    handsontable();
    setDataAtCell(2, 2, 13);
    expect(getCell(2, 2).innerHTML).toEqual('13');
  });
  it('should render boolean true', function () {
    handsontable();
    setDataAtCell(2, 2, true);
    expect(getCell(2, 2).innerHTML).toEqual('true');
  });
  it('should render boolean false', function () {
    handsontable();
    setDataAtCell(2, 2, false);
    expect(getCell(2, 2).innerHTML).toEqual('false');
  });
  it('should render null', function () {
    handsontable();
    setDataAtCell(2, 2, null);
    expect(getCell(2, 2).innerHTML).toEqual('');
  });
  it('should render undefined', function () {
    handsontable();
    /* eslint-disable wrap-iife */

    setDataAtCell(2, 2, function () {}());
    expect(getCell(2, 2).innerHTML).toEqual('');
  });
  it('should add class name `htDimmed` to a read only cell', function () {
    var DIV = document.createElement('DIV');
    var instance = new Handsontable.Core(DIV, {});
    var TD = document.createElement('TD');
    TD.className = 'someClass';
    Handsontable.renderers.TextRenderer(instance, TD, 0, 0, 0, '', {
      readOnly: true,
      readOnlyCellClassName: 'htDimmed'
    });
    expect(TD.className).toEqual('someClass htDimmed');
    instance.destroy();
  });
  it('should render a multiline string', function () {
    handsontable();
    setDataAtCell(1, 2, 'a b');
    setDataAtCell(2, 2, 'a\nb');
    expect($(getCell(2, 2)).height()).toBeGreaterThan($(getCell(1, 2)).height());
  });
  it('should wrap text when column width is limited', function () {
    handsontable({
      colWidths: [100]
    });
    setDataAtCell(0, 0, 'short text');
    setDataAtCell(1, 0, 'long long long long long long long text');
    expect($(getCell(1, 0)).height()).toBeGreaterThan($(getCell(0, 0)).height());
  });
});

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('autoWrapCol', function () {
    it('should be defaults true', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5)
      });
      expect(hot.getSettings().autoWrapCol).toBe(true);
    });
    it('should move to the neighboring column when it reaches the end of the current', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        autoWrapCol: true
      });
      selectCell(4, 0);
      expect(getSelected()).toEqual([[4, 0, 4, 0]]);
      keyDownUp('arrow_down');
      expect(getSelected()).toEqual([[0, 1, 0, 1]]);
      keyDownUp('arrow_up');
      expect(getSelected()).toEqual([[4, 0, 4, 0]]);
    });
    it('should move to the start of the table when it reaches the end of the table', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        autoWrapCol: true
      });
      selectCell(4, 4);
      expect(getSelected()).toEqual([[4, 4, 4, 4]]);
      keyDownUp('arrow_down');
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      keyDownUp('arrow_up');
      expect(getSelected()).toEqual([[4, 4, 4, 4]]);
    });
  });
});

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('autoWrapRow', function () {
    it('should be defaults true', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5)
      });
      expect(hot.getSettings().autoWrapRow).toBe(true);
    });
    it('should move to the neighboring row when it reaches the end of the current', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        autoWrapRow: true
      });
      selectCell(0, 4);
      expect(getSelected()).toEqual([[0, 4, 0, 4]]);
      keyDownUp('arrow_right');
      expect(getSelected()).toEqual([[1, 0, 1, 0]]);
      keyDownUp('arrow_left');
      expect(getSelected()).toEqual([[0, 4, 0, 4]]);
    });
    it('should move to the start of the table when it reaches the end of the table', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        autoWrapRow: true
      });
      selectCell(4, 4);
      expect(getSelected()).toEqual([[4, 4, 4, 4]]);
      keyDownUp('arrow_right');
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      keyDownUp('arrow_left');
      expect(getSelected()).toEqual([[4, 4, 4, 4]]);
    });
  });
});

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('colWidths', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('defined in constructor', function () {
      it('should consider colWidths provided as number', function () {
        handsontable({
          colWidths: 123
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidths provided as string', function () {
        handsontable({
          colWidths: '123'
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidths provided as array of numbers', function () {
        handsontable({
          colWidths: [123]
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidths provided as array of strings', function () {
        handsontable({
          colWidths: ['123']
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidth provided as function that returns number', function () {
        handsontable({
          colWidths: function colWidths(index) {
            if (index === 0) {
              return 123;
            }

            return 50;
          }
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidth provided as function that returns string', function () {
        handsontable({
          colWidths: function colWidths(index) {
            if (index === 0) {
              return '123';
            }

            return '50';
          }
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
    });
    describe('defined in updateSettings', function () {
      it('should consider colWidths provided as number', function () {
        handsontable();
        updateSettings({
          colWidths: 123
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidths provided as string', function () {
        handsontable();
        updateSettings({
          colWidths: '123'
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidths provided as array of numbers', function () {
        handsontable();
        updateSettings({
          colWidths: [123]
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidths provided as array of strings', function () {
        handsontable();
        updateSettings({
          colWidths: ['123']
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidth provided as function that returns number', function () {
        handsontable();
        updateSettings({
          colWidths: function colWidths(index) {
            if (index === 0) {
              return 123;
            }

            return 50;
          }
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider colWidth provided as function that returns string', function () {
        handsontable();
        updateSettings({
          colWidths: function colWidths(index) {
            if (index === 0) {
              return '123';
            }

            return '50';
          }
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
    });
    describe('defined in columns', function () {
      it('should consider width provided as number', function () {
        handsontable({
          columns: [{
            width: 123
          }]
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider width provided as string', function () {
        handsontable({
          columns: [{
            width: '123'
          }]
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider width provided as array of numbers', function () {
        handsontable({
          columns: [{
            width: [123]
          }]
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider width provided as array of strings', function () {
        handsontable({
          columns: [{
            width: ['123']
          }]
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider width provided as function that returns number', function () {
        handsontable({
          columns: [{
            width: function width(index) {
              if (index === 0) {
                return 123;
              }

              return 50;
            }
          }]
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider width provided as function that returns string', function () {
        handsontable({
          columns: [{
            width: function width(index) {
              if (index === 0) {
                return '123';
              }

              return '50';
            }
          }]
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
    });
    describe('defined in cells', function () {
      it('should consider width provided as number', function () {
        handsontable({
          cells: function cells(row, col) {
            if (col === 0) {
              this.width = 123;
            }
          }
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
      it('should consider width provided as string', function () {
        handsontable({
          cells: function cells(row, col) {
            if (col === 0) {
              this.width = '123';
            }
          }
        });
        expect(colWidth(spec().$container, 0)).toBe(123);
      });
    });
  });
});

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('columns', function () {
    var id = 'testContainer';

    var arrayOfArrays = function arrayOfArrays() {
      return [['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['2008', 10, 11, 12, 13], ['2009', 20, 11, 14, 13], ['2010', 30, 15, 12, 13]];
    };

    var arrayOfObjects = function arrayOfObjects() {
      return [{
        id: 1,
        name: 'Ted',
        lastName: 'Right',
        date: '01/01/2015'
      }, {
        id: 2,
        name: 'Frank',
        lastName: 'Honest',
        date: '01/01/15'
      }, {
        id: 3,
        name: 'Joan',
        lastName: 'Well',
        date: '41/01/2015'
      }, {
        id: 4,
        name: 'Sid',
        lastName: 'Strong',
        date: '01/51/2015'
      }, {
        id: 5,
        name: 'Jane',
        lastName: 'Neat',
        date: '01/01/2015'
      }, {
        id: 6,
        name: 'Chuck',
        lastName: 'Jackson',
        date: '01/01/15'
      }, {
        id: 7,
        name: 'Meg',
        lastName: 'Jansen',
        date: '41/01/2015'
      }, {
        id: 8,
        name: 'Rob',
        lastName: 'Norris',
        date: '01/51/2015'
      }, {
        id: 9,
        name: 'Sean',
        lastName: 'O\'Hara',
        date: '01/01/2015'
      }, {
        id: 10,
        name: 'Eve',
        lastName: 'Branson',
        date: '01/01/15'
      }];
    };

    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('as an array of objects', function () {
      it('should not throw exception when passed columns array is empty (data source as array of arrays)', function () {
        var hot = handsontable({
          data: arrayOfArrays(),
          columns: [{
            data: 0
          }, {
            data: 1
          }, {
            data: 2
          }]
        });
        expect(function () {
          hot.updateSettings({
            columns: []
          });
        }).not.toThrow();
      });
      it('should not throw exception when passed columns array is empty (data source as array of objects)', function () {
        var hot = handsontable({
          data: arrayOfObjects(),
          columns: [{
            data: 'id'
          }, {
            data: 'name'
          }, {
            data: 'lastName'
          }]
        });
        expect(function () {
          hot.updateSettings({
            columns: []
          });
        }).not.toThrow();
      });
    });
    describe('as a function', function () {
      describe('init', function () {
        it('should render only these columns which are not `null`', function () {
          var hot = handsontable({
            data: arrayOfArrays(),
            columns: function columns(column) {
              return [1, 2].indexOf(column) > -1 ? {} : null;
            }
          });
          expect(hot.getData()[0].length).toEqual(2);
        });
        it('should properly bind default data when is not defined (data source as array of arrays)', function () {
          var hot = handsontable({
            data: arrayOfArrays(),
            columns: function columns(column) {
              return [1, 2].indexOf(column) > -1 ? {} : null;
            }
          });
          expect(hot.getDataAtCell(0, 0)).toEqual('');
          expect(hot.getDataAtCell(0, 1)).toEqual('Kia');
        });
        it('should properly bind default data when is not defined (data source as array of objects)', function () {
          var hot = handsontable({
            data: arrayOfObjects(),
            columns: function columns(column) {
              return [1, 2].indexOf(column) > -1 ? {} : null;
            }
          });
          expect(hot.getDataAtCell(0, 0)).toEqual(null);
          expect(hot.getDataAtCell(0, 1)).toEqual(null);
        });
        it('should properly bind defined data (data source as array of arrays)', function () {
          var hot = handsontable({
            data: arrayOfArrays(),
            columns: function columns(column) {
              return [1, 2].indexOf(column) > -1 ? {
                data: column + 1
              } : null;
            }
          });
          expect(hot.getDataAtCell(0, 0)).toEqual('Nissan');
          expect(hot.getDataAtCell(0, 1)).toEqual('Toyota');
        });
        it('should properly bind defined data (data source as array of objects)', function () {
          var hot = handsontable({
            data: arrayOfObjects(),
            columns: function columns(column) {
              var keys = ['id', 'name', 'lastName'];
              return [1, 2].indexOf(column) > -1 ? {
                data: keys[column - 1]
              } : null;
            }
          });
          expect(hot.getDataAtCell(0, 0)).toEqual(1);
          expect(hot.getDataAtCell(0, 1)).toEqual('Ted');
        });
      });
      describe('updateSettings', function () {
        it('should not throw exception when passed columns function without return anything (data source as array of arrays) when columns is a function', function () {
          var hot = handsontable({
            data: arrayOfArrays(),
            columns: function columns(column) {
              return [0, 1, 2].indexOf(column) > -1 ? {
                data: column
              } : null;
            }
          });
          expect(function () {
            hot.updateSettings({
              columns: function columns() {}
            });
          }).not.toThrow();
        });
        it('should not throw exception when passed columns function without return anything (data source as array of objects) when columns is a function', function () {
          var hot = handsontable({
            data: arrayOfObjects(),
            columns: function columns(column) {
              var keys = ['id', 'name', 'lasName'];
              return [0, 1, 2].indexOf(column) > -1 ? {
                data: keys[column]
              } : null;
            }
          });
          expect(function () {
            hot.updateSettings({
              columns: function columns() {}
            });
          }).not.toThrow();
        });
      });
      describe('editors', function () {
        it('should properly bind defined editors', function () {
          handsontable({
            data: [['Joe'], ['Timothy'], ['Margaret'], ['Jerry']],
            columns: function columns(column) {
              return column === 0 ? {
                editor: Handsontable.editors.PasswordEditor
              } : null;
            }
          });
          selectCell(0, 0);
          keyDown('enter');
          var editor = $('.handsontableInput');
          expect(editor.is(':visible')).toBe(true);
          expect(editor.is(':password')).toBe(true);
        });
      });
      describe('renderers', function () {
        it('should properly bind defined renderer', function () {
          handsontable({
            data: [[true], [false], [true]],
            columns: function columns(column) {
              return column === 0 ? {
                type: 'checkbox'
              } : null;
            }
          });
          expect($(getRenderedValue(0, 0)).is(':checkbox')).toBe(true);
          expect($(getRenderedValue(1, 0)).is(':checkbox')).toBe(true);
          expect($(getRenderedValue(2, 0)).is(':checkbox')).toBe(true);
        });
      });
      describe('validators', function () {
        it('should properly bind defined validator', function (done) {
          var onAfterValidate = jasmine.createSpy('onAfterValidate');
          handsontable({
            data: arrayOfObjects(),
            columns: function columns(column) {
              var settings = [{
                data: 'date',
                type: 'date'
              }, {
                data: 'name'
              }, {
                data: 'lastName'
              }];
              return [0, 1, 2].indexOf(column) > -1 ? settings[column] : null;
            },
            afterValidate: onAfterValidate
          });
          setDataAtCell(0, 0, '');
          setTimeout(function () {
            expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'date', undefined, undefined);
            done();
          }, 100);
        });
      });
    });
  });
});

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('copyable', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    it('by default, CTRL+C should NOT copy the password value', function () {
      handsontable({
        data: [['Joe', 'Secret', 'Jack']],
        columns: [{}, {
          type: 'password'
        }, {}]
      });
      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\t\tJack');
    });
    it('with copyable=true, CTRL+C should copy the password value', function () {
      handsontable({
        data: [['Joe', 'Secret', 'Jack']],
        columns: [{}, {
          type: 'password',
          copyable: true
        }, {}]
      });
      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\tSecret\tJack');
    });
    it('with copyable=false, CTRL+C should NOT copy the password value', function () {
      handsontable({
        data: [['Joe', 'Secret', 'Jack']],
        columns: [{}, {
          type: 'password',
          copyable: false
        }, {}]
      });
      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\t\tJack');
    });
  });
});

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('currentHeaderClassName', function () {
    it('should apply default currentHeaderClassName to cells in row where there is a selection', function () {
      handsontable({
        rowHeaders: true,
        colHeaders: true,
        data: Handsontable.helper.createSpreadsheetData(5, 7)
      });
      selectCell(2, 2);
      expect(spec().$container.find('.ht_master th.ht__highlight').length).toEqual(2);
    });
    it('should apply default currentHeaderClassName from cells after deselection', function () {
      handsontable({
        rowHeaders: true,
        colHeaders: true,
        data: Handsontable.helper.createSpreadsheetData(5, 7)
      });
      selectCell(2, 2);
      deselectCell();
      expect(spec().$container.find('.ht_master th.ht__highlight').length).toEqual(0);
    });
    it('should apply custom currentHeaderClassName to cells in row where there is a selection', function () {
      handsontable({
        rowHeaders: true,
        colHeaders: true,
        data: Handsontable.helper.createSpreadsheetData(5, 7),
        currentHeaderClassName: 'currentHeaderClassName'
      });
      selectCell(2, 2);
      expect(spec().$container.find('.ht_master th.currentHeaderClassName').length).toEqual(2);
    });
  });
});

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('currentRowClassName', function () {
    it('should apply currentRowClassName to cells in row where there is a selection', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 7),
        currentRowClassName: 'currentRowClassName'
      });
      selectCell(2, 2);
      expect(spec().$container.find('td.currentRowClassName').length).toEqual(6);
    });
    it('should apply currentRowClassName from cells after deselection', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 7),
        currentRowClassName: 'currentRowClassName'
      });
      selectCell(2, 2);
      deselectCell();
      expect(spec().$container.find('td.currentRowClassName').length).toEqual(0);
    });
  });
  describe('currentColClassName', function () {
    it('should apply currentColClassName to cells in row where there is a selection', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 7),
        currentColClassName: 'currentColClassName'
      });
      selectCell(2, 2);
      expect(spec().$container.find('td.currentColClassName').length).toEqual(4);
    });
    it('should remove currentColClassName from cells after deselection', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 7),
        currentColClassName: 'currentColClassName'
      });
      selectCell(2, 2);
      deselectCell();
      expect(spec().$container.find('td.currentColClassName').length).toEqual(0);
    });
  });
});

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('editor', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('defined in constructor', function () {
      it('should use text editor by default', function () {
        var textEditorPrototype = Handsontable.editors.TextEditor.prototype;
        spyOn(textEditorPrototype, 'init').and.callThrough();
        handsontable();
        selectCell(0, 0);
        expect(textEditorPrototype.init).toHaveBeenCalled();
      });
      it('should use editor from predefined string', function () {
        var textEditorPrototype = Handsontable.editors.TextEditor.prototype;
        var checkboxEditorPrototype = Handsontable.editors.CheckboxEditor.prototype;
        spyOn(textEditorPrototype, 'init');
        spyOn(checkboxEditorPrototype, 'init');
        handsontable({
          columns: [{
            editor: 'checkbox'
          }]
        });
        selectCell(0, 0);
        expect(textEditorPrototype.init).not.toHaveBeenCalled();
        expect(checkboxEditorPrototype.init).toHaveBeenCalled();
      });
      it('should use editor from predefined string when columns is a function', function () {
        var textEditorPrototype = Handsontable.editors.TextEditor.prototype;
        var checkboxEditorPrototype = Handsontable.editors.CheckboxEditor.prototype;
        spyOn(textEditorPrototype, 'init');
        spyOn(checkboxEditorPrototype, 'init');
        handsontable({
          columns: function columns(column) {
            return column === 0 ? {
              editor: 'checkbox'
            } : null;
          }
        });
        selectCell(0, 0);
        expect(textEditorPrototype.init).not.toHaveBeenCalled();
        expect(checkboxEditorPrototype.init).toHaveBeenCalled();
      });
      it('should use editor class passed directly', function () {
        var customEditor = jasmine.createSpy('customEditor');
        customEditor.and.callFake(function () {
          this.prepare = function () {};

          this.isOpened = function () {};
        });
        handsontable({
          columns: [{
            editor: customEditor
          }]
        });
        selectCell(0, 0);
        expect(customEditor).toHaveBeenCalled();
      });
      it('should use editor class passed directly when columns is a function', function () {
        var customEditor = jasmine.createSpy('customEditor');
        customEditor.and.callFake(function () {
          this.prepare = function () {};

          this.isOpened = function () {};
        });
        handsontable({
          columns: function columns(column) {
            return column === 0 ? {
              editor: customEditor
            } : null;
          }
        });
        selectCell(0, 0);
        expect(customEditor).toHaveBeenCalled();
      });
      it('should use editor from custom string', function () {
        var customEditor = jasmine.createSpy('customEditor');
        customEditor.and.callFake(function () {
          this.prepare = function () {};

          this.isOpened = function () {};
        });
        Handsontable.editors.registerEditor('myEditor', customEditor);
        handsontable({
          columns: [{
            editor: 'myEditor'
          }]
        });
        selectCell(0, 0);
        expect(customEditor).toHaveBeenCalled();
      });
      it('should use editor from custom string when columns is a function', function () {
        var customEditor = jasmine.createSpy('customEditor');
        customEditor.and.callFake(function () {
          this.prepare = function () {};

          this.isOpened = function () {};
        });
        Handsontable.editors.registerEditor('myEditor', customEditor);
        handsontable({
          columns: function columns(column) {
            return column === 0 ? {
              editor: 'myEditor'
            } : null;
          }
        });
        selectCell(0, 0);
        expect(customEditor).toHaveBeenCalled();
      });
    });
  });
});

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('settings', function () {
  describe('fixedColumnsLeft', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('defined in constructor', function () {
      it('should show columns headers', function () {
        handsontable({
          fixedColumnsLeft: 3
        });
        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(3);
      });
      it('should show columns headers when headers are enabled', function () {
        handsontable({
          rowHeaders: true,
          colHeaders: true,
          fixedColumnsLeft: 2
        });
        expect(getLeftClone().find('thead tr th').length).toEqual(3);
        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);
      });
    });
    describe('defined in updateSettings', function () {
      it('should increase fixed columns', function () {
        handsontable({
          fixedColumnsLeft: 2
        });
        updateSettings({
          fixedColumnsLeft: 4
        });
        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(4);
      });
      it('should decrease fixed columns', function () {
        handsontable({
          fixedColumnsLeft: 4
        });
        updateSettings({
          fixedColumnsLeft: 2
        });
        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);
      });
      it('should create fixed columns when they are disabled eariler', function () {
        handsontable({
          fixedColumnsLeft: 0
        });
        updateSettings({
          fixedColumnsLeft: 2
        });
        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);
      });
      it('should disable fixed columns', function () {
        handsontable({
          fixedColumnsLeft: 2
        });
        updateSettings({
          fixedColumnsLeft: 0
        });
        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);
        expect(getLeftClone().width()).toBe(0);
      });
      it('should not throw errors while scrolling horizontally when fixed columns was set', function (done) {
        var spy = jasmine.createSpyObj('error', ['test']);
        var prevError = window.onerror;

        window.onerror = function () {
          spy.test();
        };

        var hot = handsontable({
          data: Handsontable.helper.createSpreadsheetData(50, 50),
          width: 200,
          height: 200,
          colHeaders: true
        });
        updateSettings({
          fixedColumnsLeft: 2
        });
        setTimeout(function () {
          hot.scrollViewportTo(30, 30);
        }, 100);
        setTimeout(function () {
          expect(spy.test.calls.count()).toBe(0);
          done();
          window.onerror = prevError;
        }, 200);
      });
      it('should synchronize scroll with master table',
      /*#__PURE__*/
      _asyncToGenerator(function* () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(50, 50),
          width: 200,
          height: 200,
          rowHeaders: true,
          fixedColumnsLeft: 2
        });
        getMaster().find('.wtHolder').scrollTop(100);
        yield sleep(10);
        expect(getLeftClone().find('.wtHolder').scrollTop()).toBe(getMaster().find('.wtHolder').scrollTop());
      }));
    });
  });
});

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('settings', function () {
  describe('fixedRowsBottom', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('defined in constructor', function () {
      it('should show rows headers', function () {
        handsontable({
          fixedRowsBottom: 3
        });
        expect(getBottomClone().find('tbody tr').length).toEqual(3);
      });
      it('should show rows headers when headers are enabled', function () {
        handsontable({
          rowHeaders: true,
          colHeaders: true,
          fixedRowsBottom: 2
        });
        expect(getBottomClone().find('thead tr').length).toEqual(1);
        expect(getBottomClone().find('thead tr').height()).toEqual(0); // header is always invisible

        expect(getBottomClone().find('tbody tr').length).toEqual(2);
      });
    });
    describe('defined in updateSettings', function () {
      it('should increase fixed rows', function () {
        handsontable({
          fixedRowsBottom: 2
        });
        updateSettings({
          fixedRowsBottom: 4
        });
        expect(getBottomClone().find('tbody tr').length).toEqual(4);
      });
      it('should decrease fixed rows', function () {
        handsontable({
          fixedRowsBottom: 4
        });
        updateSettings({
          fixedRowsBottom: 2
        });
        expect(getBottomClone().find('tbody tr').length).toEqual(2);
      });
      it('should create fixed rows when they are disabled eariler', function () {
        handsontable({
          fixedRowsBottom: 0
        });
        updateSettings({
          fixedRowsBottom: 2
        });
        expect(getBottomClone().find('tbody tr').length).toEqual(2);
      });
      it('should disable fixed rows', function () {
        handsontable({
          fixedRowsBottom: 2
        });
        updateSettings({
          fixedRowsBottom: 0
        });
        expect(getBottomClone().find('tbody tr').length).toEqual(2);
        expect(getLeftClone().height()).toBe(0);
      });
      it('should not throw errors while scrolling vertically when fixed rows was set',
      /*#__PURE__*/
      _asyncToGenerator(function* () {
        var spy = jasmine.createSpyObj('error', ['test']);
        var prevError = window.onerror;

        window.onerror = function () {
          spy.test();
        };

        var hot = handsontable({
          data: Handsontable.helper.createSpreadsheetData(50, 50),
          width: 200,
          height: 200,
          rowHeaders: true
        });
        updateSettings({
          fixedRowsBottom: 2
        });
        yield sleep(100);
        hot.scrollViewportTo(30, 30);
        yield sleep(100);
        expect(spy.test.calls.count()).toBe(0);
        window.onerror = prevError;
      }));
    });
    it('should synchronize scroll with master table',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(50, 50),
        width: 200,
        height: 200,
        rowHeaders: true,
        fixedRowsBottom: 2
      });
      getMaster().find('.wtHolder').scrollLeft(100);
      yield sleep(10);
      expect(getBottomClone().find('.wtHolder').scrollLeft()).toBe(getMaster().find('.wtHolder').scrollLeft());
    }));
  });
});

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('settings', function () {
  describe('fixedRowsTop', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('defined in constructor', function () {
      it('should show rows headers', function () {
        handsontable({
          fixedRowsTop: 3
        });
        expect(getTopClone().find('tbody tr').length).toEqual(3);
      });
      it('should show rows headers when headers are enabled', function () {
        handsontable({
          rowHeaders: true,
          colHeaders: true,
          fixedRowsTop: 2
        });
        expect(getTopClone().find('thead tr').length).toEqual(1);
        expect(getTopClone().find('tbody tr').length).toEqual(2);
      });
    });
    describe('defined in updateSettings', function () {
      it('should increase fixed rows', function () {
        handsontable({
          fixedRowsTop: 2
        });
        updateSettings({
          fixedRowsTop: 4
        });
        expect(getTopClone().find('tbody tr').length).toEqual(4);
      });
      it('should decrease fixed rows', function () {
        handsontable({
          fixedRowsTop: 4
        });
        updateSettings({
          fixedRowsTop: 2
        });
        expect(getTopClone().find('tbody tr').length).toEqual(2);
      });
      it('should create fixed rows when they are disabled eariler', function () {
        handsontable({
          fixedRowsTop: 0
        });
        updateSettings({
          fixedRowsTop: 2
        });
        expect(getTopClone().find('tbody tr').length).toEqual(2);
      });
      it('should disable fixed rows', function () {
        handsontable({
          fixedRowsTop: 2
        });
        updateSettings({
          fixedRowsTop: 0
        });
        expect(getTopClone().find('tbody tr').length).toEqual(2);
        expect(getLeftClone().height()).toBe(0);
      });
      it('should not throw errors while scrolling vertically when fixed rows was set', function (done) {
        var spy = jasmine.createSpyObj('error', ['test']);
        var prevError = window.onerror;

        window.onerror = function () {
          spy.test();
        };

        var hot = handsontable({
          data: Handsontable.helper.createSpreadsheetData(50, 50),
          width: 200,
          height: 200,
          rowHeaders: true
        });
        updateSettings({
          fixedRowsTop: 2
        });
        setTimeout(function () {
          hot.scrollViewportTo(30, 30);
        }, 100);
        setTimeout(function () {
          expect(spy.test.calls.count()).toBe(0);
          done();
          window.onerror = prevError;
        }, 200);
      });
      it('should synchronize scroll with master table',
      /*#__PURE__*/
      _asyncToGenerator(function* () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(50, 50),
          width: 200,
          height: 200,
          rowHeaders: true,
          fixedRowsTop: 2
        });
        getMaster().find('.wtHolder').scrollLeft(100);
        yield sleep(10);
        expect(getTopClone().find('.wtHolder').scrollLeft()).toBe(getMaster().find('.wtHolder').scrollLeft());
      }));
    });
  });
});

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('fragmentSelection', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    /**
     * Returns current text selection or false if there is no text selection
     * @returns {*}
     */

    function getSelected() {
      /* eslint-disable no-else-return */
      var text = ''; // IE8

      if (window.getSelection && window.getSelection().toString() && $(window.getSelection()).attr('type') !== 'Caret') {
        text = window.getSelection();
        return text.toString();
      } else {
        // standards
        var selection = document.selection && document.selection.createRange();

        if (!(typeof selection === 'undefined') && selection.text && selection.text.toString()) {
          text = selection.text;
          return text.toString();
        }
      }

      return false;
    }
    /**
     * Selects a <fromEl> node at as many siblings as given in the <cells> value
     * Note: IE8 fallback assumes that a node contains exactly one word
     * @param fromEl
     * @param siblings
     */


    function selectElementText(fromEl, siblings) {
      var doc = window.document;
      var element = fromEl;
      var numOfSiblings = siblings;
      var sel;
      var range;

      if (window.getSelection && doc.createRange) {
        // standards
        sel = window.getSelection();
        range = doc.createRange();
        range.setStartBefore(element, 0);

        while (numOfSiblings > 1) {
          element = element.nextSibling;
          numOfSiblings -= 1;
        }

        range.setEndAfter(element, 0);
        sel.removeAllRanges();
        sel.addRange(range);
      } else if (doc.body.createTextRange) {
        // IE8
        range = doc.body.createTextRange();
        range.moveToElementText(element);
        range.moveEnd('word', numOfSiblings + 1);
        range.select();
      }
    }

    describe('constructor', function () {
      it('should disallow fragmentSelection when set to false', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(4, 4),
          fragmentSelection: false
        });
        selectElementText(spec().$container.find('tr:eq(0) td:eq(1)')[0], 3);
        mouseDown(spec().$container.find('tr:eq(0) td:eq(3)'));
        mouseUp(spec().$container.find('tr:eq(0) td:eq(3)'));
        var sel = getSelected();
        expect(sel).toEqual(' '); // copyPaste has selected space in textarea
      });
      xit('should allow fragmentSelection when set to true', function () {
        // We have to try another way to simulate text selection.
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(4, 4),
          fragmentSelection: true
        });
        selectElementText(spec().$container.find('td')[1], 3);
        mouseDown(spec().$container.find('tr:eq(0) td:eq(3)'));
        mouseUp(spec().$container.find('tr:eq(0) td:eq(3)'));
        var sel = getSelected();
        sel = sel.replace(/\s/g, ''); // tabs and spaces between <td>s are inconsistent in browsers, so let's ignore them

        expect(sel).toEqual('B1C1D1');
      });
      xit('should allow fragmentSelection from one cell when set to `cell`', function () {
        // We have to try another way to simulate text selection.
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(4, 4),
          fragmentSelection: 'cell'
        });
        selectElementText(spec().$container.find('td')[1], 1);
        mouseDown(spec().$container.find('tr:eq(0) td:eq(1)'));
        mouseUp(spec().$container.find('tr:eq(0) td:eq(1)'));
        expect(getSelected().replace(/\s/g, '')).toEqual('B1');
      });
      it('should disallow fragmentSelection from one cell when set to `cell` and when user selects adjacent cell', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(4, 4),
          fragmentSelection: 'cell'
        });
        selectElementText(spec().$container.find('td')[1], 1);
        mouseDown(spec().$container.find('tr:eq(0) td:eq(1)'));
        mouseOver(spec().$container.find('tr:eq(0) td:eq(2)'));
        mouseMove(spec().$container.find('tr:eq(0) td:eq(2)'));
        mouseUp(spec().$container.find('tr:eq(0) td:eq(2)'));
        expect(getSelected()).toEqual(' '); // copyPaste has selected space in textarea
      });
      it('should disallow fragmentSelection of Handsontable chrome (anything that is not table) when set to false', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(4, 4),
          fragmentSelection: false
        });
        var $div = $('<div style="position: absolute; top: 0; left: 0">Text</div>');
        spec().$container.append($div);
        selectElementText($div[0], 1);
        mouseDown($div);
        var sel = getSelected();
        expect(sel).toEqual(false);
      });
      it('should disallow fragmentSelection of Handsontable chrome (anything that is not table) when set to true', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(4, 4),
          fragmentSelection: true
        });
        var $div = $('<div style="position: absolute; top: 0; left: 0">Text</div>');
        spec().$container.append($div);
        selectElementText($div[0], 1);
        mouseDown($div);
        var sel = getSelected();
        expect(sel).toEqual(false);
      });
    });
    describe('dynamic', function () {
      it('should disallow fragmentSelection when set to false', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(4, 4),
          fragmentSelection: true
        });
        updateSettings({
          fragmentSelection: false
        });
        selectElementText(spec().$container.find('tr:eq(0) td:eq(1)')[0], 3);
        mouseDown(spec().$container.find('tr:eq(0) td:eq(3)'));
        mouseUp(spec().$container.find('tr:eq(0) td:eq(3)'));
        var sel = getSelected();
        expect(sel).toEqual(' '); // copyPaste has selected space in textarea
      });
      xit('should allow fragmentSelection when set to true', function () {
        // We have to try another way to simulate text selection.
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(4, 4),
          fragmentSelection: false
        });
        updateSettings({
          fragmentSelection: true
        });
        selectElementText(spec().$container.find('td')[1], 3);
        mouseDown(spec().$container.find('tr:eq(0) td:eq(3)'));
        mouseUp(spec().$container.find('tr:eq(0) td:eq(3)'));
        var sel = getSelected();
        sel = sel.replace(/\s/g, ''); // tabs and spaces between <td>s are inconsistent in browsers, so let's ignore them

        expect(sel).toEqual('B1C1D1');
      });
    });
  });
});

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('maxCols', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('works on init', function () {
      it('should show data properly when `maxCols` is set to 0', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxCols: 0
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData().length).toEqual(0);
        expect(getDataAtRow(0)).toEqual([]);
        expect(countCols()).toEqual(0);
        expect(countEmptyCols()).toEqual(0);
        expect(getDataAtCol(0)).toEqual([]);
        expect(getDataAtCol(1)).toEqual([]);
      });
      it('should show data properly when `maxCols` is set to value > 0', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxCols: 5
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData()[0].length).toEqual(5);
        expect(getDataAtRow(0).length).toEqual(5);
        expect(countCols()).toEqual(5);
        expect(countEmptyCols()).toEqual(0);
        expect(getDataAtCol(6)).toEqual([]);
      });
      it('should show data properly when `maxCols` is set to infinity value', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxCols: Infinity
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData()[0].length).toEqual(10);
        expect(getDataAtRow(0).length).toEqual(10);
        expect(countCols()).toEqual(10);
        expect(countEmptyCols()).toEqual(0);
        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);
      });
      describe('when `columns` property was set', function () {
        it('should show data properly when `maxCols` is set to value > 0', function () {
          handsontable({
            columns: [{
              type: 'text'
            }, {
              type: 'text'
            }, {
              type: 'text'
            }, {
              type: 'text'
            }, {
              type: 'text'
            }],
            minRows: 10,
            maxCols: 2
          });
          expect(getSourceDataAtRow(0).length).toEqual(5);
          expect(countSourceCols()).toEqual(5);
          expect(getData()[0].length).toEqual(2);
          expect(getDataAtRow(0).length).toEqual(2);
          expect(countCols()).toEqual(2);
          expect(getDataAtCol(3)).toEqual([]);
        });
      });
    });
    describe('update settings works', function () {
      it('should show data properly after maxCols is updated to 0', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10)
        });
        updateSettings({
          maxCols: 0
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData().length).toEqual(0);
        expect(getDataAtRow(0)).toEqual([]);
        expect(countCols()).toEqual(0);
        expect(getDataAtCol(0)).toEqual([]);
        expect(getDataAtCol(1)).toEqual([]);
      });
      it('should show data properly after maxCols is updated to value > 0 -> test no. 1', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10)
        });
        updateSettings({
          maxCols: 2
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData()[0].length).toEqual(2);
        expect(getDataAtRow(0).length).toEqual(2);
        expect(countCols()).toEqual(2);
        expect(countEmptyCols()).toEqual(0);
        expect(getDataAtCol(3)).toEqual([]);
      });
      it('should show data properly after maxCols is updated to value > 0 -> test no. 2', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxCols: 5
        });
        updateSettings({
          maxCols: 2
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData()[0].length).toEqual(2);
        expect(getDataAtRow(0).length).toEqual(2);
        expect(countCols()).toEqual(2);
        expect(countEmptyCols()).toEqual(0);
        expect(getDataAtCol(3)).toEqual([]);
      });
      it('should show data properly after maxCols is updated to value > 0 -> test no. 3', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxCols: 2
        });
        updateSettings({
          maxCols: 5
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData()[0].length).toEqual(5);
        expect(getDataAtRow(0).length).toEqual(5);
        expect(countCols()).toEqual(5);
        expect(countEmptyCols()).toEqual(0);
        expect(getDataAtCol(6)).toEqual([]);
      });
      it('should show data properly after maxCols is updated to infinity value -> test no. 1', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10)
        });
        updateSettings({
          maxCols: Infinity
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData()[0].length).toEqual(10);
        expect(getDataAtRow(0).length).toEqual(10);
        expect(countCols()).toEqual(10);
        expect(countEmptyCols()).toEqual(0);
        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);
      });
      it('should show data properly after maxCols is updated to infinity value -> test no. 2', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxCols: 2
        });
        updateSettings({
          maxCols: Infinity
        });
        expect(getSourceDataAtRow(0).length).toEqual(10);
        expect(countSourceCols()).toEqual(10);
        expect(getData()[0].length).toEqual(10);
        expect(getDataAtRow(0).length).toEqual(10);
        expect(countCols()).toEqual(10);
        expect(countEmptyCols()).toEqual(0);
        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);
      });
      describe('works when `columns` property was set', function () {
        it('should show data properly when `maxCols` is updated to value > 0', function () {
          handsontable({
            columns: [{
              type: 'text'
            }, {
              type: 'text'
            }, {
              type: 'text'
            }, {
              type: 'text'
            }, {
              type: 'text'
            }],
            minRows: 10
          });
          updateSettings({
            maxCols: 2
          });
          expect(getSourceDataAtRow(0).length).toEqual(5);
          expect(countSourceCols()).toEqual(5);
          expect(getData()[0].length).toEqual(2);
          expect(getDataAtRow(0).length).toEqual(2);
          expect(countCols()).toEqual(2);
          expect(getDataAtCol(0).length).toEqual(10);
        });
      });
    });
  });
});

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('maxRows', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('works on init', function () {
      it('should show data properly when `maxRows` is set to 0', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxRows: 0
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(0);
        expect(getDataAtCol(0)).toEqual([]);
        expect(countRows()).toEqual(0);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(0)).toEqual([]);
        expect(getDataAtRow(1)).toEqual([]);
      });
      it('should show data properly when `maxRows` is set to value > 0', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxRows: 5
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(5);
        expect(getDataAtCol(0).length).toEqual(5);
        expect(countRows()).toEqual(5);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(6)).toEqual([]);
      });
      it('should show data properly when `maxRows` is set to infinity value', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxRows: Infinity
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(10);
        expect(getDataAtCol(0).length).toEqual(10);
        expect(countRows()).toEqual(10);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);
      });
    });
    describe('update settings works', function () {
      it('should show data properly after maxRows is updated to 0', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10)
        });
        updateSettings({
          maxRows: 0
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(0);
        expect(getDataAtCol(0)).toEqual([]);
        expect(countRows()).toEqual(0);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(0)).toEqual([]);
        expect(getDataAtRow(1)).toEqual([]);
      });
      it('should show data properly after maxRows is updated to value > 0 -> test no. 1', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10)
        });
        updateSettings({
          maxRows: 2
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(2);
        expect(getDataAtCol(0).length).toEqual(2);
        expect(countRows()).toEqual(2);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(3)).toEqual([]);
      });
      it('should show data properly after maxRows is updated to value > 0 -> test no. 2', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxRows: 5
        });
        updateSettings({
          maxRows: 2
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(2);
        expect(getDataAtCol(0).length).toEqual(2);
        expect(countRows()).toEqual(2);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(3)).toEqual([]);
      });
      it('should show data properly after maxRows is updated to value > 0 -> test no. 3', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxRows: 2
        });
        updateSettings({
          maxRows: 5
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(5);
        expect(getDataAtCol(0).length).toEqual(5);
        expect(countRows()).toEqual(5);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(6)).toEqual([]);
      });
      it('should show data properly after maxRows is updated to infinity value -> test no. 1', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10)
        });
        updateSettings({
          maxRows: Infinity
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(10);
        expect(getDataAtCol(0).length).toEqual(10);
        expect(countRows()).toEqual(10);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);
      });
      it('should show data properly after maxRows is updated to infinity value -> test no. 2', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          maxRows: 2
        });
        updateSettings({
          maxRows: Infinity
        });
        expect(getSourceDataAtCol(0).length).toEqual(10);
        expect(countSourceRows()).toEqual(10);
        expect(getData().length).toEqual(10);
        expect(getDataAtCol(0).length).toEqual(10);
        expect(countRows()).toEqual(10);
        expect(countEmptyRows()).toEqual(0);
        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);
      });
    });
  });
});

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('settings', function () {
  describe('outsideClickDeselects', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    it('should not deselect the currently selected cell after clicking on a scrollbar', function () {
      var hot = handsontable({
        outsideClickDeselects: false,
        minRows: 20,
        minCols: 2,
        width: 400,
        height: 100
      });
      selectCell(0, 0);
      var holderBoundingBox = hot.view.wt.wtTable.holder.getBoundingClientRect();
      var verticalScrollbarCoords = {
        x: holderBoundingBox.left + holderBoundingBox.width - 3,
        y: holderBoundingBox.top + holderBoundingBox.height / 2
      };
      var horizontalScrollbarCoords = {
        x: holderBoundingBox.left + holderBoundingBox.width / 2,
        y: holderBoundingBox.top + holderBoundingBox.height - 3
      };
      $(hot.view.wt.wtTable.holder).simulate('mousedown', {
        clientX: verticalScrollbarCoords.x,
        clientY: verticalScrollbarCoords.y
      });
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      $(hot.view.wt.wtTable.holder).simulate('mousedown', {
        clientX: horizontalScrollbarCoords.x,
        clientY: horizontalScrollbarCoords.y
      });
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    });
    it('should not deselect currently selected cell', function () {
      handsontable({
        outsideClickDeselects: false
      });
      selectCell(0, 0);
      $('html').simulate('mousedown');
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    });
    it('should not deselect currently selected cell (outsideClickDeselects as function)', function () {
      handsontable({
        outsideClickDeselects: function outsideClickDeselects() {
          return false;
        }
      });
      selectCell(0, 0);
      $('html').simulate('mousedown');
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    });
    it('should deselect currently selected cell', function () {
      handsontable({
        outsideClickDeselects: true
      });
      selectCell(0, 0);
      $('html').simulate('mousedown');
      expect(getSelected()).toBeUndefined();
    });
    it('should deselect currently selected cell (outsideClickDeselects as function)', function () {
      handsontable({
        outsideClickDeselects: function outsideClickDeselects() {
          return true;
        }
      });
      selectCell(0, 0);
      $('html').simulate('mousedown');
      expect(getSelected()).toBeUndefined();
    });
    it('should allow to focus on external input when outsideClickDeselects is set as true',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var textarea = $('<input type="text">').prependTo($('body'));
      handsontable({
        outsideClickDeselects: true
      });
      selectCell(0, 0); // It is necessary to fire event simulation in the next event loop cycle due to the autofocus editable element in setImmediate function.

      yield sleep(0);
      textarea.simulate('mousedown');
      textarea.focus();
      expect(document.activeElement).toBe(textarea[0]);
      yield sleep(50);
      expect(document.activeElement).toBe(textarea[0]);
      textarea.remove();
    }));
    it('should allow to focus on external input when outsideClickDeselects is set as true (outsideClickDeselects as function)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var textarea = $('<input type="text">').prependTo($('body'));
      handsontable({
        outsideClickDeselects: function outsideClickDeselects() {
          return true;
        }
      });
      selectCell(0, 0);
      yield sleep(0);
      textarea.simulate('mousedown');
      textarea.focus();
      expect(document.activeElement).toBe(textarea[0]);
      yield sleep(50);
      expect(document.activeElement).toBe(textarea[0]);
      textarea.remove();
    }));
    it('should allow to focus on external input when outsideClickDeselects is set as false',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var textarea = $('<input type="text">').prependTo($('body'));
      handsontable({
        outsideClickDeselects: false
      });
      selectCell(0, 0);
      yield sleep(0);
      textarea.simulate('mousedown');
      textarea.focus();
      expect(document.activeElement).toBe(textarea[0]);
      yield sleep(50);
      expect(document.activeElement).toBe(textarea[0]);
      textarea.remove();
    }));
    it('should allow to focus on external input when outsideClickDeselects is set as false (outsideClickDeselects as function)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var textarea = $('<input type="text">').prependTo($('body'));
      handsontable({
        outsideClickDeselects: function outsideClickDeselects() {
          return false;
        }
      });
      selectCell(0, 0);
      yield sleep(0);
      textarea.simulate('mousedown');
      textarea.focus();
      expect(document.activeElement).toBe(textarea[0]);
      yield sleep(50);
      expect(document.activeElement).toBe(textarea[0]);
      textarea.remove();
    }));
    it('should allow to type in external input while holding current selection information',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var textarea = $('<textarea></textarea>').prependTo($('body'));
      var keyPressed;
      handsontable({
        outsideClickDeselects: false
      });
      selectCell(0, 0);
      textarea.focus();
      textarea.simulate('mousedown');
      textarea.simulate('mouseup');
      textarea.on('keydown', function (event) {
        keyPressed = event.keyCode;
      });
      var LETTER_A_KEY = 97;
      $(document.activeElement).simulate('keydown', {
        keyCode: LETTER_A_KEY
      }); // textarea should receive the event and be an active element

      expect(keyPressed).toEqual(LETTER_A_KEY);
      expect(document.activeElement).toBe(textarea[0]); // should preserve selection, close editor and save changes

      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      expect(getDataAtCell(0, 0)).toBeNull();
      yield sleep(50);
      $(document.activeElement).simulate('keydown', {
        keyCode: LETTER_A_KEY
      });
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      expect(getDataAtCell(0, 0)).toBeNull();
      textarea.remove();
    }));
    it('should allow to type in external input while holding current selection information (outsideClickDeselects as function)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var textarea = $('<textarea></textarea>').prependTo($('body'));
      var keyPressed;
      handsontable({
        outsideClickDeselects: function outsideClickDeselects() {
          return false;
        }
      });
      selectCell(0, 0);
      textarea.focus();
      textarea.simulate('mousedown');
      textarea.simulate('mouseup');
      textarea.on('keydown', function (event) {
        keyPressed = event.keyCode;
      });
      var LETTER_A_KEY = 97;
      $(document.activeElement).simulate('keydown', {
        keyCode: LETTER_A_KEY
      }); // textarea should receive the event and be an active element

      expect(keyPressed).toEqual(LETTER_A_KEY);
      expect(document.activeElement).toBe(textarea[0]); // should preserve selection, close editor and save changes

      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      expect(getDataAtCell(0, 0)).toBeNull();
      yield sleep(50);
      $(document.activeElement).simulate('keydown', {
        keyCode: LETTER_A_KEY
      });
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      expect(getDataAtCell(0, 0)).toBeNull();
      textarea.remove();
    }));
    xit('should allow to type in external input after opening cell editor',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var textarea = $('<textarea></textarea>').prependTo($('body'));
      var keyPressed;
      handsontable({
        outsideClickDeselects: false
      });
      selectCell(0, 0);
      keyDown('enter');
      document.activeElement.value = 'Foo';
      textarea.focus();
      textarea.simulate('mousedown');
      textarea.simulate('mouseup');
      textarea.on('keydown', function (event) {
        keyPressed = event.keyCode;
      });
      var LETTER_A_KEY = 97;
      $(document.activeElement).simulate('keydown', {
        keyCode: LETTER_A_KEY
      }); // textarea should receive the event and be an active element

      expect(keyPressed).toEqual(LETTER_A_KEY);
      expect(document.activeElement).toBe(textarea[0]); // should preserve selection, close editor and save changes

      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      expect(getDataAtCell(0, 0)).toEqual('Foo');
      yield sleep(50);
      $(document.activeElement).simulate('keydown', {
        keyCode: LETTER_A_KEY
      });
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      expect(getDataAtCell(0, 0)).toEqual('Foo');
      textarea.remove();
    }));
    it('should allow to type in external input after opening cell editor (outsideClickDeselects as function)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var textarea = $('<textarea></textarea>').prependTo($('body'));
      var keyPressed;
      handsontable({
        outsideClickDeselects: function outsideClickDeselects() {
          return false;
        }
      });
      selectCell(0, 0);
      keyDown('enter');
      document.activeElement.value = 'Foo';
      textarea.focus();
      textarea.simulate('mousedown');
      textarea.simulate('mouseup');
      textarea.on('keydown', function (event) {
        keyPressed = event.keyCode;
      });
      var LETTER_A_KEY = 97;
      $(document.activeElement).simulate('keydown', {
        keyCode: LETTER_A_KEY
      }); // textarea should receive the event and be an active element

      expect(keyPressed).toEqual(LETTER_A_KEY);
      expect(document.activeElement).toBe(textarea[0]); // should preserve selection, close editor and save changes

      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      expect(getDataAtCell(0, 0)).toEqual('Foo');
      yield sleep(50);
      $(document.activeElement).simulate('keydown', {
        keyCode: LETTER_A_KEY
      });
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
      expect(getDataAtCell(0, 0)).toEqual('Foo');
      textarea.remove();
    }));
  });
});

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('renderer', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    describe('defined in constructor', function () {
      it('should use text renderer by default', function () {
        var originalTextRenderer = Handsontable.cellTypes.text.renderer;
        spyOn(Handsontable.cellTypes.text, 'renderer');
        Handsontable.renderers.registerRenderer('text', Handsontable.cellTypes.text.renderer);
        handsontable();
        expect(Handsontable.cellTypes.text.renderer).toHaveBeenCalled();
        Handsontable.renderers.registerRenderer('text', originalTextRenderer);
      });
      it('should use renderer from predefined string', function () {
        var originalTextRenderer = Handsontable.renderers.TextRenderer;
        spyOn(Handsontable.renderers, 'TextRenderer');
        Handsontable.renderers.registerRenderer('text', Handsontable.renderers.TextRenderer);
        var originalCheckboxRenderer = Handsontable.renderers.CheckboxRenderer;
        spyOn(Handsontable.renderers, 'CheckboxRenderer');
        Handsontable.renderers.registerRenderer('checkbox', Handsontable.renderers.CheckboxRenderer);
        handsontable({
          columns: [{
            renderer: 'checkbox'
          }]
        });
        expect(Handsontable.renderers.TextRenderer).not.toHaveBeenCalled();
        expect(Handsontable.renderers.CheckboxRenderer).toHaveBeenCalled();
        Handsontable.renderers.registerRenderer('text', originalTextRenderer);
        Handsontable.renderers.registerRenderer('checkbox', originalCheckboxRenderer);
      });
      it('should use renderer from predefined string when columns is a function', function () {
        var originalTextRenderer = Handsontable.renderers.TextRenderer;
        spyOn(Handsontable.renderers, 'TextRenderer');
        Handsontable.renderers.registerRenderer('text', Handsontable.renderers.TextRenderer);
        var originalCheckboxRenderer = Handsontable.renderers.CheckboxRenderer;
        spyOn(Handsontable.renderers, 'CheckboxRenderer');
        Handsontable.renderers.registerRenderer('checkbox', Handsontable.renderers.CheckboxRenderer);
        handsontable({
          columns: function columns(column) {
            return column === 0 ? {
              renderer: 'checkbox'
            } : null;
          }
        });
        expect(Handsontable.renderers.TextRenderer).not.toHaveBeenCalled();
        expect(Handsontable.renderers.CheckboxRenderer).toHaveBeenCalled();
        Handsontable.renderers.registerRenderer('text', originalTextRenderer);
        Handsontable.renderers.registerRenderer('checkbox', originalCheckboxRenderer);
      });
      it('should use renderer from custom function', function () {
        var called = false;

        function myRenderer() {
          called = true;
        }

        handsontable({
          columns: [{
            renderer: myRenderer
          }]
        });
        expect(called).toBe(true);
      });
      it('should use renderer from custom function when columns is a function', function () {
        var called = false;

        function myRenderer() {
          called = true;
        }

        handsontable({
          columns: function columns(column) {
            return column === 0 ? {
              renderer: myRenderer
            } : null;
          }
        });
        expect(called).toBe(true);
      });
      it('should use renderer from custom string', function () {
        var myRenderer = jasmine.createSpy('myRenderer');
        Handsontable.renderers.registerRenderer('myRenderer', myRenderer);
        handsontable({
          columns: [{
            renderer: 'myRenderer'
          }]
        });
        expect(myRenderer).toHaveBeenCalled();
      });
      it('should use renderer from custom string when columns is a function', function () {
        var myRenderer = jasmine.createSpy('myRenderer');
        Handsontable.renderers.registerRenderer('myRenderer', myRenderer);
        handsontable({
          columns: function columns(column) {
            return column === 0 ? {
              renderer: 'myRenderer'
            } : null;
          }
        });
        expect(myRenderer).toHaveBeenCalled();
      });
    });
    it('should call renderer with cellProperties.row, cellProperties.col matching row and col arguments', function () {
      var rendererSpy = jasmine.createSpy('rendererSpy').and.callThrough();
      var cellPropertiesCache = [];
      rendererSpy.and.callFake(function (instance, TD, row, col, prop, value, cellProperties) {
        cellPropertiesCache.push({
          row: cellProperties.row,
          col: cellProperties.col
        });
      });
      handsontable({
        renderer: rendererSpy
      });

      for (var i = 0, len = rendererSpy.calls.count(); i < len; i++) {
        var args = rendererSpy.calls.argsFor(i);
        var row = args[2];
        var col = args[3];
        var cellProperties = cellPropertiesCache[i];
        expect(row).toEqual(cellProperties.row);
        expect(col).toEqual(cellProperties.col);
      }
    });
    it('should call cells function before passing cellProperties to renderer', function () {
      var rendererSpy = jasmine.createSpy('rendererSpy').and.callThrough();
      var cellPropertiesCache = [];
      rendererSpy.and.callFake(function (instance, TD, row, col, prop, value, cellProperties) {
        cellPropertiesCache.push({
          cellsRow: cellProperties.cellsRow,
          cellsCol: cellProperties.cellsCol
        });
      });
      handsontable({
        renderer: rendererSpy,
        cells: function cells(row, col) {
          return {
            cellsRow: row,
            cellsCol: col
          };
        }
      });

      for (var i = 0, len = rendererSpy.calls.count(); i < len; i++) {
        var args = rendererSpy.calls.argsFor(i);
        var row = args[2];
        var col = args[3];
        var cellProperties = cellPropertiesCache[i];
        expect(row).toEqual(cellProperties.cellsRow);
        expect(col).toEqual(cellProperties.cellsCol);
      }
    });
  });
});

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('settings', function () {
  describe('tableClassName', function () {
    var id = 'testContainer';
    beforeEach(function () {
      this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }
    });
    it('should add class name every table element inside handsontable wrapper element (as string, without overlays)', function () {
      var hot = handsontable({
        colHeaders: false,
        rowHeaders: false,
        tableClassName: 'foo'
      });
      var possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)
      // all overlays is created anyway but without left-top corner

      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);
    });
    it('should add class name every table element inside handsontable wrapper element (as string, with overlays)', function () {
      var hot = handsontable({
        colHeaders: true,
        rowHeaders: true,
        tableClassName: 'foo'
      });
      var possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)

      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);
    });
    it('should add class name every table element inside handsontable wrapper element (as string with spaces, without overlays)', function () {
      var hot = handsontable({
        colHeaders: false,
        rowHeaders: false,
        tableClassName: 'foo bar'
      });
      var possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)
      // all overlays is created anyway but without left-top corner

      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);
      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);
    });
    it('should add class name every table element inside handsontable wrapper element (as string with spaces, with overlays)', function () {
      var hot = handsontable({
        colHeaders: true,
        rowHeaders: true,
        tableClassName: 'foo bar'
      });
      var possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)

      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);
      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);
    });
    it('should add class name every table element inside handsontable wrapper element (as array, without overlays)', function () {
      var hot = handsontable({
        colHeaders: false,
        rowHeaders: false,
        tableClassName: ['foo', 'bar', 'baz']
      });
      var possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)

      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);
      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);
      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.baz').length)).toBeGreaterThan(-1);
    });
    it('should add class name every table element inside handsontable wrapper element (as array, with overlays)', function () {
      var hot = handsontable({
        colHeaders: true,
        rowHeaders: true,
        tableClassName: ['foo', 'bar', 'baz']
      });
      var possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)

      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);
      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);
      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.baz').length)).toBeGreaterThan(-1);
    });
  });
});

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('GhostTable', function () {
  var hotSettings = {
    data: [['A', '1', 'A\nB\nC'], ['B', '2', 'A-----B-------C'], ['C', '3', 'A---\n--B-------C']]
  };
  var gt;
  beforeEach(function () {
    this.$container = $('<div id="testContainer"></div>').appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }

    if (gt) {
      gt.clean();
      gt = null;
    }
  });
  describe('row', function () {
    it('should throw exception if we try to add column after added row', function () {
      var hot = handsontable(hotSettings);
      var samples = new Map();
      var exception = false;
      gt = new Handsontable.__GhostTable(hot);
      gt.addRow(0, samples);

      try {
        gt.addColumn(0, samples);
      } catch (ex) {
        exception = true;
      }

      expect(exception).toBe(true);
    });
    it('should create container element only for first row', function () {
      var hot = handsontable(hotSettings);
      var samples = new Map();
      gt = new Handsontable.__GhostTable(hot);
      spyOn(gt, 'createContainer').and.callThrough();
      gt.addRow(0, samples);
      gt.addRow(0, samples);
      gt.addRow(0, samples);
      gt.addRow(1, samples);
      gt.addRow(2, samples);
      expect(gt.createContainer.calls.count()).toBe(1);
      expect(gt.createContainer.calls.mostRecent().args).toEqual(['handsontable']);
    });
    it('should add row to rows collection after call `addRow` method', function () {
      var hot = handsontable(hotSettings);
      var samples = new Map();
      gt = new Handsontable.__GhostTable(hot);
      expect(gt.rows.length).toBe(0);
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Foo',
          row: 0
        }, {
          value: 'Foo Bar',
          row: 0
        }]
      });
      gt.addRow(0, samples);
      expect(gt.rows.length).toBe(1);
      expect(gt.rows[0].row).toBe(0);
      expect(gt.rows[0].table.className).toBe('htCore');
      expect(gt.rows[0].table.nodeName).toBe('TABLE');
      expect(gt.rows[0].table.querySelectorAll('colgroup > col').length).toBe(2);
      expect(gt.rows[0].table.querySelector('tbody > tr > td').innerHTML).toBe('Foo');
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Bar',
          row: 1
        }, {
          value: 'Baz1234',
          row: 1
        }]
      });
      gt.addRow(1, samples);
      expect(gt.rows.length).toBe(2);
      expect(gt.rows[1].row).toBe(1);
      expect(gt.rows[1].table.className).toBe('htCore');
      expect(gt.rows[1].table.nodeName).toBe('TABLE');
      expect(gt.rows[1].table.querySelectorAll('colgroup > col').length).toBe(2);
      expect(gt.rows[1].table.querySelector('tbody > tr > td').innerHTML).toBe('Bar');
    });
    it('should get valid heights', function () {
      var hot = handsontable(hotSettings);
      var heightSpy = jasmine.createSpy();
      var samples = new Map();
      gt = new Handsontable.__GhostTable(hot);
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Foo',
          row: 0
        }, {
          value: 'Foo.....Bar',
          row: 0
        }]
      });
      gt.addRow(0, samples);
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Foo\nBar\nsqw',
          row: 1
        }]
      });
      gt.addRow(1, samples);
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Foo',
          row: 0
        }, {
          value: 'Foo Bar',
          row: 0
        }]
      });
      gt.addRow(2, samples);
      gt.getHeights(heightSpy);
      expect(heightSpy.calls.count()).toBe(3);
      expect(heightSpy.calls.argsFor(0)[0]).toBe(0);
      expect(heightSpy.calls.argsFor(0)[1]).toBe(23);
      expect(heightSpy.calls.argsFor(1)[0]).toBe(1);
      expect(heightSpy.calls.argsFor(1)[1]).toBe(64);
      expect(heightSpy.calls.argsFor(2)[0]).toBe(2);
      expect(heightSpy.calls.argsFor(2)[1]).toBe(43);
    });
  });
  describe('column', function () {
    it('should throw exception if we try to add row after added column', function () {
      var hot = handsontable(hotSettings);
      var samples = new Map();
      var exception = false;
      gt = new Handsontable.__GhostTable(hot);
      gt.addColumn(0, samples);

      try {
        gt.addRow(0, samples);
      } catch (ex) {
        exception = true;
      }

      expect(exception).toBe(true);
    });
    it('should create container element only for first column', function () {
      var hot = handsontable(hotSettings);
      var samples = new Map();
      gt = new Handsontable.__GhostTable(hot);
      spyOn(gt, 'createContainer').and.callThrough();
      gt.addColumn(0, samples);
      gt.addColumn(0, samples);
      gt.addColumn(0, samples);
      gt.addColumn(1, samples);
      gt.addColumn(2, samples);
      expect(gt.createContainer.calls.count()).toBe(1);
      expect(gt.createContainer.calls.mostRecent().args).toEqual(['handsontable']);
    });
    it('should add column to columns collection after call `addColumn` method', function () {
      var hot = handsontable(hotSettings);
      var samples = new Map();
      gt = new Handsontable.__GhostTable(hot);
      expect(gt.columns.length).toBe(0);
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Foo',
          col: 0
        }, {
          value: 'Foo Bar',
          col: 0
        }]
      });
      gt.addColumn(0, samples);
      expect(gt.columns.length).toBe(1);
      expect(gt.columns[0].col).toBe(0);
      expect(gt.columns[0].table.className).toBe('htCore');
      expect(gt.columns[0].table.style.width).toBe('auto');
      expect(gt.columns[0].table.style.tableLayout).toBe('auto');
      expect(gt.columns[0].table.nodeName).toBe('TABLE');
      expect(gt.columns[0].table.querySelectorAll('thead > tr > th').length).toBe(1);
      expect(gt.columns[0].table.querySelector('tbody > tr > td').innerHTML).toBe('Foo');
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Bar',
          row: 1
        }, {
          value: 'Baz1234',
          row: 1
        }]
      });
      gt.addColumn(1, samples);
      expect(gt.columns.length).toBe(2);
      expect(gt.columns[1].col).toBe(1);
      expect(gt.columns[1].table.className).toBe('htCore');
      expect(gt.columns[1].table.nodeName).toBe('TABLE');
      expect(gt.columns[1].table.querySelectorAll('thead > tr > th').length).toBe(1);
      expect(gt.columns[1].table.querySelector('tbody > tr > td').innerHTML).toBe('Bar');
    });
    it('should get valid widths', function () {
      var hot = handsontable(hotSettings);
      var widthSpy = jasmine.createSpy();
      var samples = new Map();
      gt = new Handsontable.__GhostTable(hot);
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Foo',
          col: 0
        }, {
          value: 'Foo.....Bar',
          col: 0
        }]
      });
      gt.addColumn(0, samples);
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Foo\nBar\nsqw',
          col: 1
        }]
      });
      gt.addColumn(1, samples);
      samples.clear();
      samples.set(0, {
        strings: [{
          value: 'Foo',
          col: 0
        }, {
          value: 'Foo Bar',
          col: 0
        }]
      });
      gt.addColumn(2, samples);
      gt.getWidths(widthSpy);
      expect(widthSpy.calls.count()).toBe(3);
      expect(widthSpy.calls.argsFor(0)[0]).toBe(0);
      expect(widthSpy.calls.argsFor(0)[1]).toBeAroundValue(87, 4);
      expect(widthSpy.calls.argsFor(1)[0]).toBe(1);
      expect(widthSpy.calls.argsFor(1)[1]).toBeAroundValue(41, 4);
      expect(widthSpy.calls.argsFor(2)[0]).toBe(2);
      expect(widthSpy.calls.argsFor(2)[1]).toBeAroundValue(68, 4);
    });
  });
  it('should reset internal state after call `clean` method', function () {
    var hot = handsontable(hotSettings);
    var samples = new Map();
    gt = new Handsontable.__GhostTable(hot);
    gt.addColumn(0, samples);
    gt.rows.push({});
    gt.getWidths(function () {});
    expect(gt.columns.length).toBe(1);
    expect(gt.samples).toBeDefined();
    expect(gt.injected).toBe(true);
    expect(gt.container).toBeDefined();
    expect(document.querySelector('.htGhostTable')).toBeDefined();
    gt.clean();
    expect(gt.columns.length).toBe(0);
    expect(gt.samples).toBe(null);
    expect(gt.injected).toBe(false);
    expect(gt.container).toBe(null);
    expect(document.querySelector('.htGhostTable')).toBe(null);
  });
  it('should be detected as vertical if at least one row is added', function () {
    var hot = handsontable(hotSettings);
    var samples = new Map();
    gt = new Handsontable.__GhostTable(hot);
    gt.addRow(0, samples);
    expect(gt.isVertical()).toBe(true);
    expect(gt.isHorizontal()).toBe(false);
  });
  it('should be detected as horizontal if at least one column is added', function () {
    var hot = handsontable(hotSettings);
    var samples = new Map();
    gt = new Handsontable.__GhostTable(hot);
    gt.addColumn(0, samples);
    expect(gt.isVertical()).toBe(false);
    expect(gt.isHorizontal()).toBe(true);
  });
});

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('autocompleteValidator', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('allowEmpty', function () {
    it('should validate empty cells positively (by default)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: [['some', 'sample', 'data']],
        columns: [{
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(0, 0, '');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 0, undefined, undefined);
        done();
      }, 100);
    });
    it('should validate empty cells positively when allowEmpty is set to true', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: [['some', 'sample', 'data']],
        columns: [{
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }],
        allowEmpty: true,
        afterValidate: onAfterValidate
      });
      setDataAtCell(0, 0, '');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 0, undefined, undefined);
        done();
      }, 100);
    });
    it('should validate empty cells negatively when allowEmpty is set to false', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: [['some', 'sample', 'data']],
        columns: [{
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }],
        allowEmpty: false,
        afterValidate: onAfterValidate
      });
      setDataAtCell(0, 0, '');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 0, 0, undefined, undefined);
        done();
      }, 100);
    });
    it('should respect the allowEmpty property for a single column', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: [['some', 'sample', 'data']],
        columns: [{
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true,
          allowEmpty: false
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(0, 0, '');
      setDataAtCell(0, 1, '');
      setDataAtCell(0, 2, '');
      setTimeout(function () {
        expect(onAfterValidate.calls.argsFor(0)).toEqual([true, '', 0, 0, undefined, undefined]);
        expect(onAfterValidate.calls.argsFor(1)).toEqual([false, '', 0, 1, undefined, undefined]);
        expect(onAfterValidate.calls.argsFor(2)).toEqual([true, '', 0, 2, undefined, undefined]);
        done();
      }, 100);
    });
    it('should work for null and undefined values in cells', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: [['some', 'sample', 'data']],
        columns: [{
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }, {
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }],
        allowEmpty: false,
        afterValidate: onAfterValidate
      });
      setDataAtCell(0, 0, null);
      setDataAtCell(0, 1, void 0);
      setDataAtCell(0, 2, '');
      setTimeout(function () {
        expect(onAfterValidate.calls.argsFor(0)).toEqual([false, null, 0, 0, undefined, undefined]);
        expect(onAfterValidate.calls.argsFor(1)).toEqual([false, void 0, 0, 1, undefined, undefined]);
        expect(onAfterValidate.calls.argsFor(2)).toEqual([false, '', 0, 2, undefined, undefined]);
        done();
      }, 100);
    });
  });
  describe('strict mode', function () {
    it('sshould validate negatively when chars have different size', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: [['some', 'sample', 'data']],
        columns: [{
          type: 'autocomplete',
          source: ['some', 'sample', 'data'],
          strict: true
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(0, 0, 'Some');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, 'Some', 0, 0, undefined, undefined);
        done();
      }, 100);
    });
  });
});

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('dateValidator', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      date: '01/01/2015',
      name: 'Ted',
      lastName: 'Right'
    }, {
      date: '01/01/15',
      name: 'Frank',
      lastName: 'Honest'
    }, {
      date: '41/01/2015',
      name: 'Joan',
      lastName: 'Well'
    }, {
      date: '01/51/2015',
      name: 'Sid',
      lastName: 'Strong'
    }];
  };

  it('should validate an empty string (default behavior)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, '');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'date', undefined, undefined);
      done();
    }, 100);
  });
  it('should rewrite an ISO 8601 string to the correct format if a date-string in different format is provided',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date',
        dateFormat: 'MM/DD/YYYY',
        correctFormat: true
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(1, 0, '2016-03-18');
    yield sleep(200);
    expect(onAfterValidate).toHaveBeenCalledWith(true, '2016-03-18', 1, 'date', undefined, undefined);
    expect(getDataAtCell(1, 0)).toEqual('03/18/2016');
  }));
  it('should not positively validate a non-date string', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 'wat');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, 'wat', 0, 'date', undefined, undefined);
      done();
    }, 100);
  });
  it('should not positively validate a non-date string and rewrite to the correct format when `allowInvalid` is false',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date',
        dateFormat: 'MM/DD/YYYY',
        correctFormat: true,
        allowInvalid: false
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, '01/01/2015 ops');
    yield sleep(200);
    expect(onAfterValidate).toHaveBeenCalledWith(false, '01/01/2015 ops', 0, 'date', undefined, undefined);
    expect(getDataAtCell(0, 0)).toEqual('01/01/2015');
  }));
  it('should not positively validate a incorrect date string', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, '33/01/2014');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, '33/01/2014', 0, 'date', undefined, undefined);
      done();
    }, 100);
  });
  it('should not positively validate a date string in wrong format', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(1, 0, '01/01/15');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, '01/01/15', 1, 'date', undefined, undefined);
      done();
    }, 100);
  });
  it('should not positively validate a date string in wrong format (if custom format is provided)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date',
        dateFormat: 'DD/MM/YY'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(1, 0, '01/01/2015');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, '01/01/2015', 1, 'date', undefined, undefined);
      done();
    }, 100);
  });
  it('should positively validate a date string in correct format', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(1, 0, '01/01/2015');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, '01/01/2015', 1, 'date', undefined, undefined);
      done();
    }, 100);
  });
  it('should positively validate a date string in correct format (if custom format is provided)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'date',
        type: 'date',
        dateFormat: 'DD/MM/YY'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(1, 0, '23/03/15');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, '23/03/15', 1, 'date', undefined, undefined);
      done();
    }, 100);
  });
  describe('allowEmpty', function () {
    it('should not validate an empty string when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'date',
          type: 'date',
          dateFormat: 'DD/MM/YY',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 1, 'date', undefined, undefined);
        done();
      }, 100);
    });
    it('should not validate `null` when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'date',
          type: 'date',
          dateFormat: 'DD/MM/YY',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, null);
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 1, 'date', undefined, undefined);
        done();
      }, 100);
    });
    it('should not validate `undefined` when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'date',
          type: 'date',
          dateFormat: 'DD/MM/YY',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, void 0);
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 1, 'date', undefined, undefined);
        done();
      }, 100);
    });
  });
  describe('correctFormat', function () {
    it('should not make any changes to entered string if correctFormat is not set', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'date',
          type: 'date',
          dateFormat: 'MM/DD/YY'
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '11/23/2013');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, '11/23/2013', 1, 'date', undefined, undefined);
        done();
      }, 100);
    });
    it('should not make any changes to entered string if correctFormat is set to false', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'date',
          type: 'date',
          dateFormat: 'MM/DD/YY',
          correctFormat: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '11/23/2013');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, '11/23/2013', 1, 'date', undefined, undefined);
        done();
      }, 100);
    });
    it('should rewrite the string to the correct format if a date-string in different format is provided', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'date',
          type: 'date',
          dateFormat: 'MM/DD/YYYY',
          correctFormat: true
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '1/10/15');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, '1/10/15', 1, 'date', undefined, undefined);
      }, 100);
      setTimeout(function () {
        expect(getDataAtCell(1, 0)).toEqual('01/10/2015');
        done();
      }, 130);
    });
    it('should rewrite the string to the correct format if a date-string in different format is provided (for non-default format)', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'date',
          type: 'date',
          dateFormat: 'DD.MM.YYYY',
          correctFormat: true
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '5.3.2016');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, '5.3.2016', 1, 'date', undefined, undefined);
      }, 100);
      setTimeout(function () {
        expect(getDataAtCell(1, 0)).toEqual('05.03.2016');
        done();
      }, 130);
    });
    it('should not try to correct format of non-date strings', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'date',
          type: 'date',
          dateFormat: 'DD/MM/YY',
          correctFormat: true
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, 'test non-date string');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, 'test non-date string', 1, 'date', undefined, undefined);
        done();
      }, 100);
    });
  });
});

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('validators', function () {
  var id = 'testContainer';
  var _Handsontable$validat = Handsontable.validators,
      registerValidator = _Handsontable$validat.registerValidator,
      getValidator = _Handsontable$validat.getValidator;
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should register custom validator',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    registerValidator('myValidator', function (value, cb) {
      cb(value === 10);
    });
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    var hot = handsontable({
      data: [[1, 6, 10]],
      columns: [{
        validator: 'myValidator'
      }],
      afterValidate: onAfterValidate
    });
    hot.setDataAtCell(1, 0, 10);
    yield sleep(100);
    expect(onAfterValidate).toHaveBeenCalledWith(true, 10, 1, 0, undefined, undefined);
    hot.setDataAtCell(2, 0, 2);
    yield sleep(100);
    expect(onAfterValidate).toHaveBeenCalledWith(false, 2, 2, 0, undefined, undefined);
  }));
  it('should retrieve predefined validators by its names', function () {
    expect(getValidator('autocomplete')).toBeFunction();
    expect(getValidator('date')).toBeFunction();
    expect(getValidator('numeric')).toBeFunction();
    expect(getValidator('time')).toBeFunction();
  });
  it('should retrieve custom validator by its names', function () {
    registerValidator('myValidator', function (value, cb) {
      cb(value === 10);
    });
    getValidator('myValidator')(2, function (isValid) {
      expect(isValid).toBe(false);
    });
    getValidator('myValidator')('10', function (isValid) {
      expect(isValid).toBe(false);
    });
    getValidator('myValidator')(10, function (isValid) {
      expect(isValid).toBe(true);
    });
  });
});

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('numericValidator', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      id: 1,
      name: 'Ted',
      lastName: 'Right'
    }, {
      id: 2,
      name: 'Frank',
      lastName: 'Honest'
    }, {
      id: 3,
      name: 'Joan',
      lastName: 'Well'
    }, {
      id: 4,
      name: 'Sid',
      lastName: 'Strong'
    }, {
      id: 5,
      name: 'Jane',
      lastName: 'Neat'
    }, {
      id: 6,
      name: 'Chuck',
      lastName: 'Jackson'
    }, {
      id: 7,
      name: 'Meg',
      lastName: 'Jansen'
    }, {
      id: 8,
      name: 'Rob',
      lastName: 'Norris'
    }, {
      id: 9,
      name: 'Sean',
      lastName: 'O\'Hara'
    }, {
      id: 10,
      name: 'Eve',
      lastName: 'Branson'
    }];
  };

  it('should validate an empty string (default behavior)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, '');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 2, 'id', undefined, undefined);
      done();
    }, 100);
  });
  it('should not validate non numeric string', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, 'test');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);
      done();
    }, 100);
  });
  it('should validate numeric string', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, '123');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);
      done();
    }, 100);
  });
  it('should validate signed numeric string', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, '-123');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, -123, 2, 'id', undefined, undefined);
      done();
    }, 100);
  });
  it('should validate large-number scientific notation', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, '1e+23');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, 1e+23, 2, 'id', undefined, undefined);
      done();
    }, 100);
  });
  it('should validate small-number scientific notation', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'id',
        type: 'numeric'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(2, 0, '1e-23');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, 1e-23, 2, 'id', undefined, undefined);
      done();
    }, 100);
  });
  describe('allowEmpty', function () {
    it('should not validate an empty string when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'id',
          type: 'numeric',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(2, 0, '');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 2, 'id', undefined, undefined);
        done();
      }, 100);
    });
    it('should not validate `null` when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'id',
          type: 'numeric',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(2, 0, null);
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 2, 'id', undefined, undefined);
        done();
      }, 100);
    });
    it('should not validate `undefined` when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'id',
          type: 'numeric',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(2, 0, void 0);
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 2, 'id', undefined, undefined);
        done();
      }, 100);
    });
    it('should validate 0 when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'id',
          type: 'numeric',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(2, 0, 0);
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, 0, 2, 'id', undefined, undefined);
        done();
      }, 100);
    });
    it('should add / remove `htInvalid` class properly when validating non-numeric data', function (done) {
      var hot = handsontable({
        data: [{
          id: 1,
          name: 'Ted',
          salary: 10000
        }, {
          id: 2,
          name: 'Frank',
          salary: '5300'
        }, {
          id: 3,
          name: 'Joan',
          salary: 'non-numeric value'
        }],
        columns: [{
          data: 'id'
        }, {
          data: 'name'
        }, {
          data: 'salary',
          type: 'numeric',
          allowInvalid: false
        }]
      });
      hot.validateCells();
      setTimeout(function () {
        expect($(getCell(1, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);
        expect($(getCell(2, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(true);
        setDataAtCell(2, 2, 8000);
      }, 200);
      setTimeout(function () {
        expect($(getCell(2, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);
        done();
      }, 400);
    });
  });
});

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('timeValidator', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      time: '4:10:05 am',
      name: 'Ted',
      lastName: 'Right'
    }, {
      time: '17:15:25',
      name: 'Frank',
      lastName: 'Honest'
    }, {
      time: '14:65:45 am',
      name: 'Joan',
      lastName: 'Well'
    }, {
      time: '33:25:05',
      name: 'Sid',
      lastName: 'Strong'
    }];
  };

  it('should validate an empty string (default behavior)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'time',
        type: 'time'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, '');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'time', undefined, undefined);
      done();
    }, 100);
  });
  it('should not positively validate a non-date format', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'time',
        type: 'time'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, 'nd');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, 'nd', 0, 'time', undefined, undefined);
      done();
    }, 100);
  });
  it('should not positively validate a incorrect time string', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'time',
        type: 'time'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(0, 0, '30:10:25');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, '30:10:25', 0, 'time', undefined, undefined);
      done();
    }, 100);
  });
  it('should not positively validate a time string in not default format', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'time',
        type: 'time'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(1, 0, '20:20:01');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, '20:20:01', 1, 'time', undefined, undefined);
      done();
    }, 100);
  });
  it('should not positively validate a time string in wrong format (if custom format is provided)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'time',
        type: 'time',
        timeFormat: 'HH:mm:ss'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(1, 0, '5:10:15 am');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(false, '5:10:15 am', 1, 'time', undefined, undefined);
      done();
    }, 100);
  });
  it('should positively validate a date string in correct format (if custom format is provided)', function (done) {
    var onAfterValidate = jasmine.createSpy('onAfterValidate');
    handsontable({
      data: arrayOfObjects(),
      columns: [{
        data: 'time',
        type: 'time',
        timeFormat: 'HH:mm:ss'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }],
      afterValidate: onAfterValidate
    });
    setDataAtCell(1, 0, '16:32:03');
    setTimeout(function () {
      expect(onAfterValidate).toHaveBeenCalledWith(true, '16:32:03', 1, 'time', undefined, undefined);
      done();
    }, 100);
  });
  describe('allowEmpty', function () {
    it('should not validate an empty string when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          dateFormat: 'HH:mm',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 1, 'time', undefined, undefined);
        done();
      }, 100);
    });
    it('should not validate `null` when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          dateFormat: 'HH:mm',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, null);
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 1, 'time', undefined, undefined);
        done();
      }, 100);
    });
    it('should not validate `undefined` when allowEmpty is set as `false`', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          dateFormat: 'HH:mm',
          allowEmpty: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, void 0);
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 1, 'time', undefined, undefined);
        done();
      }, 100);
    });
  });
  describe('correctFormat', function () {
    it('should not make any changes to entered string if correctFormat is not set', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          timeFormat: 'h:mm:ss a'
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '13:00:00');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, '13:00:00', 1, 'time', undefined, undefined);
        done();
      }, 100);
    });
    it('should not make any changes to entered string if correctFormat is set to false', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          timeFormat: 'h:mm:ss a',
          correctFormat: false
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '13:00:00');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, '13:00:00', 1, 'time', undefined, undefined);
        done();
      }, 100);
    });
    it('should rewrite the string to the correct format if a time-string in different format is provided', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          timeFormat: 'h:mm:ss a',
          correctFormat: true
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '16:35:01');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, '16:35:01', 1, 'time', undefined, undefined);
      }, 100);
      setTimeout(function () {
        expect(getDataAtCell(1, 0)).toEqual('4:35:01 pm');
        done();
      }, 130);
    });
    it('should rewrite the string to the correct format if a time in micro-timestamp format is provided', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          timeFormat: 'HH:mm:ss',
          correctFormat: true
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      var currentDateTime = new Date();
      setDataAtCell(1, 0, currentDateTime.getTime()); // timestamp in milliseconds

      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, currentDateTime.getTime(), 1, 'time', undefined, undefined);
      }, 100);
      setTimeout(function () {
        var addLeadingZero = function addLeadingZero(number) {
          return number < 10 ? "0".concat(number) : number;
        };

        expect(getDataAtCell(1, 0)).toEqual("".concat(addLeadingZero(currentDateTime.getHours()), ":").concat(addLeadingZero(currentDateTime.getMinutes()), ":").concat(addLeadingZero(currentDateTime.getSeconds())));
        done();
      }, 130);
    });
    it('should rewrite the string to the correct format if a time in ISO8601 format is provided', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          timeFormat: 'HH:mm:ss',
          correctFormat: true
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      var currentDateTime = new Date();
      setDataAtCell(1, 0, currentDateTime.toISOString()); // ISO-formatted datetime, sth like '2016-02-19T12:40:04.983Z'

      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, currentDateTime.toISOString(), 1, 'time', undefined, undefined);
      }, 100);
      setTimeout(function () {
        var addLeadingZero = function addLeadingZero(number) {
          return number < 10 ? "0".concat(number) : number;
        };

        expect(getDataAtCell(1, 0)).toEqual("".concat(addLeadingZero(currentDateTime.getHours()), ":").concat(addLeadingZero(currentDateTime.getMinutes()), ":").concat(addLeadingZero(currentDateTime.getSeconds())));
        done();
      }, 130);
    });
    it('should rewrite one and two-digit number to the correct format at hours', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          timeFormat: 'hh:mm:ss a',
          correctFormat: true
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '19');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(true, '19', 1, 'time', undefined, undefined);
      }, 100);
      setTimeout(function () {
        expect(getDataAtCell(1, 0)).toEqual('07:00:00 pm');
        done();
      }, 130);
    });
    it('should rewrite one and two-digit number to the correct format at minutes',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          timeFormat: 'mm:ss',
          correctFormat: true
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, '57');
      yield sleep(100);
      expect(onAfterValidate).toHaveBeenCalledWith(true, '57', 1, 'time', undefined, undefined);
      yield sleep(100);
      expect(getDataAtCell(1, 0)).toEqual('57:00');
    }));
    it('should not try to correct format of non-date strings', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      handsontable({
        data: arrayOfObjects(),
        columns: [{
          data: 'time',
          type: 'time',
          timeFormat: 'HH:mm:ss',
          correctFormat: true
        }, {
          data: 'name'
        }, {
          data: 'lastName'
        }],
        afterValidate: onAfterValidate
      });
      setDataAtCell(1, 0, 'test non-time string');
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalledWith(false, 'test non-time string', 1, 'time', undefined, undefined);
        done();
      }, 100);
    });
  });
});

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./autoColumnSize/test/autoColumnSize.e2e.js": 406,
	"./autoRowSize/test/autoRowSize.e2e.js": 407,
	"./autofill/test/autofill.e2e.js": 408,
	"./columnSorting/test/columnSorting.e2e.js": 409,
	"./comments/test/comments.e2e.js": 410,
	"./contextMenu/test/contextMenu.e2e.js": 411,
	"./contextMenu/test/predefinedItems/alignment.e2e.js": 412,
	"./contextMenu/test/predefinedItems/readOnly.e2e.js": 413,
	"./contextMenu/test/predefinedItems/removeColumn.e2e.js": 414,
	"./contextMenu/test/predefinedItems/removeRow.e2e.js": 415,
	"./copyPaste/test/copyPaste.e2e.js": 416,
	"./customBorders/test/customBorders.e2e.js": 417,
	"./dragToScroll/test/dragToScroll.e2e.js": 418,
	"./manualColumnFreeze/test/manualColumnFreeze.e2e.js": 419,
	"./manualColumnMove/test/manualColumnMove.e2e.js": 420,
	"./manualColumnMove/test/manualColumnMoveUI.e2e.js": 421,
	"./manualColumnResize/test/manualColumnResize.e2e.js": 422,
	"./manualRowMove/test/manualRowMove.e2e.js": 423,
	"./manualRowMove/test/manualRowMoveUI.e2e.js": 424,
	"./manualRowResize/test/manualRowResize.e2e.js": 425,
	"./mergeCells/test/mergeCells.e2e.js": 426,
	"./mergeCells/test/selection.e2e.js": 427,
	"./observeChanges/test/observeChanges.e2e.js": 428,
	"./persistentState/test/persistentState.e2e.js": 429,
	"./search/test/search.e2e.js": 430,
	"./undoRedo/test/UndoRedo.e2e.js": 431
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 405;

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('AutoColumnSize', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      id: 'Short',
      name: 'Somewhat long',
      lastName: 'The very very very longest one',
      nestedData: [{
        id: 1000
      }]
    }];
  };

  it('should apply auto size by default', function () {
    handsontable({
      data: arrayOfObjects()
    });
    var width0 = colWidth(spec().$container, 0);
    var width1 = colWidth(spec().$container, 1);
    var width2 = colWidth(spec().$container, 2);
    expect(width0).toBeLessThan(width1);
    expect(width1).toBeLessThan(width2);
  });
  it('should update column width after update value in cell (array of objects)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }, {
        data: 'lastName'
      }]
    });
    expect(colWidth(spec().$container, 0)).toBeAroundValue(50, 3);
    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));
    expect([216, 229, 247, 260, 261]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 2)]));
    setDataAtRowProp(0, 'id', 'foo bar foo bar foo bar');
    setDataAtRowProp(0, 'name', 'foo');
    yield sleep(50);
    expect([165, 168, 169, 189, 191]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    expect(colWidth(spec().$container, 1)).toBeAroundValue(50, 3);
    expect([216, 229, 247, 260, 261]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 2)]));
  }));
  it('should correctly detect column widths with colHeaders', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      colHeaders: ['Identifier Longer text'],
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }]
    });
    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
  });
  it('should correctly detect column widths after update colHeaders when headers were passed as an array', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      colHeaders: true,
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }]
    });
    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    updateSettings({
      colHeaders: ['Identifier Longer text', 'Identifier Longer and longer text']
    });
    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    expect([226, 235, 263, 270]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));
  });
  it('should correctly detect column widths after update colHeaders when headers were passed as a string', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      colHeaders: true,
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }]
    });
    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    updateSettings({
      colHeaders: 'Identifier Longer text'
    });
    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));
  });
  it('should correctly detect column widths after update colHeaders when headers were passed as a function', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      colHeaders: true,
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }]
    });
    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    updateSettings({
      colHeaders: function colHeaders(index) {
        return index === 0 ? 'Identifier Longer text' : 'Identifier Longer and longer text';
      }
    });
    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    expect([226, 235, 263, 270]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));
  });
  it('should correctly detect column width with colHeaders and the useHeaders option set to false (not taking the header widths into calculation)', function () {
    handsontable({
      data: [{
        id: 'ab'
      }],
      autoColumnSize: {
        useHeaders: false
      },
      colHeaders: ['Identifier'],
      columns: [{
        data: 'id'
      }]
    });
    expect(colWidth(spec().$container, 0)).toBe(50);
  });
  it('should correctly detect column width with columns.title', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      columns: [{
        data: 'id',
        title: 'Identifier'
      }]
    });
    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
  });
  it('should correctly detect column widths after update columns.title', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      columns: [{
        data: 'id',
        title: 'Identifier'
      }]
    });
    updateSettings({
      columns: [{
        data: 'id',
        title: 'Identifier with longer text'
      }]
    });
    expect([174, 182, 183, 208, 213]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
  }); // https://github.com/handsontable/handsontable/issues/2684

  it('should correctly detect column width when table is hidden on init (display: none)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container.css('display', 'none');
    var hot = handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      colHeaders: ['Identifier', 'First Name']
    });
    yield sleep(200);
    spec().$container.css('display', 'block');
    hot.render();
    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
  }));
  it('should not wrap the cell values when the whole column has values with the same length', function () {
    handsontable({
      data: [{
        units: 'EUR / USD'
      }, {
        units: 'JPY / USD'
      }, {
        units: 'GBP / USD'
      }, {
        units: 'MXN / USD'
      }, {
        units: 'ARS / USD'
      }],
      autoColumnSize: {
        samplingRatio: 5
      },
      columns: [{
        data: 'units'
      }]
    });
    expect([93]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    expect(rowHeight(spec().$container, 0)).toBe(24);
    expect(rowHeight(spec().$container, 1)).toBe(23);
    expect(rowHeight(spec().$container, 2)).toBe(23);
    expect(rowHeight(spec().$container, 3)).toBe(23);
    expect(rowHeight(spec().$container, 4)).toBe(23);
  });
  it('should keep last columns width unchanged if all rows was removed',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      columns: [{
        data: 'id',
        title: 'Identifier'
      }, {
        data: 'name',
        title: 'Name'
      }, {
        data: 'lastName',
        title: 'Last Name'
      }]
    });
    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));
    expect([216, 229, 247, 260, 261]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 2)]));
    hot.alter('remove_row', 0);
    yield sleep(50);
    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));
    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 1)]));
    expect([216, 229, 247, 260, 261]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 2)]));
  }));
  it('should be possible to disable plugin using updateSettings', function () {
    handsontable({
      data: arrayOfObjects()
    });
    var width0 = colWidth(spec().$container, 0);
    var width1 = colWidth(spec().$container, 1);
    var width2 = colWidth(spec().$container, 2);
    expect(width0).toBeLessThan(width1);
    expect(width1).toBeLessThan(width2);
    updateSettings({
      autoColumnSize: false
    });
    width0 = colWidth(spec().$container, 0);
    width1 = colWidth(spec().$container, 1);
    width2 = colWidth(spec().$container, 2);
    expect(width0).toEqual(width1);
    expect(width0).toEqual(width2);
    expect(width1).toEqual(width2);
  });
  it('should apply disabling/enabling plugin using updateSettings, only to a particular HOT instance', function () {
    spec().$container2 = $("<div id=\"".concat(id, "-2\"></div>")).appendTo('body');
    handsontable({
      data: arrayOfObjects()
    });
    spec().$container2.handsontable({
      data: arrayOfObjects()
    });
    var widths = {
      1: [],
      2: []
    };
    widths[1][0] = colWidth(spec().$container, 0);
    widths[1][1] = colWidth(spec().$container, 1);
    widths[1][2] = colWidth(spec().$container, 2);
    widths[2][0] = colWidth(spec().$container2, 0);
    widths[2][1] = colWidth(spec().$container2, 1);
    widths[2][2] = colWidth(spec().$container2, 2);
    expect(widths[1][0]).toBeLessThan(widths[1][1]);
    expect(widths[1][1]).toBeLessThan(widths[1][2]);
    expect(widths[2][0]).toBeLessThan(widths[2][1]);
    expect(widths[2][1]).toBeLessThan(widths[2][2]);
    updateSettings({
      autoColumnSize: false
    });
    widths[1][0] = colWidth(spec().$container, 0);
    widths[1][1] = colWidth(spec().$container, 1);
    widths[1][2] = colWidth(spec().$container, 2);
    widths[2][0] = colWidth(spec().$container2, 0);
    widths[2][1] = colWidth(spec().$container2, 1);
    widths[2][2] = colWidth(spec().$container2, 2);
    expect(widths[1][0]).toEqual(widths[1][1]);
    expect(widths[1][0]).toEqual(widths[1][2]);
    expect(widths[1][1]).toEqual(widths[1][2]);
    expect(widths[2][0]).toBeLessThan(widths[2][1]);
    expect(widths[2][1]).toBeLessThan(widths[2][2]);
    spec().$container2.handsontable('destroy');
    spec().$container2.remove();
  });
  it('should be possible to enable plugin using updateSettings', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: false
    });
    var width0 = colWidth(spec().$container, 0);
    var width1 = colWidth(spec().$container, 1);
    var width2 = colWidth(spec().$container, 2);
    expect(width0).toEqual(width1);
    expect(width0).toEqual(width2);
    expect(width1).toEqual(width2);
    updateSettings({
      autoColumnSize: true
    });
    width0 = colWidth(spec().$container, 0);
    width1 = colWidth(spec().$container, 1);
    width2 = colWidth(spec().$container, 2);
    expect(width0).toBeLessThan(width1);
    expect(width1).toBeLessThan(width2);
  });
  it('should consider CSS style of each instance separately', function () {
    var $style = $('<style>.big .htCore td {font-size: 40px; line-height: 1.1;}</style>').appendTo('head');
    var $container1 = $('<div id="hot1"></div>').appendTo('body').handsontable({
      data: arrayOfObjects()
    });
    var $container2 = $('<div id="hot2"></div>').appendTo('body').handsontable({
      data: arrayOfObjects()
    });
    var hot1 = $container1.handsontable('getInstance');
    var hot2 = $container2.handsontable('getInstance');
    expect(colWidth($container1, 0)).toEqual(colWidth($container2, 0));
    $container1.addClass('big');
    hot1.render();
    hot2.render();
    expect(colWidth($container1, 0)).toBeGreaterThan(colWidth($container2, 0));
    $container1.removeClass('big').handsontable('render');
    $container2.addClass('big').handsontable('render');
    expect(colWidth($container1, 0)).toBeLessThan(colWidth($container2, 0));
    $style.remove();
    $container1.handsontable('destroy');
    $container1.remove();
    $container2.handsontable('destroy');
    $container2.remove();
  });
  it('should consider CSS class of the <table> element (e.g. when used with Bootstrap)', function () {
    var $style = $('<style>.htCore.big-table td {font-size: 32px}</style>').appendTo('head');
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true
    });
    var width = colWidth(spec().$container, 0);
    spec().$container.find('table').addClass('big-table');
    render();
    expect(colWidth(spec().$container, 0)).toBeGreaterThan(width);
    $style.remove();
  });
  it('should destroy temporary element', function () {
    handsontable({
      autoColumnSize: true
    });
    expect(document.querySelector('.htAutoSize')).toBe(null);
  });
  it('should not trigger autoColumnSize when column width is defined (through colWidths)', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      colWidths: [70, 70, 70],
      width: 500,
      height: 100,
      rowHeaders: true
    });
    setDataAtCell(0, 0, 'LongLongLongLong');
    expect(colWidth(spec().$container, 0)).toBe(70);
  });
  it('should not trigger autoColumnSize when column width is defined (through columns.width)', function () {
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      colWidth: 77,
      columns: [{
        width: 70
      }, {
        width: 70
      }, {
        width: 70
      }],
      width: 500,
      height: 100,
      rowHeaders: true
    });
    setDataAtCell(0, 0, 'LongLongLongLong');
    expect(colWidth(spec().$container, 0)).toBe(70);
  });
  it('should consider renderer that uses conditional formatting for specific row & column index', function () {
    var data = arrayOfObjects();
    data.push({
      id: '2',
      name: 'Rocket Man',
      lastName: 'In a tin can'
    });
    handsontable({
      data: data,
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }],
      autoColumnSize: true,
      renderer: function renderer(instance, td, row, col) {
        for (var _len = arguments.length, args = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
          args[_key - 4] = arguments[_key];
        }

        // taken from demo/renderers.html
        Handsontable.renderers.TextRenderer.apply(this, [instance, td, row, col].concat(args));

        if (row === 1 && col === 0) {
          td.style.padding = '100px';
        }
      }
    });
    expect(colWidth(spec().$container, 0)).toBeGreaterThan(colWidth(spec().$container, 1));
  });
  it('should\'t serialize value if it is array (nested data sources)', function () {
    var spy = jasmine.createSpy('renderer');
    handsontable({
      data: arrayOfObjects(),
      autoColumnSize: true,
      columns: [{
        data: 'nestedData'
      }],
      renderer: spy
    });
    expect(spy.calls.mostRecent().args[5]).toEqual([{
      id: 1000
    }]);
  });
  it('should not change width after select/click cell',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [['Canceled'], ['Processing'], ['Processing'], ['Created'], ['Processing'], ['Completed']],
      colHeaders: true,
      rowHeaders: true
    });
    yield sleep(300);
    var cloneTopHider = spec().$container.find('.ht_clone_top .wtHider');
    expect(cloneTopHider.width()).toEqual(140);
    selectCell(0, 0);
    yield sleep(300);
    expect(cloneTopHider.width()).toEqual(140);
  }));
  it('should not calculate any column widths, if there are no columns in the dataset', function () {
    handsontable({
      data: [[1, 2]],
      colHeaders: true
    });
    spyOn(getPlugin('autoColumnSize'), 'calculateColumnsWidth').and.callThrough();
    var calculateColumnsWidth = getPlugin('autoColumnSize').calculateColumnsWidth;
    loadData([[]]);
    expect(calculateColumnsWidth).not.toHaveBeenCalled();
  });
});

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('AutoRowSize', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  function arrayOfObjects() {
    return [{
      id: 'Short'
    }, {
      id: 'Somewhat\nlong'
    }, {
      id: 'The\nvery\nvery\nvery\nlongest one'
    }];
  }

  function arrayOfObjects2() {
    return [{
      id: 'Short',
      name: 'Somewhat long'
    }, {
      id: 'Somewhat long',
      name: 'The very very longest one'
    }, {
      id: 'The very very very longest one',
      name: 'Short'
    }];
  }

  it('should apply auto size by default', function () {
    handsontable({
      data: arrayOfObjects()
    });
    var height0 = rowHeight(spec().$container, 0);
    var height1 = rowHeight(spec().$container, 1);
    var height2 = rowHeight(spec().$container, 2);
    expect(height0).toBeLessThan(height1);
    expect(height1).toBeLessThan(height2);
  });
  it('should draw scrollbar correctly (proper height) after calculation when autoRowSize option is set (long text in row) #4000', function (done) {
    var row = ['This is very long text which will break this cell text into two lines'];
    var data = [];
    var nrOfRows = 200;
    var columnWidth = 100;

    for (var i = 0; i < nrOfRows; i += 1) {
      data.push(row);
    }

    handsontable({
      data: data,
      colWidths: function colWidths() {
        return columnWidth;
      },
      autoRowSize: true
    });
    var oldHeight = spec().$container[0].scrollHeight;
    setTimeout(function () {
      var newHeight = spec().$container[0].scrollHeight;
      expect(oldHeight).toBeLessThan(newHeight);
      done();
    }, 200);
  });
  describe('should draw scrollbar correctly (proper height) after calculation when autoRowSize option is set (`table td` element height set by CSS) #4000', function () {
    var cellHeightInPx = 100;
    var nrOfColumns = 200;
    var nrOfRows = null;
    var style;
    var SYNC_CALCULATION_LIMIT = Handsontable.plugins.AutoRowSize.SYNC_CALCULATION_LIMIT;
    var CALCULATION_STEP = Handsontable.plugins.AutoRowSize.CALCULATION_STEP;
    beforeEach(function () {
      if (!this.$container) {
        this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
      }

      var css = ".handsontable table td { height: ".concat(cellHeightInPx, "px !important }");
      var head = document.head;
      style = document.createElement('style');
      style.type = 'text/css';

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }

      $(head).append(style);
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }

      if (style) {
        $(style).remove();
      }
    });
    it('(SYNC_CALCULATION_LIMIT - 1 rows)', function (done) {
      nrOfRows = SYNC_CALCULATION_LIMIT - 1;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),
        autoRowSize: true
      });
      setTimeout(function () {
        var newHeight = spec().$container[0].scrollHeight;
        expect(newHeight).toEqual((cellHeightInPx + 1) * nrOfRows + 1);
        done();
      }, 200);
    });
    it('(SYNC_CALCULATION_LIMIT + 1 rows)', function (done) {
      nrOfRows = SYNC_CALCULATION_LIMIT + 1;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),
        autoRowSize: true
      });
      setTimeout(function () {
        var newHeight = spec().$container[0].scrollHeight;
        expect(newHeight).toEqual((cellHeightInPx + 1) * nrOfRows + 1);
        done();
      }, 200);
    });
    it('(SYNC_CALCULATION_LIMIT + CALCULATION_STEP - 1 rows)', function (done) {
      nrOfRows = SYNC_CALCULATION_LIMIT + CALCULATION_STEP - 1;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),
        autoRowSize: true
      });
      setTimeout(function () {
        var newHeight = spec().$container[0].scrollHeight;
        expect(newHeight).toEqual((cellHeightInPx + 1) * nrOfRows + 1);
        done();
      }, 200);
    });
    it('(SYNC_CALCULATION_LIMIT + CALCULATION_STEP + 1 rows)', function (done) {
      nrOfRows = SYNC_CALCULATION_LIMIT + CALCULATION_STEP + 1;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),
        autoRowSize: true
      });
      setTimeout(function () {
        var newHeight = spec().$container[0].scrollHeight;
        expect(newHeight).toEqual((cellHeightInPx + 1) * nrOfRows + 1);
        done();
      }, 200);
    });
  });
  it('should correctly detect row height when table is hidden on init (display: none)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container.css('display', 'none');
    var hot = handsontable({
      data: arrayOfObjects(),
      rowHeaders: true,
      autoRowSize: true
    });
    yield sleep(200);
    spec().$container.css('display', 'block');
    hot.render();
    expect(rowHeight(spec().$container, 0)).toBe(24);
    expect(rowHeight(spec().$container, 1)).toBe(43);
    expect([106, 127]).toEqual(jasmine.arrayContaining([rowHeight(spec().$container, 2)]));
  }));
  it('should be possible to disable plugin using updateSettings', function () {
    var hot = handsontable({
      data: arrayOfObjects()
    });
    var height0 = rowHeight(spec().$container, 0);
    var height1 = rowHeight(spec().$container, 1);
    var height2 = rowHeight(spec().$container, 2);
    expect(height0).toBeLessThan(height1);
    expect(height1).toBeLessThan(height2);
    updateSettings({
      autoRowSize: false
    });
    hot.setDataAtCell(0, 0, 'A\nB\nC');
    var height4 = rowHeight(spec().$container, 0);
    expect(height4).toBeGreaterThan(height0);
  });
  it('should be possible to enable plugin using updateSettings', function () {
    handsontable({
      data: arrayOfObjects(),
      autoRowSize: false
    });
    var height0 = parseInt(getCell(0, 0).style.height, 10);
    var height1 = parseInt(getCell(1, 0).style.height, 10);
    var height2 = parseInt(getCell(2, 0).style.height, 10);
    expect(height0).toEqual(height1);
    expect(height0).toEqual(height2);
    expect(height1).toEqual(height2);
    updateSettings({
      autoRowSize: true
    });
    height0 = parseInt(getCell(0, 0).style.height, 10);
    height1 = parseInt(getCell(1, 0).style.height, 10);
    height2 = parseInt(getCell(2, 0).style.height, 10);
    expect(height0).toBeLessThan(height1);
    expect(height1).toBeLessThan(height2);
  });
  it('should consider CSS style of each instance separately', function () {
    var $style = $('<style>.big .htCore td {font-size: 40px;line-height: 1.1}</style>').appendTo('head');
    var $container1 = $('<div id="hot1"></div>').appendTo('body').handsontable({
      data: arrayOfObjects(),
      autoRowSize: true
    });
    var $container2 = $('<div id="hot2"></div>').appendTo('body').handsontable({
      data: arrayOfObjects(),
      autoRowSize: true
    });
    var hot1 = $container1.handsontable('getInstance');
    var hot2 = $container2.handsontable('getInstance');
    expect(parseInt(hot1.getCell(0, 0).style.height, 10)).toEqual(parseInt(hot2.getCell(0, 0).style.height, 10));
    $container1.addClass('big');
    hot1.render();
    hot2.render();
    expect(parseInt(hot1.getCell(2, 0).style.height, 10)).toBeGreaterThan(parseInt(hot2.getCell(2, 0).style.height, 10));
    $container1.removeClass('big');
    hot1.render();
    $container2.addClass('big');
    hot2.render();
    expect(parseInt(hot1.getCell(2, 0).style.height, 10)).toBeLessThan(parseInt(hot2.getCell(2, 0).style.height, 10));
    $style.remove();
    $container1.handsontable('destroy');
    $container1.remove();
    $container2.handsontable('destroy');
    $container2.remove();
  });
  it('should consider CSS class of the <table> element (e.g. when used with Bootstrap)', function () {
    var $style = $('<style>.htCore.big-table td {font-size: 32px;line-height: 1.1}</style>').appendTo('head');
    var hot = handsontable({
      data: arrayOfObjects(),
      autoRowSize: true
    });
    var height = parseInt(hot.getCell(2, 0).style.height, 10);
    spec().$container.find('table').addClass('big-table');
    hot.getPlugin('autoRowSize').clearCache();
    render();
    expect(parseInt(hot.getCell(2, 0).style.height, 10)).toBeGreaterThan(height);
    $style.remove();
  });
  it('should not trigger autoColumnSize when column width is defined (through colWidths)', function () {
    var hot = handsontable({
      data: arrayOfObjects(),
      autoRowSize: true,
      rowHeights: [70, 70, 70],
      width: 500,
      height: 100,
      rowHeaders: true
    });
    setDataAtCell(0, 0, 'LongLongLongLong');
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(69); // -1px of cell border
  }); // Currently columns.height is not supported

  xit('should not trigger autoRowSize when column height is defined (through columns.height)', function () {
    var hot = handsontable({
      data: arrayOfObjects(),
      autoRowSize: true,
      rowHeights: 77,
      columns: [{
        height: 70
      }, {
        height: 70
      }, {
        height: 70
      }],
      width: 500,
      height: 100,
      rowHeaders: true
    });
    setDataAtCell(0, 0, 'LongLongLongLong');
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(69); // -1px of cell border
  });
  it('should consider renderer that uses conditional formatting for specific row & column index', function () {
    var data = arrayOfObjects();
    data.push({
      id: '2',
      name: 'Rocket Man',
      lastName: 'In a tin can'
    });
    var hot = handsontable({
      data: data,
      columns: [{
        data: 'id'
      }, {
        data: 'name'
      }],
      autoRowSize: true,
      renderer: function renderer(instance, td, row, col) {
        for (var _len = arguments.length, args = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
          args[_key - 4] = arguments[_key];
        }

        // taken from demo/renderers.html
        Handsontable.renderers.TextRenderer.apply(this, [instance, td, row, col].concat(args));

        if (row === 1 && col === 0) {
          td.style.padding = '100px';
        }
      }
    });
    expect(parseInt(hot.getCell(1, 0).style.height || 0, 10)).toBe(242);
  });
  it('should destroy temporary element', function () {
    handsontable({
      autoRowSize: true
    });
    expect(document.querySelector('.htAutoSize')).toBe(null);
  });
  it('should recalculate heights after column resize', function () {
    var hot = handsontable({
      data: arrayOfObjects2(),
      colWidths: 250,
      manualColumnResize: true,
      autoRowSize: true,
      rowHeaders: true,
      colHeaders: true
    });
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border

    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22); // -1px of cell border

    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border

    resizeColumn.call(this, 1, 100);
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);
    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);
    expect([63, 84]).toEqual(jasmine.arrayContaining([parseInt(hot.getCell(2, -1).style.height, 10)]));
    resizeColumn.call(this, 1, 50);
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);
    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);
    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(126);
    resizeColumn.call(this, 1, 200);
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);
    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22);
    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(42);
  });
  it('should recalculate heights after column moved', function () {
    var hot = handsontable({
      data: arrayOfObjects2(),
      colWidths: [250, 50],
      manualColumnMove: true,
      autoRowSize: true,
      rowHeaders: true,
      colHeaders: true
    });
    var plugin = hot.getPlugin('manualColumnMove');
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(42); // -1px of cell border

    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(105); // -1px of cell border

    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border

    plugin.moveColumn(0, 2);
    hot.render();
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);
    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);
    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(126);
  });
  it('should recalculate heights with manualRowResize when changing text to multiline', function () {
    var hot = handsontable({
      data: arrayOfObjects2(),
      colWidths: 250,
      manualRowResize: [23, 50],
      autoRowSize: true,
      rowHeaders: true,
      colHeaders: true
    });
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border

    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(49); // -1px of cell border

    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border

    hot.setDataAtCell(1, 0, 'A\nB\nC\nD\nE');
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);
    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(105);
    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]);
  });
  it('should recalculate heights after moved row', function () {
    var hot = handsontable({
      data: arrayOfObjects2(),
      colWidths: 250,
      manualRowResize: [23, 50],
      manualRowMove: true,
      autoRowSize: true,
      rowHeaders: true,
      colHeaders: true
    });
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border

    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(49); // -1px of cell border

    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border

    var plugin = hot.getPlugin('manualRowMove');
    plugin.moveRow(1, 0);
    hot.render();
    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(49);
    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22);
    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border
  });
  it('should resize the column headers properly, according the their content sizes', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(30, 30),
      colHeaders: function colHeaders(index) {
        if (index === 22) {
          return 'a<br>much<br>longer<br>label';
        }

        return 'test';
      },
      autoRowSize: true,
      rowHeaders: true,
      width: 300,
      height: 300
    });
    expect(rowHeight(spec().$container, -1)).toBe(75);
  });
  it('should properly count height',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [['Tomek', 'Tomek\nTomek', 'Romek\nRomek']],
      rowHeaders: true,
      colHeaders: true,
      autoRowSize: true
    });
    yield sleep(300);
    var cloneLeft = spec().$container.find('.handsontable.ht_clone_left .wtHider');
    expect(cloneLeft.height()).toEqual(70);
  }));
  it('should not calculate any row heights, if there are no rows in the dataset', function () {
    handsontable({
      data: [[1, 2]],
      colHeaders: true,
      autoRowSize: true
    });
    spyOn(getPlugin('autoRowSize'), 'calculateRowsHeight').and.callThrough();
    var calculateColumnsWidth = getPlugin('autoRowSize').calculateRowsHeight;
    loadData([]);
    expect(calculateColumnsWidth).not.toHaveBeenCalled();
  });
});

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('AutoFill', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should appear when fillHandle equals true', function () {
    handsontable({
      fillHandle: true
    });
    selectCell(2, 2);
    expect(isFillHandleVisible()).toBe(true);
  });
  it('should appear when fillHandle is enabled as `string` value', function () {
    handsontable({
      fillHandle: 'horizontal'
    });
    selectCell(2, 2);
    expect(isFillHandleVisible()).toBe(true);
  });
  it('should render selection borders with set proper z-indexes', function () {
    var hot = handsontable({
      width: 200,
      height: 200,
      startRows: 20,
      startCols: 20,
      colHeaders: true,
      rowHeaders: true
    });
    hot.selectCell(1, 1, 2, 2);
    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .current')).zIndex).toBe('10');
    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .area')).zIndex).toBe('8');
    expect(Handsontable.dom.getComputedStyle(hot.rootElement.querySelector('.ht_master .htBorders .fill')).zIndex).toBe('6');
  });
  it('should not change cell value (drag vertically when fillHandle option is set to `horizontal`)', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [7, 8, 9, 1, 2, 3], [4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6]],
      fillHandle: 'horizontal'
    });
    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(1, 0)).toEqual(7);
  });
  it('should not change cell value (drag horizontally when fillHandle option is set to `vertical`)', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [7, 8, 9, 1, 2, 3], [4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6]],
      fillHandle: 'vertical'
    });
    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(0, 1)).toEqual(2);
  });
  it('should work properly when fillHandle option is set to object with property `direction` set to `vertical`)', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [7, 8, 9, 1, 2, 3], [4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        direction: 'vertical'
      }
    });
    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(0, 1)).toEqual(2);
    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(1, 0)).toEqual(1);
  });
  it('should work properly when fillHandle option is set to object with property `direction` set to `horizontal`)', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [7, 8, 9, 1, 2, 3], [4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        direction: 'horizontal'
      }
    });
    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(0, 1)).toEqual(1);
    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(1, 0)).toEqual(7);
  });
  it('should not change cell value (drag when fillHandle is set to `false`)', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [7, 8, 9, 1, 2, 3], [4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6]],
      fillHandle: false
    }); // checking drag vertically - should not change cell value

    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(0, 1)).toEqual(2); // checking drag horizontally - should not change cell value

    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(0, 1)).toEqual(2);
  });
  it('should work properly when using updateSettings', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [7, 8, 9, 1, 2, 3], [4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6]],
      fillHandle: 'horizontal'
    });
    updateSettings({
      fillHandle: 'vertical'
    }); // checking drag vertically - should change cell value

    selectCell(0, 0);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(0, 1)).toEqual(2);
    updateSettings({
      fillHandle: false
    }); // checking drag vertically - should not change cell value

    selectCell(0, 1);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(1) td:eq(1)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(1, 1)).toEqual(8); // checking drag horizontally - should not change cell value

    selectCell(0, 1);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tbody tr:eq(0) td:eq(2)').simulate('mouseover').simulate('mouseup');
    expect(getDataAtCell(0, 2)).toEqual(3);
  });
  it('should appear when fillHandle is enabled as `object` value', function () {
    handsontable({
      fillHandle: {
        allowInsertRow: true
      }
    });
    selectCell(2, 2);
    expect(isFillHandleVisible()).toBe(true);
  });
  it('should not appear when fillHandle equals false', function () {
    handsontable({
      fillHandle: false
    });
    selectCell(2, 2);
    expect(isFillHandleVisible()).toBe(false);
  });
  it('should disappear when beginediting is triggered', function () {
    handsontable({
      fillHandle: true
    });
    selectCell(2, 2);
    keyDown('enter');
    expect(isFillHandleVisible()).toBe(false);
  });
  it('should appear when finishediting is triggered', function () {
    handsontable({
      fillHandle: true
    });
    selectCell(2, 2);
    keyDown('enter');
    keyDown('enter');
    expect(isFillHandleVisible()).toBe(true);
  });
  it('should not appear when fillHandle equals false and finishediting is triggered', function () {
    handsontable({
      fillHandle: false
    });
    selectCell(2, 2);
    keyDown('enter');
    keyDown('enter');
    expect(isFillHandleVisible()).toBe(false);
  });
  it('should appear when editor is discarded using the ESC key', function () {
    handsontable({
      fillHandle: true
    });
    selectCell(2, 2);
    keyDown('enter');
    keyDown('esc');
    expect(isFillHandleVisible()).toBe(true);
  });
  it('should add custom value after autofill', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      beforeAutofill: function beforeAutofill(start, end, data) {
        data[0][0] = 'test';
      }
    });
    selectCell(0, 0);
    spec().$container.find('.wtBorder.corner').simulate('mousedown');
    spec().$container.find('tr:eq(1) td:eq(0)').simulate('mouseover');
    spec().$container.find('tr:eq(2) td:eq(0)').simulate('mouseover');
    spec().$container.find('.wtBorder.corner').simulate('mouseup');
    expect(getSelected()).toEqual([[0, 0, 2, 0]]);
    expect(getDataAtCell(1, 0)).toEqual('test');
  });
  it('should use correct cell coordinates also when Handsontable is used inside a TABLE (#355)', function () {
    var $table = $('<table><tr><td></td></tr></table>').appendTo('body');
    spec().$container.appendTo($table.find('td'));
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      beforeAutofill: function beforeAutofill(start, end, data) {
        data[0][0] = 'test';
      }
    });
    selectCell(1, 1);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:eq(1) td:eq(0)').simulate('mouseover');
    spec().$container.find('tr:eq(2) td:eq(0)').simulate('mouseover');
    spec().$container.find('tr:eq(2) td:eq(0)').simulate('mouseup');
    expect(getSelected()).toEqual([[1, 1, 2, 1]]);
    expect(getDataAtCell(2, 1)).toEqual('test');
    document.body.removeChild($table[0]);
  });
  it('should fill cells below until the end of content in the neighbouring column with current cell\'s data', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, null, null, null, null], [1, 2, null, null, null, null]]
    });
    selectCell(1, 3);
    var fillHandle = spec().$container.find('.wtBorder.current.corner')[0];
    mouseDoubleClick(fillHandle);
    expect(getDataAtCell(2, 3)).toEqual(null);
    expect(getDataAtCell(3, 3)).toEqual(null);
    selectCell(1, 2);
    mouseDoubleClick(fillHandle);
    expect(getDataAtCell(2, 2)).toEqual(3);
    expect(getDataAtCell(3, 2)).toEqual(3);
  });
  it('should fill cells below until the end of content in the neighbouring column with the currently selected area\'s data', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, null, null, null, null], [1, 2, null, null, null, null]]
    });
    selectCell(1, 3, 1, 4);
    var fillHandle = spec().$container.find('.wtBorder.area.corner')[0];
    mouseDoubleClick(fillHandle);
    expect(getDataAtCell(2, 3)).toEqual(null);
    expect(getDataAtCell(3, 3)).toEqual(null);
    expect(getDataAtCell(2, 4)).toEqual(null);
    expect(getDataAtCell(3, 4)).toEqual(null);
    selectCell(1, 2, 1, 3);
    mouseDoubleClick(fillHandle);
    expect(getDataAtCell(2, 2)).toEqual(3);
    expect(getDataAtCell(3, 2)).toEqual(3);
    expect(getDataAtCell(2, 3)).toEqual(4);
    expect(getDataAtCell(3, 3)).toEqual(4);
  });
  it('shouldn\'t fill cells left #5023', function () {
    handsontable({
      data: [['1', '2', '', '3', '4'], ['1', '', '', '', ''], ['1', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']]
    });
    selectCell(0, 3);
    var fillHandle = spec().$container.find('.wtBorder.current.corner')[0];
    mouseDoubleClick(fillHandle);
    expect(getDataAtCell(0, 3)).toEqual('3');
    expect(getDataAtCell(0, 2)).toEqual('');
    expect(getDataAtCell(0, 1)).toEqual('2');
    expect(getDataAtCell(0, 0)).toEqual('1');
  });
  it('should add new row after dragging the handle to the last table row',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: true
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    expect(hot.countRows()).toBe(4);
    yield sleep(300);
    expect(hot.countRows()).toBe(5);
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    yield sleep(300);
    expect(hot.countRows()).toBe(6);
  }));
  it('should add new row after dragging the handle to the last table row (autoInsertRow as true)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        autoInsertRow: true
      }
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    expect(hot.countRows()).toBe(4);
    yield sleep(300);
    expect(hot.countRows()).toBe(5);
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    yield sleep(300);
    expect(hot.countRows()).toBe(6);
  }));
  it('should add new row after dragging the handle to the last table row (autoInsertRow as true, vertical)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        direction: 'vertical',
        autoInsertRow: true
      }
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    expect(hot.countRows()).toBe(4);
    yield sleep(300);
    expect(hot.countRows()).toBe(5);
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    yield sleep(300);
    expect(hot.countRows()).toBe(6);
  }));
  it('should not add new row after dragging the handle to the last table row (autoInsertRow as true, horizontal)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        direction: 'horizontal',
        autoInsertRow: true
      }
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    expect(hot.countRows()).toBe(4);
    yield sleep(300);
    expect(hot.countRows()).toBe(4);
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    yield sleep(300);
    expect(hot.countRows()).toBe(4);
  }));
  it('should not add new row after dragging the handle below the viewport when `autoInsertRow` is disabled',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        autoInsertRow: false
      }
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    var ev = {};
    var $lastRow = spec().$container.find('tr:last-child td:eq(2)');
    expect(hot.countRows()).toBe(4);
    ev.clientX = $lastRow.offset().left / 2;
    ev.clientY = $lastRow.offset().top + 50;
    $(document.documentElement).simulate('mousemove', ev);
    yield sleep(300);
    expect(hot.countRows()).toBe(4);
    ev.clientY = $lastRow.offset().top + 150;
    $(document.documentElement).simulate('mousemove', ev);
    yield sleep(300);
    expect(hot.countRows()).toBe(4);
  }));
  it('should not add new rows if the current number of rows reaches the maxRows setting',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        autoInsertRow: true
      },
      maxRows: 5
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    expect(hot.countRows()).toBe(4);
    yield sleep(200);
    expect(hot.countRows()).toBe(5);
    spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');
    yield sleep(200);
    expect(hot.countRows()).toBe(5);
  }));
  it('should add new row after dragging the handle below the viewport',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        autoInsertRow: true
      }
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    var ev = {};
    var $lastRow = spec().$container.find('tr:last-child td:eq(2)');
    expect(hot.countRows()).toBe(4);
    ev.clientX = $lastRow.offset().left / 2;
    ev.clientY = $lastRow.offset().top + 50;
    $(document.documentElement).simulate('mousemove', ev);
    yield sleep(300);
    expect(hot.countRows()).toBe(5);
    ev.clientY = $lastRow.offset().top + 150;
    $(document.documentElement).simulate('mousemove', ev);
    yield sleep(300);
    expect(hot.countRows()).toBe(6);
  }));
  it('should fill cells when dragging the handle to the headers', function () {
    handsontable({
      data: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 7, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      colHeaders: true,
      rowHeaders: true
    }); // col headers:

    selectCell(2, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    var errors = 0;

    try {
      spec().$container.find('thead tr:first-child th:eq(2)').simulate('mouseover').simulate('mouseup');
    } catch (err) {
      errors += 1;
    }

    expect(errors).toEqual(0);
    expect(getDataAtCell(1, 2)).toEqual(7);
    expect(getDataAtCell(0, 2)).toEqual(7);
    expect($('.fill').filter(function () {
      return $(this).css('display') !== 'none';
    }).length).toEqual(0); // check if fill selection is refreshed
    // row headers:

    selectCell(2, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    errors = 0;

    try {
      spec().$container.find('tbody tr:nth(2) th:first-child').simulate('mouseover').simulate('mouseup');
    } catch (err) {
      errors += 1;
    }

    expect(errors).toEqual(0);
    expect(getDataAtCell(2, 1)).toEqual(7);
    expect(getDataAtCell(2, 0)).toEqual(7);
    expect($('.fill').filter(function () {
      return $(this).css('display') !== 'none';
    }).length).toEqual(0); // check if fill selection is refreshed
  });
  it('should not add a new row if dragging from the last row upwards or sideways',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var mouseOverSpy = jasmine.createSpy('mouseOverSpy');
    var hot = handsontable({
      data: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      afterOnCellMouseOver: mouseOverSpy
    });
    selectCell(3, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:nth-child(3) td:eq(2)').simulate('mouseover');
    yield sleep(300);
    expect(hot.countRows()).toBe(4);
    selectCell(3, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:nth-child(4) td:eq(3)').simulate('mouseover');
    yield sleep(200);
    expect(hot.countRows()).toBe(4);
    selectCell(3, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    spec().$container.find('tr:nth-child(4) td:eq(1)').simulate('mouseover');
    yield sleep(200);
    expect(hot.countRows()).toBe(4);
  }));
  it('should add new row after dragging the handle below the viewport',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        autoInsertRow: true
      }
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    var ev = {};
    var $lastRow = spec().$container.find('tr:last-child td:eq(2)');
    expect(hot.countRows()).toBe(4);
    ev.clientX = $lastRow.offset().left / 2;
    ev.clientY = $lastRow.offset().top + 50;
    $(document.documentElement).simulate('mousemove', ev);
    yield sleep(300);
    expect(hot.countRows()).toBe(5);
    ev.clientY = $lastRow.offset().top + 150;
    $(document.documentElement).simulate('mousemove', ev);
    yield sleep(300);
    expect(hot.countRows()).toBe(6);
  }));
  it('should not add new row after dragging the handle below the viewport (direction is set to horizontal)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: [[1, 2, 'test', 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
      fillHandle: {
        direction: 'horizontal',
        autoInsertRow: true
      }
    });
    selectCell(0, 2);
    spec().$container.find('.wtBorder.current.corner').simulate('mousedown');
    var ev = {};
    var $lastRow = spec().$container.find('tr:last-child td:eq(2)');
    expect(hot.countRows()).toBe(4);
    ev.clientX = $lastRow.offset().left / 2;
    ev.clientY = $lastRow.offset().top + 50;
    $(document.documentElement).simulate('mousemove', ev);
    yield sleep(300);
    expect(hot.countRows()).toBe(4);
  }));
  it('should populate the filled data in the correct order, when dragging the fill handle upwards', function () {
    handsontable({
      data: [[null, null, null, null], [null, null, null, null], [null, null, null, null], [null, null, null, null], [null, 2, 3, null], [null, 1, 4, null], [null, 0, 5, null], [null, null, null, null]]
    });
    expect(JSON.stringify(getData(0, 1, 3, 2))).toEqual(JSON.stringify([[null, null], [null, null], [null, null], [null, null]]));
    selectCell(4, 1, 6, 2);
    spec().$container.find('.wtBorder.area.corner').simulate('mousedown');
    $(getCell(0, 2, true)).simulate('mouseover').simulate('mouseup');
    expect(JSON.stringify(getData(0, 1, 3, 2))).toEqual(JSON.stringify([[0, 5], [2, 3], [1, 4], [0, 5]]));
  });
  it('should populate the filled data in the correct order, when dragging the fill handle towards left', function () {
    handsontable({
      data: [[null, null, null, null, null, null, null, null], [null, null, null, null, null, 0, 1, 2], [null, null, null, null, null, 3, 4, 5], [null, null, null, null, null, null, null, null]]
    });
    expect(JSON.stringify(getData(1, 1, 2, 4))).toEqual(JSON.stringify([[null, null, null, null], [null, null, null, null]]));
    selectCell(1, 5, 2, 7);
    spec().$container.find('.wtBorder.area.corner').simulate('mousedown');
    $(getCell(2, 1, true)).simulate('mouseover').simulate('mouseup');
    expect(JSON.stringify(getData(1, 1, 2, 4))).toEqual(JSON.stringify([[2, 0, 1, 2], [5, 3, 4, 5]]));
  });
  describe('should works properly when two or more instances of Handsontable was initialized with other settings (#3257)', function () {
    var getData;
    var $container1;
    var $container2;
    beforeAll(function () {
      getData = function getData() {
        return [[1, 2, 3, 4, 5, 6], [7, 8, 9, 1, 2, 3], [4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6]];
      };

      $container1 = $('<div id="hot1"></div>').appendTo('body').handsontable({
        data: getData(),
        fillHandle: true
      });
      $container2 = $('<div id="hot2"></div>').appendTo('body').handsontable({
        data: getData(),
        fillHandle: 'horizontal'
      });
    });
    it('checking drag vertically on 1. instance of Handsontable - should change cell value', function () {
      $container1.handsontable('selectCell', 0, 0);
      $container1.find('.wtBorder.current.corner').simulate('mousedown');
      $container1.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');
      expect($container1.handsontable('getDataAtCell', 1, 0)).toEqual(1);
    });
    describe('-> updating settings on 2. instance of Handsontable', function () {
      beforeAll(function () {
        $container2.handsontable('updateSettings', {
          fillHandle: 'vertical'
        });
      });
      it('checking drag vertically on 2. instance of Handsontable - should change cell value', function () {
        $container2.handsontable('selectCell', 0, 2);
        $container2.find('.wtBorder.current.corner').simulate('mousedown');
        $container2.find('tbody tr:eq(1) td:eq(2)').simulate('mouseover').simulate('mouseup');
        expect($container2.handsontable('getDataAtCell', 1, 2)).toEqual(3);
      });
    });
    afterAll(function () {
      // destroing containers
      $container1.handsontable('destroy');
      $container1.remove();
      $container2.handsontable('destroy');
      $container2.remove();
    });
  });
});

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('ColumnSorting', function () {
  var id = 'testContainer';
  beforeEach(function () {
    var _this = this;

    this.$container = $("<div id=\"".concat(id, "\" style=\"overflow: auto; width: 300px; height: 200px;\"></div>")).appendTo('body');

    this.sortByClickOnColumnHeader = function (columnIndex) {
      var hot = _this.$container.data('handsontable');

      var $columnHeader = $(hot.view.wt.wtTable.getColumnHeader(columnIndex));
      var $spanInsideHeader = $columnHeader.find('.columnSorting');

      if ($spanInsideHeader.length === 0) {
        throw Error('Please check the test scenario. The header doesn\'t exist.');
      }

      $spanInsideHeader.simulate('mousedown');
      $spanInsideHeader.simulate('mouseup');
      $spanInsideHeader.simulate('click');
    };
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var arrayOfObjects = function arrayOfObjects() {
    return [{
      id: 1,
      name: 'Ted',
      lastName: 'Right'
    }, {
      id: 2,
      name: 'Frank',
      lastName: 'Honest'
    }, {
      id: 3,
      name: 'Joan',
      lastName: 'Well'
    }, {
      id: 4,
      name: 'Sid',
      lastName: 'Strong'
    }, {
      id: 5,
      name: 'Jane',
      lastName: 'Neat'
    }, {
      id: 6,
      name: 'Chuck',
      lastName: 'Jackson'
    }, {
      id: 7,
      name: 'Meg',
      lastName: 'Jansen'
    }, {
      id: 8,
      name: 'Rob',
      lastName: 'Norris'
    }, {
      id: 9,
      name: 'Sean',
      lastName: 'O\'Hara'
    }, {
      id: 10,
      name: 'Eve',
      lastName: 'Branson'
    }];
  };

  var arrayOfArrays = function arrayOfArrays() {
    return [['Mary', 'Brown', '01/14/2017', 6999.95, 'aa'], ['Henry', 'Jones', '12/01/2018', 8330, 'aaa'], ['Ann', 'Evans', '07/24/2021', 30500, null], ['Robert', 'Evans', '07/24/2019', 12464, 'abaa'], ['Ann', 'Williams', '01/14/2017', 33.9, 'aab'], ['David', 'Taylor', '02/02/2020', 7000, 'bbbb'], ['John', 'Brown', '07/24/2020', 2984, null], ['Mary', 'Brown', '01/14/2017', 4000, ''], ['Robert', 'Evans', '07/24/2020', 30500, undefined]];
  };

  it('should sort table by first visible column', function () {
    handsontable({
      data: [[1, 9, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1], [8, 7, 6, 5, 4, 3, 3, 1, 9], [0, 3, 0, 5, 6, 7, 8, 9, 1]],
      colHeaders: true,
      columnSorting: true
    });
    var htCore = getHtCore();
    spec().sortByClickOnColumnHeader(0);
    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');
    expect(htCore.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('3');
    expect(htCore.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('0');
    expect(htCore.find('tbody tr:eq(0) td:eq(3)').text()).toEqual('5');
  });
  it('should not change row indexes in the sorted table after using `disablePlugin` until next render is called', function () {
    handsontable({
      data: [[1, 9, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1], [8, 7, 6, 5, 4, 3, 3, 1, 9], [0, 3, 0, 5, 6, 7, 8, 9, 1]],
      colHeaders: true,
      columnSorting: true
    });
    var htCore = getHtCore();
    spec().sortByClickOnColumnHeader(0);
    getPlugin('columnSorting').disablePlugin();
    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');
    expect(htCore.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('3');
    expect(htCore.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('0');
    expect(htCore.find('tbody tr:eq(0) td:eq(3)').text()).toEqual('5');
    render();
    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
    expect(htCore.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('9');
    expect(htCore.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('3');
    expect(htCore.find('tbody tr:eq(0) td:eq(3)').text()).toEqual('4');
  });
  it('should clear the sort performed on the table by the `clearSort` method', function () {
    handsontable({
      data: arrayOfArrays(),
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    });
    getPlugin('columnSorting').clearSort();
    expect(getData()).toEqual(arrayOfArrays());
  });
  it('should return sorting state with visual column index under `column` key by the `getSortConfig` method', function () {
    var predefinedSortQueue = [{
      column: 0,
      sortOrder: 'asc'
    }];

    var modification = function modification(column) {
      if (column === 0) {
        return 1;
      } else if (column === 1) {
        return 0;
      }

      return column;
    };

    handsontable({
      data: arrayOfArrays(),
      columns: [{}, {}, {
        type: 'date',
        dateFormat: 'MM/DD/YYYY'
      }, {
        type: 'numeric'
      }, {}],
      columnSorting: {
        initialConfig: predefinedSortQueue
      }
    });
    expect(getPlugin('columnSorting').getSortConfig()).toEqual(predefinedSortQueue);
    expect(getPlugin('columnSorting').getSortConfig(0)).toEqual({
      column: 0,
      sortOrder: 'asc'
    }); // changing column sequence: 0 <-> 1

    updateSettings({
      modifyCol: modification,
      unmodifyCol: modification
    });
    expect(getPlugin('columnSorting').getSortConfig()).toEqual([{
      column: 1,
      sortOrder: 'asc'
    }]);
    expect(getPlugin('columnSorting').getSortConfig(1)).toEqual({
      column: 1,
      sortOrder: 'asc'
    });
  });
  it('should set properly sort config by the `setSortConfig` method', function () {
    var sortQueue = [{
      column: 0,
      sortOrder: 'asc'
    }];

    var modification = function modification(column) {
      if (column === 0) {
        return 1;
      } else if (column === 1) {
        return 0;
      }

      return column;
    };

    handsontable({
      data: arrayOfArrays(),
      columns: [{}, {}, {
        type: 'date',
        dateFormat: 'MM/DD/YYYY'
      }, {
        type: 'numeric'
      }, {}],
      columnSorting: true
    });
    getPlugin('columnSorting').setSortConfig(sortQueue);
    expect(getPlugin('columnSorting').getSortConfig()).toEqual(sortQueue);
    expect(getPlugin('columnSorting').getSortConfig(0)).toEqual({
      column: 0,
      sortOrder: 'asc'
    }); // changing column sequence: 0 <-> 1

    updateSettings({
      modifyCol: modification,
      unmodifyCol: modification
    });
    expect(getPlugin('columnSorting').getSortConfig()).toEqual([{
      column: 1,
      sortOrder: 'asc'
    }]);
    expect(getPlugin('columnSorting').getSortConfig(1)).toEqual({
      column: 1,
      sortOrder: 'asc'
    });
  });
  it('should display indicator properly after changing sorted column sequence', function () {
    var modification = function modification(column) {
      if (column === 0) {
        return 1;
      } else if (column === 1) {
        return 0;
      }

      return column;
    };

    handsontable({
      data: [[1, 9, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1], [8, 7, 6, 5, 4, 3, 3, 1, 9], [0, 3, 0, 5, 6, 7, 8, 9, 1]],
      colHeaders: true,
      columnSorting: {
        indicator: true
      }
    });
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    }); // changing column sequence: 0 <-> 1

    updateSettings({
      modifyCol: modification,
      unmodifyCol: modification
    });
    var sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
  });
  it('should clear indicator after disabling plugin', function () {
    handsontable({
      data: arrayOfObjects(),
      colHeaders: true,
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        },
        indicator: true
      }
    });
    updateSettings({
      columnSorting: false
    });
    var sortedColumn = spec().$container.find('th span')[0];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);
  });
  it('should render a correct number of TD elements after sorting',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [['1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'], ['2']],
      height: 100,
      colHeaders: true,
      columnSorting: true
    });
    var htCore = getHtCore();
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'desc'
    });
    yield sleep(300);
    expect(htCore.find('td').length).toEqual(2);
  }));
  it('should apply stable sort function #3606', function () {
    handsontable({
      data: [['mercedes1', 'Mercedes', 'A 160', '01/14/2007'], ['citroen1', 'Citroen', 'C4 Coupe', '12/01/2007'], ['opel1', 'Opel', 'Astra', '02/02/2006'], ['bmw1', 'BMW', '320i Coupe', '07/24/2009'], ['citroen2', 'Citroen', 'C4 Coupe', '12/01/2012'], ['opel2', 'Opel', 'Astra', '02/02/2004'], ['mercedes2', 'Mercedes', 'A 160', '01/14/2008'], ['citroen3', 'Citroen', 'C4 Coupe', '12/01/2007'], ['mercedes3', 'Mercedes', 'A 160', '01/14/2009'], ['opel3', 'Opel', 'Astra', '02/02/2006'], ['bmw2', 'BMW', '320i Coupe', '07/24/2013'], ['bmw3', 'BMW', '320i Coupe', '07/24/2012']],
      columns: [{}, {}, {
        type: 'date',
        dateFormat: 'mm/dd/yy'
      }, {
        type: 'numeric'
      }],
      columnSorting: true
    });
    getPlugin('columnSorting').sort({
      column: 1,
      sortOrder: 'asc'
    }); // ASC

    expect(getDataAtCol(0)).toEqual(['bmw1', 'bmw2', 'bmw3', 'citroen1', 'citroen2', 'citroen3', 'mercedes1', 'mercedes2', 'mercedes3', 'opel1', 'opel2', 'opel3']);
    getPlugin('columnSorting').sort({
      column: 1,
      sortOrder: 'desc'
    }); // DESC

    expect(getDataAtCol(0)).toEqual(['opel1', 'opel2', 'opel3', 'mercedes1', 'mercedes2', 'mercedes3', 'citroen1', 'citroen2', 'citroen3', 'bmw1', 'bmw2', 'bmw3']);
  });
  it('should not throw an exception when clicked on the top-left corner',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var onErrorSpy = spyOn(window, 'onerror');
    handsontable({
      colHeaders: true,
      rowHeaders: true,
      data: arrayOfObjects(),
      columnSorting: true
    });
    $('.ht_clone_top_left_corner .htCore span').simulate('mousedown');
    $('.ht_clone_top_left_corner .htCore span').simulate('click');
    $('.ht_clone_top_left_corner .htCore span').simulate('mouseup');
    expect(onErrorSpy).not.toHaveBeenCalled();
  }));
  it('should not throw error when trying run handsontable with columnSorting and autoRowSize in the same time.', function () {
    var errors = 0;

    try {
      handsontable({
        data: arrayOfObjects(),
        autoRowSize: true,
        columnSorting: true
      });
    } catch (e) {
      errors += 1;
    }

    expect(errors).toBe(0);
  });
  it('should sort numbers descending after 2 clicks on table header', function () {
    handsontable({
      data: arrayOfObjects(),
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    spec().sortByClickOnColumnHeader(0);
    expect(spec().$container.find('tr td').first().html()).toEqual('10');
  });
  it('should place empty strings, null and undefined values at proper position (stability of default comparing function)', function () {
    handsontable({
      data: [[null, 'Ted Right'], [undefined, 'Jane Neat'], [null, 'Meg Jansen'], ['', 'Sean Hara'], ['', 'Eve Branson'], [6, 'Frank Honest'], [7, 'Joan Well'], [8, 'Sid Strong'], [9, 'Chuck Jackson'], [10, 'Rob Norris'], [11, 'Eve Well']],
      columnSorting: true
    });
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    }); // ASC

    expect(getDataAtCol(1)).toEqual(['Frank Honest', 'Joan Well', 'Sid Strong', 'Chuck Jackson', 'Rob Norris', 'Eve Well', // empty cells below
    'Ted Right', 'Jane Neat', 'Meg Jansen', 'Sean Hara', 'Eve Branson']);
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'desc'
    }); // DESC

    expect(getDataAtCol(1)).toEqual(['Eve Well', 'Rob Norris', 'Chuck Jackson', 'Sid Strong', 'Joan Well', 'Frank Honest', // empty cells below
    'Ted Right', 'Jane Neat', 'Meg Jansen', 'Sean Hara', 'Eve Branson']);
  });
  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` option is enabled ' + '(API call, data type: default)', function () {
    handsontable({
      data: [[6, 'Frank Honest'], [null, 'Ted Right'], [7, 'Joan Well'], [8, 'Sid Strong'], [undefined, 'Jane Neat'], [9, 'Chuck Jackson'], [null, 'Meg Jansen'], [10, 'Rob Norris'], ['', 'Sean Hara'], ['', 'Eve Branson']],
      columnSorting: {
        sortEmptyCells: true
      }
    });
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    }); // ASC

    expect(getDataAtCol(1)).toEqual(['Ted Right', 'Jane Neat', 'Meg Jansen', 'Sean Hara', 'Eve Branson', // empty cells above
    'Frank Honest', 'Joan Well', 'Sid Strong', 'Chuck Jackson', 'Rob Norris']);
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'desc'
    }); // DESC

    expect(getDataAtCol(1)).toEqual(['Rob Norris', 'Chuck Jackson', 'Sid Strong', 'Joan Well', 'Frank Honest', // empty cells below
    'Ted Right', 'Jane Neat', 'Meg Jansen', 'Sean Hara', 'Eve Branson']);
  });
  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' + 'option is enabled and `column` property of `columnSorting` option is set (data type: default)', function () {
    handsontable({
      data: [[6, 'Frank Honest'], [null, 'Ted Right'], [7, 'Joan Well'], [8, 'Sid Strong'], [undefined, 'Jane Neat'], [9, 'Chuck Jackson'], [null, 'Meg Jansen'], [10, 'Rob Norris'], ['', 'Sean Hara'], ['', 'Eve Branson']],
      columnSorting: {
        sortEmptyCells: true,
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    }); // ASC

    expect(getDataAtCol(1)).toEqual(['Ted Right', 'Jane Neat', 'Meg Jansen', 'Sean Hara', 'Eve Branson', // empty cells above
    'Frank Honest', 'Joan Well', 'Sid Strong', 'Chuck Jackson', 'Rob Norris']);

    if (spec().$container) {
      destroy();
      spec().$container.remove();
    }

    handsontable({
      data: [[6, 'Frank Honest'], [null, 'Ted Right'], [7, 'Joan Well'], [8, 'Sid Strong'], [undefined, 'Jane Neat'], [9, 'Chuck Jackson'], [null, 'Meg Jansen'], [10, 'Rob Norris'], ['', 'Sean Hara'], ['', 'Eve Branson']],
      columnSorting: {
        sortEmptyCells: true,
        initialConfig: {
          column: 0,
          sortOrder: 'desc'
        }
      }
    }); // DESC

    expect(getDataAtCol(1)).toEqual(['Rob Norris', 'Chuck Jackson', 'Sid Strong', 'Joan Well', 'Frank Honest', // empty cells below
    'Ted Right', 'Jane Neat', 'Meg Jansen', 'Sean Hara', 'Eve Branson']);
  });
  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' + 'option is enabled and `column` property of `columnSorting` option is set (data type: numeric)', function () {
    handsontable({
      data: [[6, 'Frank Honest'], [null, 'Ted Right'], [7, 'Joan Well'], [8, 'Sid Strong'], [undefined, 'Jane Neat'], [9, 'Chuck Jackson'], [null, 'Meg Jansen'], [10, 'Rob Norris'], ['', 'Sean Hara'], ['', 'Eve Branson']],
      columns: [{
        type: 'numeric'
      }, {}],
      columnSorting: {
        sortEmptyCells: true,
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    }); // ASC

    expect(getDataAtCol(1)).toEqual(['Ted Right', 'Jane Neat', 'Meg Jansen', 'Sean Hara', 'Eve Branson', // empty cells above
    'Frank Honest', 'Joan Well', 'Sid Strong', 'Chuck Jackson', 'Rob Norris']);

    if (spec().$container) {
      destroy();
      spec().$container.remove();
    }

    handsontable({
      data: [[6, 'Frank Honest'], [null, 'Ted Right'], [7, 'Joan Well'], [8, 'Sid Strong'], [undefined, 'Jane Neat'], [9, 'Chuck Jackson'], [null, 'Meg Jansen'], [10, 'Rob Norris'], ['', 'Sean Hara'], ['', 'Eve Branson']],
      columnSorting: {
        sortEmptyCells: true,
        initialConfig: {
          column: 0,
          sortOrder: 'desc'
        }
      }
    }); // DESC

    expect(getDataAtCol(1)).toEqual(['Rob Norris', 'Chuck Jackson', 'Sid Strong', 'Joan Well', 'Frank Honest', // empty cells below
    'Ted Right', 'Jane Neat', 'Meg Jansen', 'Sean Hara', 'Eve Branson']);
  });
  it('should clear and generate a new column meta cache after calling `updateSettings` with a new set of data',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: [['test']],
      columnSorting: true,
      colHeaders: true
    });
    var plugin = getPlugin('columnSorting');
    expect(plugin.columnMetaCache.size).toEqual(1);
    updateSettings({
      data: [['first columns', 'second column', 'third column']]
    });
    expect(plugin.columnMetaCache.size).toEqual(3);
  }));
  describe('isSorted', function () {
    it('should return `false` when plugin is disabled', function () {
      handsontable();
      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();
    });
    it('should return `false` when plugin has been disabled by the `disablePlugin` method', function () {
      handsontable({
        columnSorting: {
          initialConfig: {
            column: 1,
            sortOrder: 'asc'
          }
        }
      });
      getPlugin('columnSorting').disablePlugin();
      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();
    });
    it('should return `false` when plugin is enabled and the table was not sorted #1', function () {
      handsontable({
        columnSorting: true
      });
      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();
    });
    it('should return `false` when plugin is enabled and the table was not sorted #2', function () {
      handsontable({
        data: [['Citroen1', 'C4 Coupe', null], ['Mercedes1', 'A 160', '12/01/2008'], ['Mercedes2', 'A 160', '01/14/2006']],
        columnSorting: {
          indicator: true
        }
      });
      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();
    });
    it('should return `true` when plugin is enabled and the table was sorted', function () {
      handsontable({
        data: [['Citroen1', 'C4 Coupe', null], ['Mercedes1', 'A 160', '12/01/2008'], ['Mercedes2', 'A 160', '01/14/2006']],
        columnSorting: {
          initialConfig: {
            column: 1,
            sortOrder: 'asc'
          }
        }
      });
      expect(getPlugin('columnSorting').isSorted()).toBeTruthy();
    });
    it('should be handled properly when using the `updateSettings`', function () {
      handsontable({
        data: [['Citroen1', 'C4 Coupe', null], ['Mercedes1', 'A 160', '12/01/2008'], ['Mercedes2', 'A 160', '01/14/2006']],
        columnSorting: {
          initialConfig: {
            column: 1,
            sortOrder: 'asc'
          }
        }
      });
      updateSettings({
        columnSorting: true
      });
      expect(getPlugin('columnSorting').isSorted()).toBeTruthy();
      updateSettings({
        columnSorting: {
          initialConfig: {
            column: 1,
            sortOrder: 'desc'
          }
        }
      });
      expect(getPlugin('columnSorting').isSorted()).toBeTruthy();
      updateSettings({
        columnSorting: false
      });
      expect(getPlugin('columnSorting').isSorted()).toBeFalsy();
    });
  });
  describe('data type: date', function () {
    it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' + 'option is enabled and `column` property of `columnSorting` option is set', function () {
      handsontable({
        data: [['Citroen1', 'C4 Coupe', null], ['Mercedes1', 'A 160', '12/01/2008'], ['Mercedes2', 'A 160', '01/14/2006'], ['Citroen2', 'C4 Coupe', undefined], ['Audi1', 'A4 Avant', '11/19/2011'], ['Opel1', 'Astra', '02/02/2004'], ['Citroen3', 'C4 Coupe', null], ['BMW1', '320i Coupe', '07/24/2011'], ['Citroen4', 'C4 Coupe', ''], ['Citroen5', 'C4 Coupe', '']],
        columns: [{}, {}, {
          type: 'date',
          dateFormat: 'MM/DD/YYYY'
        }],
        columnSorting: {
          sortEmptyCells: true,
          initialConfig: {
            column: 2,
            sortOrder: 'asc'
          }
        }
      }); // ASC

      expect(getDataAtCol(0)).toEqual(['Citroen1', 'Citroen2', 'Citroen3', 'Citroen4', 'Citroen5', // empty cells above
      'Opel1', 'Mercedes2', 'Mercedes1', 'BMW1', 'Audi1']);

      if (spec().$container) {
        destroy();
        spec().$container.remove();
      }

      handsontable({
        data: [['Citroen1', 'C4 Coupe', null], ['Mercedes1', 'A 160', '12/01/2008'], ['Mercedes2', 'A 160', '01/14/2006'], ['Citroen2', 'C4 Coupe', undefined], ['Audi1', 'A4 Avant', '11/19/2011'], ['Opel1', 'Astra', '02/02/2004'], ['Citroen3', 'C4 Coupe', null], ['BMW1', '320i Coupe', '07/24/2011'], ['Citroen4', 'C4 Coupe', ''], ['Citroen5', 'C4 Coupe', '']],
        columns: [{}, {}, {
          type: 'date',
          dateFormat: 'MM/DD/YYYY'
        }],
        columnSorting: {
          sortEmptyCells: true,
          initialConfig: {
            column: 2,
            sortOrder: 'desc'
          }
        }
      }); // DESC

      expect(getDataAtCol(0)).toEqual(['Audi1', 'BMW1', 'Mercedes1', 'Mercedes2', 'Opel1', // empty cells below
      'Citroen1', 'Citroen2', 'Citroen3', 'Citroen4', 'Citroen5']);
    });
    it('should sort date columns (MM/DD/YYYY)', function () {
      handsontable({
        data: [['Mercedes', 'A 160', '01/14/2006', 6999.9999], ['Citroen', 'C4 Coupe', '12/01/2008', 8330], ['Audi', 'A4 Avant', '11/19/2011', 33900], ['Opel', 'Astra', '02/02/2004', 7000], ['BMW', '320i Coupe', '07/24/2011', 30500]],
        columns: [{}, {}, {
          type: 'date',
          dateFormat: 'MM/DD/YYYY'
        }, {
          type: 'numeric'
        }],
        colHeaders: true,
        columnSorting: true
      });
      getPlugin('columnSorting').sort({
        column: 2,
        sortOrder: 'asc'
      }); // ASC

      expect(getDataAtRow(0)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);
      expect(getDataAtRow(1)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);
      expect(getDataAtRow(2)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);
      expect(getDataAtRow(3)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);
      expect(getDataAtRow(4)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);
      getPlugin('columnSorting').sort({
        column: 2,
        sortOrder: 'desc'
      }); // DESC

      expect(getDataAtRow(0)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);
      expect(getDataAtRow(1)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);
      expect(getDataAtRow(2)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);
      expect(getDataAtRow(3)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);
      expect(getDataAtRow(4)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);
    });
    it('should sort date columns (DD/MM/YYYY)', function () {
      handsontable({
        data: [['Mercedes', 'A 160', '01/12/2012', 6999.9999], ['Citroen', 'C4 Coupe', '12/01/2013', 8330], ['Audi', 'A4 Avant', '11/10/2014', 33900], ['Opel', 'Astra', '02/02/2015', 7000], ['BMW', '320i Coupe', '07/02/2013', 30500]],
        columns: [{}, {}, {
          type: 'date',
          dateFormat: 'DD/MM/YYYY'
        }, {
          type: 'numeric'
        }],
        colHeaders: true,
        columnSorting: true
      });
      getPlugin('columnSorting').sort({
        column: 2,
        sortOrder: 'asc'
      }); // ASC

      expect(getDataAtRow(0)).toEqual(['Mercedes', 'A 160', '01/12/2012', 6999.9999]);
      expect(getDataAtRow(1)).toEqual(['Citroen', 'C4 Coupe', '12/01/2013', 8330]);
      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/02/2013', 30500]);
      expect(getDataAtRow(3)).toEqual(['Audi', 'A4 Avant', '11/10/2014', 33900]);
      expect(getDataAtRow(4)).toEqual(['Opel', 'Astra', '02/02/2015', 7000]);
      getPlugin('columnSorting').sort({
        column: 2,
        sortOrder: 'desc'
      }); // DESC

      expect(getDataAtRow(0)).toEqual(['Opel', 'Astra', '02/02/2015', 7000]);
      expect(getDataAtRow(1)).toEqual(['Audi', 'A4 Avant', '11/10/2014', 33900]);
      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/02/2013', 30500]);
      expect(getDataAtRow(3)).toEqual(['Citroen', 'C4 Coupe', '12/01/2013', 8330]);
      expect(getDataAtRow(4)).toEqual(['Mercedes', 'A 160', '01/12/2012', 6999.9999]);
    });
    it('should sort date columns (MMMM Do YYYY)', function () {
      handsontable({
        data: [['Mercedes', 'A 160', 'October 28th 2016', 6999.9999], ['Citroen', 'C4 Coupe', 'October 27th 2001', 8330], ['Audi', 'A4 Avant', 'July 8th 1999', 33900], ['Opel', 'Astra', 'June 1st 2001', 7000], ['BMW', '320i Coupe', 'August 3rd 2001', 30500]],
        columns: [{}, {}, {
          type: 'date',
          dateFormat: 'MMMM Do YYYY'
        }, {
          type: 'numeric'
        }],
        colHeaders: true,
        columnSorting: true
      });
      getPlugin('columnSorting').sort({
        column: 2,
        sortOrder: 'asc'
      }); // ASC

      expect(getDataAtRow(0)).toEqual(['Audi', 'A4 Avant', 'July 8th 1999', 33900]);
      expect(getDataAtRow(1)).toEqual(['Opel', 'Astra', 'June 1st 2001', 7000]);
      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', 'August 3rd 2001', 30500]);
      expect(getDataAtRow(3)).toEqual(['Citroen', 'C4 Coupe', 'October 27th 2001', 8330]);
      expect(getDataAtRow(4)).toEqual(['Mercedes', 'A 160', 'October 28th 2016', 6999.9999]);
      getPlugin('columnSorting').sort({
        column: 2,
        sortOrder: 'desc'
      }); // DESC

      expect(getDataAtRow(0)).toEqual(['Mercedes', 'A 160', 'October 28th 2016', 6999.9999]);
      expect(getDataAtRow(1)).toEqual(['Citroen', 'C4 Coupe', 'October 27th 2001', 8330]);
      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', 'August 3rd 2001', 30500]);
      expect(getDataAtRow(3)).toEqual(['Opel', 'Astra', 'June 1st 2001', 7000]);
      expect(getDataAtRow(4)).toEqual(['Audi', 'A4 Avant', 'July 8th 1999', 33900]);
    });
    it('should sort date columns along with empty and null values', function () {
      handsontable({
        data: [['Mercedes', 'A 160', '01/14/2006', 6999.9999], ['Citroen', 'C4 Coupe', '12/01/2008', 8330], ['Citroen', 'C4 Coupe null', null, 8330], ['Citroen', 'C4 Coupe empty', '', 8330], ['Audi', 'A4 Avant', '11/19/2011', 33900], ['Opel', 'Astra', '02/02/2004', 7000], ['BMW', '320i Coupe', '07/24/2011', 30500]],
        columns: [{}, {}, {
          type: 'date',
          dateFormat: 'mm/dd/yy'
        }, {
          type: 'numeric'
        }],
        colHeaders: true,
        columnSorting: true
      });
      getPlugin('columnSorting').sort({
        column: 2,
        sortOrder: 'asc'
      }); // ASC

      expect(getDataAtRow(0)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);
      expect(getDataAtRow(1)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);
      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);
      expect(getDataAtRow(3)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);
      expect(getDataAtRow(4)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);
      getPlugin('columnSorting').sort({
        column: 2,
        sortOrder: 'desc'
      }); // DESC

      expect(getDataAtRow(0)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);
      expect(getDataAtRow(1)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);
      expect(getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);
      expect(getDataAtRow(3)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);
      expect(getDataAtRow(4)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);
    });
  });
  describe('data type: time', function () {
    it('should properly rewrite time into correct format after sort',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: [['0:00:01 am'], ['5:30:14 pm'], ['8:00:00 pm'], ['11:15:05 am'], ['4:07:48 am']],
        columns: [{
          type: 'time',
          dateFormat: 'h:mm:ss a',
          correctFormat: true
        }],
        colHeaders: true,
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'desc'
          }
        }
      });
      yield sleep(100);
      setDataAtCell(0, 0, '19:55', 'edit');
      yield sleep(100);
      expect(getDataAtCell(0, 0)).toEqual('7:55:00 pm');
    }));
  });
  it('should properly sort numeric data', function () {
    handsontable({
      data: [['Mercedes', 'A 160', '01/14/2006', '6999.9999'], ['Citroen', 'C4 Coupe', '12/01/2008', 8330], ['Citroen', 'C4 Coupe null', null, '8330'], ['Citroen', 'C4 Coupe empty', '', 8333], ['Audi', 'A4 Avant', '11/19/2011', '33900'], ['Opel', 'Astra', '02/02/2004', '7000'], ['BMW', '320i Coupe', '07/24/2011', 30500]],
      columns: [{}, {}, {}, {
        type: 'numeric'
      }],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(3);
    expect(getDataAtCol(3)).toEqual(['6999.9999', '7000', 8330, '8330', 8333, 30500, '33900']);
    spec().sortByClickOnColumnHeader(3);
    expect(getDataAtCol(3)).toEqual(['33900', 30500, 8333, 8330, '8330', '7000', '6999.9999']);
    spec().sortByClickOnColumnHeader(3);
    expect(getDataAtCol(3)).toEqual(['6999.9999', 8330, '8330', 8333, '33900', '7000', 30500]);
  });
  it('should sort table with multiple row headers', function () {
    handsontable({
      data: [[1, 'B'], [0, 'D'], [3, 'A'], [2, 'C']],
      columns: [{}, {}, {
        type: 'date',
        dateFormat: 'mm/dd/yy'
      }, {
        type: 'numeric'
      }],
      colHeaders: true,
      columnSorting: true
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
    spec().sortByClickOnColumnHeader(0); // sort by first column

    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');
    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');
    spec().sortByClickOnColumnHeader(1); // sort by second column

    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A');
  });
  it('should allow to define sorting column and order during initialization', function () {
    handsontable({
      data: [[1, 'B'], [0, 'D'], [3, 'A'], [2, 'C']],
      colHeaders: true,
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');
    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');
  });
  it('should allow to change sorting column with updateSettings', function () {
    handsontable({
      data: [[1, 'B'], [0, 'D'], [3, 'A'], [2, 'C']],
      colHeaders: true,
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');
    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');
    updateSettings({
      columnSorting: {
        initialConfig: {
          column: 1,
          sortOrder: 'asc'
        }
      }
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');
    expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A');
  });
  it('should allow to change sort order with updateSettings', function () {
    handsontable({
      data: [[1, 'B'], [0, 'D'], [3, 'A'], [2, 'C']],
      colHeaders: true,
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');
    updateSettings({
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'desc'
        }
      }
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');
  });
  it('should allow to change if sorting empty cells with updateSettings', function () {
    handsontable({
      data: [[1, 'B'], [2, ''], [3, 'A'], [4, ''], [6, 'E'], [7, ''], [8, 'F']],
      colHeaders: true,
      columnSorting: {
        sortEmptyCells: false,
        initialConfig: {
          column: 1,
          sortOrder: 'desc'
        }
      }
    });
    updateSettings({
      columnSorting: {
        sortEmptyCells: true,
        initialConfig: {
          column: 1,
          sortOrder: 'asc'
        }
      }
    }); // ASC with empty cells sorting

    expect(getDataAtCol(0)).toEqual([2, 4, 7, 3, 1, 6, 8]);
    updateSettings({
      columnSorting: {
        sortEmptyCells: false,
        initialConfig: {
          column: 1,
          sortOrder: 'asc'
        }
      }
    }); // ASC without empty cells sorting

    expect(getDataAtCol(0)).toEqual([3, 1, 6, 8, 2, 4, 7]);
  });
  it('should NOT sort spare rows', function () {
    var myData = [{
      a: 'aaa',
      b: 2,
      c: 3
    }, {
      a: 'z',
      b: 11,
      c: -4
    }, {
      a: 'dddd',
      b: 13,
      c: 13
    }, {
      a: 'bbbb',
      b: 10,
      c: 11
    }];

    function customIsEmptyRow(row) {
      var data = this.getSourceData();
      return data[row].isNew;
    }

    handsontable({
      data: myData,
      rowHeaders: true,
      colHeaders: ['A', 'B', 'C'],
      columns: [{
        data: 'a',
        type: 'text'
      }, {
        data: 'b',
        type: 'text'
      }, {
        data: 'c',
        type: 'text'
      }],
      dataSchema: {
        isNew: true,
        a: false
      },
      // default for a to avoid #bad value#
      columnSorting: true,
      minSpareRows: 3,
      isEmptyRow: customIsEmptyRow
    }); // ASC

    updateSettings({
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    });
    expect(getData()).toEqual([['aaa', 2, 3], ['bbbb', 10, 11], ['dddd', 13, 13], ['z', 11, -4], [false, null, null], [false, null, null], [false, null, null]]);
    updateSettings({
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'desc'
        }
      }
    });
    expect(getData()).toEqual([['z', 11, -4], ['dddd', 13, 13], ['bbbb', 10, 11], ['aaa', 2, 3], [false, null, null], [false, null, null], [false, null, null]]);
  });
  it('should reset column sorting with updateSettings', function () {
    handsontable({
      data: [[1, 'B'], [0, 'D'], [3, 'A'], [2, 'C']],
      colHeaders: true,
      columnSorting: {
        initialConfig: {
          column: 0,
          sortOrder: 'asc'
        }
      }
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');
    updateSettings({
      columnSorting: void 0
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
  });
  it('should sort table using plugin API method', function () {
    handsontable({
      data: [[1, 'B'], [0, 'D'], [3, 'A'], [2, 'C']],
      columnSorting: true
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('0');
    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');
    expect(spec().$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('2');
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    });
    expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');
    expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');
    expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');
    expect(spec().$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');
  });
  it('should fire beforeColumnSort event before sorting data', function () {
    handsontable({
      data: [[2], [4], [1], [3]],
      columnSorting: true
    });
    var beforeColumnSortHandler = jasmine.createSpy('beforeColumnSortHandler');
    addHook('beforeColumnSort', beforeColumnSortHandler);
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    });
    expect(beforeColumnSortHandler.calls.count()).toEqual(1);
    expect(beforeColumnSortHandler).toHaveBeenCalledWith([], [{
      column: 0,
      sortOrder: 'asc'
    }], true, void 0, void 0, void 0);
  });
  it('should not sorting column when beforeColumnSort returns false', function (done) {
    handsontable({
      data: [[2], [4], [1], [3]],
      columnSorting: true,
      beforeColumnSort: function beforeColumnSort() {
        return false;
      }
    });
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    });
    setTimeout(function () {
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('4');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');
      done();
    }, 200);
  });
  it('should add beforeColumnSort event listener in constructor', function () {
    var beforeColumnSortCallback = jasmine.createSpy('beforeColumnSortHandler');
    handsontable({
      data: [[2], [4], [1], [3]],
      columnSorting: true,
      beforeColumnSort: beforeColumnSortCallback
    });
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    });
    expect(beforeColumnSortCallback.calls.count()).toEqual(1);
    expect(beforeColumnSortCallback).toHaveBeenCalledWith([], [{
      column: 0,
      sortOrder: 'asc'
    }], true, void 0, void 0, void 0);
  });
  it('should fire afterColumnSort event after data has been sorted', function () {
    handsontable({
      data: [[2], [4], [1], [3]],
      columnSorting: true
    });
    var afterColumnSortHandler = jasmine.createSpy('afterColumnSortHandler');
    addHook('afterColumnSort', afterColumnSortHandler);
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    });
    expect(afterColumnSortHandler.calls.count()).toBe(1);
    expect(afterColumnSortHandler).toHaveBeenCalledWith([], [{
      column: 0,
      sortOrder: 'asc'
    }], true, void 0, void 0, void 0);
  });
  it('should add afterColumnSort event listener in constructor', function () {
    var afterColumnSortCallback = jasmine.createSpy('afterColumnSortHandler');
    handsontable({
      data: [[2], [4], [1], [3]],
      columnSorting: true,
      afterColumnSort: afterColumnSortCallback
    });
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    });
    expect(afterColumnSortCallback.calls.count()).toEqual(1);
    expect(afterColumnSortCallback).toHaveBeenCalledWith([], [{
      column: 0,
      sortOrder: 'asc'
    }], true, void 0, void 0, void 0);
  });
  it('should fire hooks with proper hook argument when sorting is not possible', function () {
    var beforeColumnSortCallback = jasmine.createSpy('beforeColumnSort');
    var afterColumnSortCallback = jasmine.createSpy('afterColumnSort');
    handsontable({
      data: [[2], [4], [1], [3]],
      columnSorting: true,
      beforeColumnSort: beforeColumnSortCallback,
      afterColumnSort: afterColumnSortCallback
    });
    getPlugin('columnSorting').sort({
      column: 1000,
      sortOrder: 'asc'
    });
    expect(beforeColumnSortCallback).toHaveBeenCalledWith([], [{
      column: 1000,
      sortOrder: 'asc'
    }], false, void 0, void 0, void 0); // "After" hook always run! Team decision.

    expect(afterColumnSortCallback).toHaveBeenCalledWith([], [], false, void 0, void 0, void 0);
  });
  it('should insert row when plugin is enabled, but table hasn\'t been sorted', function () {
    handsontable({
      data: [[1, 'B'], [0, 'D'], [3, 'A'], [2, 'C']],
      columnSorting: true
    });
    expect(countRows()).toEqual(4);
    alter('insert_row');
    expect(countRows()).toEqual(5);
  });
  it('should apply sorting when there are two tables and only one has sorting enabled and has been already sorted (#1020)', function () {
    handsontable({
      data: [[1, 'B'], [0, 'D'], [3, 'A'], [2, 'C']],
      columnSorting: {
        initialConfig: {
          column: 1,
          sortOrder: 'asc'
        }
      }
    });
    spec().$container2 = $("<div id='".concat(id, "-2'></div>")).appendTo('body');
    spec().$container2.handsontable();
    selectCell(0, 1);
    keyDown('enter');
    expect($('.handsontableInput').val()).toEqual('A');
    spec().$container2.handsontable('destroy');
    spec().$container2.remove();
  });
  it('should return updated data at specyfied row after sorted', function () {
    handsontable({
      data: [[1, 'Ted', 'Right'], [2, 'Frank', 'Honest'], [3, 'Joan', 'Well'], [4, 'Sid', 'Strong'], [5, 'Jane', 'Neat']],
      colHeaders: true,
      rowHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);
    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtRow(0)).toEqual([5, 'Jane', 'Neat']);
    expect(getDataAtRow(4)).toEqual([1, 'Ted', 'Right']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);
    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);
  });
  it('should return updated data at specyfied col after sorted', function () {
    handsontable({
      data: [[1, 'Ted', 'Right'], [2, 'Frank', 'Honest'], [3, 'Joan', 'Well'], [4, 'Sid', 'Strong'], [5, 'Jane', 'Neat']],
      colHeaders: true,
      rowHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);
    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual([5, 4, 3, 2, 1]);
    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Joan', 'Frank', 'Ted']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);
    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);
  });
  it('should return original data source at specified row after sorted', function () {
    handsontable({
      data: [[1, 'Ted', 'Right'], [2, 'Frank', 'Honest'], [3, 'Joan', 'Well'], [4, 'Sid', 'Strong'], [5, 'Jane', 'Neat']],
      colHeaders: true,
      rowHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);
    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);
    expect(getSourceDataAtRow(0)).toEqual([1, 'Ted', 'Right']);
    expect(getSourceDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtRow(0)).toEqual([5, 'Jane', 'Neat']);
    expect(getDataAtRow(4)).toEqual([1, 'Ted', 'Right']);
    expect(getSourceDataAtRow(0)).toEqual([1, 'Ted', 'Right']);
    expect(getSourceDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);
  });
  it('should return original data source at specified col after sorted', function () {
    handsontable({
      data: [[1, 'Ted', 'Right'], [2, 'Frank', 'Honest'], [3, 'Joan', 'Well'], [4, 'Sid', 'Strong'], [5, 'Jane', 'Neat']],
      colHeaders: true,
      rowHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);
    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);
    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);
    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual([5, 4, 3, 2, 1]);
    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Joan', 'Frank', 'Ted']);
    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);
    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);
    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);
    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);
    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);
  });
  it('should ignore case when sorting', function () {
    handsontable({
      data: [[1, 'albuquerque'], [2, 'Alabama'], [3, 'Missouri']],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(1);
    expect(getDataAtCol(0)).toEqual([2, 1, 3]);
    expect(getDataAtCol(1)).toEqual(['Alabama', 'albuquerque', 'Missouri']);
    spec().sortByClickOnColumnHeader(1);
    expect(getDataAtCol(0)).toEqual([3, 1, 2]);
    expect(getDataAtCol(1)).toEqual(['Missouri', 'albuquerque', 'Alabama']);
  });
  it('should push empty cells to the end of sorted column', function () {
    handsontable({
      data: [[1, 'Ted', 'Right'], [2, '', 'Honest'], [3, '', 'Well'], [4, 'Sid', 'Strong'], [5, 'Jane', 'Neat']],
      colHeaders: true,
      rowHeaders: true,
      columnSorting: true,
      minSpareRows: 1
    });
    spec().sortByClickOnColumnHeader(1);
    expect(getDataAtCol(0)).toEqual([5, 4, 1, 2, 3, null]);
    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Ted', '', '', null]);
    spec().sortByClickOnColumnHeader(1);
    expect(getDataAtCol(0)).toEqual([1, 4, 5, 2, 3, null]);
    expect(getDataAtCol(1)).toEqual(['Ted', 'Sid', 'Jane', '', '', null]);
  });
  it('should push numeric values before non-numeric values, when sorting ascending using the default sorting function', function () {
    handsontable({
      data: [[1, 'Ted', 123], [2, '', 'Some'], [3, '', 321], [4, 'Sid', 'String'], [5, 'Jane', 46]],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(2);
    expect(getDataAtCol(2)).toEqual([46, 123, 321, 'Some', 'String']);
    spec().sortByClickOnColumnHeader(2);
    expect(getDataAtCol(2)).toEqual(['String', 'Some', 321, 123, 46]);
  });
  it('should add a sorting indicator to the column header after it\'s been sorted, if indicator property is set to true (by default)', function () {
    handsontable({
      data: [[1, 'Ted', 'Right'], [2, '', 'Honest'], [3, '', 'Well'], [4, 'Sid', 'Strong'], [5, 'Jane', 'Neat']],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(1);
    var sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/); // ---------------------------------
    // INDICATOR SET FOR THE WHOLE TABLE
    // ---------------------------------

    updateSettings({
      columns: function columns() {
        return {
          columnSorting: {
            indicator: true
          }
        };
      }
    });
    spec().sortByClickOnColumnHeader(1); // descending (updateSettings doesn't reset sorting stack)

    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    spec().sortByClickOnColumnHeader(1);
    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);
    spec().sortByClickOnColumnHeader(1); // ascending

    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/); // ---------------------------------
    // INDICATOR SET FOR A SINGLE COLUMN
    // ---------------------------------

    updateSettings({
      columns: function columns(column) {
        if (column === 2) {
          return {
            columnSorting: {
              indicator: false
            }
          };
        }

        return {};
      }
    });
    spec().sortByClickOnColumnHeader(0);
    sortedColumn = spec().$container.find('th span.columnSorting')[0];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    spec().sortByClickOnColumnHeader(1); // descending

    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    spec().sortByClickOnColumnHeader(2);
    sortedColumn = spec().$container.find('th span.columnSorting')[2];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);
  });
  it('should change sorting indicator state on every plugin API method (calling for different columns)', function () {
    handsontable({
      data: [[1, 'Ted', 'Right'], [2, '', 'Honest'], [3, '', 'Well'], [4, 'Sid', 'Strong'], [5, 'Jane', 'Neat']],
      colHeaders: true,
      columnSorting: {
        indicator: true
      }
    });
    getPlugin('columnSorting').sort({
      column: 1,
      sortOrder: 'asc'
    }); // ascending

    var sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    getPlugin('columnSorting').sort({
      column: 2,
      sortOrder: 'asc'
    }); // ascending

    sortedColumn = spec().$container.find('th span.columnSorting')[2];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    getPlugin('columnSorting').sort({
      column: 1,
      sortOrder: 'asc'
    }); // ascending

    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    getPlugin('columnSorting').sort({
      column: 2,
      sortOrder: 'desc'
    }); // descending

    sortedColumn = spec().$container.find('th span.columnSorting')[2];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    getPlugin('columnSorting').sort({
      column: 2,
      sortOrder: 'desc'
    }); // descending

    sortedColumn = spec().$container.find('th span.columnSorting')[2];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    getPlugin('columnSorting').sort({
      column: 2,
      sortOrder: 'asc'
    }); // ascending

    sortedColumn = spec().$container.find('th span.columnSorting')[2];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
  });
  it('should change sorting indicator state when initial column sorting was provided', function () {
    handsontable({
      data: [[1, 'Ted', 'Right'], [2, '', 'Honest'], [3, '', 'Well'], [4, 'Sid', 'Strong'], [5, 'Jane', 'Neat']],
      colHeaders: true,
      columnSorting: {
        indicator: true,
        initialConfig: {
          column: 1,
          sortOrder: 'desc'
        }
      }
    }); // descending

    var sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    getPlugin('columnSorting').sort(); // default

    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);
    getPlugin('columnSorting').sort({
      column: 1,
      sortOrder: 'asc'
    }); // ascending

    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    getPlugin('columnSorting').sort({
      column: 1,
      sortOrder: 'desc'
    }); // descending

    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).toMatch(/url/);
    getPlugin('columnSorting').sort(); // default

    sortedColumn = spec().$container.find('th span.columnSorting')[1];
    expect(window.getComputedStyle(sortedColumn, ':before').getPropertyValue('background-image')).not.toMatch(/url/);
  });
  it('should properly sort the table, when it\'s scrolled to the far right', function () {
    var data = [['Jasmine Ferguson', 'Britney Carey', 'Kelly Decker', 'Lacey Mcleod', 'Leona Shaffer', 'Kelli Ochoa', 'Adele Roberson', 'Viola Snow', 'Barron Cherry', 'Calhoun Lane', 'Elvia Andrews', 'Katheryn Dale', 'Dorthy Hale', 'Munoz Randall', 'Fields Morse', 'Hubbard Nichols', 'Chang Yang', 'Osborn Anthony', 'Owens Warner', 'Gloria Hampton'], ['Lane Hill', 'Belinda Mathews', 'York Gray', 'Celina Stone', 'Victoria Mays', 'Angelina Lott', 'Joyce Mason', 'Shawn Rodriguez', 'Susanna Mayo', 'Wolf Fuller', 'Long Hester', 'Dudley Doyle', 'Wilder Sutton', 'Oneal Avery', 'James Mclaughlin', 'Lenora Guzman', 'Mcmahon Sullivan', 'Abby Weeks', 'Beverly Joseph', 'Rosalind Church'], ['Myrtle Landry', 'Hays Huff', 'Hernandez Benjamin', 'Mclaughlin Garza', 'Franklin Barton', 'Lara Buchanan', 'Ratliff Beck', 'Rosario Munoz', 'Isabelle Dalton', 'Smith Woodard', 'Marjorie Marshall', 'Spears Stein', 'Brianna Bowman', 'Marci Clay', 'Palmer Harrell', 'Ball Levy', 'Shelley Mendoza', 'Morrow Glass', 'Baker Knox', 'Adrian Holman'], ['Trisha Howell', 'Brooke Harrison', 'Anthony Watkins', 'Ellis Cobb', 'Sheppard Dillon', 'Mathis Bray', 'Foreman Burns', 'Lina Glenn', 'Giles Pollard', 'Weiss Ballard', 'Lynnette Smith', 'Flores Kline', 'Graciela Singleton', 'Santiago Mcclure', 'Claudette Battle', 'Nita Holloway', 'Eula Wolfe', 'Pruitt Stokes', 'Felicia Briggs', 'Melba Bradshaw']];
    var hot = handsontable({
      data: data,
      colHeaders: true,
      columnSorting: true
    });
    hot.view.wt.wtOverlays.leftOverlay.scrollTo(15);
    render();
    getPlugin('columnSorting').sort({
      column: 15,
      sortOrder: 'asc'
    });
    expect(getDataAtCell(0, 15)).toEqual('Ball Levy');
    expect(getDataAtCell(1, 15)).toEqual('Hubbard Nichols');
    expect(getDataAtCell(2, 15)).toEqual('Lenora Guzman');
    expect(getDataAtCell(3, 15)).toEqual('Nita Holloway');
    getPlugin('columnSorting').sort({
      column: 15,
      sortOrder: 'desc'
    });
    expect(getDataAtCell(3, 15)).toEqual('Ball Levy');
    expect(getDataAtCell(2, 15)).toEqual('Hubbard Nichols');
    expect(getDataAtCell(1, 15)).toEqual('Lenora Guzman');
    expect(getDataAtCell(0, 15)).toEqual('Nita Holloway');
    getPlugin('columnSorting').sort();
    expect(getDataAtCell(0, 15)).toEqual('Hubbard Nichols');
    expect(getDataAtCell(1, 15)).toEqual('Lenora Guzman');
    expect(getDataAtCell(2, 15)).toEqual('Ball Levy');
    expect(getDataAtCell(3, 15)).toEqual('Nita Holloway');
  });
  it('should allow specifiyng a custom sorting function', function () {
    var data = [['1 inch'], ['1 yard'], ['2 feet'], ['0.2 miles']];

    var compareFunctionFactory = function compareFunctionFactory(sortOrder) {
      return function (value, nextValue) {
        var unitsRatios = {
          inch: 1,
          yard: 36,
          feet: 12,
          miles: 63360
        };
        Handsontable.helper.objectEach(unitsRatios, function (val, prop) {
          if (value.indexOf(prop) > -1) {
            value = parseFloat(value.replace(prop, '')) * val;
            return false;
          }
        });
        Handsontable.helper.objectEach(unitsRatios, function (val, prop) {
          if (nextValue.indexOf(prop) > -1) {
            nextValue = parseFloat(nextValue.replace(prop, '')) * val;
            return false;
          }
        });

        if (value < nextValue) {
          return sortOrder === 'asc' ? -1 : 1;
        } else if (value > nextValue) {
          return sortOrder === 'asc' ? 1 : -1;
        }

        return 0;
      };
    };

    handsontable({
      data: data,
      columns: [{
        columnSorting: {
          compareFunctionFactory: compareFunctionFactory
        }
      }],
      colHeaders: true,
      columnSorting: true
    });
    expect(getDataAtCell(0, 0)).toEqual('1 inch');
    expect(getDataAtCell(1, 0)).toEqual('1 yard');
    expect(getDataAtCell(2, 0)).toEqual('2 feet');
    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'asc'
    });
    expect(getDataAtCell(0, 0)).toEqual('1 inch');
    expect(getDataAtCell(1, 0)).toEqual('2 feet');
    expect(getDataAtCell(2, 0)).toEqual('1 yard');
    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');
    getPlugin('columnSorting').sort({
      column: 0,
      sortOrder: 'desc'
    });
    expect(getDataAtCell(0, 0)).toEqual('0.2 miles');
    expect(getDataAtCell(1, 0)).toEqual('1 yard');
    expect(getDataAtCell(2, 0)).toEqual('2 feet');
    expect(getDataAtCell(3, 0)).toEqual('1 inch');
    getPlugin('columnSorting').sort();
    expect(getDataAtCell(0, 0)).toEqual('1 inch');
    expect(getDataAtCell(1, 0)).toEqual('1 yard');
    expect(getDataAtCell(2, 0)).toEqual('2 feet');
    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');
  });
  it('should properly sort integers with nulls', function () {
    handsontable({
      data: [['12'], [null], ['10'], ['-5'], [null], ['1000']],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual(['-5', '10', '12', '1000', null, null]);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual(['1000', '12', '10', '-5', null, null]);
  });
  it('should properly sort floating points', function () {
    handsontable({
      data: [['0.0561'], ['-10.67'], ['-4.1'], ['-0.01'], ['-127'], ['1000']],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual(['1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127']);
  });
  it('should properly sort floating points with nulls', function () {
    handsontable({
      data: [['0.0561'], ['-10.67'], [null], ['-4.1'], ['-0.01'], [null], ['-127'], ['1000'], [null]],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000', null, null, null]);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual(['1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127', null, null, null]);
  });
  it('should properly sort floating points with non-numerical values', function () {
    handsontable({
      data: [['0.0561'], ['-10.67'], ['a'], ['-4.1'], ['-0.01'], ['b'], ['-127'], ['1000'], ['hello']],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000', 'a', 'b', 'hello']);
    spec().sortByClickOnColumnHeader(0);
    expect(getDataAtCol(0)).toEqual(['hello', 'b', 'a', '1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127']);
  });
  it('should modify row translating process when soring is applied (visual to physical and vice versa)', function () {
    var hot = handsontable({
      data: [[2], [4], [1], [3]],
      colHeaders: true,
      columnSorting: true
    });
    spec().sortByClickOnColumnHeader(0);
    expect(hot.toPhysicalRow(0)).toBe(2);
    expect(hot.toPhysicalRow(1)).toBe(0);
    expect(hot.toPhysicalRow(2)).toBe(3);
    expect(hot.toPhysicalRow(3)).toBe(1);
    expect(hot.toVisualRow(0)).toBe(1);
    expect(hot.toVisualRow(1)).toBe(3);
    expect(hot.toVisualRow(2)).toBe(0);
    expect(hot.toVisualRow(3)).toBe(2);
  });
  describe('should return sorted properly data when maxRows or / and minSpareRow options are set', function () {
    it('maxRows < data.length', function () {
      handsontable({
        data: createSpreadsheetData(9, 9),
        maxRows: 6,
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'desc'
          }
        }
      });
      expect(getDataAtCol(0)).toEqual(['A6', 'A5', 'A4', 'A3', 'A2', 'A1']);
    });
    it('maxRows > data.length', function () {
      handsontable({
        data: createSpreadsheetData(9, 9),
        maxRows: 20,
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'desc'
          }
        }
      });
      expect(getDataAtCol(0)).toEqual(['A9', 'A8', 'A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1']);
    });
    it('minSpareRows is set; maxRows < data.length', function () {
      handsontable({
        data: createSpreadsheetData(9, 9),
        maxRows: 5,
        minSpareRows: 3,
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'desc'
          }
        }
      });
      expect(getDataAtCol(0)).toEqual(['A5', 'A4', 'A3', 'A2', 'A1']);
    });
    it('minSpareRows is set; maxRows === data.length', function () {
      handsontable({
        data: createSpreadsheetData(6, 6),
        maxRows: 9,
        minSpareRows: 3,
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'desc'
          }
        }
      });
      expect(getDataAtCol(0)).toEqual(['A6', 'A5', 'A4', 'A3', 'A2', 'A1', null, null, null]);
    });
    it('minSpareRows is set; maxRows > data.length', function () {
      handsontable({
        data: createSpreadsheetData(9, 9),
        maxRows: 15,
        minSpareRows: 2,
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'desc'
          }
        }
      });
      expect(getDataAtCol(0)).toEqual(['A9', 'A8', 'A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', null, null]);
    });
  }); // DIFF - MultiColumnSorting & ColumnSorting: removed group of tests named: "Sorting by multiple columns should reorganize sequence of rows properly".
  // DIFF - MultiColumnSorting & ColumnSorting: removed group of tests named: "Numbers presenting sorting sequence".

  describe('Sorting configuration validation', function () {
    describe('should not change internal state of sorting when wrong configuration was provided', function () {
      // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.
      it('when too low column index was passed to the initial config', function () {
        handsontable({
          data: createSpreadsheetData(10, 10),
          colHeaders: true,
          columnSorting: {
            indicator: true,
            initialConfig: {
              column: -1,
              sortOrder: 'asc'
            }
          }
        });
        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);
      }); // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.

      it('when too high column index was passed to the initial config', function () {
        handsontable({
          data: createSpreadsheetData(10, 10),
          colHeaders: true,
          columnSorting: {
            indicator: true,
            initialConfig: {
              column: 100,
              sortOrder: 'asc'
            }
          }
        });
        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);
      }); // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.

      it('when not proper sort order was passed to the initial config', function () {
        handsontable({
          data: createSpreadsheetData(10, 10),
          colHeaders: true,
          columnSorting: {
            indicator: true,
            initialConfig: {
              column: 1,
              sortOrder: 'unknown'
            }
          }
        });
        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);
      }); // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.

      it('when missed sort order was passed to the initial config', function () {
        handsontable({
          data: createSpreadsheetData(10, 10),
          colHeaders: true,
          columnSorting: {
            indicator: true,
            initialConfig: {
              column: 1
            }
          }
        });
        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);
      }); // DIFF - MultiColumnSorting & ColumnSorting: change in initial sort config.

      it('when missed column index was passed to the initial config', function () {
        handsontable({
          data: createSpreadsheetData(10, 10),
          colHeaders: true,
          columnSorting: {
            indicator: true,
            initialConfig: {
              sortOrder: 'desc'
            }
          }
        });
        expect(getPlugin('columnSorting').getSortConfig()).toEqual([]);
      }); // DIFF - MultiColumnSorting & ColumnSorting: removed test named: "when the same column index was passed twice to the initial config".
    });
  }); // DIFF - MultiColumnSorting & ColumnSorting: removed group of tests named: "Sorting more than one column by clicks".

  describe('Click on the header sort data', function () {
    var HEADER_ACTION_CLASS = 'sortAction';
    it('should block action for specific configuration', function () {
      handsontable({
        data: arrayOfArrays(),
        columns: [{
          columnSorting: {
            headerAction: false
          }
        }, {}, {
          type: 'date',
          dateFormat: 'MM/DD/YYYY'
        }, {
          type: 'numeric'
        }, {}],
        colHeaders: true,
        columnSorting: {
          headerAction: true
        }
      });
      var $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');
      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeFalsy();
      spec().sortByClickOnColumnHeader(0);
      expect(getDataAtCol(0)).toEqual(['Mary', 'Henry', 'Ann', 'Robert', 'Ann', 'David', 'John', 'Mary', 'Robert']);
    });
    it('should not sort table by right click', function () {
      var hot = handsontable({
        data: arrayOfArrays(),
        colHeaders: true,
        columnSorting: true
      });
      var $columnHeader = $(hot.view.wt.wtTable.getColumnHeader(0));
      var $spanInsideHeader = $columnHeader.find('.columnSorting');
      $spanInsideHeader.simulate('mousedown', {
        button: 2
      });
      $spanInsideHeader.simulate('click');
      $spanInsideHeader.simulate('mouseup', {
        button: 2
      });
      expect(getData()).toEqual(arrayOfArrays());
    });
    it('should not block action for specific configuration updated by `updateSettings`', function () {
      handsontable({
        data: arrayOfArrays(),
        columns: [{
          columnSorting: {
            headerAction: false
          }
        }, {}, {
          type: 'date',
          dateFormat: 'MM/DD/YYYY'
        }, {
          type: 'numeric'
        }, {}],
        colHeaders: true,
        columnSorting: {
          headerAction: true
        }
      });
      var $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');
      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeFalsy();
      updateSettings({
        columns: function columns() {
          return {
            type: 'text'
          };
        }
      });
      $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');
      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeTruthy();
      spec().sortByClickOnColumnHeader(0);
      expect(getDataAtCol(0)).toEqual(['Ann', 'Ann', 'David', 'Henry', 'John', 'Mary', 'Mary', 'Robert', 'Robert']);
    });
    it('should block action for specific configuration updated by `updateSettings`', function () {
      handsontable({
        data: arrayOfArrays(),
        columns: [{}, {}, {
          type: 'date',
          dateFormat: 'MM/DD/YYYY'
        }, {
          type: 'numeric'
        }, {}],
        colHeaders: true,
        columnSorting: true
      });
      var $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');
      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeTruthy();
      updateSettings({
        columnSorting: {
          headerAction: false
        }
      });
      $clickedHeader = spec().$container.find('th span.columnSorting:eq(0)');
      expect($clickedHeader.hasClass(HEADER_ACTION_CLASS)).toBeFalsy();
      spec().sortByClickOnColumnHeader(0);
      expect(getDataAtCol(0)).toEqual(['Mary', 'Henry', 'Ann', 'Robert', 'Ann', 'David', 'John', 'Mary', 'Robert']);
    });
  });
  describe('rendering headers', function () {
    it('should change width of multi-line headers when plugin is enabled / disabled by `updateSettings` and sort indicator is enabled', function () {
      handsontable({
        colHeaders: ['AAA<br>BB']
      });
      var headerWidthAtStart = spec().$container.find('th').eq(0).width();
      updateSettings({
        columnSorting: true
      });
      var newHeaderWidth = spec().$container.find('th').eq(0).width();
      expect(headerWidthAtStart).toBeLessThan(newHeaderWidth);
      updateSettings({
        columnSorting: false
      });
      newHeaderWidth = spec().$container.find('th').eq(0).width();
      expect(headerWidthAtStart).toBe(newHeaderWidth);
      updateSettings({
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'asc'
          }
        }
      });
      newHeaderWidth = spec().$container.find('th').eq(0).width();
      expect(headerWidthAtStart).toBeLessThan(newHeaderWidth);
    });
    it('should work properly also when `rowHeaders` option is set to `true`', function () {
      handsontable({
        colHeaders: ['AAA<br>BB'],
        rowHeaders: true
      });
      spec().$container[0].style.width = 'auto';
      spec().$container[0].style.height = 'auto';
      var wtHiderWidthAtStart = spec().$container.find('.wtHider').eq(0).width();
      var htCoreWidthAtStart = spec().$container.find('.htCore').eq(0).width();
      updateSettings({
        columnSorting: true
      });
      var newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();
      var newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();
      expect(wtHiderWidthAtStart).toBeLessThan(newWtHiderWidth);
      expect(htCoreWidthAtStart).toBeLessThan(newHtCoreWidth);
      expect(newWtHiderWidth).toBe(newHtCoreWidth);
      updateSettings({
        columnSorting: false
      });
      newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();
      newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();
      expect(wtHiderWidthAtStart).toBe(newWtHiderWidth);
      expect(htCoreWidthAtStart).toBe(newHtCoreWidth);
      expect(newWtHiderWidth).toBe(newHtCoreWidth);
      updateSettings({
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'asc'
          }
        }
      });
      newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();
      newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();
      expect(wtHiderWidthAtStart).toBeLessThan(newWtHiderWidth);
      expect(htCoreWidthAtStart).toBeLessThan(newHtCoreWidth);
      expect(newWtHiderWidth).toBe(newHtCoreWidth);
    });
    it('should not change width of multi-line headers when plugin is enabled / disabled and sort indicator is disabled',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        colHeaders: ['AAA<br>BB']
      });
      var headerWidthAtStart = spec().$container.find('th').eq(0).width();
      var wtHiderWidthAtStart = spec().$container.find('.wtHider').eq(0).width();
      var htCoreWidthAtStart = spec().$container.find('.htCore').eq(0).width();
      updateSettings({
        columnSorting: {
          indicator: false
        }
      });
      yield sleep(100);
      var newHeaderWidth = spec().$container.find('th').eq(0).width();
      var newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();
      var newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();
      expect(headerWidthAtStart).toBe(newHeaderWidth);
      expect(wtHiderWidthAtStart).toBe(newWtHiderWidth);
      expect(htCoreWidthAtStart).toBe(newHtCoreWidth);
      updateSettings({
        columnSorting: false
      });
      yield sleep(100);
      newHeaderWidth = spec().$container.find('th').eq(0).width();
      newWtHiderWidth = spec().$container.find('.wtHider').eq(0).width();
      newHtCoreWidth = spec().$container.find('.htCore').eq(0).width();
      expect(headerWidthAtStart).toBe(newHeaderWidth);
      expect(wtHiderWidthAtStart).toBe(newWtHiderWidth);
      expect(htCoreWidthAtStart).toBe(newHtCoreWidth);
    }));
  });
  describe('index mappers', function () {
    it('should not map indexes when already sorted column was set to not sorted', function () {
      var hot = handsontable({
        colHeaders: true,
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        columnSorting: {
          initialConfig: {
            column: 0,
            sortOrder: 'desc'
          }
        }
      });
      updateSettings({
        columnSorting: {
          initialConfig: []
        }
      });
      expect(hot.toVisualRow(0)).toEqual(0);
    });
  }); // TODO: Remove tests when workaround will be removed.

  describe('workaround regression check', function () {
    it('should not break the dataset when inserted new row', function () {
      handsontable({
        colHeaders: true,
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        columnSorting: true
      });
      alter('insert_row', 2);
      expect(getData()).toEqual([['A1', 'B1', 'C1'], ['A2', 'B2', 'C2'], [null, null, null], ['A3', 'B3', 'C3']]);
    });
    it('should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)', function () {
      spec().$container[0].style.width = 'auto';
      spec().$container[0].style.height = 'auto';
      handsontable({
        colHeaders: true,
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        columnSorting: true
      });
      alter('insert_col', 2, 5);
      expect(getHtCore().find('tbody tr:eq(0) td').length).toEqual(7);
    });
  });
});

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('Comments', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('Enabling the plugin', function () {
    it('should enable the plugin in the initial config', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true
      });
      expect(hot.getPlugin('comments').isEnabled()).toBe(true);
    });
    it('should enable the plugin using updateSettings', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4)
      });
      expect(hot.getPlugin('comments').isEnabled()).toBe(false);
      updateSettings({
        comments: true
      });
      expect(hot.getPlugin('comments').isEnabled()).toBe(true);
    });
  });
  describe('updateSettings', function () {
    it('should change delay, after which comment is showed #4323',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var rows = 10;
      var columns = 10;
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(rows, columns),
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        comments: true,
        columns: function columns() {
          return {
            comment: {
              value: 'test'
            }
          };
        }
      });
      var plugin = hot.getPlugin('comments');
      var editor = plugin.editor.getInputElement();
      updateSettings({
        comments: {
          displayDelay: 100
        }
      });
      $(getCell(1, 1)).simulate('mouseover', {
        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,
        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5
      });
      yield sleep(300);
      expect(editor.parentNode.style.display).toEqual('block');
    }));
  });
  describe('Styling', function () {
    it('should display comment indicators in the appropriate cells', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true,
        cell: [{
          row: 1,
          col: 1,
          comment: {
            value: 'test'
          }
        }, {
          row: 2,
          col: 2,
          comment: {
            value: 'test'
          }
        }]
      });
      expect(getCell(1, 1).className.indexOf('htCommentCell')).toBeGreaterThan(-1);
      expect(getCell(2, 2).className.indexOf('htCommentCell')).toBeGreaterThan(-1);
    });
  });
  describe('Displaying comment after `mouseover` event', function () {
    it('should display comment after predefined delay when custom `displayDelay` ' + 'option of `comments` plugin wasn\'t set', function (done) {
      var rows = 10;
      var columns = 10;
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(rows, columns),
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        comments: true,
        columns: function columns() {
          return {
            comment: {
              value: 'test'
            }
          };
        }
      });
      $(getCell(1, 1)).simulate('mouseover', {
        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,
        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5
      });
      var plugin = hot.getPlugin('comments');
      var editor = plugin.editor.getInputElement();
      setTimeout(function () {
        expect(editor.parentNode.style.display).toEqual('block');
        done();
      }, 300);
    });
    it('should display comment after defined delay when custom `displayDelay` ' + 'option of `comments` plugin was set', function (done) {
      var rows = 10;
      var columns = 10;
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(rows, columns),
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        comments: {
          displayDelay: 400
        },
        columns: function columns() {
          return {
            comment: {
              value: 'test'
            }
          };
        }
      });
      $(getCell(1, 1)).simulate('mouseover', {
        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,
        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5
      });
      var plugin = hot.getPlugin('comments');
      var editor = plugin.editor.getInputElement();
      setTimeout(function () {
        expect(editor.parentNode.style.display).toEqual('none');
      }, 300);
      setTimeout(function () {
        expect(editor.parentNode.style.display).toEqual('block');
        done();
      }, 450);
    });
  });
  describe('API', function () {
    it('should return the comment from a proper cell, when using the getCommentAtCell method', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: {
          displayDelay: 400
        },
        cell: [{
          row: 1,
          col: 1,
          comment: {
            value: 'test'
          }
        }, {
          row: 2,
          col: 2,
          comment: {
            value: 'another test'
          }
        }]
      });
      var plugin = hot.getPlugin('comments');
      expect(plugin.getCommentAtCell(1, 1)).toEqual('test');
      expect(plugin.getCommentAtCell(2, 2)).toEqual('another test');
    });
    it('should return the comment from a proper cell, when using the setRange and getComment methods', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true,
        cell: [{
          row: 1,
          col: 1,
          comment: {
            value: 'test'
          }
        }, {
          row: 2,
          col: 2,
          comment: {
            value: 'another test'
          }
        }]
      });
      var plugin = hot.getPlugin('comments');
      plugin.setRange({
        from: {
          row: 1,
          col: 1
        }
      });
      expect(plugin.getComment()).toEqual('test');
      plugin.setRange({
        from: {
          row: 2,
          col: 2
        }
      });
      expect(plugin.getComment()).toEqual('another test');
    });
    it('should allow inserting comments using the `setCommentAtCell` method', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true
      });
      var plugin = hot.getPlugin('comments');
      expect(getCellMeta(1, 1).comment).toEqual(void 0);
      plugin.setCommentAtCell(1, 1, 'test comment');
      expect(getCellMeta(1, 1).comment.value).toEqual('test comment');
    });
    it('should trigger `afterSetCellMeta` callback when `setCommentAtCell` function is invoked', function () {
      var afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true,
        afterSetCellMeta: afterSetCellMetaCallback
      });
      var plugin = hot.getPlugin('comments');
      plugin.setCommentAtCell(1, 1, 'Added comment');
      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', {
        value: 'Added comment'
      }, undefined, undefined);
    });
    it('should allow removing comments using the `removeCommentAtCell` method', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true,
        cell: [{
          row: 1,
          col: 1,
          comment: {
            value: 'test'
          }
        }]
      });
      var plugin = hot.getPlugin('comments');
      expect(getCellMeta(1, 1).comment.value).toEqual('test');
      plugin.removeCommentAtCell(1, 1);
      expect(getCellMeta(1, 1).comment).toEqual(void 0);
    });
    it('should trigger `afterSetCellMeta` callback when `removeCommentAtCell` function is invoked', function () {
      var afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true,
        cell: [{
          row: 1,
          col: 1,
          comment: {
            value: 'test'
          }
        }],
        afterSetCellMeta: afterSetCellMetaCallback
      });
      var plugin = hot.getPlugin('comments');
      plugin.removeCommentAtCell(1, 1);
      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', undefined, undefined, undefined);
    });
    it('should allow opening the comment editor using the `showAtCell` method', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true
      });
      var plugin = hot.getPlugin('comments');
      var editor = plugin.editor.getInputElement();
      expect(editor.parentNode.style.display).toEqual('none');
      plugin.showAtCell(1, 1);
      expect(editor.parentNode.style.display).toEqual('block');
    });
    it('should allow closing the comment editor using the `hide` method', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        comments: true
      });
      var plugin = hot.getPlugin('comments');
      var editor = plugin.editor.getInputElement();
      plugin.showAtCell(1, 1);
      expect(editor.parentNode.style.display).toEqual('block');
      plugin.hide();
      expect(editor.parentNode.style.display).toEqual('none');
    });
  });
  it('`updateCommentMeta` & `setComment` functions should extend cellMetaObject properly', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      comments: true
    });
    var plugin = hot.getPlugin('comments');
    var readOnly;
    var comment;
    setCellMeta(0, 0, 'comment', {
      readOnly: true
    });
    plugin.updateCommentMeta(0, 0, {
      value: 'Test'
    });
    comment = getCellMeta(0, 0).comment;
    readOnly = comment && comment.readOnly;
    expect(readOnly).toEqual(true);
    plugin.setRange({
      from: {
        row: 0,
        col: 0
      },
      to: {
        row: 0,
        col: 0
      }
    });
    plugin.setComment('Test2');
    comment = getCellMeta(0, 0).comment;
    readOnly = comment && comment.readOnly;
    expect(readOnly).toEqual(true);
  });
  it('should not close the comment editor immediately after opening #4323',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      contextMenu: true,
      comments: {
        displayDelay: 0
      }
    });
    selectCell(1, 1);
    contextMenu();
    var addCommentButton = $('.htItemWrapper').filter(function () {
      return $(this).text() === 'Add comment';
    })[0];
    $(addCommentButton).simulate('mouseover', {
      clientX: Handsontable.dom.offset(addCommentButton).left + 5,
      clientY: Handsontable.dom.offset(addCommentButton).top + 5
    });
    $(addCommentButton).simulate('mousedown');
    var editor = hot.getPlugin('comments').editor.getInputElement();
    yield sleep(300);
    expect($(editor).parents('.htComments')[0].style.display).toEqual('block');
  }));
  describe('Using the Context Menu', function () {
    it('should open the comment editor when clicking the "Add comment" entry', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        comments: true
      });
      selectCell(1, 1);
      contextMenu();
      var addCommentButton = $('.htItemWrapper').filter(function () {
        return $(this).text() === 'Add comment';
      })[0];
      $(addCommentButton).simulate('mousedown');
      var editor = hot.getPlugin('comments').editor.getInputElement();
      expect($(editor).parents('.htComments')[0].style.display).toEqual('block');
    });
    it('should remove the comment from a cell after clicking the "Delete comment" entry', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        comments: true,
        cell: [{
          row: 1,
          col: 1,
          comment: {
            value: 'Test comment'
          }
        }]
      });
      expect(getCellMeta(1, 1).comment.value).toEqual('Test comment');
      selectCell(1, 1);
      contextMenu();
      var deleteCommentButton = $('.htItemWrapper').filter(function () {
        return $(this).text() === 'Delete comment';
      })[0];
      $(deleteCommentButton).simulate('mousedown');
      expect(getCellMeta(1, 1).comment).toEqual(void 0);
    });
    it('should remove comments from a selected group of cells after clicking the "Delete comment" entry', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        comments: true,
        cell: [{
          row: 1,
          col: 1,
          comment: {
            value: 'Test comment'
          }
        }, {
          row: 2,
          col: 2,
          comment: {
            value: 'Test comment 2'
          }
        }]
      });
      expect(getCellMeta(1, 1).comment.value).toEqual('Test comment');
      expect(getCellMeta(2, 2).comment.value).toEqual('Test comment 2');
      selectCell(1, 1, 2, 2);
      contextMenu();
      var deleteCommentButton = $('.htItemWrapper').filter(function () {
        return $(this).text() === 'Delete comment';
      })[0];
      $(deleteCommentButton).simulate('mousedown');
      expect(getCellMeta(1, 1).comment).toEqual(void 0);
      expect(getCellMeta(2, 2).comment).toEqual(void 0);
    });
    it('should make the comment editor\'s textarea read-only after clicking the "Read-only comment" entry', function (done) {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        comments: true,
        cell: [{
          row: 1,
          col: 1,
          comment: {
            value: 'Test comment'
          }
        }]
      });
      selectCell(1, 1);
      contextMenu();
      var editor = hot.getPlugin('comments').editor.getInputElement();
      expect($(editor)[0].readOnly).toBe(false);
      var readOnlyComment = $('.htItemWrapper').filter(function () {
        return $(this).text() === 'Read-only comment';
      })[0];
      $(readOnlyComment).simulate('mousedown');
      $(document).simulate('mouseup');
      $(getCell(1, 1)).simulate('mouseover', {
        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,
        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5
      });
      setTimeout(function () {
        expect($(editor)[0].readOnly).toBe(true);
        done();
      }, 550);
    });
  });
  describe('Hooks invoked after changing cell meta', function () {
    it('should trigger `afterSetCellMeta` callback after deleting comment by context menu', function () {
      var afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        comments: true,
        columns: function columns() {
          return {
            comment: {
              value: 'test'
            }
          };
        },
        afterSetCellMeta: afterSetCellMetaCallback
      });
      expect(afterSetCellMetaCallback).not.toHaveBeenCalled();
      selectCell(1, 1);
      contextMenu();
      var deleteCommentButton = $('.htItemWrapper').filter(function () {
        return $(this).text() === 'Delete comment';
      })[0];
      $(deleteCommentButton).simulate('mousedown');
      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', undefined, undefined, undefined);
    });
    it('should trigger `afterSetCellMeta` callback after editing comment by context menu',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        comments: true,
        columns: function columns() {
          return {
            comment: {
              value: 'test'
            }
          };
        },
        afterSetCellMeta: afterSetCellMetaCallback
      });
      selectCell(0, 0);
      contextMenu();
      var editCommentButton = $('.htItemWrapper').filter(function () {
        return $(this).text() === 'Edit comment';
      })[0];
      $(editCommentButton).simulate('mousedown');
      $(editCommentButton).simulate('mouseup');
      var textarea = spec().$container[0].parentNode.querySelector('.htCommentTextArea');
      textarea.focus();
      textarea.value = 'Edited comment';
      yield sleep(100);
      $('body').simulate('mousedown');
      $('body').simulate('mouseup');
      textarea.blur();
      yield sleep(400);
      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(0, 0, 'comment', {
        value: 'Edited comment'
      }, undefined, undefined);
    }));
  });
});

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('ContextMenu', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should update context menu items by calling `updateSettings` method',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      contextMenu: ['row_above', 'row_below', '---------', 'remove_row'],
      height: 100
    });
    contextMenu();
    var items = $('.htContextMenu tbody td');
    var actions = items.not('.htSeparator');
    var separators = items.filter('.htSeparator');
    expect(actions.length).toEqual(3);
    expect(separators.length).toEqual(1);
    expect(actions.text()).toEqual(['Insert row above', 'Insert row below', 'Remove row'].join(''));
    updateSettings({
      contextMenu: ['remove_row']
    });
    yield sleep(300);
    contextMenu();
    items = $('.htContextMenu tbody td');
    actions = items.not('.htSeparator');
    separators = items.filter('.htSeparator');
    expect(actions.length).toEqual(1);
    expect(separators.length).toEqual(0);
    expect(actions.text()).toEqual(['Remove row'].join(''));
    updateSettings({
      contextMenu: {
        items: {
          remove_col: true,
          hsep1: '---------',
          custom: {
            name: 'My custom item'
          }
        }
      }
    });
    yield sleep(300);
    contextMenu();
    items = $('.htContextMenu tbody td');
    actions = items.not('.htSeparator');
    separators = items.filter('.htSeparator');
    expect(actions.length).toEqual(2);
    expect(separators.length).toEqual(1);
    expect(actions.text()).toEqual(['Remove column', 'My custom item'].join(''));
  }));
  describe('menu width', function () {
    it('should display the menu with the minimum width',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        contextMenu: {
          items: {
            custom1: {
              name: 'a'
            },
            custom2: {
              name: 'b'
            }
          }
        }
      });
      var $menu = $('.htContextMenu');
      contextMenu();
      yield sleep(300);
      expect($menu.find('.wtHider').width()).toEqual(215);
    }));
    it('should expand menu when one of items is wider then default width of the menu',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        contextMenu: {
          items: {
            custom1: {
              name: 'a'
            },
            custom2: {
              name: 'This is very long text which should expand the context menu...'
            }
          }
        }
      });
      var $menu = $('.htContextMenu');
      contextMenu();
      yield sleep(300);
      expect($menu.find('.wtHider').width()).toBeGreaterThan(215);
    }));
    it('should display a submenu with the minimum width',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        contextMenu: {
          items: {
            custom1: {
              name: 'a'
            },
            custom2: {
              name: function name() {
                return 'Menu';
              },
              submenu: {
                items: [{
                  name: function name() {
                    return 'Submenu';
                  }
                }]
              }
            }
          }
        }
      });
      contextMenu();
      yield sleep(300);
      var $item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(1);
      $item.simulate('mouseover');
      yield sleep(300);
      var $contextSubMenu = $(".htContextMenuSub_".concat($item.text()));
      expect($contextSubMenu.find('.wtHider').width()).toEqual(215);
    }));
  });
  describe('menu opening', function () {
    it('should open menu after right click on table cell', function () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      expect(getPlugin('contextMenu')).toBeDefined();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
    it('should finish selection after right click on table cell', function () {
      var hot = handsontable({
        contextMenu: true
      });
      var cell = getCell(0, 0);
      var cellOffset = $(cell).offset();
      $(cell).simulate('mousedown', {
        button: 2
      });
      $(cell).simulate('contextmenu', {
        clientX: cellOffset.left - Handsontable.dom.getWindowScrollLeft(),
        clientY: cellOffset.top - Handsontable.dom.getWindowScrollTop()
      });
      expect(hot.selection.isInProgress()).toBe(false);
    });
    it('should call every selection hooks after right click on table cell', function () {
      handsontable({
        contextMenu: true
      });
      var afterSelectionCallback = jasmine.createSpy('afterSelectionCallback');
      var afterSelectionByPropCallback = jasmine.createSpy('afterSelectionByPropCallback');
      var afterSelectionEndCallback = jasmine.createSpy('afterSelectionEndCallback');
      var afterSelectionEndByPropCallback = jasmine.createSpy('afterSelectionEndByPropCallback');
      addHook('afterSelection', afterSelectionCallback);
      addHook('afterSelectionByProp', afterSelectionByPropCallback);
      addHook('afterSelectionEnd', afterSelectionEndCallback);
      addHook('afterSelectionEndByProp', afterSelectionEndByPropCallback);
      var cell = getCell(0, 0);
      var cellOffset = $(cell).offset();
      $(cell).simulate('mousedown', {
        button: 2
      });
      $(cell).simulate('contextmenu', {
        clientX: cellOffset.left - Handsontable.dom.getWindowScrollLeft(),
        clientY: cellOffset.top - Handsontable.dom.getWindowScrollTop()
      });
      expect(afterSelectionCallback.calls.count()).toEqual(1);
      expect(afterSelectionByPropCallback.calls.count()).toEqual(1);
      expect(afterSelectionEndCallback.calls.count()).toEqual(1);
      expect(afterSelectionEndByPropCallback.calls.count()).toEqual(1);
      expect(afterSelectionCallback).toHaveBeenCalledWith(0, 0, 0, 0, jasmine.any(Object), 0);
      expect(afterSelectionByPropCallback).toHaveBeenCalledWith(0, 0, 0, 0, jasmine.any(Object), 0);
      expect(afterSelectionEndCallback).toHaveBeenCalledWith(0, 0, 0, 0, 0, void 0);
      expect(afterSelectionEndByPropCallback).toHaveBeenCalledWith(0, 0, 0, 0, 0, void 0);
    });
    it('should not open the menu after clicking an open editor', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      selectCell(2, 2);
      keyDownUp('enter');
      expect(getPlugin('contextMenu')).toBeDefined();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu(getActiveEditor().TEXTAREA);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should open menu after right click on header cell when only header cells are visible', function () {
      var hot = handsontable({
        data: [],
        colHeaders: ['Year', 'Kia'],
        columns: [{
          data: 0
        }, {
          data: 1
        }],
        contextMenu: true,
        height: 100
      });
      expect(hot.getPlugin('contextMenu')).toBeDefined();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu(hot.rootElement.querySelector('.ht_clone_top thead th'));
      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
    it('should open menu after right click on selected column header (the current selection should not be changed)', function () {
      var hot = handsontable({
        data: createSpreadsheetData(5, 10),
        colHeaders: true,
        rowHeaders: true,
        contextMenu: true,
        height: 100
      });
      selectColumns(1, 4);
      expect(hot.getPlugin('contextMenu')).toBeDefined();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu(hot.rootElement.querySelector('.ht_clone_top thead th:nth-child(4)'));
      expect($('.htContextMenu').is(':visible')).toBe(true);
      expect("\n        |   \u2551   : * : * : * : * :   :   :   :   :   |\n        |===:===:===:===:===:===:===:===:===:===:===|\n        | - \u2551   : A : 0 : 0 : 0 :   :   :   :   :   |\n        | - \u2551   : 0 : 0 : 0 : 0 :   :   :   :   :   |\n        | - \u2551   : 0 : 0 : 0 : 0 :   :   :   :   :   |\n        | - \u2551   : 0 : 0 : 0 : 0 :   :   :   :   :   |\n        | - \u2551   : 0 : 0 : 0 : 0 :   :   :   :   :   |\n        ").toBeMatchToSelectionPattern();
    });
    it('should open menu after right click on selected row header (the current selection should not be changed)', function () {
      var hot = handsontable({
        data: createSpreadsheetData(5, 10),
        colHeaders: true,
        rowHeaders: true,
        contextMenu: true,
        height: 100
      });
      selectRows(1, 3);
      expect(hot.getPlugin('contextMenu')).toBeDefined();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu(hot.rootElement.querySelector('.ht_clone_left tbody tr:nth-child(3) th'));
      expect($('.htContextMenu').is(':visible')).toBe(true);
      expect("\n        |   \u2551 - : - : - : - : - : - : - : - : - : - |\n        |===:===:===:===:===:===:===:===:===:===:===|\n        |   \u2551   :   :   :   :   :   :   :   :   :   |\n        | * \u2551 A : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 |\n        | * \u2551 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 |\n        | * \u2551 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 |\n        |   \u2551   :   :   :   :   :   :   :   :   :   |\n        ").toBeMatchToSelectionPattern();
    });
    it('should open menu after right click on header corner', function () {
      var hot = handsontable({
        data: [],
        colHeaders: true,
        rowHeaders: true,
        contextMenu: true,
        height: 100
      });
      expect(hot.getPlugin('contextMenu')).toBeDefined();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu(hot.rootElement.querySelector('.ht_clone_top_left_corner thead th'));
      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
    it('should open menu after right click active cell border', function () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      expect(getPlugin('contextMenu')).toBeDefined();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      selectCell(0, 0);
      spec().$container.find('.wtBorder.current:eq(0)').simulate('contextmenu');
      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
  });
  describe('menu closing', function () {
    it('should close menu after click', function () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      mouseDown(spec().$container);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should close menu after click under the menu', function () {
      handsontable({
        data: createSpreadsheetData(500, 10),
        contextMenu: true,
        height: 500
      });
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      var rect = $('.htContextMenu')[0].getBoundingClientRect();
      var x = parseInt(rect.left + rect.width / 2, 10);
      var y = parseInt(rect.top + rect.height, 10);
      mouseDown(document.elementFromPoint(x, y));
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
  });
  describe('menu disabled', function () {
    it('should not open menu after right click', function () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      getPlugin('contextMenu').disablePlugin();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should not create context menu if it\'s disabled in constructor options', function () {
      handsontable({
        contextMenu: false,
        height: 100
      });
      expect(getPlugin('contextMenu').isEnabled()).toBe(false);
    });
    it('should reenable menu',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      var plugin = getPlugin('contextMenu');
      plugin.disablePlugin();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(false);
      plugin.enablePlugin();
      yield sleep(300);
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
    }));
    it('should reenable menu with updateSettings when it was disabled in constructor', function () {
      handsontable({
        contextMenu: false,
        height: 100
      });
      var plugin = getPlugin('contextMenu');
      expect(plugin.isEnabled()).toBe(false);
      updateSettings({
        contextMenu: true
      });
      expect(plugin.isEnabled()).toBe(true);
      expect($('.htContextMenu').is(':visible')).toBe(false);
      contextMenu();
      setTimeout(function () {
        expect($('.htContextMenu').is(':visible')).toBe(true);
      }, 300);
    });
    it('should disable menu with updateSettings when it was enabled in constructor', function () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      var plugin = getPlugin('contextMenu');
      expect(plugin.isEnabled()).toBe(true);
      updateSettings({
        contextMenu: false
      });
      expect(plugin.isEnabled()).toBe(false);
    });
    it('should work properly (remove row) after destroy and new init', function () {
      var test = function test() {
        handsontable({
          startRows: 5,
          contextMenu: ['remove_row'],
          height: 100
        });
        selectCell(0, 0);
        contextMenu();
        var action = $('.htContextMenu .ht_master .htCore tbody').find('td').not('.htSeparator').eq(0);
        action.simulate('mousedown');
        expect(getData().length).toEqual(4);
      };

      test();
      destroy();
      test();
    });
  });
  describe('menu hidden items', function () {
    it('should remove separators from top, bottom and duplicated', function () {
      handsontable({
        contextMenu: ['---------', '---------', 'row_above', '---------', '---------', 'row_below', '---------', 'remove_row'],
        height: 100
      });
      contextMenu();
      var items = $('.htContextMenu tbody td');
      var actions = items.not('.htSeparator');
      var separators = items.filter('.htSeparator');
      expect(actions.length).toEqual(3);
      expect(separators.length).toEqual(2);
    });
    it('should hide option if hidden function return true', function () {
      handsontable({
        startCols: 5,
        colHeaders: true,
        contextMenu: [{
          key: '',
          name: 'Custom option',
          hidden: function hidden() {
            return !this.selection.isSelectedByColumnHeader();
          }
        }]
      });
      contextMenu();
      var items = $('.htContextMenu tbody td');
      var actions = items.not('.htSeparator');
      expect(actions.length).toEqual(0);
      var header = $('.ht_clone_top thead th').eq(1);
      header.simulate('mousedown');
      header.simulate('mouseup');
      contextMenu();
      items = $('.htContextMenu tbody td');
      actions = items.not('.htSeparator');
      expect(actions.length).toEqual(1);
    });
  });
  describe('menu destroy', function () {
    it('should close context menu when HOT is being destroyed', function () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      destroy();
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
  });
  describe('subMenu', function () {
    it('should not open subMenu immediately', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text())).find('tbody td');
      expect(contextSubMenu.length).toEqual(0);
    });
    it('should open subMenu with delay',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(300);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      expect(contextSubMenu.length).toEqual(1);
    }));
    it('should NOT open subMenu if there is no subMenu for item', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(8);
      item.simulate('mouseover');
      expect(item.hasClass('htSubmenu')).toBe(false);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      expect(contextSubMenu.length).toEqual(0);
    });
    it('should not throw error when opening multi-level menu with name declared as `function` #4550',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var spy = spyOn(window, 'onerror');
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: {
          items: {
            alignment: {
              name: function name() {
                return 'Alignment';
              },
              submenu: {
                items: [{
                  key: 'alignment:left',
                  name: 'Align to LEFT'
                }]
              }
            }
          }
        }
      });
      contextMenu();
      var $submenu = $('.htSubmenu');
      $submenu.simulate('mouseover');
      yield sleep(350);
      expect(spy).not.toHaveBeenCalled();
    }));
    it('should not throw error when opening multi-level menu with name declared as `function` which return value not castable to string',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var spy = spyOn(window, 'onerror');
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: {
          items: {
            alignment: {
              name: function name() {
                return void 0;
              },
              submenu: {
                items: [{
                  key: 'alignment:left',
                  name: 'Align to LEFT'
                }]
              }
            },
            custom1: {
              name: function name() {
                return null;
              },
              submenu: {
                items: [{
                  key: 'custom1:test',
                  name: 'Test1'
                }]
              }
            },
            custom2: {
              name: function name() {
                return 0;
              },
              submenu: {
                items: [{
                  key: 'custom2:test',
                  name: 'Test2'
                }]
              }
            }
          }
        }
      });
      contextMenu();
      var $submenu1 = $('.htSubmenu').eq(0);
      $submenu1.simulate('mouseover');
      yield sleep(350);
      var $submenu2 = $('.htSubmenu').eq(1);
      $submenu2.simulate('mouseover');
      yield sleep(350);
      var $submenu3 = $('.htSubmenu').eq(2);
      $submenu3.simulate('mouseover');
      yield sleep(350);
      expect(spy).not.toHaveBeenCalled();
    }));
    it('should open subMenu on the left of main menu if on the right there\'s no space left', function () {
      handsontable({
        data: createSpreadsheetData(4, Math.floor(window.innerWidth / 50)),
        contextMenu: true,
        width: window.innerWidth
      });
      selectCell(0, countCols() - 1);
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      var contextMenuRoot = $('.htContextMenu');
      item.simulate('mouseover');
      expect(item.text()).toBe('Alignment');
      expect(item.hasClass('htSubmenu')).toBe(true);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      expect(contextSubMenu.offset().left).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll
    });
    it('should open subMenu on the right of main menu if there\'s free space',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: createSpreadsheetData(4, Math.floor(window.innerWidth / 50)),
        contextMenu: true,
        width: window.innerWidth
      });
      selectCell(0, countCols() - 10);
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      var contextMenuRoot = $('.htContextMenu');
      item.simulate('mouseover');
      yield sleep(300);
      expect(item.text()).toBe('Alignment');
      expect(item.hasClass('htSubmenu')).toBe(true);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      expect(contextSubMenu.offset().left).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll
    }));
    it('should open subMenu on the left-bottom of main menu if there\'s free space',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),
        contextMenu: true,
        height: window.innerHeight
      });
      window.scrollTo(0, document.body.clientHeight);
      selectCell(0, countCols() - 1);
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      var contextMenuRoot = $('.htContextMenu');
      item.simulate('mouseover');
      yield sleep(300);
      expect(item.text()).toBe('Alignment');
      expect(item.hasClass('htSubmenu')).toBe(true);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      expect(parseInt(contextSubMenu.offset().top, 10)).toBeAroundValue(parseInt(item.offset().top, 10) - 1);
      expect(parseInt(contextSubMenu.offset().left, 10)).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll
    }));
    it('should open subMenu on the right-bottom of main menu if there\'s free space',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),
        contextMenu: true,
        height: window.innerHeight
      });
      window.scrollTo(0, document.body.clientHeight);
      selectCell(0, countCols() - 10);
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      var contextMenuRoot = $('.htContextMenu');
      item.simulate('mouseover');
      yield sleep(300);
      expect(item.text()).toBe('Alignment');
      expect(item.hasClass('htSubmenu')).toBe(true);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      expect(parseInt(contextSubMenu.offset().top, 10)).toBeAroundValue(parseInt(item.offset().top, 10) - 1);
      expect(parseInt(contextSubMenu.offset().left, 10)).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll
    }));
    it('should open subMenu on the left-top of main menu if there\'s no free space on bottom',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),
        contextMenu: true,
        height: window.innerHeight
      });
      selectCell(countRows() - 1, countCols() - 1);
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      var contextMenuRoot = $('.htContextMenu');
      item.simulate('mouseover');
      yield sleep(300);
      expect(item.text()).toBe('Alignment');
      expect(item.hasClass('htSubmenu')).toBe(true);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      expect(contextSubMenu.offset().top + contextSubMenu.height() - 28).toBeAroundValue(item.offset().top);
      expect(contextSubMenu.offset().left).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll
    }));
    it('should open subMenu on the right-top of main menu if there\'s no free space on bottom',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),
        contextMenu: true,
        height: window.innerHeight
      });
      selectCell(countRows() - 1, countCols() - 10);
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      var contextMenuRoot = $('.htContextMenu');
      item.simulate('mouseover');
      yield sleep(300);
      expect(item.text()).toBe('Alignment');
      expect(item.hasClass('htSubmenu')).toBe(true);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      expect(contextSubMenu.offset().top + contextSubMenu.height() - 28).toBeAroundValue(item.offset().top);
      expect(contextSubMenu.offset().left).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll
    }));
  });
  describe('default context menu actions', function () {
    it('should display the default set of actions', function () {
      handsontable({
        contextMenu: true,
        comments: true,
        height: 100
      });
      contextMenu();
      var items = $('.htContextMenu tbody td');
      var actions = items.not('.htSeparator');
      var separators = items.filter('.htSeparator');
      expect(actions.length).toEqual(15);
      expect(separators.length).toEqual(7);
      expect(actions.text()).toEqual(['Insert row above', 'Insert row below', 'Insert column left', 'Insert column right', 'Remove row', 'Remove column', 'Undo', 'Redo', 'Read only', 'Alignment', 'Add comment', 'Delete comment', 'Read-only comment', 'Copy', 'Cut'].join(''));
    });
    it('should disable column manipulation when row header selected', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        colHeaders: true,
        rowHeaders: true,
        height: 100
      });
      $('.ht_clone_left .htCore').eq(0).find('tbody').find('th').eq(0).simulate('mousedown', {
        which: 3
      });
      contextMenu();
      expect($('.htContextMenu tbody td.htDisabled').text()).toBe(['Insert column left', 'Insert column right', 'Remove columns', 'Undo', 'Redo'].join(''));
    });
    it('should disable row manipulation when column header selected', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        colHeaders: true,
        rowHeaders: true,
        height: 100
      });
      var header = $('.ht_clone_top .htCore').find('thead').find('th').eq(2);
      header.simulate('mousedown', {
        which: 3
      });
      contextMenu();
      expect($('.htContextMenu tbody td.htDisabled').text()).toBe(['Insert row above', 'Insert row below', 'Remove rows', 'Undo', 'Redo'].join(''));
    });
    it('should disable cells manipulation when corner header selected', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        colHeaders: true,
        rowHeaders: true,
        height: 100
      });
      $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0).simulate('mousedown', {
        which: 3
      });
      contextMenu();
      expect($('.htContextMenu tbody td.htDisabled').text()).toBe(['Remove row', 'Remove column', 'Undo', 'Redo', 'Read only', 'Alignment'].join(''));
    });
    it('should insert row above selection', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 400
      });
      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');
      addHook('afterCreateRow', afterCreateRowCallback);
      expect(countRows()).toEqual(4);
      selectCell(1, 0, 3, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown'); // Insert row above

      expect(afterCreateRowCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.rowAbove', void 0, void 0, void 0);
      expect(countRows()).toEqual(5);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should insert row above selection when initial data is empty', function () {
      handsontable({
        rowHeaders: true,
        colHeaders: true,
        data: [],
        dataSchema: [],
        contextMenu: true,
        height: 400
      });
      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');
      addHook('afterCreateRow', afterCreateRowCallback);
      expect(countRows()).toEqual(0);
      var cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);
      cell.simulate('mousedown', {
        which: 3
      });
      contextMenu(cell[0]);
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown'); // Insert row above

      expect(afterCreateRowCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.rowAbove', void 0, void 0, void 0);
      expect(countRows()).toEqual(1);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should NOT display insert row selection', function () {
      handsontable({
        contextMenu: true,
        allowInsertRow: false
      });
      contextMenu();
      var items = $('.htContextMenu tbody td');
      var actions = items.not('.htSeparator');
      var separators = items.filter('.htSeparator');
      expect(actions.length).toEqual(10);
      expect(separators.length).toEqual(5);
      expect(actions.text()).toEqual(['Insert column left', 'Insert column right', 'Remove row', 'Remove column', 'Undo', 'Redo', 'Read only', 'Alignment', 'Copy', 'Cut'].join(''));
    });
    it('should NOT display insert column selection', function () {
      handsontable({
        contextMenu: true,
        allowInsertColumn: false
      });
      contextMenu();
      var items = $('.htContextMenu tbody td');
      var actions = items.not('.htSeparator');
      expect(actions.length).toEqual(10);
      expect(actions.text()).toEqual(['Insert row above', 'Insert row below', 'Remove row', 'Remove column', 'Undo', 'Redo', 'Read only', 'Alignment', 'Copy', 'Cut'].join(''));
    });
    it('should insert row above selection (reverse selection)', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');
      addHook('afterCreateRow', afterCreateRowCallback);
      expect(countRows()).toEqual(4);
      selectCell(3, 0, 1, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown'); // Insert row above

      expect(afterCreateRowCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.rowAbove', void 0, void 0, void 0);
      expect(countRows()).toEqual(5);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should insert row below selection', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');
      addHook('afterCreateRow', afterCreateRowCallback);
      expect(countRows()).toEqual(4);
      selectCell(1, 0, 3, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(1).simulate('mousedown'); // Insert row above

      expect(afterCreateRowCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.rowBelow', void 0, void 0, void 0);
      expect(countRows()).toEqual(5);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should insert row below selection when initial data is empty', function () {
      handsontable({
        rowHeaders: true,
        colHeaders: true,
        data: [],
        dataSchema: [],
        contextMenu: true,
        height: 400
      });
      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');
      addHook('afterCreateRow', afterCreateRowCallback);
      expect(countRows()).toEqual(0);
      var cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);
      cell.simulate('mousedown', {
        which: 3
      });
      contextMenu(cell[0]);
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(1).simulate('mousedown'); // Insert row below

      expect(afterCreateRowCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.rowBelow', void 0, void 0, void 0);
      expect(countRows()).toEqual(1);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should insert row below selection (reverse selection)', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');
      addHook('afterCreateRow', afterCreateRowCallback);
      expect(countRows()).toEqual(4);
      selectCell(3, 0, 1, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(1).simulate('mousedown'); // Insert row below

      expect(afterCreateRowCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.rowBelow', void 0, void 0, void 0);
      expect(countRows()).toEqual(5);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should Insert column left of selection', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        width: 400,
        height: 400
      });
      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');
      addHook('afterCreateCol', afterCreateColCallback);
      expect(countCols()).toEqual(4);
      selectCell(0, 1, 0, 3);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(2).simulate('mousedown'); // Insert col left

      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', void 0, void 0, void 0);
      expect(countCols()).toEqual(5);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should Insert column left of selection when initial data is empty', function () {
      handsontable({
        rowHeaders: true,
        colHeaders: true,
        data: [],
        dataSchema: [],
        contextMenu: true,
        height: 400
      });
      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');
      addHook('afterCreateCol', afterCreateColCallback);
      expect(countCols()).toEqual(0);
      var cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);
      cell.simulate('mousedown', {
        which: 3
      });
      contextMenu(cell[0]);
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(3).simulate('mousedown'); // Insert column left

      expect(afterCreateColCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.columnRight', void 0, void 0, void 0);
      expect(countCols()).toEqual(1);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should Insert column left of selection (reverse selection)', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');
      addHook('afterCreateCol', afterCreateColCallback);
      expect(countCols()).toEqual(4);
      selectCell(0, 3, 0, 1);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(2).simulate('mousedown'); // Insert col left

      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', void 0, void 0, void 0);
      expect(countCols()).toEqual(5);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should Insert column right of selection', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');
      addHook('afterCreateCol', afterCreateColCallback);
      expect(countCols()).toEqual(4);
      selectCell(0, 1, 0, 3);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(2).simulate('mousedown'); // Insert col right

      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', void 0, void 0, void 0);
      expect(countCols()).toEqual(5);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should Insert column right of selection when initial data is empty', function () {
      handsontable({
        rowHeaders: true,
        colHeaders: true,
        data: [],
        dataSchema: [],
        contextMenu: true,
        height: 400
      });
      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');
      addHook('afterCreateCol', afterCreateColCallback);
      expect(countCols()).toEqual(0);
      var cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);
      cell.simulate('mousedown', {
        which: 3
      });
      contextMenu(cell[0]);
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(3).simulate('mousedown'); // Insert column right

      expect(afterCreateColCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.columnRight', void 0, void 0, void 0);
      expect(countCols()).toEqual(1);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should Insert column right of selection (reverse selection)', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');
      addHook('afterCreateCol', afterCreateColCallback);
      expect(countCols()).toEqual(4);
      selectCell(0, 3, 0, 1);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(3).simulate('mousedown'); // Insert col right

      expect(afterCreateColCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.columnRight', void 0, void 0, void 0);
      expect(countCols()).toEqual(5);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should remove selected rows', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');
      addHook('afterRemoveRow', afterRemoveRowCallback);
      expect(countRows()).toEqual(4);
      selectCell(1, 0, 3, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown'); // Remove row

      expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeRow', void 0, void 0);
      expect(countRows()).toEqual(1);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should allow to remove the latest row', function () {
      handsontable({
        data: createSpreadsheetData(1, 4),
        contextMenu: true,
        height: 100
      });
      var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');
      addHook('afterRemoveRow', afterRemoveRowCallback);
      expect(countRows()).toBe(1);
      selectCell(0, 0, 0, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown'); // Remove row

      expect(afterRemoveRowCallback).toHaveBeenCalledWith(0, 1, [0], 'ContextMenu.removeRow', void 0, void 0);
      expect(countRows()).toBe(0);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should remove selected rows (reverse selection)', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');
      addHook('afterRemoveRow', afterRemoveRowCallback);
      expect(countRows()).toBe(4);
      selectCell(3, 0, 1, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown'); // Remove row

      expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeRow', void 0, void 0);
      expect(countRows()).toBe(1);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should remove selected columns', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');
      addHook('afterRemoveCol', afterRemoveColCallback);
      expect(countCols()).toBe(4);
      selectCell(0, 1, 0, 3);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown'); // Remove col

      expect(afterRemoveColCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeColumn', void 0, void 0);
      expect(countCols()).toBe(1);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should allow to remove the latest column', function () {
      handsontable({
        data: createSpreadsheetData(4, 1),
        contextMenu: true,
        height: 100
      });
      var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');
      addHook('afterRemoveCol', afterRemoveColCallback);
      expect(countCols()).toBe(1);
      selectCell(0, 0, 0, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown'); // Remove column

      expect(afterRemoveColCallback).toHaveBeenCalledWith(0, 1, [0], 'ContextMenu.removeColumn', void 0, void 0);
      expect(countCols()).toBe(0);
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should remove selected columns (reverse selection)', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');
      addHook('afterRemoveCol', afterRemoveColCallback);
      expect(countCols()).toEqual(4);
      selectCell(0, 3, 0, 1);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown'); // Remove col

      expect(afterRemoveColCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeColumn', void 0, void 0);
      expect(countCols()).toEqual(1);
    });
    it('should undo changes', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      selectCell(0, 0);
      expect(getDataAtCell(0, 0)).toEqual('A1');
      setDataAtCell(0, 0, 'XX');
      expect(getDataAtCell(0, 0)).toEqual('XX');
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(6).simulate('mousedown'); // Undo

      expect(getDataAtCell(0, 0)).toEqual('A1');
    });
    it('should redo changes', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      selectCell(0, 0);
      expect(getDataAtCell(0, 0)).toEqual('A1');
      setDataAtCell(0, 0, 'XX');
      expect(getDataAtCell(0, 0)).toEqual('XX');
      undo();
      expect(getDataAtCell(0, 0)).toEqual('A1');
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(7).simulate('mousedown'); // Redo

      expect(getDataAtCell(0, 0)).toEqual('XX');
    });
    it('should display only the specified actions', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: ['remove_row', 'undo'],
        height: 100
      });
      contextMenu();
      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);
    });
    it('should make a single selected cell read-only', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      selectCell(0, 0);
      expect(getDataAtCell(0, 0)).toEqual('A1');
      expect(getCellMeta(0, 0).readOnly).toBe(false);
      selectCell(0, 0);
      contextMenu();
      var menu = $('.htContextMenu .ht_master .htCore tbody');
      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown'); // Make read-only

      expect(getCellMeta(0, 0).readOnly).toBe(true);
    });
    it('should make a single selected cell writable, when it\'s set to read-only', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      selectCell(0, 0);
      expect(getDataAtCell(0, 0)).toEqual('A1');
      getCellMeta(0, 0).readOnly = true;
      selectCell(0, 0);
      contextMenu();
      var menu = $('.htContextMenu .ht_master .htCore tbody');
      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown');
      expect(getCellMeta(0, 0).readOnly).toBe(false);
    });
    it('should make a range of selected cells read-only, if all of them are writable', function () {
      var hot = handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      expect(hot.getCellMeta(0, 0).readOnly).toEqual(false);
      expect(hot.getCellMeta(0, 1).readOnly).toEqual(false);
      expect(hot.getCellMeta(1, 0).readOnly).toEqual(false);
      expect(hot.getCellMeta(1, 1).readOnly).toEqual(false);
      selectCell(0, 0, 2, 2);
      contextMenu();
      $('.htContextMenu .ht_master .htCore tbody').find('td').not('.htSeparator').eq(8).simulate('mousedown');
      expect(hot.getCellMeta(0, 0).readOnly).toEqual(true);
      expect(hot.getCellMeta(0, 1).readOnly).toEqual(true);
      expect(hot.getCellMeta(1, 0).readOnly).toEqual(true);
      expect(hot.getCellMeta(1, 1).readOnly).toEqual(true);
      expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    });
    it('should make a multiple of selected cells read-only, if all of them are writable', function () {
      var hot = handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);
      selectCell(0, 0, 2, 2);
      contextMenu();
      $('.htContextMenu .ht_master .htCore tbody').find('td').not('.htSeparator').eq(8).simulate('mousedown');
      expect(hot.getCellMeta(0, 0).readOnly).toBe(true);
      expect(hot.getCellMeta(0, 1).readOnly).toBe(true);
      expect(hot.getCellMeta(1, 0).readOnly).toBe(true);
      expect(hot.getCellMeta(1, 1).readOnly).toBe(true);
    });
    it('should not close menu after clicking on submenu root item', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: ['row_above', 'remove_row', '---------', 'alignment'],
        height: 400
      });
      selectCell(1, 0, 3, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(2).simulate('mousedown'); // Alignment

      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
    it('should make a group of selected cells read-only, if all of them are writable (reverse selection)', function () {
      var hot = handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);
      selectCell(2, 2, 0, 0);
      contextMenu();
      var menu = $('.htContextMenu .ht_master .htCore tbody');
      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown'); // Make read-only

      expect(hot.getCellMeta(0, 0).readOnly).toBe(true);
      expect(hot.getCellMeta(0, 1).readOnly).toBe(true);
      expect(hot.getCellMeta(1, 0).readOnly).toBe(true);
      expect(hot.getCellMeta(1, 1).readOnly).toBe(true);
    });
    it('should make a group of selected cells writable if at least one of them is read-only', function () {
      var hot = handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);
      hot.getCellMeta(1, 1).readOnly = true;
      selectCell(0, 0, 2, 2);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(8).simulate('mousedown'); // Make writable

      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);
    });
    it('should make a group of selected cells writable if at least one of them is read-only (reverse selection)', function () {
      var hot = handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);
      hot.getCellMeta(1, 1).readOnly = true;
      selectCell(2, 2, 0, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(8).simulate('mousedown'); // Make writable

      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(0, 1).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 0).readOnly).toBe(false);
      expect(hot.getCellMeta(1, 1).readOnly).toBe(false);
    });
  });
  describe('disabling actions', function () {
    it('should not close menu after clicking on disabled item', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: ['undo', 'redo'],
        height: 400
      });
      selectCell(1, 0, 3, 0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown'); // Undo

      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
    it('should disable undo and redo action if undoRedo plugin is not enabled ', function () {
      handsontable({
        contextMenu: true,
        undoRedo: false,
        height: 100
      });
      contextMenu();
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td:eq(9)').text()).toEqual('Undo');
      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(true);
      expect($menu.find('tbody td:eq(10)').text()).toEqual('Redo');
      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(true);
    });
    it('should disable undo when there is nothing to undo ', function () {
      var hot = handsontable({
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect(hot.undoRedo.isUndoAvailable()).toBe(false);
      expect($menu.find('tbody td:eq(9)').text()).toEqual('Undo');
      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(true);
      closeContextMenu();
      setDataAtCell(0, 0, 'foo');
      contextMenu();
      $menu = $('.htContextMenu .ht_master .htCore');
      expect(hot.undoRedo.isUndoAvailable()).toBe(true);
      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(false);
    });
    it('should disable redo when there is nothing to redo ', function () {
      var hot = handsontable({
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect(hot.undoRedo.isRedoAvailable()).toBe(false);
      expect($menu.find('tbody td:eq(10)').text()).toEqual('Redo');
      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(true);
      closeContextMenu();
      setDataAtCell(0, 0, 'foo');
      undo();
      contextMenu();
      $menu = $('.htContextMenu .ht_master .htCore');
      expect(hot.undoRedo.isRedoAvailable()).toBe(true);
      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(false);
    });
    it('should disable Insert row in context menu when maxRows is reached', function () {
      handsontable({
        contextMenu: true,
        maxRows: 6,
        height: 100
      });
      contextMenu();
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td:eq(0)').text()).toEqual('Insert row above');
      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(false);
      expect($menu.find('tbody td:eq(1)').text()).toEqual('Insert row below');
      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(false);
      closeContextMenu();
      alter('insert_row');
      contextMenu();
      $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(true);
      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(true);
    });
    it('should disable Insert col in context menu when maxCols is reached', function () {
      handsontable({
        contextMenu: true,
        maxCols: 6,
        height: 100
      });
      contextMenu();
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td:eq(3)').text()).toEqual('Insert column left');
      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(false);
      expect($menu.find('tbody td:eq(4)').text()).toEqual('Insert column right');
      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(false);
      closeContextMenu();
      alter('insert_col');
      contextMenu();
      $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(true);
      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(true);
    });
    it('should NOT disable Insert col in context menu when only one column exists', function () {
      handsontable({
        data: [['single col']],
        contextMenu: true,
        maxCols: 10,
        height: 100
      });
      selectCell(0, 0);
      contextMenu();
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td:eq(3)').text()).toEqual('Insert column left');
      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(false);
      expect($menu.find('tbody td:eq(4)').text()).toEqual('Insert column right');
      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(false);
    });
    it('should disable Remove col in context menu when rows are selected by headers', function () {
      handsontable({
        contextMenu: ['remove_col', 'remove_row'],
        height: 100,
        colHeaders: true,
        rowHeaders: true
      });
      var $rowsHeaders = spec().$container.find('.ht_clone_left tr th');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(2).simulate('mouseover');
      $rowsHeaders.eq(3).simulate('mouseover');
      $rowsHeaders.eq(3).simulate('mousemove');
      $rowsHeaders.eq(3).simulate('mouseup');
      contextMenu();
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td:eq(0)').text()).toEqual('Remove columns');
      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(true);
    });
    it('should disable Remove row in context menu when columns are selected by headers', function () {
      handsontable({
        contextMenu: ['remove_col', 'remove_row'],
        height: 100,
        colHeaders: true,
        rowHeaders: true
      });
      spec().$container.find('thead tr:eq(0) th:eq(1)').simulate('mousedown');
      spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseover');
      spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseover');
      spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mousemove');
      spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseup');
      contextMenu();
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td:eq(1)').text()).toEqual('Remove rows');
      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(true);
    });
  });
  describe('custom options', function () {
    it('should have custom items list', function () {
      var callback1 = jasmine.createSpy('callback1');
      var callback2 = jasmine.createSpy('callback2');
      handsontable({
        contextMenu: {
          items: {
            cust1: {
              name: 'CustomItem1',
              callback: callback1
            },
            cust2: {
              name: 'CustomItem2',
              callback: callback2
            }
          }
        },
        height: 100
      });
      contextMenu();
      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);
      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual(['CustomItem1', 'CustomItem2'].join(''));
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');
      expect(callback1.calls.count()).toEqual(1);
      expect(callback2.calls.count()).toEqual(0);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');
      expect(callback1.calls.count()).toEqual(1);
      expect(callback2.calls.count()).toEqual(1);
    });
    it('should have custom items list (defined as a function)', function () {
      var enabled = false;
      handsontable({
        contextMenu: {
          items: {
            cust1: {
              name: function name() {
                return !enabled ? 'Enable my custom option' : 'Disable my custom option';
              },
              callback: function callback() {}
            }
          }
        },
        height: 100
      });
      contextMenu();
      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual('Enable my custom option');
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');
      enabled = true;
      contextMenu();
      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual('Disable my custom option');
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');
    });
    it('should bind HOT instace to menu\'s `name` function', function () {
      var thisInsideFunction;
      var hot = handsontable({
        contextMenu: {
          items: {
            cust1: {
              name: function name() {
                thisInsideFunction = this;
                return 'Example';
              }
            }
          }
        },
        height: 100
      });
      contextMenu();
      expect(thisInsideFunction).toEqual(hot);
    });
    it('should enable to define item options globally', function () {
      var callback = jasmine.createSpy('callback');
      handsontable({
        contextMenu: {
          callback: callback,
          items: {
            cust1: {
              name: 'CustomItem1'
            },
            cust2: {
              name: 'CustomItem2'
            }
          }
        },
        height: 100
      });
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');
      expect(callback.calls.count()).toEqual(1);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');
      expect(callback.calls.count()).toEqual(2);
    });
    it('should override default items options', function () {
      var callback = jasmine.createSpy('callback');
      handsontable({
        contextMenu: {
          items: {
            remove_row: {
              callback: callback
            },
            remove_col: {
              name: 'Delete column'
            }
          }
        },
        height: 100
      });
      contextMenu();
      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);
      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual(['Remove row', 'Delete column'].join(''));
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');
      expect(callback.calls.count()).toEqual(1);
      expect(countCols()).toEqual(5);
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');
      expect(countCols()).toEqual(4);
    });
    it('should fire item callback after item has been clicked', function () {
      var customItem = {
        name: 'Custom item',
        callback: function callback() {}
      };
      spyOn(customItem, 'callback');
      handsontable({
        contextMenu: {
          items: {
            customItemKey: customItem
          }
        },
        height: 100
      });
      contextMenu();
      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');
      expect(customItem.callback.calls.count()).toEqual(1);
      expect(customItem.callback.calls.argsFor(0)[0]).toEqual('customItemKey');
    });
  });
  describe('keyboard navigation', function () {
    describe('no item selected', function () {
      it('should select the first item in menu, when user hits ARROW_DOWN', function () {
        handsontable({
          contextMenu: true,
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        expect(menuHot.getSelected()).toBeUndefined();
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
      });
      it('should scroll down, when user hits ARROW_DOWN for item in menu below the viewport', function () {
        handsontable({
          height: 100,
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3'
              },
              item4: {
                name: 'Item4'
              },
              item5: {
                name: 'Item5'
              },
              item6: {
                name: 'Item6'
              },
              item7: {
                name: 'Item7'
              },
              item8: {
                name: 'Item8'
              },
              item9: {
                name: 'Item9'
              },
              item10: {
                name: 'Item10'
              },
              item11: {
                name: 'Item11'
              },
              item12: {
                name: 'Item12'
              },
              item13: {
                name: 'Item13'
              },
              item14: {
                name: 'Item14'
              },
              item15: {
                name: 'Item15'
              },
              item16: {
                name: 'Item16'
              },
              item17: {
                name: 'Item17'
              },
              item18: {
                name: 'Item18'
              },
              item19: {
                name: 'Item19'
              },
              item20: {
                name: 'Item20'
              },
              item21: {
                name: 'Item21'
              },
              item22: {
                name: 'Item22'
              },
              item23: {
                name: 'Item23'
              },
              item24: {
                name: 'Item24'
              },
              item25: {
                name: 'Item25'
              },
              item26: {
                name: 'Item26'
              },
              item27: {
                name: 'Item27'
              },
              item28: {
                name: 'Item28'
              },
              item29: {
                name: 'Item29'
              },
              item30: {
                name: 'Item30'
              },
              item31: {
                name: 'Item31'
              },
              item32: {
                name: 'Item32'
              },
              item33: {
                name: 'Item33'
              },
              item34: {
                name: 'Item34'
              },
              item35: {
                name: 'Item35'
              },
              item36: {
                name: 'Item36'
              },
              item37: {
                name: 'Item37'
              },
              item38: {
                name: 'Item38'
              },
              item39: {
                name: 'Item39'
              },
              item40: {
                name: 'Item40'
              }
            }
          }
        });
        contextMenu();
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        keyDownUp('arrow_down');
        var scrollHeight = typeof window.scrollY !== 'undefined' ? window.scrollY : document.documentElement.scrollTop;
        expect(scrollHeight).not.toBe(0);
      });
      it('should select the first NOT DISABLED item in menu, when user hits ARROW_DOWN', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1',
                disabled: true
              },
              item2: {
                name: 'Item2',
                disabled: true
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        expect(menuHot.getSelected()).toBeUndefined();
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
      });
      it('should NOT select any items in menu, when user hits ARROW_DOWN and there is no items enabled', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1',
                disabled: true
              },
              item2: {
                name: 'Item2',
                disabled: true
              },
              item3: {
                name: 'Item3',
                disabled: true
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        expect(menuHot.getSelected()).toBeUndefined();
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toBeUndefined();
      });
      it('should select the last item in menu, when user hits ARROW_UP', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: 'Item1',
              item2: 'Item2',
              item3: 'Item3'
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        expect(menuHot.getSelected()).toBeUndefined();
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
      });
      it('should select the last NOT DISABLED item in menu, when user hits ARROW_UP', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2',
                disabled: true
              },
              item3: {
                name: 'Item3',
                disabled: true
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        expect(menuHot.getSelected()).toBeUndefined();
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
      });
      it('should NOT select any items in menu, when user hits ARROW_UP and there is no items enabled', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1',
                disabled: true
              },
              item2: {
                name: 'Item2',
                disabled: true
              },
              item3: {
                name: 'Item3',
                disabled: true
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        expect(menuHot.getSelected()).toBeUndefined();
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toBeUndefined();
      });
    });
    describe('item selected', function () {
      it('should select next item when user hits ARROW_DOWN', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
      });
      it('should select next item (skipping disabled items) when user hits ARROW_DOWN', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2',
                disabled: true
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
      });
      it('should select next item (skipping separators) when user hits ARROW_DOWN', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              sep1: Handsontable.plugins.ContextMenu.SEPARATOR,
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[3, 0, 3, 0]]);
      });
      it('should not change selection when last item is selected and user hits ARROW_DOWN', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
      });
      it('should not change selection when last enabled item is selected and user hits ARROW_DOWN', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3',
                disabled: true
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);
      });
      it('should select next item when user hits ARROW_UP', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
      });
      it('should select next item (skipping disabled items) when user hits ARROW_UP', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2',
                disabled: true
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
      });
      it('should select next item (skipping separators) when user hits ARROW_UP', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              sep1: Handsontable.plugins.ContextMenu.SEPARATOR,
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[3, 0, 3, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
      });
      it('should not change selection when first item is selected and user hits ARROW_UP', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1'
              },
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
      });
      it('should not change selection when first enabled item is selected and user hits ARROW_UP', function () {
        handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1',
                disabled: true
              },
              item2: {
                name: 'Item2'
              },
              item3: {
                name: 'Item3'
              }
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[2, 0, 2, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);
        keyDownUp('arrow_up');
        expect(menuHot.getSelected()).toEqual([[1, 0, 1, 0]]);
      });
      it('should perform a selected item action, when user hits ENTER', function () {
        var itemAction = jasmine.createSpy('itemAction');
        var hot = handsontable({
          contextMenu: {
            items: {
              item1: {
                name: 'Item1',
                callback: itemAction
              },
              item2: 'Item2'
            }
          },
          height: 100
        });
        contextMenu();
        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;
        keyDownUp('arrow_down');
        expect(menuHot.getSelected()).toEqual([[0, 0, 0, 0]]);
        expect(itemAction).not.toHaveBeenCalled();
        keyDownUp('enter');
        expect(itemAction).toHaveBeenCalled();
        expect($(hot.getPlugin('contextMenu').menu).is(':visible')).toBe(false);
      });
    });
    it('should close menu when user hits ESC', function () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      keyDownUp('esc');
      expect($('.htContextMenu').is(':visible')).toBe(false);
    });
    it('should close sub-menu and parent menu in proper order when user hits ESC twice',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(300);
      expect($('.htContextMenuSub_Alignment').is(':visible')).toBe(true);
      keyDownUp('esc');
      expect($('.htContextMenuSub_Alignment').is(':visible')).toBe(false);
      keyDownUp('esc');
      expect($('.htContextMenu').is(':visible')).toBe(false);
    }));
  });
  describe('mouse navigation', function () {
    it('should not scroll window position after fireing mouseenter on menu item', function () {
      handsontable({
        data: createSpreadsheetData(1000, 5),
        contextMenu: true
      });
      selectCell(100, 0);
      contextMenu();
      window.scrollTo(0, 0);
      $('.htContextMenu .ht_master .htCore').find('tr td:eq("0")').simulate('mouseenter');
      var scrollHeight = typeof window.scrollY !== 'undefined' ? window.scrollY : document.documentElement.scrollTop;
      expect(scrollHeight).toBe(0);
    });
    it('should not scroll window position after fireing click on menu', function () {
      handsontable({
        data: createSpreadsheetData(1000, 5),
        contextMenu: {
          items: {
            item1: {
              name: 'Item1'
            },
            sep1: Handsontable.plugins.ContextMenu.SEPARATOR,
            item2: {
              name: 'Item2'
            },
            item3: {
              name: 'Item3'
            }
          }
        }
      });
      selectCell(100, 0);
      contextMenu();
      window.scrollTo(0, 0);
      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown');
      var scrollHeight = typeof window.scrollY !== 'undefined' ? window.scrollY : document.documentElement.scrollTop;
      expect(scrollHeight).toBe(0);
    });
  });
  describe('selection', function () {
    it('should not be cleared when a context menu is triggered on a selected single cell', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      selectCell(0, 0);
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      expect(getSelected()).toEqual([[0, 0, 0, 0]]);
    });
    it('should not be cleared when a context menu is triggered on a range of selected cells', function () {
      handsontable({
        data: createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      selectCell(0, 0, 2, 2);
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      expect(getSelected()).toEqual([[0, 0, 2, 2]]);
    });
    it('should not be cleared when a context menu is triggered on the first layer of the non-contiguous selection', function () {
      handsontable({
        data: createSpreadsheetData(10, 10),
        contextMenu: true,
        height: 200
      });
      $(getCell(0, 0)).simulate('mousedown');
      $(getCell(2, 2)).simulate('mouseover');
      $(getCell(2, 2)).simulate('mouseup');
      keyDown('ctrl');
      $(getCell(2, 2)).simulate('mousedown');
      $(getCell(7, 2)).simulate('mouseover');
      $(getCell(7, 2)).simulate('mouseup');
      $(getCell(2, 4)).simulate('mousedown');
      $(getCell(2, 4)).simulate('mouseover');
      $(getCell(2, 4)).simulate('mouseup');
      keyUp('ctrl');
      contextMenu(getCell(0, 0));
      expect($('.htContextMenu').is(':visible')).toBe(true);
      expect(getSelected()).toEqual([[0, 0, 2, 2], [2, 2, 7, 2], [2, 4, 2, 4]]);
    });
    it('should not be cleared when a context menu is triggered on the second layer of the non-contiguous selection', function () {
      handsontable({
        data: createSpreadsheetData(10, 10),
        contextMenu: true,
        height: 200
      });
      $(getCell(0, 0)).simulate('mousedown');
      $(getCell(2, 2)).simulate('mouseover');
      $(getCell(2, 2)).simulate('mouseup');
      keyDown('ctrl');
      $(getCell(2, 2)).simulate('mousedown');
      $(getCell(7, 2)).simulate('mouseover');
      $(getCell(7, 2)).simulate('mouseup');
      $(getCell(2, 4)).simulate('mousedown');
      $(getCell(2, 4)).simulate('mouseover');
      $(getCell(2, 4)).simulate('mouseup');
      keyUp('ctrl');
      contextMenu(getCell(2, 2));
      expect($('.htContextMenu').is(':visible')).toBe(true);
      expect(getSelected()).toEqual([[0, 0, 2, 2], [2, 2, 7, 2], [2, 4, 2, 4]]);
    });
    it('should not be cleared when a context menu is triggered on the last layer of the non-contiguous selection', function () {
      handsontable({
        data: createSpreadsheetData(10, 10),
        contextMenu: true,
        height: 200
      });
      $(getCell(0, 0)).simulate('mousedown');
      $(getCell(2, 2)).simulate('mouseover');
      $(getCell(2, 2)).simulate('mouseup');
      keyDown('ctrl');
      $(getCell(2, 2)).simulate('mousedown');
      $(getCell(7, 2)).simulate('mouseover');
      $(getCell(7, 2)).simulate('mouseup');
      $(getCell(2, 4)).simulate('mousedown');
      $(getCell(2, 4)).simulate('mouseover');
      $(getCell(2, 4)).simulate('mouseup');
      keyUp('ctrl');
      contextMenu(getCell(2, 4));
      expect($('.htContextMenu').is(':visible')).toBe(true);
      expect(getSelected()).toEqual([[0, 0, 2, 2], [2, 2, 7, 2], [2, 4, 2, 4]]);
    });
  });
  describe('working with multiple tables', function () {
    beforeEach(function () {
      this.$container2 = $("<div id=\"".concat(id, "-2\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container2) {
        this.$container2.handsontable('destroy');
        this.$container2.remove();
      }
    });
    it('should apply enabling/disabling contextMenu using updateSetting only to particular instance of HOT ', function () {
      var hot1 = handsontable({
        contextMenu: false,
        height: 100
      });
      var hot2 = spec().$container2.handsontable({
        contextMenu: true,
        height: 100
      }).handsontable('getInstance');
      var contextMenuContainer = $('.htContextMenu');
      contextMenu();
      expect(hot1.getPlugin('contextMenu').isEnabled()).toBe(false);
      expect(contextMenuContainer.is(':visible')).toBe(false);
      contextMenu2();
      expect(hot2.getPlugin('contextMenu').isEnabled()).toBe(true);
      expect($('.htContextMenu').is(':visible')).toBe(true);
      mouseDown(hot2.rootElement); // close menu

      hot1.updateSettings({
        contextMenu: true
      });
      hot2.updateSettings({
        contextMenu: false
      });
      contextMenu2();
      expect(hot2.getPlugin('contextMenu').isEnabled()).toBe(false);
      contextMenu();
      setTimeout(function () {
        expect($('.htContextMenu').is(':visible')).toBe(true);
      }, 1100);

      function contextMenu2() {
        var hot = spec().$container2.data('handsontable');
        var selected = hot.getSelected();

        if (!selected) {
          hot.selectCell(0, 0);
          selected = hot.getSelected();
        }

        var cell = hot.getCell(selected[0][0], selected[0][1]);
        var cellOffset = $(cell).offset();
        $(cell).simulate('contextmenu', {
          pageX: cellOffset.left,
          pageY: cellOffset.top
        });
      }
    });
    it('should perform a contextMenu action only for particular instance of HOT ', function () {
      var hot1 = handsontable({
        contextMenu: true,
        height: 100
      });
      var hot2 = spec().$container2.handsontable({
        contextMenu: true,
        height: 100
      }).handsontable('getInstance');
      hot1.selectCell(0, 0);
      contextMenu();
      expect(hot1.countRows()).toEqual(5);
      expect(hot2.countRows()).toEqual(5);
      $('.htContextMenu .ht_master .htCore').find('tr td:eq("0")').simulate('mousedown'); // insert row above

      expect(hot1.countRows()).toEqual(6);
      expect(hot2.countRows()).toEqual(5);
      hot2.selectCell(0, 0);
      contextMenu2();
      expect(hot1.countRows()).toEqual(6);
      expect(hot2.countRows()).toEqual(5);
      $('.htContextMenu .ht_master .htCore').find('tr td:eq("0")').simulate('mousedown'); // insert row above

      expect(hot1.countRows()).toEqual(6);
      expect(hot2.countRows()).toEqual(6);

      function contextMenu2() {
        var hot = spec().$container2.data('handsontable');
        var selected = hot.getSelected();

        if (!selected) {
          hot.selectCell(0, 0);
          selected = hot.getSelected();
        }

        var cell = hot.getCell(selected[0][0], selected[0][1]);
        var cellOffset = $(cell).offset();
        $(cell).simulate('contextmenu', {
          pageX: cellOffset.left,
          pageY: cellOffset.top
        });
      }
    });
  });
  describe('context menu with disabled `allowInvalid`', function () {
    it('should not close invalid cell',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: createSpreadsheetData(10, 10),
        contextMenu: true,
        validator: function validator(value, callback) {
          return callback(false);
        },
        allowInvalid: false
      });
      selectCell(0, 0);
      keyDownUp('enter');
      contextMenu(getCell(2, 2));
      yield sleep(100);
      contextMenu(getCell(2, 2));
      yield sleep(100);
      expect(getActiveEditor().isOpened()).toBe(true);
    }));
  });
  describe('context menu with native scroll', function () {
    beforeEach(function () {
      var wrapper = $('<div></div>').css({
        width: 400,
        height: 200,
        overflow: 'scroll'
      });
      this.$wrapper = this.$container.wrap(wrapper).parent();
    });
    afterEach(function () {
      if (this.$container) {
        destroy();
        this.$container.remove();
      }

      this.$wrapper.remove();
    });
    it('should display menu table is not scrolled', function () {
      handsontable({
        data: createSpreadsheetData(40, 30),
        colWidths: 50,
        // can also be a number or a function
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        height: 100
      });
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
    it('should display menu table is scrolled', function () {
      var hot = handsontable({
        data: createSpreadsheetData(40, 30),
        colWidths: 50,
        // can also be a number or a function
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        height: 100
      });
      var mainHolder = hot.view.wt.wtTable.holder;
      $(mainHolder).scrollTop(300);
      $(mainHolder).scroll();
      selectCell(15, 3);
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
    it('should not close the menu, when table is scrolled', function () {
      var hot = handsontable({
        data: createSpreadsheetData(40, 30),
        colWidths: 50,
        // can also be a number or a function
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        height: 100
      });
      var $mainHolder = $(hot.view.wt.wtTable.holder);
      selectCell(15, 3);
      var scrollTop = $mainHolder.scrollTop();
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      $mainHolder.scrollTop(scrollTop + 60).scroll();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      contextMenu();
      expect($('.htContextMenu').is(':visible')).toBe(true);
      $mainHolder.scrollTop(scrollTop + 100).scroll();
      expect($('.htContextMenu').is(':visible')).toBe(true);
    });
    it('should not attempt to close menu, when table is scrolled and the menu is already closed', function () {
      var hot = handsontable({
        data: createSpreadsheetData(40, 30),
        colWidths: 50,
        // can also be a number or a function
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        height: 100
      });
      var mainHolder = $(hot.view.wt.wtTable.holder);
      selectCell(15, 3);
      var scrollTop = mainHolder.scrollTop();
      contextMenu();
      spyOn(hot.getPlugin('contextMenu'), 'close');
      mainHolder.scrollTop(scrollTop + 100).scroll();
      expect(hot.getPlugin('contextMenu').close).not.toHaveBeenCalled();
    });
    it('should not scroll the window when hovering over context menu items (#1897 reopen)', function () {
      spec().$wrapper.css('overflow', 'visible');
      handsontable({
        data: createSpreadsheetData(403, 303),
        colWidths: 50,
        // can also be a number or a function
        contextMenu: true
      });
      var beginningScrollX = window.scrollX;
      selectCell(2, 4);
      contextMenu();
      var cmInstance = getPlugin('contextMenu').menu.hotMenu;
      cmInstance.selectCell(3, 0);
      expect(window.scrollX).toBe(beginningScrollX);
      cmInstance.selectCell(4, 0);
      expect(window.scrollX).toBe(beginningScrollX);
      cmInstance.selectCell(6, 0);
      expect(window.scrollX).toBe(beginningScrollX);
    });
  });
  describe('afterContextMenuDefaultOptions hook', function () {
    it('should call afterContextMenuDefaultOptions hook with context menu options as the first param',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var cb = jasmine.createSpy();
      cb.and.callFake(function (options) {
        options.items.cust1 = {
          name: 'My custom item',
          callback: function callback() {}
        };
      });
      Handsontable.hooks.add('afterContextMenuDefaultOptions', cb);
      handsontable({
        contextMenu: true,
        height: 100
      });
      contextMenu();
      yield sleep(200);
      var $menu = $('.htContextMenu .ht_master .htCore');
      expect($menu.find('tbody td').text()).toContain('My custom item');
      expect(cb.calls.count()).toBe(1);
      expect(cb.calls.argsFor(0)[0].items.cust1.key).toBe('cust1');
      expect(cb.calls.argsFor(0)[0].items.cust1.name).toBe('My custom item');
      Handsontable.hooks.remove('afterContextMenuDefaultOptions', cb);
    }));
  });
  describe('beforeContextMenuSetItems hook', function () {
    it('should add new menu item even when item is excluded from plugin settings',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var hookListener = function hookListener(options) {
        options.push({
          key: 'test',
          name: 'Test'
        });
      };

      Handsontable.hooks.add('beforeContextMenuSetItems', hookListener);
      handsontable({
        contextMenu: ['make_read_only'],
        height: 100
      });
      contextMenu();
      yield sleep(200);
      var items = $('.htContextMenu tbody td');
      var actions = items.not('.htSeparator');
      expect(actions.text()).toEqual(['Read only', 'Test'].join(''));
      Handsontable.hooks.remove('beforeContextMenuSetItems', hookListener);
    }));
    it('should be called only with items selected in plugin settings',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var keys = [];

      var hookListener = function hookListener(items) {
        keys = items.map(function (v) {
          return v.key;
        });
      };

      Handsontable.hooks.add('beforeContextMenuSetItems', hookListener);
      handsontable({
        contextMenu: ['make_read_only', 'col_left'],
        height: 100
      });
      contextMenu();
      yield sleep(200);
      expect(keys).toEqual(['make_read_only', 'col_left']);
      Handsontable.hooks.remove('beforeContextMenuSetItems', hookListener);
    }));
  });
});

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('ContextMenu', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('alignment', function () {
    it('should align text left',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(350);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);
      button.simulate('mousedown'); // Text left

      expect(getCellMeta(0, 0).className).toEqual('htLeft');
      expect(getCell(0, 0).className).toContain('htLeft');
    }));
    it('should align text center',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(350);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(1);
      button.simulate('mousedown'); // Text center

      expect(getCellMeta(0, 0).className).toEqual('htCenter');
      expect(getCell(0, 0).className).toContain('htCenter');
    }));
    it('should align text right',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(350);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);
      button.simulate('mousedown'); // Text right

      expect(getCellMeta(0, 0).className).toEqual('htRight');
      expect(getCell(0, 0).className).toContain('htRight');
    }));
    it('should justify text',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(350);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(3);
      button.simulate('mousedown'); // Text justify

      deselectCell();
      expect(getCellMeta(0, 0).className).toEqual('htJustify');
      expect(getCell(0, 0).className).toContain('htJustify');
    }));
    it('should vertical align text top',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(350);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(4);
      button.simulate('mousedown'); // Text top

      deselectCell();
      expect(getCellMeta(0, 0).className).toEqual('htTop');
      expect(getCell(0, 0).className).toContain('htTop');
    }));
    it('should vertical align text middle',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(350);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(5);
      button.simulate('mousedown'); // Text middle

      deselectCell();
      expect(getCellMeta(0, 0).className).toEqual('htMiddle');
      expect(getCell(0, 0).className).toContain('htMiddle');
    }));
    it('should vertical align text bottom',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(4, 4),
        contextMenu: true,
        height: 100
      });
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(350);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(6);
      button.simulate('mousedown'); // Text bottom

      deselectCell();
      expect(getCellMeta(0, 0).className).toEqual('htBottom');
      expect(getCell(0, 0).className).toContain('htBottom');
    }));
    it('should trigger `afterSetCellMeta` callback after changing alignment by context menu',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        afterSetCellMeta: afterSetCellMetaCallback
      });
      selectCell(2, 3);
      contextMenu();
      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);
      item.simulate('mouseover');
      yield sleep(350);
      var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);
      button.simulate('mousedown'); // Text bottom

      deselectCell();
      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(2, 3, 'className', 'htRight', undefined, undefined);
    }));
  });
});

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('ContextMenuReadOnly', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should trigger `afterSetCellMeta` callback after changing cell to read only by context menu', function () {
    var afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');
    var rows = 5;
    var columns = 5;
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(rows, columns),
      rowHeaders: true,
      colHeaders: true,
      contextMenu: true,
      afterSetCellMeta: afterSetCellMetaCallback
    });
    selectCell(2, 3);
    contextMenu();
    var changeToReadOnluButton = $('.htItemWrapper').filter(function () {
      return $(this).text() === 'Read only';
    })[0];
    $(changeToReadOnluButton).simulate('mousedown');
    expect(afterSetCellMetaCallback).toHaveBeenCalledWith(2, 3, 'readOnly', true, undefined, undefined);
  });
});

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('ContextMenu', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('remove columns', function () {
    it('should execute action when single cell is selected', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        contextMenu: true
      });
      selectCell(2, 2);
      contextMenu(); // "Remove column" item

      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown');
      expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'D1', 'E1']);
    });
    it('should execute action when range of the cells are selected', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        contextMenu: true
      });
      selectCell(2, 2, 4, 4);
      contextMenu(); // "Remove column" item

      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown');
      expect(getDataAtRow(0)).toEqual(['A1', 'B1']);
    });
    it('should execute action when multiple cells are selected', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(8, 5),
        contextMenu: true
      });
      $(getCell(0, 0)).simulate('mousedown');
      $(getCell(1, 0)).simulate('mouseover');
      $(getCell(1, 0)).simulate('mouseup');
      keyDown('ctrl');
      $(getCell(2, 1)).simulate('mousedown');
      $(getCell(2, 1)).simulate('mouseover');
      $(getCell(2, 1)).simulate('mouseup');
      $(getCell(0, 3)).simulate('mousedown');
      $(getCell(5, 3)).simulate('mouseover');
      $(getCell(5, 3)).simulate('mouseup');
      $(getCell(7, 4)).simulate('mousedown');
      $(getCell(7, 4)).simulate('mouseover');
      $(getCell(7, 4)).simulate('mouseup');
      contextMenu(); // "Remove column" item

      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown');
      expect(getDataAtRow(0)).toEqual(['C1']);
    });
  });
});

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('ContextMenu', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('remove rows', function () {
    it('should execute action when single cell is selected', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        contextMenu: true
      });
      selectCell(2, 2);
      contextMenu(); // "Remove row" item

      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown');
      expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A4', 'A5']);
    });
    it('should execute action when range of the cells are selected', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        contextMenu: true
      });
      selectCell(2, 2, 4, 4);
      contextMenu(); // "Remove row" item

      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown');
      expect(getDataAtCol(0)).toEqual(['A1', 'A2']);
    });
    it('should execute action when multiple cells are selected', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(8, 5),
        contextMenu: true
      });
      $(getCell(0, 0)).simulate('mousedown');
      $(getCell(1, 0)).simulate('mouseover');
      $(getCell(1, 0)).simulate('mouseup');
      keyDown('ctrl');
      $(getCell(2, 1)).simulate('mousedown');
      $(getCell(2, 1)).simulate('mouseover');
      $(getCell(2, 1)).simulate('mouseup');
      $(getCell(0, 3)).simulate('mousedown');
      $(getCell(5, 3)).simulate('mouseover');
      $(getCell(5, 3)).simulate('mouseup');
      $(getCell(5, 0)).simulate('mousedown');
      $(getCell(5, 4)).simulate('mouseover');
      $(getCell(5, 4)).simulate('mouseup');
      $(getCell(7, 4)).simulate('mousedown');
      $(getCell(7, 4)).simulate('mouseover');
      $(getCell(7, 4)).simulate('mouseup');
      contextMenu(); // "Remove row" item

      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown');
      expect(getDataAtCol(0)).toEqual(['A7']);
    });
    it('should not shift invalid row when removing a single row',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var hot = handsontable({
        data: [['aaa', 2], ['bbb', 3], ['ccc', 4], ['ddd', 'string'], ['eee', 6]],
        contextMenu: true,
        columns: function columns(column) {
          if (column === 1) {
            return {
              column: column,
              type: 'numeric'
            };
          }

          return {};
        }
      });
      hot.validateCells();
      yield sleep(100);
      selectCell(1, 1);
      contextMenu(); // "Remove row" item

      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown');
      expect($(hot.getCell(2, 1)).hasClass('htInvalid')).toBeTruthy();
    }));
  });
});

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

describe('CopyPaste', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  var DataTransferObject =
  /*#__PURE__*/
  function () {
    function DataTransferObject() {
      _classCallCheck(this, DataTransferObject);

      this.data = {
        'text/plain': '',
        'text/html': ''
      };
    }

    _createClass(DataTransferObject, [{
      key: "getData",
      value: function getData() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'text/plain';
        return this.data[type];
      }
    }, {
      key: "setData",
      value: function setData() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'text/plain';
        var value = arguments.length > 1 ? arguments[1] : undefined;
        this.data[type] = value;
      }
    }]);

    return DataTransferObject;
  }();

  function getClipboardEvent() {
    var event = {};
    event.clipboardData = new DataTransferObject();

    event.preventDefault = function () {};

    return event;
  }

  var arrayOfArrays = function arrayOfArrays() {
    return [['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['2008', 10, 11, 12, 13], ['2009', 20, 11, 14, 13], ['2010', 30, 15, 12, 13]];
  };

  describe('enabling/disabing plugin', function () {
    it('should copyPaste be set enabled as default', function () {
      var hot = handsontable();
      expect(hot.getSettings().copyPaste).toBeTruthy();
      expect(hot.getPlugin('CopyPaste').focusableElement).toBeDefined();
    });
    it('should do not create textarea element if copyPaste is disabled on initialization', function () {
      handsontable({
        copyPaste: false
      });
      expect($('#HandsontableCopyPaste').length).toEqual(0);
    });
  });
  it('should reuse focusable element by borrowing an element from cell editor',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable();
    selectCell(0, 0);
    yield sleep(10);
    expect(document.activeElement).toBe(getActiveEditor().TEXTAREA);
    expect($('#HandsontableCopyPaste').length).toBe(0);
  }));
  it('should create focusable element when cell editor doesn\'t exist', function () {
    handsontable({
      editor: false
    });
    selectCell(0, 0);
    expect($('#HandsontableCopyPaste').length).toEqual(1);
  });
  it('should keep focusable element if updateSettings occurred after the end of the selection', function () {
    handsontable();
    selectCell(0, 0, 2, 2);
    updateSettings({});
    expect(getPlugin('CopyPaste').focusableElement.mainElement).not.toBe(null);
  });
  describe('working with multiple tables', function () {
    beforeEach(function () {
      this.$container2 = $("<div id=\"".concat(id, "2\"></div>")).appendTo('body');
    });
    afterEach(function () {
      if (this.$container2) {
        this.$container2.handsontable('destroy');
        this.$container2.remove();
      }
    });
    it('should disable copyPaste only in particular table', function () {
      var hot1 = handsontable();
      var hot2 = spec().$container2.handsontable({
        copyPaste: false
      }).handsontable('getInstance');
      expect(hot1.getPlugin('CopyPaste').focusableElement).toBeDefined();
      expect(hot2.getPlugin('CopyPaste').focusableElement).toBeUndefined();
    });
    it('should not create HandsontableCopyPaste element until the table will be selected', function () {
      handsontable();
      spec().$container2.handsontable();
      expect($('#HandsontableCopyPaste').length).toBe(0);
    });
    it('should use focusable element from cell editor of the lastly selected table',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var hot1 = handsontable();
      var hot2 = spec().$container2.handsontable().handsontable('getInstance');
      hot1.selectCell(0, 0);
      hot2.selectCell(1, 1);
      yield sleep(0);
      expect($('#HandsontableCopyPaste').length).toBe(0);
      expect(document.activeElement).toBe(hot2.getActiveEditor().TEXTAREA);
    }));
    it('should destroy HandsontableCopyPaste element as long as at least one table has copyPaste enabled', function () {
      var hot1 = handsontable({
        editor: false
      });
      var hot2 = spec().$container2.handsontable({
        editor: false
      }).handsontable('getInstance');
      hot1.selectCell(0, 0);
      hot2.selectCell(0, 0);
      expect($('#HandsontableCopyPaste').length).toBe(1);
      hot1.updateSettings({
        copyPaste: false
      });
      expect($('#HandsontableCopyPaste').length).toBe(1);
      hot2.updateSettings({
        copyPaste: false
      });
      expect($('#HandsontableCopyPaste').length).toBe(0);
    });
    it('should not touch focusable element borrowed from cell editors', function () {
      var hot1 = handsontable();
      var hot2 = spec().$container2.handsontable().handsontable('getInstance');
      hot1.selectCell(0, 0);
      hot2.selectCell(0, 0);
      expect($('.handsontableInput').length).toBe(2);
      hot1.updateSettings({
        copyPaste: false
      });
      expect($('.handsontableInput').length).toBe(2);
      hot2.updateSettings({
        copyPaste: false
      });
      expect($('.handsontableInput').length).toBe(2);
    });
  });
  describe('copy', function () {
    xit('should be possible to copy data by keyboard shortcut', function () {// simulated keyboard shortcuts doesn't run the true events
    });
    xit('should be possible to copy data by contextMenu option', function () {// simulated mouse events doesn't run the true browser event
    });
    it('should be possible to copy data by API', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = hot.getPlugin('CopyPaste');
      selectCell(1, 0);
      plugin.onCopy(copyEvent);
      expect(copyEvent.clipboardData.getData('text/plain')).toBe('A2');
      expect(copyEvent.clipboardData.getData('text/html')).toBe('<table><tbody><tr><td>A2</td></tr></tbody></table>');
    });
    it('should call beforeCopy and afterCopy during copying operation', function () {
      var beforeCopySpy = jasmine.createSpy('beforeCopy');
      var afterCopySpy = jasmine.createSpy('afterCopy');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        beforeCopy: beforeCopySpy,
        afterCopy: afterCopySpy
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = hot.getPlugin('CopyPaste');
      selectCell(0, 0);
      plugin.onCopy(copyEvent);
      expect(beforeCopySpy.calls.count()).toEqual(1);
      expect(beforeCopySpy).toHaveBeenCalledWith([['A1']], [{
        startRow: 0,
        startCol: 0,
        endRow: 0,
        endCol: 0
      }], void 0, void 0, void 0, void 0);
      expect(afterCopySpy.calls.count()).toEqual(1);
      expect(afterCopySpy).toHaveBeenCalledWith([['A1']], [{
        startRow: 0,
        startCol: 0,
        endRow: 0,
        endCol: 0
      }], void 0, void 0, void 0, void 0);
    });
    it('should be possible to block copying', function () {
      var beforeCopySpy = jasmine.createSpy('beforeCopy');
      var afterCopySpy = jasmine.createSpy('afterCopy');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        beforeCopy: function beforeCopy() {
          beforeCopySpy();
          return false;
        },
        afterCopy: afterCopySpy
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = hot.getPlugin('CopyPaste');
      selectCell(0, 0);
      plugin.onCopy(copyEvent);
      expect(beforeCopySpy.calls.count()).toEqual(1);
      expect(afterCopySpy.calls.count()).toEqual(0);
    });
    it('should be possible modification of changes during copying', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        beforeCopy: function beforeCopy(changes) {
          changes.splice(0, 1);
        }
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = hot.getPlugin('CopyPaste');
      selectCell(0, 0, 1, 0);
      plugin.onCopy(copyEvent);
      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('A2');
      expect(copyEvent.clipboardData.getData('text/html')).toEqual('<table><tbody><tr><td>A2</td></tr></tbody></table>');
    });
    it('should be possible to copy multiline text', function () {
      handsontable({
        data: [['A\nB', 'C']]
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = getPlugin('CopyPaste');
      selectCell(0, 0, 0, 1);
      plugin.onCopy(copyEvent);
      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('"A\nB"\tC');
      expect(copyEvent.clipboardData.getData('text/html')).toEqual('<table><tbody><tr><td>A<br>B</td><td>C</td></tr></tbody></table>');
    });
    it('should be possible to copy special chars', function () {
      handsontable({
        data: [['!@#$%^&*()_+-={[', ']};:\'"\\|,<.>/?~']]
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = getPlugin('CopyPaste');
      selectCell(0, 0, 0, 1);
      plugin.onCopy(copyEvent);
      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('!@#$%^&*()_+-={[\t]};:\'"\\|,<.>/?~');
      expect(copyEvent.clipboardData.getData('text/html')).toEqual(['<table><tbody><tr><td>!@#$%^&amp;*()_+-={[</td>', '<td>]};:\'"\\|,&lt;.&gt;/?~</td></tr></tbody></table>'].join(''));
    });
    it('should be possible to copy text in quotes', function () {
      handsontable({
        data: [['{"test": "value"}'], ['{"test2": {"testtest": ""}}'], ['{"test3": ""}']]
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = getPlugin('CopyPaste');
      selectCell(0, 0, 2, 0);
      plugin.onCopy(copyEvent);
      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('{"test": "value"}\n{"test2": {"testtest": ""}}\n{"test3": ""}');
      expect(copyEvent.clipboardData.getData('text/html')).toEqual(['<table><tbody><tr><td>{"test": "value"}</td></tr><tr><td>{"test2": {"testtest": ""}}</td>', '</tr><tr><td>{"test3": ""}</td></tr></tbody></table>'].join(''));
    });
    it('should be possible to copy 0 and false', function () {
      handsontable({
        data: [[''], [0], [false], [undefined], [null]]
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = getPlugin('CopyPaste');
      selectCell(0, 0, 4, 0);
      plugin.onCopy(copyEvent);
      expect(copyEvent.clipboardData.getData('text/plain')).toEqual('\n0\nfalse\n\n');
      expect(copyEvent.clipboardData.getData('text/html')).toEqual(['<table><tbody><tr><td></td></tr><tr><td>0</td></tr><tr><td>false</td></tr>', '<tr><td></td></tr><tr><td></td></tr></tbody></table>'].join(''));
    });
  });
  describe('cut', function () {
    xit('should be possible to cut data by keyboard shortcut', function () {// simulated keyboard shortcuts doesn't run the true events
    });
    xit('should be possible to cut data by contextMenu option', function () {// simulated mouse events doesn't run the true browser event
    });
    it('should be possible to cut data by API', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      var cutEvent = getClipboardEvent('cut');
      var plugin = hot.getPlugin('CopyPaste');
      selectCell(1, 0);
      plugin.onCut(cutEvent);
      expect(cutEvent.clipboardData.getData('text/plain')).toBe('A2');
      expect(cutEvent.clipboardData.getData('text/html')).toEqual('<table><tbody><tr><td>A2</td></tr></tbody></table>');
      expect(hot.getDataAtCell(1, 0)).toBe('');
    });
    it('should call beforeCut and afterCut during cutting out operation', function () {
      var beforeCutSpy = jasmine.createSpy('beforeCut');
      var afterCutSpy = jasmine.createSpy('afterCut');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        beforeCut: beforeCutSpy,
        afterCut: afterCutSpy
      });
      var cutEvent = getClipboardEvent('cut');
      var plugin = hot.getPlugin('CopyPaste');
      selectCell(0, 0);
      plugin.onCut(cutEvent);
      expect(beforeCutSpy.calls.count()).toEqual(1);
      expect(beforeCutSpy).toHaveBeenCalledWith([['A1']], [{
        startRow: 0,
        startCol: 0,
        endRow: 0,
        endCol: 0
      }], void 0, void 0, void 0, void 0);
      expect(afterCutSpy.calls.count()).toEqual(1);
      expect(afterCutSpy).toHaveBeenCalledWith([['A1']], [{
        startRow: 0,
        startCol: 0,
        endRow: 0,
        endCol: 0
      }], void 0, void 0, void 0, void 0);
    });
  });
  describe('paste', function () {
    it('should not create new rows or columns when allowInsertRow and allowInsertColumn equal false',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: arrayOfArrays(),
        copyPaste: {
          pasteMode: 'shift_down'
        },
        allowInsertRow: false,
        allowInsertColumn: false
      });
      selectCell(3, 4); // selectAll

      triggerPaste('Kia\tNissan\tToyota');
      yield sleep(60);
      var expected = arrayOfArrays();
      expected[3][4] = 'Kia';
      expect(getData()).toEqual(expected);
    }));
    it('should shift data down instead of overwrite when paste (when allowInsertRow = false)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: arrayOfArrays(),
        copyPaste: {
          pasteMode: 'shift_down'
        },
        allowInsertRow: false
      });
      selectCell(1, 0); // selectAll

      triggerPaste('Kia\tNissan\tToyota');
      yield sleep(60);
      expect(getData().length).toEqual(4);
      expect(getData(0, 0, 2, 4)).toEqual([['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['Kia', 'Nissan', 'Toyota', 12, 13], ['2008', 10, 11, 14, 13]]);
    }));
    it('should shift data down instead of overwrite when paste (minSpareRows > 0)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: arrayOfArrays(),
        copyPaste: {
          pasteMode: 'shift_down'
        },
        minSpareRows: 1
      });
      selectCell(1, 0); // selectAll

      triggerPaste('Kia\tNissan\tToyota');
      yield sleep(60);
      expect(getData().length).toEqual(6);
      expect(getData(0, 0, 2, 4)).toEqual([['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['Kia', 'Nissan', 'Toyota', 12, 13], ['2008', 10, 11, 14, 13]]);
    }));
    it('should shift right insert instead of overwrite when paste',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: arrayOfArrays(),
        copyPaste: {
          pasteMode: 'shift_right'
        },
        allowInsertColumn: false
      });
      selectCell(1, 0); // selectAll

      triggerPaste('Kia\tNissan\tToyota');
      yield sleep(60);
      expect(getData()[0].length).toEqual(5);
      expect(getDataAtRow(1)).toEqual(['Kia', 'Nissan', 'Toyota', '2008', 10]);
    }));
    it('should shift right insert instead of overwrite when paste (minSpareCols > 0)', function (done) {
      handsontable({
        data: arrayOfArrays(),
        copyPaste: {
          pasteMode: 'shift_right'
        },
        minSpareCols: 1
      });
      selectCell(1, 0); // selectAll

      triggerPaste('Kia\tNissan\tToyota');
      setTimeout(function () {
        expect(getData()[0].length).toEqual(9);
        expect(getDataAtRow(1)).toEqual(['Kia', 'Nissan', 'Toyota', '2008', 10, 11, 12, 13, null]);
        done();
      }, 60);
    });
    it('should not throw an error when changes are null in `once` hook',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var errors = 0;

      try {
        handsontable({
          data: arrayOfArrays(),
          afterChange: function afterChange(changes, source) {
            if (source === 'loadData') {
              return;
            }

            loadData(arrayOfArrays());
          }
        });
        selectCell(1, 0); // selectAll

        triggerPaste('Kia\tNissan\tToyota');
      } catch (e) {
        errors += 1;
      }

      yield sleep(60);
      expect(errors).toEqual(0);
    }));
    it('should not paste any data, if no cell is selected', function (done) {
      var copiedData1 = 'foo';
      var copiedData2 = 'bar';
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 1)
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');
      expect(getSelected()).toBeUndefined();
      triggerPaste(copiedData1);
      setTimeout(function () {
        expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
        expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');
        expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');
      }, 100);
      setTimeout(function () {
        selectCell(1, 0, 2, 0);
        triggerPaste(copiedData2);
      }, 200);
      setTimeout(function () {
        expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
        expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual(copiedData2);
        expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual(copiedData2);
        done();
      }, 300);
    });
    it('should not paste any data, if no cell is selected (select/deselect cell using mouse)',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var copiedData = 'foo';
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 1)
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');
      spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseup');
      expect(getSelected()).toEqual([[1, 0, 1, 0]]);
      $('html').simulate('mousedown').simulate('mouseup');
      expect(getSelected()).toBeUndefined();
      triggerPaste(copiedData);
      yield sleep(100);
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');
    }));
    it('should call beforePaste and afterPaste during pasting operation',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var beforePasteSpy = jasmine.createSpy('beforePaste');
      var afterPasteSpy = jasmine.createSpy('afterPaste');
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        beforePaste: beforePasteSpy,
        afterPaste: afterPasteSpy
      });
      selectCell(0, 0);
      keyDown('ctrl');
      triggerPaste('Kia');
      yield sleep(60);
      expect(beforePasteSpy.calls.count()).toEqual(1);
      expect(beforePasteSpy).toHaveBeenCalledWith([['Kia']], [{
        startRow: 0,
        startCol: 0,
        endRow: 0,
        endCol: 0
      }], void 0, void 0, void 0, void 0);
      expect(afterPasteSpy.calls.count()).toEqual(1);
      expect(afterPasteSpy).toHaveBeenCalledWith([['Kia']], [{
        startRow: 0,
        startCol: 0,
        endRow: 0,
        endCol: 0
      }], void 0, void 0, void 0, void 0);
    }));
    it('should be possible to block pasting',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var afterPasteSpy = jasmine.createSpy('afterPaste');
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        beforePaste: function beforePaste() {
          return false;
        },
        afterPaste: afterPasteSpy
      });
      selectCell(0, 0);
      keyDown('ctrl');
      triggerPaste('Kia');
      yield sleep(60);
      expect(afterPasteSpy.calls.count()).toEqual(0);
    }));
    it('should be possible modification of changes',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        beforePaste: function beforePaste(changes) {
          changes.splice(0, 1);
        }
      });
      selectCell(0, 0);
      keyDown('ctrl');
      triggerPaste('Kia\nToyota');
      yield sleep(60);
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('Toyota');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');
    }));
    it('should be possible to paste copied data from the same instance',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5)
      });
      expect(getDataAtCell(3, 1, 3, 1)).toEqual('B4');
      var copyEvent = getClipboardEvent('copy');
      var plugin = getPlugin('CopyPaste');
      selectCell(0, 0, 1, 4);
      plugin.onCopy(copyEvent);
      selectCell(4, 1);
      plugin.onPaste(copyEvent);
      expect(getDataAtCell(4, 1)).toEqual('A1');
      expect(countCols()).toEqual(6);
      expect(countRows()).toEqual(6);
    }));
    it('should properly paste empty cells',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: [['A', ''], ['B', ''], ['C', ''], ['D', '']]
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = getPlugin('CopyPaste');
      selectCell(0, 1, 2, 1);
      plugin.onCopy(copyEvent);
      selectCell(2, 0);
      plugin.onPaste(copyEvent);
      expect(getDataAtCol(0)).toEqual(['A', 'B', '', '', '']);
    }));
    it('should properly paste data with special chars',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      handsontable({
        data: [['{""""}', ''], ['{""""}{""""}', ''], ['{""""}{""""}{""""}', '']]
      });
      var copyEvent = getClipboardEvent('copy');
      var plugin = getPlugin('CopyPaste');
      selectCell(0, 0, 2, 0);
      plugin.onCopy(copyEvent);
      selectCell(0, 1);
      plugin.onPaste(copyEvent);
      expect(getDataAtCol(1)).toEqual(['{""""}', '{""""}{""""}', '{""""}{""""}{""""}']);
    }));
    it('should properly parse newline in text/plain on Windows', function () {
      var afterChangeSpy = jasmine.createSpy('afterChange');
      handsontable({
        afterChange: afterChangeSpy
      });
      selectCell(0, 0);
      triggerPaste('Kia\r\nNissan\r\nToyota');
      expect(afterChangeSpy).toHaveBeenCalledWith([[0, 0, null, 'Kia'], [1, 0, null, 'Nissan'], [2, 0, null, 'Toyota']], 'CopyPaste.paste', void 0, void 0, void 0, void 0);
    });
  });
});

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('CustomBorders', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
    var wrapper = $('<div></div>').css({
      width: 400,
      height: 200,
      overflow: 'scroll'
    });
    this.$wrapper = this.$container.wrap(wrapper).parent();
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }

    this.$wrapper.remove();
  });
  describe('enabling/disabling plugin', function () {
    it('should be disabled by default', function () {
      var hot = handsontable();
      expect(hot.getPlugin('customBorders').isEnabled()).toBe(false);
    });
    it('should disable plugin using updateSettings', function () {
      var hot = handsontable({
        customBorders: true
      });
      hot.updateSettings({
        customBorders: false
      });
      expect(hot.getPlugin('customBorders').isEnabled()).toBe(false);
    });
    it('should enable plugin using updateSettings', function () {
      var hot = handsontable({
        customBorders: false
      });
      hot.updateSettings({
        customBorders: true
      });
      expect(hot.getPlugin('customBorders')).toBeDefined();
    });
  });
  it('should throw an exception `Unsupported selection ranges schema type was provided.` after calling setBorder method without parameter', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: true
    });
    var customBorders = hot.getPlugin('customBorders');
    var errors = 0;

    try {
      customBorders.setBorders();
    } catch (err) {
      errors += 1;
    }

    expect(errors).toEqual(1);
  });
  it('should draw borders by use setBorders method', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: true
    });
    var redBorder = {
      color: 'red',
      width: 2
    };
    var empty = {
      hide: true
    };
    var customBorders = hot.getPlugin('customBorders');
    selectCells([[1, 1, 2, 2]]);
    customBorders.setBorders(getSelected(), {
      top: {
        width: 2,
        color: 'red'
      },
      bottom: {
        width: 2,
        color: 'red'
      }
    });
    expect(getCellMeta(1, 1).borders.top).toEqual(redBorder);
    expect(getCellMeta(1, 1).borders.left).toEqual(empty);
    expect(getCellMeta(1, 1).borders.bottom).toEqual(redBorder);
    expect(getCellMeta(1, 1).borders.right).toEqual(empty);
    expect(getCellMeta(1, 2).borders.top).toEqual(redBorder);
    expect(getCellMeta(1, 2).borders.left).toEqual(empty);
    expect(getCellMeta(1, 2).borders.bottom).toEqual(redBorder);
    expect(getCellMeta(1, 2).borders.right).toEqual(empty);
    expect(getCellMeta(2, 1).borders.top).toEqual(redBorder);
    expect(getCellMeta(2, 1).borders.left).toEqual(empty);
    expect(getCellMeta(2, 1).borders.bottom).toEqual(redBorder);
    expect(getCellMeta(2, 1).borders.right).toEqual(empty);
    expect(getCellMeta(2, 2).borders.top).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.left).toEqual(empty);
    expect(getCellMeta(2, 2).borders.bottom).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.right).toEqual(empty);
  });
  it('should redraw borders by use setBorders method', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: [{
        row: 2,
        col: 2,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 1,
          color: 'green'
        },
        top: {
          width: 2,
          color: 'green'
        }
      }]
    });
    var redBorder = {
      color: 'red',
      width: 2
    };
    var greenBorder = {
      color: 'green',
      width: 1
    };
    var customBorders = hot.getPlugin('customBorders');
    selectCell(2, 2);
    customBorders.setBorders(getSelectedRange(), {
      top: {
        width: 2,
        color: 'red'
      },
      bottom: {
        width: 2,
        color: 'red'
      }
    });
    expect(getCellMeta(2, 2).borders.top).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.bottom).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.right).toEqual(greenBorder);
  });
  it('should hide only specific border by use setBorders method with {hide: true}', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: [{
        row: 2,
        col: 2,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 2,
          color: 'red'
        },
        top: {
          width: 1,
          color: 'green'
        }
      }]
    });
    var greenBorder = {
      color: 'green',
      width: 1
    };
    var redBorder = {
      color: 'red',
      width: 2
    };
    var empty = {
      hide: true
    };
    var customBorders = hot.getPlugin('customBorders');
    expect(getCellMeta(2, 2).borders.top).toEqual(greenBorder);
    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.bottom).toEqual(empty);
    expect(getCellMeta(2, 2).borders.right).toEqual(redBorder);
    selectCell(2, 2);
    customBorders.setBorders(getSelected(), {
      top: {
        hide: true
      }
    });
    expect(getCellMeta(2, 2).borders.top).toEqual(empty);
    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.bottom).toEqual(empty);
    expect(getCellMeta(2, 2).borders.right).toEqual(redBorder);
  });
  it('should hide all border by use setBorders method with eg. {top: false}', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: [{
        row: 2,
        col: 2,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 2,
          color: 'red'
        },
        top: {
          width: 1,
          color: 'green'
        }
      }]
    });
    var greenBorder = {
      color: 'green',
      width: 1
    };
    var redBorder = {
      color: 'red',
      width: 2
    };
    var empty = {
      hide: true
    };
    var customBorders = hot.getPlugin('customBorders');
    expect(getCellMeta(2, 2).borders.top).toEqual(greenBorder);
    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.bottom).toEqual(empty);
    expect(getCellMeta(2, 2).borders.right).toEqual(redBorder);
    expect(getCellMeta(0, 0).borders).toBeUndefined();
    expect(getCellMeta(0, 1).borders).toBeUndefined();
    expect(getCellMeta(0, 2).borders).toBeUndefined();
    expect(getCellMeta(0, 3).borders).toBeUndefined();
    expect(getCellMeta(1, 0).borders).toBeUndefined();
    expect(getCellMeta(1, 1).borders).toBeUndefined();
    expect(getCellMeta(1, 2).borders).toBeUndefined();
    expect(getCellMeta(1, 3).borders).toBeUndefined();
    expect(getCellMeta(2, 0).borders).toBeUndefined();
    expect(getCellMeta(2, 1).borders).toBeUndefined();
    expect(getCellMeta(2, 3).borders).toBeUndefined();
    expect(getCellMeta(3, 0).borders).toBeUndefined();
    expect(getCellMeta(3, 1).borders).toBeUndefined();
    expect(getCellMeta(3, 2).borders).toBeUndefined();
    expect(getCellMeta(3, 3).borders).toBeUndefined();
    selectCell(2, 2);
    customBorders.setBorders(getSelected(), {
      top: false
    });
    expect(getCellMeta(2, 2).borders.top).toEqual(empty);
    expect(getCellMeta(2, 2).borders.left).toEqual(redBorder);
    expect(getCellMeta(2, 2).borders.bottom).toEqual(empty);
    expect(getCellMeta(2, 2).borders.right).toEqual(redBorder);
    expect(getCellMeta(0, 0).borders).toBeUndefined();
    expect(getCellMeta(0, 1).borders).toBeUndefined();
    expect(getCellMeta(0, 2).borders).toBeUndefined();
    expect(getCellMeta(0, 3).borders).toBeUndefined();
    expect(getCellMeta(1, 0).borders).toBeUndefined();
    expect(getCellMeta(1, 1).borders).toBeUndefined();
    expect(getCellMeta(1, 2).borders).toBeUndefined();
    expect(getCellMeta(1, 3).borders).toBeUndefined();
    expect(getCellMeta(2, 0).borders).toBeUndefined();
    expect(getCellMeta(2, 1).borders).toBeUndefined();
    expect(getCellMeta(2, 3).borders).toBeUndefined();
    expect(getCellMeta(3, 0).borders).toBeUndefined();
    expect(getCellMeta(3, 1).borders).toBeUndefined();
    expect(getCellMeta(3, 2).borders).toBeUndefined();
    expect(getCellMeta(3, 3).borders).toBeUndefined();
  });
  it('should return borders from the selected area by use getBorders method', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: [{
        row: 2,
        col: 2,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 1,
          color: 'green'
        },
        top: {
          width: 1,
          color: 'green'
        }
      }]
    });
    var redBorder = {
      color: 'red',
      width: 2
    };
    var greenBorder = {
      color: 'green',
      width: 1
    };
    var empty = {
      hide: true
    };
    var customBorders = hot.getPlugin('customBorders');
    hot.selectCells([[1, 1, 2, 2]]);
    var borders = customBorders.getBorders(getSelected());
    expect(borders.length).toEqual(1);
    expect(borders[0].top).toEqual(greenBorder);
    expect(borders[0].left).toEqual(redBorder);
    expect(borders[0].bottom).toEqual(empty);
    expect(borders[0].right).toEqual(greenBorder);
  });
  it('should return all borders by use getBorders method without parameter', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: [{
        range: {
          from: {
            row: 1,
            col: 1
          },
          to: {
            row: 3,
            col: 3
          }
        },
        top: {
          width: 2,
          color: 'blue'
        },
        left: {
          width: 2,
          color: 'orange'
        },
        bottom: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 2,
          color: 'magenta'
        }
      }, {
        row: 2,
        col: 2,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 1,
          color: 'green'
        },
        top: {
          width: 2,
          color: 'green'
        }
      }]
    });
    var customBorders = hot.getPlugin('customBorders');
    var borders = customBorders.getBorders();
    expect(borders.length).toEqual(9);
  });
  it('should clear borders from the selected area by use clearBorders method', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: [{
        range: {
          from: {
            row: 1,
            col: 1
          },
          to: {
            row: 3,
            col: 3
          }
        },
        top: {
          width: 2,
          color: 'blue'
        },
        left: {
          width: 2,
          color: 'orange'
        },
        bottom: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 2,
          color: 'magenta'
        }
      }, {
        row: 2,
        col: 2,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 1,
          color: 'green'
        },
        top: {
          width: 2,
          color: 'green'
        }
      }]
    });
    var magentaBorder = {
      color: 'magenta',
      width: 2
    };
    var blueBorder = {
      color: 'blue',
      width: 2
    };
    var orangeBorder = {
      color: 'orange',
      width: 2
    };
    var redBorder = {
      color: 'red',
      width: 2
    };
    var customBorders = hot.getPlugin('customBorders');
    selectCells([[0, 0, 2, 2]]);
    customBorders.clearBorders(getSelectedRange());
    expect(getCellMeta(1, 1).borders).toBeUndefined();
    expect(getCellMeta(1, 2).borders).toBeUndefined();
    expect(getCellMeta(2, 1).borders).toBeUndefined();
    expect(getCellMeta(2, 2).borders).toBeUndefined();
    expect(getCellMeta(1, 3).borders.top).toEqual(blueBorder);
    expect(getCellMeta(1, 3).borders.right).toEqual(magentaBorder);
    expect(getCellMeta(2, 3).borders.right).toEqual(magentaBorder);
    expect(getCellMeta(3, 1).borders.left).toEqual(orangeBorder);
    expect(getCellMeta(3, 1).borders.bottom).toEqual(redBorder);
    expect(getCellMeta(3, 2).borders.bottom).toEqual(redBorder);
    expect(getCellMeta(3, 3).borders.right).toEqual(magentaBorder);
    expect(getCellMeta(3, 3).borders.bottom).toEqual(redBorder);
  });
  it('should clear all borders by use clearBorders method without parameter', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      customBorders: [{
        range: {
          from: {
            row: 1,
            col: 1
          },
          to: {
            row: 3,
            col: 3
          }
        },
        top: {
          width: 2,
          color: 'blue'
        },
        left: {
          width: 2,
          color: 'orange'
        },
        bottom: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 2,
          color: 'magenta'
        }
      }, {
        row: 2,
        col: 2,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 1,
          color: 'green'
        },
        top: {
          width: 2,
          color: 'green'
        }
      }]
    });
    var customBorders = hot.getPlugin('customBorders');
    customBorders.clearBorders();
    expect(getCellMeta(1, 1).borders).toBeUndefined();
    expect(getCellMeta(1, 2).borders).toBeUndefined();
    expect(getCellMeta(2, 1).borders).toBeUndefined();
    expect(getCellMeta(2, 2).borders).toBeUndefined();
    expect(getCellMeta(1, 3).borders).toBeUndefined();
    expect(getCellMeta(2, 3).borders).toBeUndefined();
    expect(getCellMeta(3, 1).borders).toBeUndefined();
    expect(getCellMeta(3, 2).borders).toBeUndefined();
    expect(getCellMeta(3, 3).borders).toBeUndefined();
  });
  it('should draw borders from context menu options when was first cleared borders by the clearBorders method',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      contextMenu: true,
      customBorders: [{
        row: 0,
        col: 0,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 1,
          color: 'green'
        },
        top: {
          width: 2,
          color: 'green'
        }
      }]
    });
    var defaultBorder = {
      color: '#000',
      width: 1
    };
    var empty = {
      hide: true
    };
    var customBorders = hot.getPlugin('customBorders');
    selectCell(0, 0);
    customBorders.clearBorders(getSelectedRange());
    expect(getCellMeta(0, 0).borders).toBeUndefined();
    contextMenu();
    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);
    item.simulate('mouseover');
    yield sleep(300);
    var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
    var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);
    button.simulate('mousedown');
    expect(getCellMeta(0, 0).borders.top).toEqual(defaultBorder);
    expect(getCellMeta(0, 0).borders.left).toEqual(empty);
    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);
    expect(getCellMeta(0, 0).borders.right).toEqual(empty);
  }));
  it('should clear all borders when first was cleared borders by the clearBorders method with selections,' + 'then draw borders from context menu options, and then was cleared borders by the clearBorders method without selections',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      contextMenu: true,
      customBorders: [{
        row: 0,
        col: 0,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 1,
          color: 'green'
        },
        top: {
          width: 2,
          color: 'green'
        }
      }]
    });
    var defaultBorder = {
      color: '#000',
      width: 1
    };
    var empty = {
      hide: true
    };
    var customBorders = hot.getPlugin('customBorders');
    selectCell(0, 0);
    customBorders.clearBorders(getSelectedRange());
    expect(getCellMeta(0, 0).borders).toBeUndefined();
    contextMenu();
    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);
    item.simulate('mouseover');
    yield sleep(300);
    var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
    var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);
    button.simulate('mousedown');
    expect(getCellMeta(0, 0).borders.top).toEqual(defaultBorder);
    expect(getCellMeta(0, 0).borders.left).toEqual(empty);
    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);
    expect(getCellMeta(0, 0).borders.right).toEqual(empty);
    customBorders.clearBorders();
    expect(getCellMeta(0, 0).borders).toBeUndefined();
  }));
  it('should draw top border from context menu options',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      contextMenu: true,
      customBorders: true
    });
    var defaultBorder = {
      color: '#000',
      width: 1
    };
    var empty = {
      hide: true
    };
    contextMenu();
    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);
    item.simulate('mouseover');
    yield sleep(300);
    var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
    var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);
    button.simulate('mousedown'); // expect(getCellMeta(0,0).borders.hasOwnProperty('top')).toBe(true);

    expect(getCellMeta(0, 0).borders.top).toEqual(defaultBorder);
    expect(getCellMeta(0, 0).borders.left).toEqual(empty);
    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);
    expect(getCellMeta(0, 0).borders.right).toEqual(empty);
  }));
  it('should draw left border from context menu options',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      contextMenu: true,
      customBorders: true
    });
    var defaultBorder = {
      color: '#000',
      width: 1
    };
    var empty = {
      hide: true
    };
    contextMenu();
    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);
    item.simulate('mouseover');
    yield sleep(300);
    var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
    var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(3);
    button.simulate('mousedown');
    /* eslint-disable no-prototype-builtins */

    expect(getCellMeta(0, 0).borders.hasOwnProperty('left')).toBe(true);
    expect(getCellMeta(0, 0).borders.top).toEqual(empty);
    expect(getCellMeta(0, 0).borders.left).toEqual(defaultBorder);
    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);
    expect(getCellMeta(0, 0).borders.right).toEqual(empty);
  }));
  it('should draw right border from context menu options',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      contextMenu: true,
      customBorders: true
    });
    var defaultBorder = {
      color: '#000',
      width: 1
    };
    var empty = {
      hide: true
    };
    contextMenu();
    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);
    item.simulate('mouseover');
    yield sleep(300);
    var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
    var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(1);
    button.simulate('mousedown');
    /* eslint-disable no-prototype-builtins */

    expect(getCellMeta(0, 0).borders.hasOwnProperty('right')).toBe(true);
    expect(getCellMeta(0, 0).borders.top).toEqual(empty);
    expect(getCellMeta(0, 0).borders.left).toEqual(empty);
    expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);
    expect(getCellMeta(0, 0).borders.right).toEqual(defaultBorder);
  }));
  it('should draw bottom border from context menu options',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      contextMenu: true,
      customBorders: true
    });
    var defaultBorder = {
      color: '#000',
      width: 1
    };
    var empty = {
      hide: true
    };
    contextMenu();
    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);
    item.simulate('mouseover');
    yield sleep(300);
    var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
    var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);
    button.simulate('mousedown');
    /* eslint-disable no-prototype-builtins */

    expect(getCellMeta(0, 0).borders.hasOwnProperty('right')).toBe(true);
    expect(getCellMeta(0, 0).borders.top).toEqual(empty);
    expect(getCellMeta(0, 0).borders.left).toEqual(empty);
    expect(getCellMeta(0, 0).borders.bottom).toEqual(defaultBorder);
    expect(getCellMeta(0, 0).borders.right).toEqual(empty);
  }));
  it('should remove all bottoms border from context menu options',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      contextMenu: true,
      customBorders: [{
        row: 0,
        col: 0,
        left: {
          width: 2,
          color: 'red'
        },
        right: {
          width: 1,
          color: 'green'
        }
      }]
    });
    contextMenu();
    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(12);
    item.simulate('mouseover');
    yield sleep(300);
    var contextSubMenu = $(".htContextMenuSub_".concat(item.text()));
    var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(4);
    button.simulate('mousedown');
    expect(getCellMeta(0, 0).borders).toBeUndefined();
  }));
  it('should disable `Borders` context menu item when menu was triggered from corner header', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
      rowHeaders: true,
      colHeaders: true,
      contextMenu: true,
      customBorders: true
    });
    $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0).simulate('mousedown', {
      which: 3
    });
    contextMenu();
    expect($('.htContextMenu tbody td.htDisabled').text()).toBe(['Insert column left', 'Insert column right', 'Remove row', 'Remove column', 'Undo', 'Redo', 'Read only', 'Alignment', 'Borders'].join(''));
  });
});

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('DragToScroll', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  function createBoundaries() {
    return {
      top: 100,
      left: 100,
      width: 900,
      height: 900,
      bottom: 1000,
      right: 1000
    };
  }

  it('exact top, exact left should be in boundaries', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      dragToScroll: true
    });
    var dragToScroll = hot.getPlugin('dragToScroll');
    dragToScroll.setBoundaries(createBoundaries());
    dragToScroll.setCallback(function (scrollX, scrollY) {
      expect(scrollX).toEqual(0);
      expect(scrollY).toEqual(0);
    });
    dragToScroll.check(100, 100);
  });
  it('exact bottom, exact right should be in boundaries', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      dragToScroll: true
    });
    var dragToScroll = hot.getPlugin('dragToScroll');
    dragToScroll.setBoundaries(createBoundaries());
    dragToScroll.setCallback(function (scrollX, scrollY) {
      expect(scrollX).toEqual(0);
      expect(scrollY).toEqual(0);
    });
    dragToScroll.check(1000, 1000);
  });
  it('less than top, less than left should be out in "top" direction', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      dragToScroll: true
    });
    var dragToScroll = hot.getPlugin('dragToScroll');
    dragToScroll.setBoundaries(createBoundaries());
    dragToScroll.setCallback(function (scrollX, scrollY) {
      expect(scrollX).toEqual(-1);
      expect(scrollY).toEqual(-1);
    });
    dragToScroll.check(99, 99);
  });
  it('exact top, less than left should be out in "left" direction', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      dragToScroll: true
    });
    var dragToScroll = hot.getPlugin('dragToScroll');
    dragToScroll.setBoundaries(createBoundaries());
    dragToScroll.setCallback(function (scrollX, scrollY) {
      expect(scrollX).toEqual(-1);
      expect(scrollY).toEqual(0);
    });
    dragToScroll.check(99, 100);
  });
  it('less than top, more than right should be out in "top" direction', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      dragToScroll: true
    });
    var dragToScroll = hot.getPlugin('dragToScroll');
    dragToScroll.setBoundaries(createBoundaries());
    dragToScroll.setCallback(function (scrollX, scrollY) {
      expect(scrollX).toEqual(1);
      expect(scrollY).toEqual(-1);
    });
    dragToScroll.check(1001, 99);
  });
  it('more than bottom, more than right should be out in "bottom" direction', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      dragToScroll: true
    });
    var dragToScroll = hot.getPlugin('dragToScroll');
    dragToScroll.setBoundaries(createBoundaries());
    dragToScroll.setCallback(function (scrollX, scrollY) {
      expect(scrollX).toEqual(1);
      expect(scrollY).toEqual(1);
    });
    dragToScroll.check(1001, 1001);
  });
  it('exact bottom, more than right should be out in "right" direction', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      dragToScroll: true
    });
    var dragToScroll = hot.getPlugin('dragToScroll');
    dragToScroll.setBoundaries(createBoundaries());
    dragToScroll.setCallback(function (scrollX, scrollY) {
      expect(scrollX).toEqual(1);
      expect(scrollY).toEqual(0);
    });
    dragToScroll.check(1001, 1000);
  });
  it('more than bottom, less than left should be out in "bottom" direction', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(4, 4),
      dragToScroll: true
    });
    var dragToScroll = hot.getPlugin('dragToScroll');
    dragToScroll.setBoundaries(createBoundaries());
    dragToScroll.setCallback(function (scrollX, scrollY) {
      expect(scrollX).toEqual(-1);
      expect(scrollY).toEqual(1);
    });
    dragToScroll.check(99, 1001);
  });
});

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('manualColumnFreeze', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('freezeColumn', function () {
    it('should increase fixedColumnsLeft setting', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true
      });
      var plugin = hot.getPlugin('manualColumnFreeze');
      plugin.freezeColumn(4);
      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);
    });
    it('should freeze (make fixed) the column provided as an argument', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true
      });
      var plugin = hot.getPlugin('manualColumnFreeze');
      var movePlugin = hot.getPlugin('manualColumnMove');
      plugin.freezeColumn(5);
      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(5);
    });
  });
  describe('unfreezeColumn', function () {
    it('should decrease fixedColumnsLeft setting', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true,
        fixedColumnsLeft: 1
      });
      var plugin = hot.getPlugin('manualColumnFreeze');
      plugin.unfreezeColumn(0);
      expect(hot.getSettings().fixedColumnsLeft).toEqual(0);
    });
    it('should unfreeze (make non-fixed) the column provided as an argument', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true,
        fixedColumnsLeft: 3
      });
      var plugin = hot.getPlugin('manualColumnFreeze');
      var movePlugin = hot.getPlugin('manualColumnMove');
      plugin.unfreezeColumn(0);
      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);
      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(1);
      expect(movePlugin.columnsMapper.getValueByIndex(1)).toEqual(2);
      expect(movePlugin.columnsMapper.getValueByIndex(2)).toEqual(0);
    });
    it('should unfreeze the last column', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true
      });
      var plugin = hot.getPlugin('manualColumnFreeze');
      var movePlugin = hot.getPlugin('manualColumnMove');
      plugin.freezeColumn(9);
      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);
      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(9);
      expect(movePlugin.columnsMapper.getValueByIndex(9)).toEqual(8);
      plugin.unfreezeColumn(0);
      expect(hot.getSettings().fixedColumnsLeft).toEqual(0);
      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(0);
      expect(movePlugin.columnsMapper.getValueByIndex(9)).toEqual(9);
    });
  });
  describe('functionality', function () {
    it('should add a \'freeze column\' context menu entry for non-fixed columns', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true,
        contextMenu: true
      });
      selectCell(1, 1);
      contextMenu();
      var freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function () {
        return $(this).text() === 'Freeze column';
      });
      expect(freezeEntry.size()).toEqual(1);
    });
    it('should add a \'unfreeze column\' context menu entry for fixed columns', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true,
        contextMenu: true,
        fixedColumnsLeft: 2
      });
      selectCell(1, 1);
      contextMenu();
      var freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function () {
        return $(this).text() === 'Unfreeze column';
      });
      expect(freezeEntry.size()).toEqual(1);
    });
    it('should fix the desired column after clicking the \'freeze column\' context menu entry', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true,
        fixedColumnsLeft: 1,
        contextMenu: true
      });
      selectCell(1, 3);
      var dataAtCell = hot.getDataAtCell(1, 3);
      contextMenu();
      var freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function () {
        if ($(this).text() === 'Freeze column') {
          return true;
        }

        return false;
      });
      expect(freezeEntry.size()).toEqual(1);
      freezeEntry.eq(0).simulate('mousedown');
      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);
      expect(hot.getDataAtCell(1, 1)).toEqual(dataAtCell);
    });
    it('should unfix the desired column (and revert it to it\'s original position) after clicking the \'unfreeze column\' context menu entry',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnFreeze: true,
        fixedColumnsLeft: 3,
        manualColumnMove: [0, 2, 5, 3, 4, 1, 6, 7, 8, 9],
        contextMenu: true,
        rowHeaders: true
      });
      var dataAtCell = hot.getDataAtCell(1, 0);
      expect(dataAtCell).toEqual('A2');
      dataAtCell = hot.getDataAtCell(1, 1);
      expect(dataAtCell).toEqual('C2');
      dataAtCell = hot.getDataAtCell(1, 2);
      expect(dataAtCell).toEqual('F2');
      selectCell(1, 1);
      contextMenu();
      var freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function () {
        return $(this).text() === 'Unfreeze column';
      });
      freezeEntry.eq(0).simulate('mousedown');
      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);
      dataAtCell = hot.getDataAtCell(1, 0);
      expect(dataAtCell).toEqual('A2');
      dataAtCell = hot.getDataAtCell(1, 1);
      expect(dataAtCell).toEqual('F2');
      dataAtCell = hot.getDataAtCell(1, 2);
      expect(dataAtCell).toEqual('C2');
      selectCell(1, 1);
      contextMenu();
      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function () {
        if ($(this).text() === 'Unfreeze column') {
          return true;
        }

        return false;
      });
      freezeEntry.eq(0).simulate('mousedown');
      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);
      dataAtCell = hot.getDataAtCell(1, 0);
      expect(dataAtCell).toEqual('A2');
      dataAtCell = hot.getDataAtCell(1, 1);
      expect(dataAtCell).toEqual('C2');
      dataAtCell = hot.getDataAtCell(1, 2);
      expect(dataAtCell).toEqual('D2');
      dataAtCell = hot.getDataAtCell(1, 5);
      expect(dataAtCell).toEqual('F2'); // Use the modified columns position.

      hot.updateSettings({
        fixedColumnsLeft: 0,
        manualColumnMove: [0, 2, 5, 3, 4, 1, 6, 7, 8, 9]
      });
      yield sleep(300);
      hot.getSettings().fixedColumnsLeft = 0;
      selectCell(1, 2);
      contextMenu();
      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function () {
        return $(this).text() === 'Freeze column';
      });
      freezeEntry.eq(0).simulate('mousedown');
      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);
      dataAtCell = hot.getDataAtCell(1, 0);
      expect(dataAtCell).toEqual('F2');
      selectCell(1, 0);
      contextMenu();
      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function () {
        return $(this).text() === 'Unfreeze column';
      });
      freezeEntry.eq(0).simulate('mousedown');
      expect(hot.getSettings().fixedColumnsLeft).toEqual(0);
      dataAtCell = hot.getDataAtCell(1, 2);
      expect(dataAtCell).toEqual('F2');
    }));
  });
});

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('manualColumnMove', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('init', function () {
    it('should change column order at init', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: [1, 2, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');
    });
  });
  describe('persistentState', function () {
    it('should load data from cache after initialization of new Handsontable instance', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: true,
        persistentState: true
      });
      var dataAt0x2Cell = getDataAtCell(0, 2);
      var manualColumnMovePlugin = hot.getPlugin('manualColumnMove');
      manualColumnMovePlugin.moveColumn(2, 0);
      manualColumnMovePlugin.persistentStateSave();
      hot.destroy();
      spec().$container.remove();
      spec().$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: true,
        persistentState: true
      });
      expect(getDataAtCell(0, 0)).toEqual(dataAt0x2Cell);
    });
    it('should work with updateSettings properly', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: true,
        persistentState: true
      });
      var dataAt0x2Cell = getDataAtCell(0, 2);
      var manualColumnMovePlugin = hot.getPlugin('manualColumnMove');
      manualColumnMovePlugin.moveColumn(2, 0);
      manualColumnMovePlugin.persistentStateSave();
      updateSettings({});
      expect(getDataAtCell(0, 0)).toEqual(dataAt0x2Cell);
    });
  });
  describe('updateSettings', function () {
    it('should be enabled after specifying it in updateSettings config', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true
      });
      updateSettings({
        manualColumnMove: true
      });
      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mouseup');
      expect(spec().$container.hasClass('after-selection--columns')).toBeGreaterThan(0);
    });
    it('should change the default column order with updateSettings', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
      updateSettings({
        manualColumnMove: [2, 1, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');
    });
    it('should change column order with updateSettings', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: [1, 2, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');
      updateSettings({
        manualColumnMove: [2, 1, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');
    });
    it('should update columnsMapper when updateSettings change numbers of columns', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
      hot.getPlugin('manualColumnMove').moveColumn(2, 0);
      updateSettings({
        columns: [{
          data: 2
        }, {
          data: 0
        }, {
          data: 1
        }]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');
    });
    it('should reset column order with updateSettings when undefined is passed', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: [1, 2, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');
      updateSettings({
        manualColumnMove: void 0
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
    });
  });
  describe('loadData', function () {
    it('should increase numbers of columns if it is necessary', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        manualColumnMove: true
      });
      hot.loadData(Handsontable.helper.createSpreadsheetData(10, 10));
      expect(countRows()).toEqual(10);
      expect(hot.getPlugin('manualColumnMove').columnsMapper.__arrayMap.length).toEqual(10);
    });
    it('should decrease numbers of columns if it is necessary', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        manualColumnMove: true
      });
      hot.loadData(Handsontable.helper.createSpreadsheetData(2, 2));
      expect(countRows()).toEqual(2);
      expect(hot.getPlugin('manualColumnMove').columnsMapper.__arrayMap.length).toEqual(2);
    });
  });
  describe('moving', function () {
    it('should move column by API', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
      hot.getPlugin('manualColumnMove').moveColumn(2, 0);
      hot.render();
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('B1');
    });
    it('should move many columns by API', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
      hot.getPlugin('manualColumnMove').moveColumns([7, 9, 8], 0);
      hot.render();
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('H1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('I1');
    });
    it('should trigger an beforeColumnMove event before column move', function () {
      var beforeMoveColumnCallback = jasmine.createSpy('beforeMoveColumnCallback');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true,
        beforeColumnMove: beforeMoveColumnCallback
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
      hot.getPlugin('manualColumnMove').moveColumns([8, 9, 7], 0);
      hot.render();
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('I1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('H1');
      expect(beforeMoveColumnCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);
    });
    it('should trigger an afterColumnMove event after column move', function () {
      var afterMoveColumnCallback = jasmine.createSpy('afterMoveColumnCallback');
      spec().$container.height(150);
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true,
        afterColumnMove: afterMoveColumnCallback
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
      hot.getPlugin('manualColumnMove').moveColumns([8, 9, 7], 0);
      hot.render();
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('I1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('H1');
      expect(afterMoveColumnCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);
    });
    it('should move the second column to the first column', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
      var $rowsHeaders = spec().$container.find('.ht_clone_top tr th');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(1).simulate('mouseup');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(0).simulate('mouseover');
      $rowsHeaders.eq(0).simulate('mousemove');
      $rowsHeaders.eq(0).simulate('mouseup');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
    });
    it('should move the second row to the third row', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');
      var $rowsHeaders = spec().$container.find('.ht_clone_top tr th');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(1).simulate('mouseup');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(3).simulate('mouseover');
      $rowsHeaders.eq(3).simulate('mousemove');
      $rowsHeaders.eq(3).simulate('mouseup');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('B1');
    });
    it('should properly scrolling viewport if mouse is over part-visible cell', function (done) {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 20),
        colHeaders: true,
        rowHeaders: true,
        manualColumnMove: true,
        width: 600,
        height: 600,
        colWidths: 47
      });
      hot.selectCell(0, 19);
      setTimeout(function () {
        expect(hot.view.wt.wtTable.getFirstVisibleColumn()).toBeGreaterThan(8);
        var $rowsHeaders = spec().$container.find('.ht_clone_top tr th');
        $rowsHeaders.eq(2).simulate('mousedown');
        $rowsHeaders.eq(2).simulate('mouseup');
        $rowsHeaders.eq(2).simulate('mousedown');
        $rowsHeaders.eq(1).simulate('mouseover');
        $rowsHeaders.eq(1).simulate('mousemove');
        $rowsHeaders.eq(1).simulate('mouseup');
      }, 50);
      setTimeout(function () {
        expect(hot.view.wt.wtTable.getFirstVisibleColumn()).toBeLessThan(9);
        done();
      }, 150);
    });
    it('moving column should keep cell meta created using cells function', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true,
        cells: function cells(row, col) {
          if (row === 1 && col === 0) {
            this.readOnly = true;
          }
        }
      });
      var htCore = getHtCore();
      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);
      hot.getPlugin('manualColumnMove').moveColumn(0, 3);
      hot.render();
      expect(htCore.find('tbody tr:eq(1) td:eq(2)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);
    });
    it('moving column should keep cell meta created using cell array', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true,
        cell: [{
          row: 1,
          col: 0,
          readOnly: true
        }]
      });
      var htCore = getHtCore();
      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);
      hot.getPlugin('manualColumnMove').moveColumn(3, 0);
      hot.render();
      expect(htCore.find('tbody tr:eq(1) td:eq(1)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);
    });
  });
  describe('callbacks', function () {
    it('should run `beforeColumnMove` and `afterColumnMove` with proper visual `target` parameter', function () {
      var targetParameterInsideBeforeColumnMoveCallback;
      var targetParameterInsideAfterColumnMoveCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        colHeaders: true,
        manualColumnMove: true,
        beforeColumnMove: function beforeColumnMove(columns, target) {
          targetParameterInsideBeforeColumnMoveCallback = target;
        },
        afterColumnMove: function afterColumnMove(columns, target) {
          targetParameterInsideAfterColumnMoveCallback = target;
        }
      });
      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mouseup');
      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseover');
      spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mousemove');
      spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseup');
      expect(targetParameterInsideBeforeColumnMoveCallback).toEqual(2);
      expect(targetParameterInsideAfterColumnMoveCallback).toEqual(2);
    });
    it('should run `beforeColumnMove` and `afterColumnMove` with proper visual `columns` parameter', function () {
      var columnsParameterInsideBeforeColumnMoveCallback;
      var columnsParameterInsideAfterColumnMoveCallback;
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true,
        beforeColumnMove: function beforeColumnMove(columns) {
          columnsParameterInsideBeforeColumnMoveCallback = columns;
        },
        afterColumnMove: function afterColumnMove(columns) {
          columnsParameterInsideAfterColumnMoveCallback = columns;
        }
      });
      hot.getPlugin('manualColumnMove').moveColumn(2, 0);
      expect(columnsParameterInsideBeforeColumnMoveCallback).toEqual([2]);
      expect(columnsParameterInsideAfterColumnMoveCallback).toEqual([2]);
      expect(columnsParameterInsideBeforeColumnMoveCallback).toEqual(columnsParameterInsideAfterColumnMoveCallback);
      hot.getPlugin('manualColumnMove').moveColumn(2, 0);
      expect(columnsParameterInsideBeforeColumnMoveCallback).toEqual([2]);
      expect(columnsParameterInsideAfterColumnMoveCallback).toEqual([2]);
      expect(columnsParameterInsideBeforeColumnMoveCallback).toEqual(columnsParameterInsideAfterColumnMoveCallback);
    });
  });
  describe('copy-paste', function () {
    it('should create new columns is are needed', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        colHeaders: true,
        manualColumnMove: true
      });
      var changesSet = [[3, 4, 'A1'], [3, 5, 'B1'], [3, 6, 'C1'], [3, 7, 'D1']]; // unfortunately couse of security rules, we can't simulate native mechanism (e.g. CTRL+C -> CTRL+V)

      hot.setDataAtCell(changesSet, void 0, void 0, 'CopyPaste.paste');
      expect(hot.countCols()).toEqual(8);
    });
  });
  describe('undoRedo', function () {
    xit('should back changes', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true
      });
      hot.getPlugin('manualColumnMove').moveColumn(1, 4);
      hot.render();
      expect(hot.getDataAtCell(1, 3)).toBe('B2');
      hot.undo();
      expect(hot.getDataAtCell(1, 3)).toBe('D2');
    });
    xit('should revert changes', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        colHeaders: true,
        manualColumnMove: true
      });
      hot.getPlugin('manualColumnMove').moveColumn(1, 4);
      hot.render();
      expect(hot.getDataAtCell(1, 3)).toBe('A2');
      hot.undo();
      expect(hot.getDataAtCell(1, 1)).toBe('A2');
      hot.redo();
      expect(hot.getDataAtCell(1, 3)).toBe('A2');
    });
  });
});

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('manualColumnMove', function () {
  var id = 'testContainer';
  var arrayOfArrays = Handsontable.helper.createSpreadsheetData(30, 30);
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('UI', function () {
    it('should append UI elements to wtHider after click on row header', function () {
      handsontable({
        data: arrayOfArrays.slice(),
        colHeaders: true,
        manualColumnMove: true
      });
      var $headerTH = spec().$container.find('thead tr:eq(0) th:eq(0)');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      $headerTH.simulate('mousedown');
      expect(spec().$container.find('.ht__manualColumnMove--guideline').length).toBe(1);
      expect(spec().$container.find('.ht__manualColumnMove--backlight').length).toBe(1);
    });
    it('should part of UI elements be visible on dragging action', function () {
      handsontable({
        data: arrayOfArrays.slice(),
        colHeaders: true,
        manualColumnMove: true
      });
      var $headerTH = spec().$container.find('thead tr:eq(0) th:eq(0)');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      $headerTH.simulate('mousedown');
      expect(spec().$container.find('.ht__manualColumnMove--guideline:visible').length).toBe(0);
      expect(spec().$container.find('.ht__manualColumnMove--backlight:visible').length).toBe(1);
    });
    it('should all of UI elements be visible on dragging action', function () {
      handsontable({
        data: arrayOfArrays.slice(),
        colHeaders: true,
        manualColumnMove: true
      });
      var $headers = [spec().$container.find('thead tr:eq(0) th:eq(0)'), spec().$container.find('thead tr:eq(0) th:eq(1)'), spec().$container.find('thead tr:eq(0) th:eq(2)')];
      $headers[0].simulate('mousedown');
      $headers[0].simulate('mouseup');
      $headers[0].simulate('mousedown');
      $headers[1].simulate('mouseover');
      $headers[2].simulate('mouseover');
      expect(spec().$container.find('.ht__manualColumnMove--guideline:visible').length).toBe(1);
      expect(spec().$container.find('.ht__manualColumnMove--backlight:visible').length).toBe(1);
    });
    it('should set properly width for the backlight element when stretchH is enabled', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 5),
        width: 600,
        colHeaders: true,
        stretchH: 'all',
        manualColumnMove: true
      });
      var $headerTH = spec().$container.find('thead tr:eq(0) th:eq(1)');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      $headerTH.simulate('mousedown');
      expect(spec().$container.find('.ht__manualColumnMove--backlight')[0].offsetWidth).toBe($headerTH[0].offsetWidth);
    });
    it('should set properly width for the backlight element when stretchH is enabled and column order was changed', function () {
      handsontable({
        data: [{
          id: 1,
          flag: 'EUR',
          currencyCode: 'EUR',
          currency: 'Euro',
          level: 0.9033,
          units: 'EUR / USD',
          asOf: '08/19/2015',
          onedChng: 0.0026
        }],
        width: 600,
        colHeaders: true,
        stretchH: 'all',
        manualColumnMove: [2, 4, 6, 3, 1, 0],
        columns: [{
          data: 'id',
          type: 'numeric',
          width: 40
        }, {
          data: 'currencyCode',
          type: 'text'
        }, {
          data: 'currency',
          type: 'text'
        }, {
          data: 'level',
          type: 'numeric',
          numericFormat: {
            pattern: '0.0000'
          }
        }, {
          data: 'units',
          type: 'text'
        }, {
          data: 'asOf',
          type: 'date',
          dateFormat: 'MM/DD/YYYY'
        }, {
          data: 'onedChng',
          type: 'numeric',
          numericFormat: {
            pattern: '0.00%'
          }
        }]
      });
      var $headerTH = spec().$container.find('thead tr:eq(0) th:eq(6)');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      $headerTH.simulate('mousedown');
      expect(spec().$container.find('.ht__manualColumnMove--backlight')[0].offsetWidth).toBe($headerTH[0].offsetWidth);
    });
    it('should set proper left position of the backlight element when colWidths is undefined', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: true,
        rowHeaders: true,
        colHeaders: true
      });
      var header = spec().$container.find('thead tr:eq(0) th:eq(2)');
      header.simulate('mousedown');
      header.simulate('mouseup');
      header.simulate('mousedown');
      expect(spec().$container.find('.ht__manualColumnMove--backlight')[0].offsetLeft).toBe(100);
    });
    it('should set proper left position of the backlight element when colWidths is defined', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        manualColumnMove: true,
        rowHeaders: true,
        colWidths: 100,
        colHeaders: true
      });
      var header = spec().$container.find('thead tr:eq(0) th:eq(2)');
      header.simulate('mousedown');
      header.simulate('mouseup');
      header.simulate('mousedown');
      expect(spec().$container.find('.ht__manualColumnMove--backlight')[0].offsetLeft).toBe(150);
    });
    it('should not run moving ui if mousedown was fired on sorting element', function () {
      handsontable({
        data: arrayOfArrays.slice(),
        colHeaders: true,
        manualColumnMove: true,
        columnSorting: true
      });
      var $headerTH = spec().$container.find('thead tr:eq(0) th:eq(6)');
      var $summaryElement = $headerTH.find('.columnSorting');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      var $backlight = spec().$container.find('.ht__manualColumnMove--backlight')[0];
      $summaryElement.simulate('mousedown');
      var displayProp = $backlight.currentStyle ? $backlight.currentStyle.display : getComputedStyle($backlight, null).display;
      expect(displayProp).toEqual('none');
    });
    it('should run moving ui if mousedown was fired on sorting element when sort header action is not enabled', function () {
      handsontable({
        data: arrayOfArrays.slice(),
        colHeaders: true,
        manualColumnMove: true,
        columnSorting: {
          headerAction: false
        }
      });
      var $headerTH = this.$container.find('thead tr:eq(0) th:eq(6)');
      var $summaryElement = $headerTH.find('.columnSorting');
      $summaryElement.simulate('mousedown');
      var $backlight = this.$container.find('.ht__manualColumnMove--backlight');
      expect($backlight.length).toBe(0);
    });
  });
});

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('manualColumnResize', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should change column widths at init', function () {
    handsontable({
      manualColumnResize: [100, 150, 180]
    });
    expect(colWidth(spec().$container, 0)).toBe(100);
    expect(colWidth(spec().$container, 1)).toBe(150);
    expect(colWidth(spec().$container, 2)).toBe(180);
  });
  it('should be enabled after specifying it in updateSettings config', function () {
    handsontable({
      data: [{
        id: 1,
        name: 'Ted',
        lastName: 'Right'
      }, {
        id: 2,
        name: 'Frank',
        lastName: 'Honest'
      }, {
        id: 3,
        name: 'Joan',
        lastName: 'Well'
      }, {
        id: 4,
        name: 'Sid',
        lastName: 'Strong'
      }, {
        id: 5,
        name: 'Jane',
        lastName: 'Neat'
      }],
      colHeaders: true
    });
    updateSettings({
      manualColumnResize: true
    });
    spec().$container.find('thead tr:eq(0) th:eq(0)').simulate('mouseover');
    expect($('.manualColumnResizer').size()).toBeGreaterThan(0);
  });
  it('should change the default column widths with updateSettings', function () {
    handsontable({
      manualColumnResize: true
    });
    expect(colWidth(spec().$container, 0)).toBe(50);
    expect(colWidth(spec().$container, 1)).toBe(50);
    expect(colWidth(spec().$container, 2)).toBe(50);
    updateSettings({
      manualColumnResize: [60, 50, 80]
    });
    expect(colWidth(spec().$container, 0)).toBe(60);
    expect(colWidth(spec().$container, 1)).toBe(50);
    expect(colWidth(spec().$container, 2)).toBe(80);
  });
  it('should change column widths with updateSettings', function () {
    handsontable({
      manualColumnResize: [100, 150, 180]
    });
    expect(colWidth(spec().$container, 0)).toBe(100);
    expect(colWidth(spec().$container, 1)).toBe(150);
    expect(colWidth(spec().$container, 2)).toBe(180);
    updateSettings({
      manualColumnResize: [60, 50, 80]
    });
    expect(colWidth(spec().$container, 0)).toBe(60);
    expect(colWidth(spec().$container, 1)).toBe(50);
    expect(colWidth(spec().$container, 2)).toBe(80);
  });
  it('should reset column widths when undefined is passed', function () {
    handsontable({
      manualColumnResize: [100, 150, 180]
    });
    expect(colWidth(spec().$container, 0)).toBe(100);
    expect(colWidth(spec().$container, 1)).toBe(150);
    expect(colWidth(spec().$container, 2)).toBe(180);
    updateSettings({
      manualColumnResize: void 0
    });
    expect(colWidth(spec().$container, 0)).toBe(50);
    expect(colWidth(spec().$container, 1)).toBe(50);
    expect(colWidth(spec().$container, 2)).toBe(50);
  });
  it('should not reset column widths when `true` is passed', function () {
    handsontable({
      manualColumnResize: [100, 150, 180]
    });
    expect(colWidth(spec().$container, 0)).toBe(100);
    expect(colWidth(spec().$container, 1)).toBe(150);
    expect(colWidth(spec().$container, 2)).toBe(180);
    updateSettings({
      manualColumnResize: true
    });
    expect(colWidth(spec().$container, 0)).toBe(100);
    expect(colWidth(spec().$container, 1)).toBe(150);
    expect(colWidth(spec().$container, 2)).toBe(180);
  });
  it('should resize (narrowing) appropriate columns, even when stretchH `all` is enabled', function () {
    spec().$container.css('width', '910px');
    handsontable({
      colHeaders: true,
      manualColumnResize: true,
      stretchH: 'all'
    });
    resizeColumn(1, 65);
    var $columnHeaders = spec().$container.find('thead tr:eq(1) th');
    expect($columnHeaders.eq(0).width()).toBe(209);
    expect($columnHeaders.eq(1).width()).toBe(64);
    expect($columnHeaders.eq(2).width()).toBe(210);
    expect($columnHeaders.eq(3).width()).toBe(210);
    expect($columnHeaders.eq(4).width()).toBe(211);
  });
  it('should resize (extending) appropriate columns, even when stretchH `all` is enabled', function () {
    spec().$container.css('width', '910px');
    handsontable({
      colHeaders: true,
      manualColumnResize: true,
      stretchH: 'all'
    });
    resizeColumn(1, 400);
    var $columnHeaders = spec().$container.find('thead tr:eq(1) th');
    expect($columnHeaders.eq(0).width()).toBe(125);
    expect($columnHeaders.eq(1).width()).toBe(399);
    expect($columnHeaders.eq(2).width()).toBe(126);
    expect($columnHeaders.eq(3).width()).toBe(126);
    expect($columnHeaders.eq(4).width()).toBe(128);
  });
  it('should resize (narrowing) selected columns',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 20),
      colHeaders: true,
      manualColumnResize: true
    });
    var $columnHeaders = spec().$container.find('thead tr:eq(0) th');
    var $colHeader = spec().$container.find('thead tr:eq(0) th:eq(1)');
    $colHeader.simulate('mouseover');
    var $resizer = spec().$container.find('.manualColumnResizer');
    var resizerPosition = $resizer.position();
    spec().$container.find('tr:eq(0) th:eq(1)').simulate('mousedown');
    spec().$container.find('tr:eq(0) th:eq(2)').simulate('mouseover');
    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mouseover');
    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mousemove');
    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mousemove', {
      clientX: spec().$container.find('tr:eq(0) th:eq(1)').position().left + 29
    });
    $resizer.simulate('mouseup');
    yield sleep(1000);
    expect($columnHeaders.eq(1).width()).toBe(33);
    expect($columnHeaders.eq(2).width()).toBe(34);
    expect($columnHeaders.eq(3).width()).toBe(34);
  }));
  it('should resize (expanding) selected columns',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 20),
      colHeaders: true,
      manualColumnResize: true
    });
    var $columnHeaders = spec().$container.find('thead tr:eq(0) th');
    var $colHeader = spec().$container.find('thead tr:eq(0) th:eq(1)');
    $colHeader.simulate('mouseover');
    var $resizer = spec().$container.find('.manualColumnResizer');
    var resizerPosition = $resizer.position();
    spec().$container.find('tr:eq(0) th:eq(1)').simulate('mousedown');
    spec().$container.find('tr:eq(0) th:eq(2)').simulate('mouseover');
    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mouseover');
    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mousemove');
    spec().$container.find('tr:eq(0) th:eq(3)').simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mousemove', {
      clientX: spec().$container.find('tr:eq(0) th:eq(1)').position().left + 150
    });
    $resizer.simulate('mouseup');
    yield sleep(1000);
    expect($columnHeaders.eq(1).width()).toBe(154);
    expect($columnHeaders.eq(2).width()).toBe(155);
    expect($columnHeaders.eq(3).width()).toBe(155);
  }));
  it('should resize appropriate columns to calculated stretch width after double click on column handler when stretchH is set as `all`',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container.css('width', '910px');
    handsontable({
      colHeaders: true,
      manualColumnResize: true,
      stretchH: 'all'
    });
    resizeColumn(1, 65);
    var $columnHeaders = spec().$container.find('thead tr:eq(1) th');
    expect($columnHeaders.eq(0).width()).toBe(209);
    expect($columnHeaders.eq(1).width()).toBe(64);
    expect($columnHeaders.eq(2).width()).toBe(210);
    expect($columnHeaders.eq(3).width()).toBe(210);
    expect($columnHeaders.eq(4).width()).toBe(211);
    var $th = $columnHeaders.eq(1);
    $th.simulate('mouseover');
    var $resizer = spec().$container.find('.manualColumnResizer');
    var resizerPosition = $resizer.position();
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    yield sleep(1000);
    expect($columnHeaders.eq(0).width()).toBe(180);
    expect($columnHeaders.eq(1).width()).toBe(181);
    expect($columnHeaders.eq(2).width()).toBe(181);
    expect($columnHeaders.eq(3).width()).toBe(181);
    expect($columnHeaders.eq(4).width()).toBe(181);
  }));
  it('should resize appropriate columns to calculated autoColumnSize width after double click on column handler when stretchH is set as `last`',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    spec().$container.css('width', '910px');
    handsontable({
      colHeaders: true,
      manualColumnResize: true,
      stretchH: 'last'
    });
    resizeColumn(0, 65);
    var $columnHeaders = spec().$container.find('thead tr:eq(0) th');
    expect($columnHeaders.eq(0).width()).toBe(63);
    expect($columnHeaders.eq(1).width()).toBe(48);
    expect($columnHeaders.eq(2).width()).toBe(49);
    expect($columnHeaders.eq(3).width()).toBe(49);
    expect($columnHeaders.eq(4).width()).toBe(694);
    var $th = $columnHeaders.eq(0);
    $th.simulate('mouseover');
    var $resizer = spec().$container.find('.manualColumnResizer');
    var resizerPosition = $resizer.position();
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    yield sleep(1000);
    expect($columnHeaders.eq(0).width()).toBeAroundValue(19);
    expect($columnHeaders.eq(1).width()).toBe(48);
    expect($columnHeaders.eq(2).width()).toBe(49);
    expect($columnHeaders.eq(3).width()).toBe(49);
    expect($columnHeaders.eq(4).width()).toBeAroundValue(738);
  }));
  it('should resize appropriate columns, even if the column order was changed with manualColumnMove plugin', function () {
    handsontable({
      colHeaders: ['First', 'Second', 'Third'],
      manualColumnMove: [2, 1, 0, 3],
      manualColumnResize: true
    });
    var $columnHeaders = spec().$container.find('thead tr:eq(0) th');
    var initialColumnWidths = [];
    $columnHeaders.each(function () {
      initialColumnWidths.push($(this).width());
    });
    resizeColumn.call(this, 0, 100);
    var $resizedTh = $columnHeaders.eq(0);
    expect($resizedTh.text()).toEqual('Third');
    expect($resizedTh.outerWidth()).toEqual(100); // Sizes of remaining columns should stay the same

    for (var i = 1; i < $columnHeaders.length; i++) {
      expect($columnHeaders.eq(i).width()).toEqual(initialColumnWidths[i]);
    }
  });
  it('should trigger an afterColumnResize event after column size changes', function () {
    var afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3),
      colHeaders: true,
      manualColumnResize: true,
      afterColumnResize: afterColumnResizeCallback
    });
    expect(colWidth(spec().$container, 0)).toEqual(50);
    resizeColumn(0, 100);
    expect(afterColumnResizeCallback).toHaveBeenCalledWith(0, 100, void 0, void 0, void 0, void 0);
    expect(colWidth(spec().$container, 0)).toEqual(100);
  });
  it('should not trigger an afterColumnResize event if column size does not change (mouseMove event width delta = 0)', function () {
    var afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3),
      colHeaders: true,
      manualColumnResize: true,
      afterColumnResize: afterColumnResizeCallback
    });
    expect(colWidth(spec().$container, 0)).toEqual(50);
    resizeColumn(0, 50);
    expect(afterColumnResizeCallback).not.toHaveBeenCalled();
    expect(colWidth(spec().$container, 0)).toEqual(50);
  });
  it('should not trigger an afterColumnResize event if column size does not change (no mouseMove event)', function () {
    var afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3),
      colHeaders: true,
      manualColumnResize: true,
      afterColumnResize: afterColumnResizeCallback
    });
    expect(colWidth(spec().$container, 0)).toEqual(50);
    var $th = spec().$container.find('thead tr:eq(0) th:eq(0)');
    $th.simulate('mouseover');
    var $resizer = spec().$container.find('.manualColumnResizer');
    var resizerPosition = $resizer.position();
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    expect(afterColumnResizeCallback).not.toHaveBeenCalled();
    expect(colWidth(spec().$container, 0)).toEqual(50);
  });
  it('should trigger an afterColumnResize after column size changes, after double click',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3),
      colHeaders: true,
      manualColumnResize: true,
      afterColumnResize: afterColumnResizeCallback
    });
    expect(colWidth(spec().$container, 0)).toEqual(50);
    var $th = spec().$container.find('thead tr:eq(0) th:eq(0)');
    $th.simulate('mouseover');
    var $resizer = spec().$container.find('.manualColumnResizer');
    var resizerPosition = $resizer.position();
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    yield sleep(1000);
    expect(afterColumnResizeCallback.calls.count()).toEqual(1);
    expect(afterColumnResizeCallback.calls.argsFor(0)[0]).toEqual(0); // All modern browsers returns width = 25px, but IE8 seems to compute width differently and returns 24px

    expect(afterColumnResizeCallback.calls.argsFor(0)[1]).toBeInArray([30, 31, 32, 24, 25]);
    expect(colWidth(spec().$container, 0)).toBeInArray([30, 31, 32, 24, 25]);
  }));
  it('should autosize column after double click (when initial width is not defined)',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(3, 3),
      colHeaders: true,
      manualColumnResize: true,
      columns: [{
        width: 100
      }, {
        width: 200
      }, {}]
    });
    expect(colWidth(spec().$container, 0)).toEqual(100);
    expect(colWidth(spec().$container, 1)).toEqual(200);
    expect(colWidth(spec().$container, 2)).toEqual(50);
    resizeColumn(2, 300);
    var $resizer = spec().$container.find('.manualColumnResizer');
    var resizerPosition = $resizer.position();
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    yield sleep(1000);
    expect(colWidth(spec().$container, 2)).toBeAroundValue(29, 3);
  }));
  it('should autosize selected columns after double click on handler',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(9, 9),
      colHeaders: true,
      manualColumnResize: true
    });
    resizeColumn(2, 300);
    spec().$container.find('thead tr:eq(0) th:eq(1)').simulate('mousedown');
    spec().$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseover');
    spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseover');
    spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mousemove');
    spec().$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseup');
    var $resizer = spec().$container.find('.manualColumnResizer');
    var resizerPosition = $resizer.position();
    yield sleep(600);
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientX: resizerPosition.left
    });
    $resizer.simulate('mouseup');
    yield sleep(600);
    expect(colWidth(spec().$container, 1)).toBeAroundValue(32, 2);
    expect(colWidth(spec().$container, 2)).toBeAroundValue(32, 2);
    expect(colWidth(spec().$container, 3)).toBeAroundValue(32, 2);
  }));
  it('should adjust resize handles position after table size changed', function () {
    var maxed = false;
    handsontable({
      colHeaders: true,
      manualColumnResize: true,
      stretchH: 'all',
      width: function width() {
        return maxed ? 614 : 200;
      }
    });
    spec().$container.find('thead th:eq(0)').simulate('mouseover');
    var handle = spec().$container.find('.manualColumnResizer');
    var th0 = spec().$container.find('thead th:eq(0)');
    var handleBox = handle[0].getBoundingClientRect();
    var thBox = th0[0].getBoundingClientRect();
    expect(handleBox.left + handleBox.width).toEqual(thBox.left + thBox.width - 1);
    maxed = true;
    render();
    spec().$container.find('thead th:eq(0)').simulate('mouseover');
    handleBox = handle[0].getBoundingClientRect();
    thBox = th0[0].getBoundingClientRect();
    expect(handleBox.left + handleBox.width).toEqual(thBox.left + thBox.width - 1);
  });
  it('should display the resize handle in the correct place after the table has been scrolled', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 20),
      colHeaders: true,
      manualColumnResize: true,
      height: 100,
      width: 200
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    var $colHeader = spec().$container.find('.ht_clone_top thead tr:eq(0) th:eq(2)');
    $colHeader.simulate('mouseover');
    var $handle = spec().$container.find('.manualColumnResizer');
    $handle[0].style.background = 'red';
    expect($colHeader.offset().left + $colHeader.width() - 5).toBeCloseTo($handle.offset().left, 0);
    expect($colHeader.offset().top).toBeCloseTo($handle.offset().top, 0);
    $(mainHolder).scrollLeft(200);
    hot.render();
    $colHeader = spec().$container.find('.ht_clone_top thead tr:eq(0) th:eq(3)');
    $colHeader.simulate('mouseover');
    expect($colHeader.offset().left + $colHeader.width() - 5).toBeCloseTo($handle.offset().left, 0);
    expect($colHeader.offset().top).toBeCloseTo($handle.offset().top, 0);
  });
  describe('handle and guide', function () {
    it('should display the resize handle in the proper position and with a proper size', function () {
      handsontable({
        data: [{
          id: 1,
          name: 'Ted',
          lastName: 'Right'
        }, {
          id: 2,
          name: 'Frank',
          lastName: 'Honest'
        }, {
          id: 3,
          name: 'Joan',
          lastName: 'Well'
        }, {
          id: 4,
          name: 'Sid',
          lastName: 'Strong'
        }, {
          id: 5,
          name: 'Jane',
          lastName: 'Neat'
        }],
        colHeaders: true,
        manualColumnResize: true
      });
      var $headerTH = spec().$container.find('thead tr:eq(0) th:eq(1)');
      $headerTH.simulate('mouseover');
      var $handle = $('.manualColumnResizer');
      expect($handle.offset().left).toEqual($headerTH.offset().left + $headerTH.outerWidth() - $handle.outerWidth() - 1);
      expect($handle.height()).toEqual($headerTH.outerHeight());
    });
  });
});

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('manualRowMove', function () {
  var id = 'testContainer';
  var arrayOfObjects = [{
    id: 1,
    name: 'Ted',
    lastName: 'Right'
  }, {
    id: 2,
    name: 'Frank',
    lastName: 'Honest'
  }, {
    id: 3,
    name: 'Joan',
    lastName: 'Well'
  }, {
    id: 4,
    name: 'Sid',
    lastName: 'Strong'
  }, {
    id: 5,
    name: 'Jane',
    lastName: 'Neat'
  }, {
    id: 6,
    name: 'Chuck',
    lastName: 'Jackson'
  }, {
    id: 7,
    name: 'Meg',
    lastName: 'Jansen'
  }, {
    id: 8,
    name: 'Rob',
    lastName: 'Norris'
  }, {
    id: 9,
    name: 'Sean',
    lastName: 'O\'Hara'
  }, {
    id: 10,
    name: 'Eve',
    lastName: 'Branson'
  }];
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('init', function () {
    it('should change row order at init', function () {
      handsontable({
        data: arrayOfObjects,
        manualRowMove: [1, 2, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');
    });
  });
  describe('updateSettings', function () {
    it('should be enabled after specifying it in updateSettings config', function () {
      handsontable({
        data: arrayOfObjects,
        rowHeaders: true
      });
      updateSettings({
        manualRowMove: true
      });
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');
      expect(spec().$container.hasClass('after-selection--rows')).toBeGreaterThan(0);
    });
    it('should change the default row order with updateSettings', function () {
      handsontable({
        data: arrayOfObjects,
        manualRowMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');
      updateSettings({
        manualRowMove: [2, 1, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');
    });
    it('should change row order with updateSettings', function () {
      handsontable({
        data: arrayOfObjects,
        manualRowMove: [1, 2, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');
      updateSettings({
        manualRowMove: [2, 1, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');
    });
    it('should reset row order with updateSettings when undefined is passed', function () {
      handsontable({
        data: arrayOfObjects,
        manualRowMove: [1, 2, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');
      updateSettings({
        manualRowMove: void 0
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');
    });
    it('should not change row order with updateSettings when `true` is passed', function () {
      handsontable({
        data: arrayOfObjects,
        manualRowMove: [1, 2, 0]
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');
      updateSettings({
        manualRowMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');
    });
  });
  describe('loadData', function () {
    it('should increase numbers of rows if it is necessary', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        manualRowMove: true
      });
      hot.loadData(Handsontable.helper.createSpreadsheetData(10, 10));
      expect(countRows()).toEqual(10);
      expect(hot.getPlugin('manualRowMove').rowsMapper.__arrayMap.length).toEqual(10);
    });
    it('should decrease numbers of rows if it is necessary', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        manualRowMove: true
      });
      hot.loadData(Handsontable.helper.createSpreadsheetData(2, 2));
      expect(countRows()).toEqual(2);
      expect(hot.getPlugin('manualRowMove').rowsMapper.__arrayMap.length).toEqual(2);
    });
  });
  describe('moving', function () {
    it('should move row by API', function () {
      var hot = handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');
      hot.getPlugin('manualRowMove').moveRow(2, 0);
      hot.render();
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');
    });
    it('should move many rows by API', function () {
      var hot = handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');
      hot.getPlugin('manualRowMove').moveRows([7, 9, 8], 0);
      hot.render();
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('8');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('10');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('9');
    });
    it('should trigger the `beforeRowMove` hook before row move with visual indexes as parameters', function () {
      var beforeMoveRowCallback = jasmine.createSpy('beforeMoveRowCallback');
      var hot = handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true,
        beforeRowMove: beforeMoveRowCallback,
        modifyRow: function modifyRow(row) {
          return row + 10;
        }
      });
      hot.getPlugin('manualRowMove').moveRows([8, 9, 7], 0);
      hot.render();
      expect(beforeMoveRowCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);
    });
    it('should trigger the `afterRowMove` hook after row move with visual indexes as parameters', function () {
      var afterMoveRowCallback = jasmine.createSpy('afterMoveRowCallback');
      var hot = handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true,
        afterRowMove: afterMoveRowCallback,
        modifyRow: function modifyRow(row) {
          return row + 10;
        }
      });
      hot.getPlugin('manualRowMove').moveRows([8, 9, 7], 0);
      hot.render();
      expect(afterMoveRowCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);
    });
    it('should run `beforeRowMove` with proper `target` parameter (moving row above first header)', function () {
      var targetParameterInsideCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        colHeaders: true,
        manualRowMove: true,
        beforeRowMove: function beforeRowMove(rows, target) {
          targetParameterInsideCallback = target;
        }
      });
      var $fistHeader = spec().$container.find('tbody tr:eq(0) th:eq(0)');
      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mousedown');
      $fistHeader.simulate('mouseover');
      $fistHeader.simulate('mousemove', {
        clientY: $fistHeader.offset().bottom - $fistHeader.height() - 50
      });
      $fistHeader.simulate('mouseup');
      expect(targetParameterInsideCallback).toEqual(0);
    });
    it('should run `beforeRowMove` with proper `target` parameter (moving row to the top of first header)', function () {
      var targetParameterInsideCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: true,
        colHeaders: true,
        beforeRowMove: function beforeRowMove(rows, target) {
          targetParameterInsideCallback = target;
        }
      });
      var $fistHeader = spec().$container.find('tbody tr:eq(0) th:eq(0)');
      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(1) th:eq(0)').simulate('mousedown');
      $fistHeader.simulate('mouseover');
      $fistHeader.simulate('mousemove', {
        clientY: $fistHeader.offset().bottom - $fistHeader.height()
      });
      $fistHeader.simulate('mouseup');
      expect(targetParameterInsideCallback).toEqual(0);
    });
    it('should run `beforeRowMove` with proper `target` parameter (moving row to the middle of the table)', function () {
      var targetParameterInsideCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: true,
        beforeRowMove: function beforeRowMove(rows, target) {
          targetParameterInsideCallback = target;
        }
      });
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseover');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mousemove');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseup');
      expect(targetParameterInsideCallback).toEqual(2);
    });
    it('should run `beforeRowMove` with proper `target` parameter (moving row to the top of last header)', function () {
      var targetParameterInsideCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: true,
        beforeRowMove: function beforeRowMove(rows, target) {
          targetParameterInsideCallback = target;
        }
      });
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(29) th:eq(0)').simulate('mouseover');
      spec().$container.find('tbody tr:eq(29) th:eq(0)').simulate('mousemove');
      spec().$container.find('tbody tr:eq(29) th:eq(0)').simulate('mouseup');
      expect(targetParameterInsideCallback).toEqual(29);
    });
    it('should run `beforeRowMove` with proper `target` parameter (moving row to the bottom of last header)', function () {
      var targetParameterInsideCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: true,
        beforeRowMove: function beforeRowMove(rows, target) {
          targetParameterInsideCallback = target;
        }
      });
      var $lastHeader = spec().$container.find('tbody tr:eq(29) th:eq(0)');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      $lastHeader.simulate('mouseover');
      $lastHeader.simulate('mousemove', {
        clientY: $lastHeader.offset().top + $lastHeader.height()
      });
      $lastHeader.simulate('mouseup');
      expect(targetParameterInsideCallback).toEqual(30);
    });
    it('should run `beforeRowMove` with proper `target` parameter (moving row below last header)', function () {
      var targetParameterInsideCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: true,
        beforeRowMove: function beforeRowMove(rows, target) {
          targetParameterInsideCallback = target;
        }
      });
      var $lastHeader = spec().$container.find('tbody tr:eq(29) th:eq(0)');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      $lastHeader.simulate('mouseover');
      $lastHeader.simulate('mousemove', {
        clientY: $lastHeader.offset().top + $lastHeader.height() + 200
      });
      $lastHeader.simulate('mouseup');
      expect(targetParameterInsideCallback).toEqual(30);
    });
    it('should run `beforeRowMove` with proper visual `target` parameter', function () {
      var targetParameterInsideCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: [1, 2, 0],
        beforeRowMove: function beforeRowMove(rows, target) {
          targetParameterInsideCallback = target;
        }
      });
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseover');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mousemove');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseup');
      expect(targetParameterInsideCallback).toEqual(2);
    });
    it('should run `afterRowMove` with proper visual `target` parameter', function () {
      var targetParameterInsideCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: [1, 2, 0],
        afterRowMove: function afterRowMove(rows, target) {
          targetParameterInsideCallback = target;
        }
      });
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseover');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mousemove');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseup');
      expect(targetParameterInsideCallback).toEqual(2);
    });
    it('should move the second row to the first row', function () {
      handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');
      var $rowsHeaders = spec().$container.find('.ht_clone_left tr th');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(1).simulate('mouseup');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(0).simulate('mouseover');
      $rowsHeaders.eq(0).simulate('mousemove');
      $rowsHeaders.eq(0).simulate('mouseup');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');
    });
    it('should move the second row to the third row', function () {
      handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true
      });
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');
      var $rowsHeaders = spec().$container.find('.ht_clone_left tr th');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(1).simulate('mouseup');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(3).simulate('mouseover');
      $rowsHeaders.eq(3).simulate('mousemove');
      $rowsHeaders.eq(3).simulate('mouseup');
      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');
      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');
      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');
    });
    it('should not move row if it\'s not needed', function () {
      var cache = [];
      handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true,
        afterRowMove: function afterRowMove(rows) {
          cache.push(rows);
        }
      });
      var $rowsHeaders = spec().$container.find('.ht_clone_left tr th');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(1).simulate('mouseup');
      $rowsHeaders.eq(1).simulate('mousedown');
      $rowsHeaders.eq(3).simulate('mouseup');
      expect(cache.length).toEqual(0);
    });
    it('should properly scrolling viewport if mouse is over part-visible cell', function (done) {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        colHeaders: true,
        rowHeaders: true,
        manualRowMove: true,
        width: 600,
        height: 600,
        rowHeights: 47
      });
      hot.selectCell(19, 0);
      setTimeout(function () {
        expect(hot.view.wt.wtTable.getFirstVisibleRow()).toBeGreaterThan(8);
        var $rowsHeaders = spec().$container.find('.ht_clone_left tr th');
        $rowsHeaders.eq(10).simulate('mousedown');
        $rowsHeaders.eq(10).simulate('mouseup');
        $rowsHeaders.eq(10).simulate('mousedown');
        $rowsHeaders.eq(8).simulate('mouseover');
        $rowsHeaders.eq(8).simulate('mousemove');
        $rowsHeaders.eq(8).simulate('mouseup');
      }, 50);
      setTimeout(function () {
        expect(hot.view.wt.wtTable.getFirstVisibleRow()).toBeLessThan(8);
        done();
      }, 150);
    });
    it('moving row should keep cell meta created using cells function', function () {
      var hot = handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true,
        cells: function cells(row, col) {
          if (row === 1 && col === 0) {
            this.readOnly = true;
          }
        }
      });
      var htCore = getHtCore();
      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);
      hot.getPlugin('manualRowMove').moveRow(1, 3);
      hot.render();
      expect(htCore.find('tbody tr:eq(2) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);
    });
    it('moving row should keep cell meta created using cell array', function () {
      var hot = handsontable({
        data: arrayOfObjects,
        rowHeaders: true,
        manualRowMove: true,
        cell: [{
          row: 1,
          col: 0,
          readOnly: true
        }]
      });
      var htCore = getHtCore();
      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);
      hot.getPlugin('manualRowMove').moveRow(3, 1);
      hot.render();
      expect(htCore.find('tbody tr:eq(2) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);
    });
  });
  describe('callbacks', function () {
    it('should run `beforeRowMove` and `afterRowMove` with proper visual `target` parameter', function () {
      var targetParameterInsideBeforeRowMoveCallback;
      var targetParameterInsideAfterRowMoveCallback;
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        rowHeaders: true,
        manualRowMove: true,
        beforeRowMove: function beforeRowMove(rows, target) {
          targetParameterInsideBeforeRowMoveCallback = target;
        },
        afterRowMove: function afterRowMove(rows, target) {
          targetParameterInsideAfterRowMoveCallback = target;
        }
      });
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseover');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mousemove');
      spec().$container.find('tbody tr:eq(2) th:eq(0)').simulate('mouseup');
      expect(targetParameterInsideBeforeRowMoveCallback).toEqual(2);
      expect(targetParameterInsideAfterRowMoveCallback).toEqual(2);
    });
    it('should run `beforeRowMove` and `afterRowMove` with proper visual `rows` parameter', function () {
      var rowsParameterInsideBeforeRowMoveCallback;
      var rowsParameterInsideAfterRowMoveCallback;
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        rowHeaders: true,
        manualRowMove: true,
        beforeRowMove: function beforeRowMove(rows) {
          rowsParameterInsideBeforeRowMoveCallback = rows;
        },
        afterRowMove: function afterRowMove(rows) {
          rowsParameterInsideAfterRowMoveCallback = rows;
        }
      });
      hot.getPlugin('manualRowMove').moveRow(2, 0);
      expect(rowsParameterInsideBeforeRowMoveCallback).toEqual([2]);
      expect(rowsParameterInsideAfterRowMoveCallback).toEqual([2]);
      expect(rowsParameterInsideBeforeRowMoveCallback).toEqual(rowsParameterInsideAfterRowMoveCallback);
      hot.getPlugin('manualRowMove').moveRow(2, 0);
      expect(rowsParameterInsideBeforeRowMoveCallback).toEqual([2]);
      expect(rowsParameterInsideAfterRowMoveCallback).toEqual([2]);
      expect(rowsParameterInsideBeforeRowMoveCallback).toEqual(rowsParameterInsideAfterRowMoveCallback);
    });
  });
  describe('undoRedo', function () {
    it('should back changes', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        rowHeaders: true,
        manualRowMove: true
      });
      hot.getPlugin('manualRowMove').moveRow(1, 4);
      hot.render();
      expect(hot.getDataAtCell(3, 0)).toBe('A2');
      hot.undo();
      expect(hot.getDataAtCell(1, 0)).toBe('A2');
    });
    it('should revert changes', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        rowHeaders: true,
        manualRowMove: true
      });
      hot.getPlugin('manualRowMove').moveRow(1, 4);
      hot.render();
      expect(hot.getDataAtCell(3, 0)).toBe('A2');
      hot.undo();
      expect(hot.getDataAtCell(1, 0)).toBe('A2');
      hot.redo();
      expect(hot.getDataAtCell(3, 0)).toBe('A2');
    });
  });
});

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('manualRowMove', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('UI', function () {
    it('should append UI elements to wtHider after click on row header', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: true
      });
      var $headerTH = spec().$container.find('tbody tr:eq(0) th:eq(0)');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      $headerTH.simulate('mousedown');
      expect(spec().$container.find('.ht__manualRowMove--guideline').length).toBe(1);
      expect(spec().$container.find('.ht__manualRowMove--backlight').length).toBe(1);
    });
    it('should part of UI elements be visible on dragging action', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: true
      });
      var $headerTH = spec().$container.find('tbody tr:eq(0) th:eq(0)');
      $headerTH.simulate('mousedown');
      $headerTH.simulate('mouseup');
      $headerTH.simulate('mousedown');
      expect(spec().$container.find('.ht__manualRowMove--guideline:visible').length).toBe(0);
      expect(spec().$container.find('.ht__manualRowMove--backlight:visible').length).toBe(1);
    });
    it('should all of UI elements be visible on dragging action', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        rowHeaders: true,
        manualRowMove: true
      });
      var $headers = [spec().$container.find('tbody tr:eq(0) th:eq(0)'), spec().$container.find('tbody tr:eq(1) th:eq(0)'), spec().$container.find('tbody tr:eq(2) th:eq(0)')];
      $headers[0].simulate('mousedown');
      $headers[0].simulate('mouseup');
      $headers[0].simulate('mousedown');
      $headers[1].simulate('mouseover');
      $headers[2].simulate('mouseover');
      expect(spec().$container.find('.ht__manualRowMove--guideline:visible').length).toBe(1);
      expect(spec().$container.find('.ht__manualRowMove--backlight:visible').length).toBe(1);
    });
    describe('backlight', function () {
      it('should set proper left position of element when colWidths is undefined', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          rowHeaders: true,
          manualRowMove: true
        });
        var $headerTH = spec().$container.find('tbody tr:eq(0) th:eq(0)');
        $headerTH.simulate('mousedown');
        $headerTH.simulate('mouseup');
        $headerTH.simulate('mousedown');
        expect(spec().$container.find('.ht__manualRowMove--backlight')[0].offsetLeft).toBe(50);
      });
      it('should set proper left position of element when colWidths is defined', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          rowHeaders: true,
          manualRowMove: true,
          colWidths: 100
        });
        var $headerTH = spec().$container.find('tbody tr:eq(0) th:eq(0)');
        $headerTH.simulate('mousedown');
        $headerTH.simulate('mouseup');
        $headerTH.simulate('mousedown');
        expect(spec().$container.find('.ht__manualRowMove--backlight')[0].offsetLeft).toBe(50);
      });
    });
    describe('guideline', function () {
      it('should set proper top position of element when target is first row and column headers are disabled', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(10, 10),
          rowHeaders: true,
          colHeaders: false,
          manualRowMove: true
        });
        var $headers = [spec().$container.find('tbody tr:eq(0) th:eq(0)'), spec().$container.find('tbody tr:eq(1) th:eq(0)')];
        $headers[1].simulate('mousedown');
        $headers[1].simulate('mouseup');
        $headers[1].simulate('mousedown');
        $headers[0].simulate('mouseover');
        $headers[0].simulate('mousemove');
        expect(spec().$container.find('.ht__manualRowMove--guideline')[0].offsetTop).toBe(-1);
      });
    });
  });
});

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('manualRowResize', function () {
  var id = 'test';
  var defaultRowHeight = 22;
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should change row heights at init', function () {
    handsontable({
      rowHeaders: true,
      manualRowResize: [50, 40, 100]
    });
    expect(rowHeight(spec().$container, 0)).toEqual(51);
    expect(rowHeight(spec().$container, 1)).toEqual(40);
    expect(rowHeight(spec().$container, 2)).toEqual(100);
  });
  it('should be enabled after specifying it in updateSettings config', function () {
    handsontable({
      data: [{
        id: 1,
        name: 'Ted',
        lastName: 'Right'
      }, {
        id: 2,
        name: 'Frank',
        lastName: 'Honest'
      }, {
        id: 3,
        name: 'Joan',
        lastName: 'Well'
      }, {
        id: 4,
        name: 'Sid',
        lastName: 'Strong'
      }, {
        id: 5,
        name: 'Jane',
        lastName: 'Neat'
      }],
      rowHeaders: true
    });
    updateSettings({
      manualRowResize: true
    });
    spec().$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseover');
    expect($('.manualRowResizer').size()).toBeGreaterThan(0);
  });
  it('should change the default row height with updateSettings', function () {
    handsontable({
      manualRowResize: true
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2); // + Double border

    expect(rowHeight(spec().$container, 1)).toEqual(defaultRowHeight + 1); // + Single border

    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1); // + Single border

    updateSettings({
      manualRowResize: [60, 50, 80]
    });
    expect(rowHeight(spec().$container, 0)).toEqual(61);
    expect(rowHeight(spec().$container, 1)).toEqual(50);
    expect(rowHeight(spec().$container, 2)).toEqual(80);
  });
  it('should change the row height with updateSettings', function () {
    handsontable({
      manualRowResize: [60, 50, 80]
    });
    expect(rowHeight(spec().$container, 0)).toEqual(61);
    expect(rowHeight(spec().$container, 1)).toEqual(50);
    expect(rowHeight(spec().$container, 2)).toEqual(80);
    updateSettings({
      manualRowResize: [30, 80, 100]
    });
    expect(rowHeight(spec().$container, 0)).toEqual(31);
    expect(rowHeight(spec().$container, 1)).toEqual(80);
    expect(rowHeight(spec().$container, 2)).toEqual(100);
  });
  it('should not change the row height when `true` is passing', function () {
    handsontable({
      manualRowResize: [60, 50, 80]
    });
    expect(rowHeight(spec().$container, 0)).toEqual(61);
    expect(rowHeight(spec().$container, 1)).toEqual(50);
    expect(rowHeight(spec().$container, 2)).toEqual(80);
    updateSettings({
      manualRowResize: true
    });
    expect(rowHeight(spec().$container, 0)).toEqual(61);
    expect(rowHeight(spec().$container, 1)).toEqual(50);
    expect(rowHeight(spec().$container, 2)).toEqual(80);
  });
  it('should change the row height to defaults when undefined is passed', function () {
    handsontable({
      manualRowResize: [60, 50, 80]
    });
    expect(rowHeight(spec().$container, 0)).toEqual(61);
    expect(rowHeight(spec().$container, 1)).toEqual(50);
    expect(rowHeight(spec().$container, 2)).toEqual(80);
    updateSettings({
      manualRowResize: void 0
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2); // + Double border

    expect(rowHeight(spec().$container, 1)).toEqual(defaultRowHeight + 1); // + Single border

    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1); // + Single border
  });
  it('should reset row height', function () {
    handsontable({
      manualRowResize: true
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
    expect(rowHeight(spec().$container, 1)).toEqual(defaultRowHeight + 1);
    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1);
    updateSettings({
      manualRowResize: true
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
    expect(rowHeight(spec().$container, 1)).toEqual(defaultRowHeight + 1);
    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1);
  });
  it('should trigger afterRowResize event after row height changes', function () {
    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      rowHeaders: true,
      manualRowResize: true,
      afterRowResize: afterRowResizeCallback
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
    resizeRow(0, 100);
    expect(afterRowResizeCallback).toHaveBeenCalledWith(0, 100, false, void 0, void 0, void 0);
    expect(rowHeight(spec().$container, 0)).toEqual(101);
  });
  it('should not trigger afterRowResize event if row height does not change (delta = 0)', function () {
    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      rowHeaders: true,
      manualRowResize: true,
      afterRowResize: afterRowResizeCallback
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
    resizeRow(0, defaultRowHeight);
    expect(afterRowResizeCallback).not.toHaveBeenCalled();
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
  });
  it('should not trigger afterRowResize event after if row height does not change (no mousemove event)', function () {
    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      rowHeaders: true,
      manualRowResize: true,
      afterRowResize: afterRowResizeCallback
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
    var $th = spec().$container.find('tbody tr:eq(0) th:eq(0)');
    $th.simulate('mouseover');
    var $resizer = spec().$container.find('.manualRowResizer');
    var resizerPosition = $resizer.position();
    $resizer.simulate('mousedown', {
      clientY: resizerPosition.top
    });
    $resizer.simulate('mouseup');
    expect(afterRowResizeCallback).not.toHaveBeenCalled();
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
  });
  it('should trigger an afterRowResize after row size changes, after double click',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      rowHeaders: true,
      manualRowResize: true,
      autoRowSize: true,
      afterRowResize: afterRowResizeCallback
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
    var $th = spec().$container.find('tbody tr:eq(2) th:eq(0)');
    $th.simulate('mouseover');
    var $resizer = spec().$container.find('.manualRowResizer');
    var resizerPosition = $resizer.position();
    $resizer.simulate('mousedown', {
      clientY: resizerPosition.top
    });
    $resizer.simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientY: resizerPosition.top
    });
    $resizer.simulate('mouseup');
    yield sleep(1000);
    expect(afterRowResizeCallback.calls.count()).toEqual(1);
    expect(afterRowResizeCallback.calls.argsFor(0)[0]).toEqual(2);
    expect(afterRowResizeCallback.calls.argsFor(0)[1]).toEqual(defaultRowHeight + 1);
    expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1);
  }));
  it('should not trigger afterRowResize event after if row height does not change (no dblclick event)', function () {
    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(5, 5),
      rowHeaders: true,
      manualRowResize: true,
      afterRowResize: afterRowResizeCallback
    });
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
    var $th = spec().$container.find('tbody tr:eq(2) th:eq(0)');
    $th.simulate('mouseover');
    var $resizer = spec().$container.find('.manualRowResizer');
    var resizerPosition = $resizer.position();
    $resizer.simulate('mousedown', {
      clientY: resizerPosition.top
    });
    $resizer.simulate('mouseup');
    expect(afterRowResizeCallback).not.toHaveBeenCalled();
    expect(rowHeight(spec().$container, 0)).toEqual(defaultRowHeight + 2);
  });
  it('should display the resize handle in the correct place after the table has been scrolled', function () {
    var hot = handsontable({
      data: Handsontable.helper.createSpreadsheetData(20, 20),
      rowHeaders: true,
      manualRowResize: true,
      height: 100,
      width: 200
    });
    var mainHolder = hot.view.wt.wtTable.holder;
    var $rowHeader = spec().$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)');
    $rowHeader.simulate('mouseover');
    var $handle = spec().$container.find('.manualRowResizer');
    $handle[0].style.background = 'red';
    expect($rowHeader.offset().left).toBeCloseTo($handle.offset().left, 0);
    expect($rowHeader.offset().top + $rowHeader.height() - 5).toBeCloseTo($handle.offset().top, 0);
    $(mainHolder).scrollTop(200);
    $(mainHolder).scroll();
    $rowHeader = spec().$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)');
    $rowHeader.simulate('mouseover');
    expect($rowHeader.offset().left).toBeCloseTo($handle.offset().left, 0);
    expect($rowHeader.offset().top + $rowHeader.height() - 5).toBeCloseTo($handle.offset().top, 0);
  });
  it('should autosize selected rows after double click on handler',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(9, 9),
      rowHeaders: true,
      manualRowResize: true
    });
    resizeRow(2, 300);
    var $resizer = spec().$container.find('.manualRowResizer');
    var resizerPosition = $resizer.position();
    spec().$container.find('.ht_clone_left tbody tr:eq(1) th:eq(0)').simulate('mousedown');
    spec().$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)').simulate('mouseover');
    spec().$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mouseover');
    spec().$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mousemove');
    spec().$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mouseup');
    yield sleep(600);
    $resizer.simulate('mousedown', {
      clientY: resizerPosition.top
    });
    $resizer.simulate('mouseup');
    $resizer.simulate('mousedown', {
      clientY: resizerPosition.top
    });
    $resizer.simulate('mouseup');
    yield sleep(1000);
    expect(rowHeight(spec().$container, 1)).toBeAroundValue(24);
    expect(rowHeight(spec().$container, 2)).toBeAroundValue(24);
    expect(rowHeight(spec().$container, 3)).toBeAroundValue(24);
  }));
  it('should resize (expanding and narrowing) selected rows',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetData(10, 20),
      rowHeaders: true,
      manualRowResize: true
    });
    resizeRow(2, 60);
    var $rowsHeaders = spec().$container.find('.ht_clone_left tr th');
    spec().$container.find('.ht_clone_left tbody tr:eq(1) th:eq(0)').simulate('mouseover');
    $rowsHeaders.eq(1).simulate('mousedown');
    $rowsHeaders.eq(2).simulate('mouseover');
    $rowsHeaders.eq(3).simulate('mouseover');
    $rowsHeaders.eq(3).simulate('mousemove');
    $rowsHeaders.eq(3).simulate('mouseup');
    var $resizer = spec().$container.find('.manualRowResizer');
    var resizerPosition = $resizer.position();
    yield sleep(600);
    $resizer.simulate('mousedown', {
      clientY: resizerPosition.top
    });
    $resizer.simulate('mousemove', {
      clientY: resizerPosition.top - $rowsHeaders.eq(3).height() + 80
    });
    $resizer.simulate('mouseup');
    expect($rowsHeaders.eq(1).height()).toEqual(80);
    expect($rowsHeaders.eq(2).height()).toEqual(80);
    expect($rowsHeaders.eq(3).height()).toEqual(80);
    yield sleep(1200);
    $resizer.simulate('mousedown', {
      clientY: resizerPosition.top
    });
    $resizer.simulate('mousemove', {
      clientY: resizerPosition.top - $rowsHeaders.eq(3).height() + 35
    });
    $resizer.simulate('mouseup');
    expect($rowsHeaders.eq(1).height()).toEqual(35);
    expect($rowsHeaders.eq(2).height()).toEqual(35);
    expect($rowsHeaders.eq(3).height()).toEqual(35);
  }));
  describe('handle and guide', function () {
    it('should display the resize handle in the proper position and with a proper size', function () {
      handsontable({
        data: [{
          id: 1,
          name: 'Ted',
          lastName: 'Right'
        }, {
          id: 2,
          name: 'Frank',
          lastName: 'Honest'
        }, {
          id: 3,
          name: 'Joan',
          lastName: 'Well'
        }, {
          id: 4,
          name: 'Sid',
          lastName: 'Strong'
        }, {
          id: 5,
          name: 'Jane',
          lastName: 'Neat'
        }],
        rowHeaders: true,
        manualRowResize: true
      });
      var $headerTH = spec().$container.find('tbody tr:eq(1) th:eq(0)');
      $headerTH.simulate('mouseover');
      var $handle = $('.manualRowResizer');
      expect($handle.offset().top).toBeCloseTo($headerTH.offset().top + $headerTH.outerHeight() - $handle.outerHeight() - 1, 0);
      expect($handle.width()).toBeCloseTo($headerTH.outerWidth(), 0);
    });
  });
});

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('MergeCells', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('initialization', function () {
    it('should merge cell in startup', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }]
      });
      var TD = hot.rootElement.querySelector('td');
      expect(TD.getAttribute('rowspan')).toBe('2');
      expect(TD.getAttribute('colspan')).toBe('2');
    });
  });
  describe('methods', function () {
    it('should clear merged cells collection without throw an exception', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(50, 1),
        width: 100,
        height: 100,
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 1
        }, {
          row: 4,
          col: 0,
          rowspan: 30,
          colspan: 1
        }, {
          row: 48,
          col: 0,
          rowspan: 2,
          colspan: 1
        }]
      });
      expect(function () {
        hot.getPlugin('mergeCells').clearCollections();
      }).not.toThrow();
    });
  });
  describe('mergeCells updateSettings', function () {
    it('should allow to overwrite the initial settings using the updateSettings method', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }]
      });
      var TD = hot.rootElement.querySelector('td');
      expect(TD.getAttribute('rowspan')).toBe('2');
      expect(TD.getAttribute('colspan')).toBe('2');
      updateSettings({
        mergeCells: [{
          row: 2,
          col: 2,
          rowspan: 2,
          colspan: 2
        }]
      });
      TD = hot.rootElement.querySelector('td');
      expect(TD.getAttribute('rowspan')).toBe(null);
      expect(TD.getAttribute('colspan')).toBe(null);
      TD = getCell(2, 2);
      expect(TD.getAttribute('rowspan')).toBe('2');
      expect(TD.getAttribute('colspan')).toBe('2');
    });
    it('should allow resetting the merged cells by changing it to an empty array', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }]
      });
      var TD = hot.rootElement.querySelector('td');
      expect(TD.getAttribute('rowspan')).toBe('2');
      expect(TD.getAttribute('colspan')).toBe('2');
      updateSettings({
        mergeCells: []
      });
      TD = hot.rootElement.querySelector('td');
      expect(TD.getAttribute('rowspan')).toBe(null);
      expect(TD.getAttribute('colspan')).toBe(null);
    });
    it('should allow resetting and turning off the mergeCells plugin by changing mergeCells to \'false\'', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }]
      });
      var TD = hot.rootElement.querySelector('td');
      expect(TD.getAttribute('rowspan')).toBe('2');
      expect(TD.getAttribute('colspan')).toBe('2');
      updateSettings({
        mergeCells: false
      });
      TD = hot.rootElement.querySelector('td');
      expect(TD.getAttribute('rowspan')).toBe(null);
      expect(TD.getAttribute('colspan')).toBe(null);
    });
  });
  describe('mergeCells copy', function () {
    it('should not copy text of cells that are merged into another cell', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }]
      });
      expect(hot.getCopyableText(0, 0, 2, 2)).toBe('A1\t\tC1\n\t\tC2\nA3\tB3\tC3');
    });
  });
  describe('merged cells selection', function () {
    it('should select the whole range of cells which form a merged cell', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(4, 4),
        mergeCells: [{
          row: 0,
          col: 0,
          colspan: 4,
          rowspan: 1
        }]
      });
      var $table = spec().$container.find('table.htCore');
      var $td = $table.find('tr:eq(0) td:eq(0)');
      expect($td.attr('rowspan')).toEqual('1');
      expect($td.attr('colspan')).toEqual('4');
      expect(hot.getSelectedLast()).toBeUndefined();
      hot.selectCell(0, 0);
      expect(hot.getSelectedLast()).toEqual([0, 0, 0, 3]);
      deselectCell();
      hot.selectCell(0, 1);
      expect(hot.getSelectedLast()).toEqual([0, 0, 0, 3]);
    });
    it('should always make a rectangular selection, when selecting merged and not merged cells', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(4, 4),
        mergeCells: [{
          row: 1,
          col: 1,
          colspan: 3,
          rowspan: 2
        }]
      });
      var $table = spec().$container.find('table.htCore');
      var $td = $table.find('tr:eq(1) td:eq(1)');
      expect($td.attr('rowspan')).toEqual('2');
      expect($td.attr('colspan')).toEqual('3');
      expect(hot.getSelectedLast()).toBeUndefined();
      hot.selectCell(0, 0);
      expect(hot.getSelectedLast()).toEqual([0, 0, 0, 0]);
      deselectCell();
      hot.selectCell(0, 0, 1, 1);
      expect(hot.getSelectedLast()).not.toEqual([0, 0, 1, 1]);
      expect(hot.getSelectedLast()).toEqual([0, 0, 2, 3]);
      deselectCell();
      hot.selectCell(0, 1, 1, 1);
      expect(hot.getSelectedLast()).toEqual([0, 1, 2, 3]);
    });
    it('should not switch the selection start point when selecting from non-merged cells to merged cells', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
        mergeCells: [{
          row: 1,
          col: 1,
          rowspan: 3,
          colspan: 3
        }, {
          row: 3,
          col: 4,
          rowspan: 2,
          colspan: 2
        }]
      });
      $(hot.getCell(6, 6)).simulate('mousedown');
      expect(hot.getSelectedRangeLast().from.col).toEqual(6);
      expect(hot.getSelectedRangeLast().from.row).toEqual(6);
      $(hot.getCell(1, 1)).simulate('mouseenter');
      expect(hot.getSelectedRangeLast().from.col).toEqual(6);
      expect(hot.getSelectedRangeLast().from.row).toEqual(6);
      $(hot.getCell(3, 3)).simulate('mouseenter');
      expect(hot.getSelectedRangeLast().from.col).toEqual(6);
      expect(hot.getSelectedRangeLast().from.row).toEqual(6);
      $(hot.getCell(4, 4)).simulate('mouseenter');
      expect(hot.getSelectedRangeLast().from.col).toEqual(6);
      expect(hot.getSelectedRangeLast().from.row).toEqual(6);
    });
    it('should select cells in the correct direction when changing selections around a merged range', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),
        mergeCells: [{
          row: 4,
          col: 4,
          rowspan: 2,
          colspan: 2
        }]
      });
      hot.selectCell(5, 5, 5, 2);
      expect(hot.getSelectedRangeLast().getDirection()).toEqual('SE-NW');
      hot.selectCell(4, 4, 2, 5);
      expect(hot.getSelectedRangeLast().getDirection()).toEqual('SW-NE');
      hot.selectCell(4, 4, 5, 7);
      expect(hot.getSelectedRangeLast().getDirection()).toEqual('NW-SE');
      hot.selectCell(4, 5, 7, 5);
      expect(hot.getSelectedRangeLast().getDirection()).toEqual('NE-SW');
    });
    it('should not add an area class to the selected cell if a single merged cell is selected', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(6, 6),
        mergeCells: [{
          row: 1,
          col: 1,
          colspan: 3,
          rowspan: 2
        }]
      });
      selectCell(1, 1);
      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);
      selectCell(1, 1, 4, 4);
      expect(getCell(1, 1).className.indexOf('area')).not.toEqual(-1);
      selectCell(1, 1);
      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);
      selectCell(0, 0);
      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);
    });
    it('should render fill handle after merge cells', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: true
      });
      var plugin = hot.getPlugin('mergeCells');
      hot.selectCell(0, 0, 2, 2);
      plugin.mergeSelection();
      expect(spec().$container.find('.wtBorder.current.corner:visible').length).toEqual(1);
    });
    it('should render fill handle when merge cells is highlighted cell in right bottom corner', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 2,
          col: 2,
          rowspan: 2,
          colspan: 2
        }]
      });
      hot.selectCell(2, 2, 1, 1);
      expect(spec().$container.find('.wtBorder.corner:visible').length).toEqual(1);
    });
    it('should render fill handle when cell in right bottom corner is a merged cell', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 2,
          col: 2,
          rowspan: 2,
          colspan: 2
        }]
      });
      hot.selectCell(1, 1, 2, 2);
      expect(spec().$container.find('.wtBorder.corner:visible').length).toEqual(1);
    });
    it('should select the cell in the top-left corner of the merged cell, when navigating down using the ENTER key on the' + ' bottom edge of the table', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 8,
          col: 8,
          rowspan: 2,
          colspan: 2
        }]
      });
      hot.setDataAtCell(8, 8, 'top-left-corner!');
      hot.selectCell(7, 9);
      keyDownUp('enter');
      keyDownUp('enter');
      keyDownUp('enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
      keyDownUp('enter');
      keyDownUp('enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
      keyDownUp('enter');
      keyDownUp('enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
    });
    it('should select the cell in the top-left corner of the merged cell, when navigating down using the TAB key on the' + ' bottom edge of the table', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 8,
          col: 8,
          rowspan: 2,
          colspan: 2
        }],
        autoWrapCol: false,
        autoWrapRow: false
      });
      hot.setDataAtCell(8, 8, 'top-left-corner!');
      hot.selectCell(9, 7);
      keyDownUp('enter');
      keyDownUp('tab');
      keyDownUp('enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
      keyDownUp('tab');
      keyDownUp('enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
      keyDownUp('tab');
      keyDownUp('enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
    });
    it('should select the cell in the top-left corner of the merged cell, when navigating down using the SHIFT + ENTER key on the' + ' top edge of the table', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }],
        autoWrapCol: false,
        autoWrapRow: false
      });
      hot.setDataAtCell(0, 0, 'top-left-corner!');
      hot.selectCell(2, 1);
      keyDownUp('shift+enter');
      keyDownUp('shift+enter');
      keyDownUp('shift+enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
      keyDownUp('shift+enter');
      keyDownUp('shift+enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
      keyDownUp('shift+enter');
      keyDownUp('shift+enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
    });
    it('should select the cell in the top-left corner of the merged cell, when navigating down using the SHIFT + TAB key on the' + ' top edge of the table', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }]
      });
      hot.setDataAtCell(0, 0, 'top-left-corner!');
      hot.selectCell(1, 2);
      keyDownUp('shift+enter');
      keyDownUp('shift+tab');
      keyDownUp('shift+enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('top-left-corner!');
      keyDownUp('shift+tab');
      keyDownUp('shift+enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('J1');
      keyDownUp('shift+tab');
      keyDownUp('shift+enter');
      expect(spec().$container.find('.handsontableInputHolder textarea').val()).toEqual('I1');
      keyDownUp('shift+enter');
    });
  });
  describe('merged cells scroll', function () {
    it('getCell should return merged cell parent', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }],
        height: 100,
        width: 400
      });
      var mergedCellParent = hot.getCell(0, 0);
      var mergedCellHidden = hot.getCell(1, 1);
      expect(mergedCellHidden).toBe(mergedCellParent);
    });
    it('should scroll viewport to beginning of a merged cell when it\'s clicked', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
        mergeCells: [{
          row: 5,
          col: 0,
          rowspan: 2,
          colspan: 2
        }],
        height: 100,
        width: 400
      });
      var mainHolder = hot.view.wt.wtTable.holder;
      mainHolder.scrollTop = 130;
      hot.render();
      expect(mainHolder.scrollTop).toBe(130);
      var TD = hot.getCell(5, 0);
      mouseDown(TD);
      mouseUp(TD);
      var mergedCellScrollTop = mainHolder.scrollTop;
      expect(mergedCellScrollTop).toBeLessThan(130);
      expect(mergedCellScrollTop).toBeGreaterThan(0);
      mainHolder.scrollTop = 0;
      hot.render();
      mainHolder.scrollTop = 130;
      hot.render();
      TD = hot.getCell(5, 2);
      mouseDown(TD);
      mouseUp(TD);
      var regularCellScrollTop = mainHolder.scrollTop;
      expect(mergedCellScrollTop).toBe(regularCellScrollTop);
    });
    it('should render whole merged cell even when most rows are not in the viewport - scrolled to top', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(40, 5),
        mergeCells: [{
          row: 1,
          col: 0,
          rowspan: 21,
          colspan: 2
        }, {
          row: 21,
          col: 2,
          rowspan: 18,
          colspan: 2
        }],
        height: 100,
        width: 400
      });
      expect(hot.countRenderedRows()).toBe(39);
    });
    it('should render whole merged cell even when most rows are not in the viewport - scrolled to bottom', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(40, 5),
        mergeCells: [{
          row: 1,
          col: 0,
          rowspan: 21,
          colspan: 2
        }, {
          row: 21,
          col: 2,
          rowspan: 18,
          colspan: 2
        }],
        height: 100,
        width: 400
      });
      var mainHolder = hot.view.wt.wtTable.holder;
      $(mainHolder).scrollTop(99999);
      hot.render();
      expect(hot.countRenderedRows()).toBe(39);
    });
    it('should render whole merged cell even when most columns are not in the viewport - scrolled to the left', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(5, 40),
        mergeCells: [{
          row: 0,
          col: 1,
          rowspan: 2,
          colspan: 21
        }, {
          row: 2,
          col: 21,
          rowspan: 2,
          colspan: 18
        }],
        height: 100,
        width: 400
      });
      expect(hot.countRenderedCols()).toBe(39);
    });
    it('should render whole merged cell even when most columns are not in the viewport - scrolled to the right', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(5, 40),
        mergeCells: [{
          row: 0,
          col: 1,
          rowspan: 2,
          colspan: 21
        }, {
          row: 2,
          col: 21,
          rowspan: 2,
          colspan: 18
        }],
        height: 100,
        width: 400
      });
      spec().$container.scrollLeft(99999);
      hot.render();
      expect(hot.countRenderedCols()).toBe(39);
    });
  });
  describe('merge cells shift', function () {
    it('should shift the merged cells right, when inserting a column on the left side of them', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 1,
          col: 1,
          rowspan: 2,
          colspan: 2
        }, {
          row: 2,
          col: 5,
          rowspan: 2,
          colspan: 2
        }],
        height: 400,
        width: 400
      });
      hot.alter('insert_col', 3, 2);
      var plugin = hot.getPlugin('mergeCells');
      var mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;
      expect(mergedCellsCollection[0].col).toEqual(1);
      expect(mergedCellsCollection[1].col).toEqual(7);
    });
    it('should shift the merged cells left, when removing a column on the left side of them', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 1,
          col: 1,
          rowspan: 2,
          colspan: 2
        }, {
          row: 2,
          col: 5,
          rowspan: 2,
          colspan: 2
        }],
        height: 400,
        width: 400
      });
      hot.alter('remove_col', 3, 2);
      var plugin = hot.getPlugin('mergeCells');
      var mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;
      expect(mergedCellsCollection[0].col).toEqual(1);
      expect(mergedCellsCollection[1].col).toEqual(3);
    });
    it('should shift the merged cells down, when inserting rows above them', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 1,
          col: 1,
          rowspan: 2,
          colspan: 2
        }, {
          row: 5,
          col: 5,
          rowspan: 2,
          colspan: 2
        }],
        height: 400,
        width: 400
      });
      hot.alter('insert_row', 3, 2);
      var plugin = hot.getPlugin('mergeCells');
      var mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;
      expect(mergedCellsCollection[0].row).toEqual(1);
      expect(mergedCellsCollection[1].row).toEqual(7);
    });
    it('should shift the merged cells up, when removing rows above them', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 1,
          col: 1,
          rowspan: 2,
          colspan: 2
        }, {
          row: 5,
          col: 5,
          rowspan: 2,
          colspan: 2
        }],
        height: 400,
        width: 400
      });
      hot.alter('remove_row', 3, 2);
      var plugin = hot.getPlugin('mergeCells');
      var mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;
      expect(mergedCellsCollection[0].row).toEqual(1);
      expect(mergedCellsCollection[1].row).toEqual(3);
    });
    it('should trim the merged cell\'s height, when removing rows between their start and end', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 1,
          col: 1,
          rowspan: 5,
          colspan: 3
        }],
        height: 400,
        width: 400
      });
      hot.alter('remove_row', 2, 2);
      var plugin = hot.getPlugin('mergeCells');
      var mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;
      expect(mergedCellsCollection[0].row).toEqual(1);
      expect(mergedCellsCollection[0].rowspan).toEqual(3);
      plugin.mergedCellsCollection.clear();
      plugin.merge(1, 1, 2, 2);
      hot.alter('remove_row', 2, 2);
      expect(mergedCellsCollection[0].row).toEqual(1);
      expect(mergedCellsCollection[0].rowspan).toEqual(1);
    });
    it('should trim the merged cell\'s width, when removing columns between their start and end', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 1,
          col: 1,
          rowspan: 3,
          colspan: 5
        }],
        height: 400,
        width: 400
      });
      hot.alter('remove_col', 2, 2);
      var plugin = hot.getPlugin('mergeCells');
      var mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;
      expect(mergedCellsCollection[0].col).toEqual(1);
      expect(mergedCellsCollection[0].colspan).toEqual(3);
      plugin.mergedCellsCollection.clear();
      plugin.merge(1, 1, 2, 2);
      hot.alter('remove_col', 2, 2);
      expect(mergedCellsCollection[0].col).toEqual(1);
      expect(mergedCellsCollection[0].colspan).toEqual(1);
    });
    it('should shift the `row` of a merged cells, when removing rows consisting it', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 5,
          col: 5,
          rowspan: 5,
          colspan: 3
        }],
        height: 400,
        width: 400
      });
      hot.alter('remove_row', 4, 3);
      var plugin = hot.getPlugin('mergeCells');
      var mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;
      expect(mergedCellsCollection[0].row).toEqual(4);
      expect(mergedCellsCollection[0].rowspan).toEqual(3);
      plugin.mergedCellsCollection.clear();
      plugin.merge(1, 1, 2, 2);
      hot.alter('remove_row', 0, 2);
      expect(mergedCellsCollection[0].row).toEqual(0);
      expect(mergedCellsCollection[0].rowspan).toEqual(1);
      plugin.mergedCellsCollection.clear();
      plugin.merge(1, 1, 2, 2);
      hot.alter('remove_row', 1, 1);
      expect(mergedCellsCollection[0].row).toEqual(1);
      expect(mergedCellsCollection[0].rowspan).toEqual(1);
    });
    it('should shift the `col` of a merged cells, when removing columns consisting it', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 5,
          col: 5,
          rowspan: 3,
          colspan: 5
        }],
        height: 400,
        width: 400
      });
      hot.alter('remove_col', 4, 3);
      var plugin = hot.getPlugin('mergeCells');
      var mergedCellsCollection = plugin.mergedCellsCollection.mergedCells;
      expect(mergedCellsCollection[0].col).toEqual(4);
      expect(mergedCellsCollection[0].colspan).toEqual(3);
      plugin.mergedCellsCollection.clear();
      plugin.merge(1, 1, 2, 2);
      hot.alter('remove_col', 0, 2);
      expect(mergedCellsCollection[0].col).toEqual(0);
      expect(mergedCellsCollection[0].colspan).toEqual(1);
      plugin.mergedCellsCollection.clear();
      plugin.merge(1, 1, 2, 2);
      hot.alter('remove_col', 1, 1);
      expect(mergedCellsCollection[0].col).toEqual(1);
      expect(mergedCellsCollection[0].colspan).toEqual(1);
    });
    it('should allow removing multiple merged cells, while removing multiple rows', function () {
      var errorSpy = spyOn(console, 'error');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: [{
          row: 0,
          col: 0,
          rowspan: 2,
          colspan: 2
        }, {
          row: 5,
          col: 5,
          rowspan: 3,
          colspan: 3
        }],
        height: 400,
        width: 400
      });
      hot.alter('remove_row', 0, 10);
      expect(errorSpy).not.toHaveBeenCalled();
    });
  });
  describe('merged cell candidates validation', function () {
    it('should check if the provided merged cell information object contains negative values, and if so, do not add it ' + 'to the collection and throw an appropriate warning', function () {
      var warnSpy = spyOn(console, 'warn');
      var newMergedCells = [{
        row: 0,
        col: 1,
        rowspan: 3,
        colspan: 4
      }, {
        row: -5,
        col: 8,
        rowspan: 3,
        colspan: 4
      }, {
        row: 20,
        col: -21,
        rowspan: 3,
        colspan: 4
      }, {
        row: 200,
        col: 210,
        rowspan: -3,
        colspan: 4
      }, {
        row: 220,
        col: 220,
        rowspan: 3,
        colspan: -4
      }];
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: newMergedCells
      });
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared with {row: -5, col: 8, rowspan: 3, colspan: 4} ' + 'contains negative values, which is not supported. It will not be added to the collection.');
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared with {row: 20, col: -21, rowspan: 3, colspan: 4} ' + 'contains negative values, which is not supported. It will not be added to the collection.');
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared with {row: 200, col: 210, rowspan: -3, colspan: 4} ' + 'contains negative values, which is not supported. It will not be added to the collection.');
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared with {row: 220, col: 220, rowspan: 3, colspan: -4} ' + 'contains negative values, which is not supported. It will not be added to the collection.');
      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(1);
    });
    it('should check if the provided merged cell information object has rowspan and colspan declared as 0, and if so, do not add it ' + 'to the collection and throw an appropriate warning', function () {
      var warnSpy = spyOn(console, 'warn');
      var newMergedCells = [{
        row: 0,
        col: 1,
        rowspan: 3,
        colspan: 4
      }, {
        row: 6,
        col: 6,
        rowspan: 0,
        colspan: 0
      }, {
        row: 9,
        col: 9,
        rowspan: 1,
        colspan: 0
      }];
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: newMergedCells
      });
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [6, 6] has "rowspan" or ' + '"colspan" declared as "0", which is not supported. It cannot be added to the collection.');
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [9, 9] has "rowspan" or ' + '"colspan" declared as "0", which is not supported. It cannot be added to the collection.');
      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(1);
    });
    it('should check if the provided merged cell information object represents a single cell, and if so, do not add it ' + 'to the collection and throw an appropriate warning', function () {
      var warnSpy = spyOn(console, 'warn');
      var newMergedCells = [{
        row: 0,
        col: 1,
        rowspan: 3,
        colspan: 4
      }, {
        row: 5,
        col: 8,
        rowspan: 1,
        colspan: 1
      }, {
        row: 20,
        col: 21,
        rowspan: 3,
        colspan: 4
      }];
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(30, 30),
        mergeCells: newMergedCells
      });
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [5, 8] has both "rowspan" and "colspan" ' + 'declared as "1", which makes it a single cell. It cannot be added to the collection.');
      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(2);
    });
    it('should check if the provided merged cell information object contains merged declared out of bounds, and if so, ' + 'do not add it to the collection and throw an appropriate warning', function () {
      var warnSpy = spyOn(console, 'warn');
      var newMergedCells = [{
        row: 0,
        col: 1,
        rowspan: 3,
        colspan: 4
      }, {
        row: 17,
        col: 17,
        rowspan: 5,
        colspan: 5
      }, {
        row: 20,
        col: 21,
        rowspan: 3,
        colspan: 4
      }];
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(20, 20),
        mergeCells: newMergedCells
      });
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [17, 17] is positioned ' + '(or positioned partially) outside of the table range. It was not added to the table, please fix your setup.');
      expect(warnSpy).toHaveBeenCalledWith('The merged cell declared at [20, 21] is positioned ' + '(or positioned partially) outside of the table range. It was not added to the table, please fix your setup.');
      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(1);
    });
  });
  xdescribe('canMergeRange', function () {
    it('should return false if start and end cell is the same', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)
      });
      var mergeCells = new Handsontable.plugins.MergeCells(hot);
      var result = mergeCells.canMergeRange({
        from: {
          row: 0,
          col: 1
        },
        to: {
          row: 0,
          col: 1
        }
      });
      expect(result).toBe(false);
    });
    it('should return true for 2 consecutive cells in the same column', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)
      });
      var mergeCells = new Handsontable.plugins.MergeCells(hot);
      var result = mergeCells.canMergeRange({
        from: {
          row: 0,
          col: 1
        },
        to: {
          row: 1,
          col: 1
        }
      });
      expect(result).toBe(true);
    });
    it('should return true for 2 consecutive cells in the same row', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)
      });
      var mergeCells = hot.getPlugin('mergeCells');
      var result = mergeCells.canMergeRange({
        from: {
          row: 0,
          col: 1
        },
        to: {
          row: 0,
          col: 2
        }
      });
      expect(result).toBe(true);
    });
    it('should return true for 4 neighboring cells', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)
      });
      var mergeCells = hot.getPlugin('mergeCells');
      var result = mergeCells.canMergeRange({
        from: {
          row: 0,
          col: 1
        },
        to: {
          row: 1,
          col: 2
        }
      });
      expect(result).toBe(true);
    });
  });
  xdescribe('modifyTransform', function () {
    it('should not transform arrow right when entering a merged cell', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var coords = new CellCoords(1, 0);
      var currentSelection = new CellRange(coords, coords, coords);
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var inDelta = new CellCoords(0, 1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(0, 1));
    });
    it('should transform arrow right when leaving a merged cell', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var coords = new CellCoords(1, 1);
      var currentSelection = new CellRange(coords, coords, coords);
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var inDelta = new CellCoords(0, 1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(0, 3));
    });
    it('should transform arrow right when leaving a merged cell (return to desired row)', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var coords = new CellCoords(2, 0);
      var currentSelection = new CellRange(coords, coords, coords);
      var inDelta = new CellCoords(0, 1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(-1, 1));
      coords = new CellCoords(1, 1);
      currentSelection = new CellRange(coords, coords, coords);
      inDelta = new CellCoords(0, 1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(1, 3));
    });
    it('should transform arrow left when entering a merged cell', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var coords = new CellCoords(1, 4);
      var currentSelection = new CellRange(coords, coords, coords);
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var inDelta = new CellCoords(0, -1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(0, -3));
    });
    it('should not transform arrow left when leaving a merged cell', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var coords = new CellCoords(1, 1);
      var currentSelection = new CellRange(coords, coords, coords);
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var inDelta = new CellCoords(0, -1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(0, -1));
    });
    it('should transform arrow left when leaving a merged cell (return to desired row)', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var coords = new CellCoords(2, 4);
      var currentSelection = new CellRange(coords, coords, coords);
      var inDelta = new CellCoords(0, -1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(-1, -3));
      coords = new CellCoords(1, 1);
      currentSelection = new CellRange(coords, coords, coords);
      inDelta = new CellCoords(0, -1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(1, -1));
    });
    it('should not transform arrow down when entering a merged cell', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var coords = new CellCoords(0, 1);
      var currentSelection = new CellRange(coords, coords, coords);
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var inDelta = new CellCoords(0, -1);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(0, -1));
    });
    it('should transform arrow down when leaving a merged cell', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var coords = new CellCoords(1, 1);
      var currentSelection = new CellRange(coords, coords, coords);
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var inDelta = new CellCoords(1, 0);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(3, 0));
    });
    it('should transform arrow up when entering a merged cell', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var coords = new CellCoords(4, 1);
      var currentSelection = new CellRange(coords, coords, coords);
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var inDelta = new CellCoords(-1, 0);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(-3, 0));
    });
    it('should not transform arrow up when leaving a merged cell', function () {
      var mergeCellsSettings = [{
        row: 1,
        col: 1,
        rowspan: 3,
        colspan: 3
      }];
      var coords = new CellCoords(1, 1);
      var currentSelection = new CellRange(coords, coords, coords);
      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);
      var inDelta = new CellCoords(-1, 0);
      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);
      expect(inDelta).toEqual(new CellCoords(-1, 0));
    });
  });
  describe('ContextMenu', function () {
    it('should disable `Merge cells` context menu item when context menu was triggered from corner header', function () {
      handsontable({
        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
        rowHeaders: true,
        colHeaders: true,
        contextMenu: true,
        mergeCells: true
      });
      $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0).simulate('mousedown', {
        which: 3
      });
      contextMenu();
      expect($('.htContextMenu tbody td.htDisabled').text()).toBe(['Insert column left', 'Insert column right', 'Remove row', 'Remove column', 'Undo', 'Redo', 'Read only', 'Alignment', 'Merge cells'].join(''));
    });
  });
  describe('Validation', function () {
    it('should not hide the merged cells after validating the table', function (done) {
      var onAfterValidate = jasmine.createSpy('onAfterValidate');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 5,
          col: 4,
          rowspan: 2,
          colspan: 2
        }, {
          row: 1,
          col: 1,
          rowspan: 2,
          colspan: 2
        }],
        validator: function validator(query, callback) {
          callback(true);
        },
        afterValidate: onAfterValidate
      });
      var firstCollection = hot.getCell(5, 4);
      var secondCollection = hot.getCell(1, 1);
      expect(firstCollection.style.display.indexOf('none')).toEqual(-1);
      expect(secondCollection.style.display.indexOf('none')).toEqual(-1);
      hot.validateCells();
      setTimeout(function () {
        expect(onAfterValidate).toHaveBeenCalled();
        firstCollection = hot.getCell(5, 4);
        secondCollection = hot.getCell(1, 1);
        expect(firstCollection.style.display.indexOf('none')).toEqual(-1);
        expect(secondCollection.style.display.indexOf('none')).toEqual(-1);
        done();
      }, 100);
    });
  });
  describe('Entire row/column selection', function () {
    it('should be possible to select a single entire column, when there\'s a merged cell in it', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 5,
          col: 4,
          rowspan: 2,
          colspan: 5
        }]
      });
      hot.selectCell(0, 5, 9, 5);
      expect(JSON.stringify(hot.getSelectedLast())).toEqual('[0,5,9,5]'); // it should work only for selecting the entire column

      hot.selectCell(4, 5, 7, 5);
      expect(JSON.stringify(hot.getSelectedLast())).toEqual('[4,4,7,8]');
    });
    it('should be possible to select a single entire row, when there\'s a merged cell in it', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 5,
          col: 4,
          rowspan: 5,
          colspan: 2
        }]
      });
      hot.selectCell(5, 0, 5, 9);
      expect(JSON.stringify(hot.getSelectedLast())).toEqual('[5,0,5,9]'); // it should work only for selecting the entire row

      hot.selectCell(6, 3, 6, 7);
      expect(JSON.stringify(hot.getSelectedLast())).toEqual('[5,3,9,7]');
    });
  });
  describe('Undo/Redo', function () {
    it('should not be possible to remove initially declared merged cells by calling the \'Undo\' action.', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: [{
          row: 5,
          col: 4,
          rowspan: 2,
          colspan: 5
        }, {
          row: 1,
          col: 1,
          rowspan: 2,
          colspan: 2
        }]
      });
      hot.undo();
      expect(hot.getPlugin('mergeCells').mergedCellsCollection.mergedCells.length).toEqual(2);
    });
    it('should be possible undo the merging process by calling the \'Undo\' action.', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: true
      });
      var plugin = hot.getPlugin('mergeCells');
      plugin.merge(0, 0, 3, 3);
      hot.selectCell(4, 4, 7, 7);
      plugin.mergeSelection();
      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(2);
      hot.undo();
      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(1);
      hot.undo();
      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(0);
    });
    it('should be possible redo the merging process by calling the \'Redo\' action.', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(10, 10),
        mergeCells: true
      });
      var plugin = hot.getPlugin('mergeCells');
      plugin.merge(0, 0, 3, 3);
      hot.selectCell(4, 4, 7, 7);
      plugin.mergeSelection();
      hot.undo();
      hot.undo();
      hot.redo();
      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(1);
      hot.redo();
      expect(plugin.mergedCellsCollection.mergedCells.length).toEqual(2);
    });
  });
});

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('MergeCells Selection', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  it('should leave the partially selected merged cells white (or any initial color), when selecting entire columns or rows', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
      mergeCells: [{
        row: 0,
        col: 0,
        rowspan: 3,
        colspan: 3
      }]
    });
    selectColumns(0, 1);
    var mergedCell = getCell(0, 0);
    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual('0');
    selectRows(0, 1);
    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual('0');
  });
  it('should leave the partially selected merged cells with their initial color, when selecting entire columns or rows ' + '(when the merged cells was previously fully selected)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
      mergeCells: [{
        row: 0,
        col: 0,
        rowspan: 3,
        colspan: 3
      }],
      rowHeaders: true
    });
    selectColumns(0, 2);
    var mergedCell = getCell(0, 0);
    var selectedCellBackground = getComputedStyle(mergedCell, ':before').backgroundColor;
    var selectedCellOpacity = getComputedStyle(mergedCell, ':before').opacity;
    var firstRowHeader = getCell(0, -1, true);
    keyDown('ctrl');
    $(firstRowHeader).simulate('mousedown');
    $(firstRowHeader).simulate('mouseup');
    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);
    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);
  });
  it('should make the entirely selected merged cells have the same background color as a regular selected area, when ' + 'selecting entire columns or rows', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 6),
      mergeCells: [{
        row: 0,
        col: 0,
        rowspan: 3,
        colspan: 3
      }]
    });
    selectCell(4, 4, 5, 5);
    var selectedCell = getCell(4, 4);
    var selectedCellBackground = getComputedStyle(selectedCell, ':before').backgroundColor;
    var selectedCellOpacity = getComputedStyle(selectedCell, ':before').opacity;
    selectColumns(0, 2);
    var mergedCell = getCell(0, 0);
    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);
    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);
    selectRows(0, 2);
    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);
    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);
  });
  it('should make the entirely selected merged cells have the same background color as a regular selected area, when ' + 'selecting entire columns or rows (using multiple selection layers)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
      mergeCells: [{
        row: 0,
        col: 0,
        rowspan: 3,
        colspan: 3
      }],
      rowHeaders: true,
      colHeaders: true
    }); // sample the selected background

    selectCells([[5, 1, 5, 2]]);
    var selectedCell = getCell(5, 1);
    var selectedCellBackground = getComputedStyle(selectedCell, ':before').backgroundColor;
    var selectedCellOpacity = getComputedStyle(selectedCell, ':before').opacity;
    var mergedCell = getCell(0, 0);
    var rowHeaders = [getCell(0, -1, true), getCell(1, -1, true), getCell(2, -1, true), getCell(3, -1, true)];
    var columnHeaders = [spec().$container.find('.ht_clone_top tr:eq(0) th:eq(1)'), spec().$container.find('.ht_clone_top tr:eq(0) th:eq(2)'), spec().$container.find('.ht_clone_top tr:eq(0) th:eq(3)'), spec().$container.find('.ht_clone_top tr:eq(0) th:eq(4)')];
    deselectCell();
    keyDown('ctrl');
    $(rowHeaders[0]).simulate('mousedown');
    $(rowHeaders[1]).simulate('mouseover');
    $(rowHeaders[1]).simulate('mouseup');
    $(rowHeaders[2]).simulate('mousedown');
    $(rowHeaders[2]).simulate('mouseover');
    $(rowHeaders[2]).simulate('mouseup');
    keyUp('ctrl');
    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);
    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);
    deselectCell();
    keyDown('ctrl');
    $(columnHeaders[0]).simulate('mousedown');
    $(columnHeaders[1]).simulate('mouseover');
    $(columnHeaders[1]).simulate('mouseup');
    $(columnHeaders[2]).simulate('mousedown');
    $(columnHeaders[3]).simulate('mouseover');
    $(columnHeaders[3]).simulate('mouseup');
    keyUp('ctrl');
    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);
    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);
  });
  it('should make the entirely selected merged cells have the same background color as a regular selected area, when ' + 'selecting entire columns or rows (when the merged cells was previously fully selected)', function () {
    handsontable({
      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),
      mergeCells: [{
        row: 0,
        col: 0,
        rowspan: 3,
        colspan: 3
      }],
      rowHeaders: true
    }); // sample the double-selected background

    selectCells([[5, 1, 5, 2], [5, 1, 5, 2]]);
    var selectedCell = getCell(5, 1);
    var selectedCellBackground = getComputedStyle(selectedCell, ':before').backgroundColor;
    var selectedCellOpacity = getComputedStyle(selectedCell, ':before').opacity;
    selectColumns(0, 2);
    var mergedCell = getCell(0, 0);
    var firstRowHeader = getCell(0, -1, true);
    var thirdRowHeader = getCell(2, -1, true);
    keyDown('ctrl');
    $(firstRowHeader).simulate('mousedown');
    $(thirdRowHeader).simulate('mouseover');
    $(thirdRowHeader).simulate('mouseup');
    expect(getComputedStyle(mergedCell, ':before').backgroundColor).toEqual(selectedCellBackground);
    expect(getComputedStyle(mergedCell, ':before').opacity).toEqual(selectedCellOpacity);
  });
});

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('HandsontableObserveChanges', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });

  function createHOT(data, observeChanges) {
    return handsontable({
      data: data,
      width: 200,
      height: 200,
      observeChanges: observeChanges
    });
  }

  describe('refreshing table after changes have been detected', function () {
    describe('array data', function () {
      it('should render newly added row', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        createHOT(data, true);
        data.push(['A3', 'B3']);
        var htCore = getHtCore();
        setTimeout(function () {
          expect(htCore.find('tr').length).toEqual(3);
          expect(htCore.find('col').length).toEqual(2);
          done();
        }, 200);
      });
      it('should render newly added column', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data[0].push('C1');
        data[1].push('C2');
        setTimeout(function () {
          expect(htCore.find('tr').length).toEqual(2);
          expect(htCore.find('col').length).toEqual(3);
          done();
        }, 200);
      });
      it('should render removed row', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data.splice(0, 1); // removes one row at index 0

        setTimeout(function () {
          expect(htCore.find('tr').length).toEqual(1);
          expect(htCore.find('col').length).toEqual(2);
          done();
        }, 200);
      });
      it('should render removed column', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data[0].splice(0, 1); // removes one column at index 0 in first row

        data[1].splice(0, 1); // removes one column at index 0 in second row

        setTimeout(function () {
          expect(htCore.find('tr').length).toEqual(2);
          expect(htCore.find('col').length).toEqual(1);
          done();
        }, 200);
      });
      it('should render cell change from string to string', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data[0][0] = 'new string';
        setTimeout(function () {
          expect(htCore.find('td:eq(0)').html()).toEqual('new string');
          done();
        }, 200);
      });
      it('should render cell change in a new row', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data.push(['A3', 'B3']);
        setTimeout(function () {
          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
          data[2][0] = 'new string';
        }, 200);
        setTimeout(function () {
          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('new string');
          done();
        }, 1200);
      });
      it('should not render cell change when turned off (`observeChanges: false`)', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        createHOT(data, false);
        var htCore = getHtCore();
        data[0][0] = 'new string';
        setTimeout(function () {
          expect(htCore.find('td:eq(0)').html()).toEqual('A1');
          done();
        }, 100);
      });
    });
    describe('object data', function () {
      it('should render newly added row', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data.push({
          prop0: 'A3',
          prop1: 'B3'
        });
        setTimeout(function () {
          expect(htCore.find('tr').length).toEqual(3);
          expect(htCore.find('col').length).toEqual(2);
          done();
        }, 200);
      });
      it('should render removed row', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data.splice(0, 1); // removes one row at index 0

        setTimeout(function () {
          expect(htCore.find('tr').length).toEqual(1);
          expect(htCore.find('col').length).toEqual(2);
          done();
        }, 200);
      });
      it('should render cell change from string to string', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data[0].prop0 = 'new string';
        setTimeout(function () {
          expect(htCore.find('td:eq(0)').html()).toEqual('new string');
          done();
        }, 200);
      });
      it('should render cell change in a new row', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        createHOT(data, true);
        var htCore = getHtCore();
        data.push({
          prop0: 'A3',
          prop1: 'B3'
        });
        setTimeout(function () {
          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');
          data[2].prop0 = 'new string';
        }, 200);
        setTimeout(function () {
          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('new string');
          done();
        }, 1200);
      });
      it('should not break with undefined data properties', function () {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        data[0].prop0 = undefined;
        expect(function () {
          createHOT(data, true);
          getHtCore();
        }).not.toThrow();
      });
      it('should not render cell change when turned off (`observeChanges: false`)', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        createHOT(data, false);
        var htCore = getHtCore();
        data[0].prop0 = 'new string';
        setTimeout(function () {
          expect(htCore.find('td:eq(0)').html()).toEqual('A1');
          done();
        }, 200);
      });
    });
  });
  describe('enabling/disabling plugin', function () {
    it('should be possible to enable plugin using updateSettings', function (done) {
      var data = Handsontable.helper.createSpreadsheetData(2, 2);
      createHOT(data, false);
      var htCore = getHtCore();
      data[0][0] = 'new string';
      setTimeout(function () {
        expect(htCore.find('td:eq(0)').html()).toEqual('A1');
        updateSettings({
          observeChanges: true
        });
        data[1][0] = 'another new string';
      }, 200);
      setTimeout(function () {
        expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('another new string');
        done();
      }, 400);
    });
    it('should be possible to disable plugin using updateSettings', function (done) {
      var data = Handsontable.helper.createSpreadsheetData(2, 2);
      var hot = createHOT(data, true);
      var htCore = getHtCore();
      data[0][0] = 'new string';
      setTimeout(function () {
        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');
        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');
        updateSettings({
          observeChanges: false
        });
        data[1][0] = 'another new string';
      }, 200);
      setTimeout(function () {
        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');
        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');
        hot.render();
        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');
        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');
        done();
      }, 300);
    });
    it('should be possible to pause observing changes without disabling the plugin', function (done) {
      var data = Handsontable.helper.createSpreadsheetData(2, 2);
      var hot = createHOT(data, true);
      var htCore = getHtCore();
      data[0][0] = 'new string';
      setTimeout(function () {
        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');
        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');
        hot.pauseObservingChanges();
        data[1][0] = 'another new string';
      }, 200);
      setTimeout(function () {
        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');
        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');
        hot.render();
        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');
        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');
        done();
      }, 300);
    });
    it('should be possible to resume observing changes after it was paused', function (done) {
      var data = Handsontable.helper.createSpreadsheetData(2, 2);
      var hot = createHOT(data, true);
      var htCore = getHtCore();
      hot.pauseObservingChanges();
      data[0][0] = 'new string';
      setTimeout(function () {
        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('A1');
        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');
        hot.resumeObservingChanges();
        data[1][0] = 'another new string';
      }, 100);
      setTimeout(function () {
        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');
        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');
        done();
      }, 1200);
    });
  });
  describe('observeChanges fires appropriate events when changes are detected', function () {
    describe('array data', function () {
      it('should fire afterChangesObserved event after changes has been noticed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');
        hot.addHook('afterChangesObserved', afterChangesObservedCallback);
        data[0][0] = 'new string';
        setTimeout(function () {
          expect(afterChangesObservedCallback.calls.count()).toEqual(1);
          done();
        }, 200);
      });
      it('should fire afterCreateRow event after detecting that new row has been added', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');
        hot.addHook('afterCreateRow', afterCreateRowCallback);
        data.push(['A2', 'B2']);
        setTimeout(function () {
          expect(afterCreateRowCallback.calls.count()).toEqual(1);
          expect(afterCreateRowCallback).toHaveBeenCalledWith(2, 1, 'ObserveChanges.change', undefined, undefined, undefined);
          done();
        }, 200);
      });
      it('should fire afterRemoveRow event after detecting that row has been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');
        hot.addHook('afterRemoveRow', afterRemoveRowCallback);
        data.pop();
        setTimeout(function () {
          expect(afterRemoveRowCallback.calls.count()).toEqual(1);
          expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 1, 'ObserveChanges.change', undefined, undefined, undefined);
          done();
        }, 200);
      });
      it('should fire afterRemoveRow event after detecting that multiple rows have been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');
        hot.addHook('afterRemoveRow', afterRemoveRowCallback);
        data.splice(0, 2);
        setTimeout(function () {
          expect(afterRemoveRowCallback.calls.count()).toEqual(2); // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim

          var args = [];
          args.push(afterRemoveRowCallback.calls.argsFor(0));
          args.push(afterRemoveRowCallback.calls.argsFor(1));
          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);
          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);
          done();
        }, 200);
      });
      it('should fire afterCreateCol event after detecting that new col has been added', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');
        hot.addHook('afterCreateCol', afterCreateColCallback);
        data[0].push('C1');
        data[1].push('C2');
        setTimeout(function () {
          expect(afterCreateColCallback.calls.count()).toEqual(1);
          expect(afterCreateColCallback.calls.argsFor(0)).toEqual([2, 1, 'ObserveChanges.change', undefined, undefined, undefined]);
          done();
        }, 200);
      });
      it('should fire afterRemoveCol event after detecting that col has been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');
        hot.addHook('afterRemoveCol', afterRemoveColCallback);
        data[0].pop();
        data[1].pop();
        setTimeout(function () {
          expect(afterRemoveColCallback.calls.count()).toEqual(1);
          expect(afterRemoveColCallback.calls.argsFor(0)).toEqual([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);
          done();
        }, 200);
      });
      it('should fire afterRemoveCol event after detecting that multiple cols have been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');
        hot.addHook('afterRemoveCol', afterRemoveColCallback);
        data[0].pop();
        data[0].pop();
        data[1].pop();
        data[1].pop();
        setTimeout(function () {
          expect(afterRemoveColCallback.calls.count()).toEqual(2); // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim

          var args = [];
          args.push(afterRemoveColCallback.calls.argsFor(0));
          args.push(afterRemoveColCallback.calls.argsFor(1));
          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);
          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);
          done();
        }, 200);
      });
      it('should fire afterChange event after detecting that table data has changed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
        hot.addHook('afterChange', afterChangeCallback);
        data[0][0] = 'new string';
        setTimeout(function () {
          expect(afterChangeCallback.calls.count()).toEqual(1);
          expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, null, 'new string']], 'ObserveChanges.change', undefined, undefined, undefined, undefined);
          done();
        }, 200);
      });
    });
    describe('object data', function () {
      it('should fire afterChangesObserved event after changes has been noticed', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        var hot = createHOT(data, true);
        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');
        hot.addHook('afterChangesObserved', afterChangesObservedCallback);
        data[0].prop0 = 'new string';
        setTimeout(function () {
          expect(afterChangesObservedCallback.calls.count()).toEqual(1);
          done();
        }, 200);
      });
      it('should fire afterCreateRow event after detecting that new row has been added', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        var hot = createHOT(data, true);
        var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');
        hot.addHook('afterCreateRow', afterCreateRowCallback);
        data.push({
          prop0: 'A2',
          prop1: 'B2'
        });
        setTimeout(function () {
          expect(afterCreateRowCallback.calls.count()).toEqual(1);
          expect(afterCreateRowCallback).toHaveBeenCalledWith(2, 1, 'ObserveChanges.change', undefined, undefined, undefined);
          done();
        }, 200);
      });
      it('should fire afterRemoveRow event after detecting that row has been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        var hot = createHOT(data, true);
        var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');
        hot.addHook('afterRemoveRow', afterRemoveRowCallback);
        data.pop();
        setTimeout(function () {
          expect(afterRemoveRowCallback.calls.count()).toEqual(1);
          expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 1, 'ObserveChanges.change', undefined, undefined, undefined);
          done();
        }, 200);
      });
      it('should fire afterRemoveRow event after detecting that multiple rows have been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        var hot = createHOT(data, true);
        var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');
        hot.addHook('afterRemoveRow', afterRemoveRowCallback);
        data.splice(0, 2);
        setTimeout(function () {
          expect(afterRemoveRowCallback.calls.count()).toEqual(2); // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim

          var args = [];
          args.push(afterRemoveRowCallback.calls.argsFor(0));
          args.push(afterRemoveRowCallback.calls.argsFor(1));
          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);
          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);
          done();
        }, 200);
      });
      it('should fire afterChange event after detecting that table data has changed', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        var hot = createHOT(data, true);
        var afterChangeCallback = jasmine.createSpy('afterChangeCallback');
        hot.addHook('afterChange', afterChangeCallback);
        data[0].prop0 = 'new string';
        setTimeout(function () {
          expect(afterChangeCallback.calls.count()).toEqual(1);
          expect(afterChangeCallback).toHaveBeenCalledWith([[0, 'prop0', null, 'new string']], 'ObserveChanges.change', undefined, undefined, undefined, undefined);
          done();
        }, 200);
      });
    });
  });
  describe('using HOT data manipulation methods, when observeChanges plugin is enabled', function () {
    describe('array data', function () {
      it('should run render ONCE after detecting that new row has been added', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
        hot.addHook('afterRender', afterRenderSpy);
        alter('insert_row');
        setTimeout(function () {
          expect(countRows()).toEqual(3);
          expect(afterRenderSpy.calls.count()).toEqual(1);
          done();
        }, 200);
      });
      it('should run render ONCE after detecting that row has been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
        hot.addHook('afterRender', afterRenderSpy);
        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');
        hot.addHook('afterChangesObserved', afterChangesObservedCallback);
        alter('remove_row');
        setTimeout(function () {
          expect(countRows()).toEqual(1);
          expect(afterChangesObservedCallback.calls.count()).toEqual(1);
          expect(afterRenderSpy.calls.count()).toEqual(1);
          done();
        }, 200);
      });
      it('should run render ONCE after detecting that new column has been added', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
        hot.addHook('afterRender', afterRenderSpy);
        alter('insert_col');
        setTimeout(function () {
          expect(countCols()).toEqual(3);
          expect(afterRenderSpy.calls.count()).toEqual(1);
          done();
        }, 200);
      });
      it('should run render ONCE after detecting that column has been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
        hot.addHook('afterRender', afterRenderSpy);
        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');
        hot.addHook('afterChangesObserved', afterChangesObservedCallback);
        alter('remove_col');
        setTimeout(function () {
          expect(countCols()).toEqual(1);
          expect(afterChangesObservedCallback.calls.count()).toEqual(1);
          expect(afterRenderSpy.calls.count()).toEqual(1);
          done();
        }, 200);
      });
      it('should run render ONCE after detecting that table data has changed', function (done) {
        var data = Handsontable.helper.createSpreadsheetData(2, 2);
        var hot = createHOT(data, true);
        var htCore = getHtCore();
        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
        hot.addHook('afterRender', afterRenderSpy);
        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');
        hot.addHook('afterChangesObserved', afterChangesObservedCallback);
        setDataAtCell(0, 0, 'new value');
        setTimeout(function () {
          expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('new value');
          expect(afterChangesObservedCallback.calls.count()).toEqual(1);
          expect(afterRenderSpy.calls.count()).toEqual(1);
          done();
        }, 200);
      });
    });
    describe('object data', function () {
      it('should run render ONCE after detecting that new row has been added', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        var hot = createHOT(data, true);
        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
        hot.addHook('afterRender', afterRenderSpy);
        alter('insert_row');
        setTimeout(function () {
          expect(countRows()).toEqual(3);
          expect(afterRenderSpy.calls.count()).toEqual(1);
          done();
        }, 200);
      });
      it('should run render ONCE after detecting that row has been removed', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        var hot = createHOT(data, true);
        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
        hot.addHook('afterRender', afterRenderSpy);
        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');
        hot.addHook('afterChangesObserved', afterChangesObservedCallback);
        alter('remove_row');
        setTimeout(function () {
          expect(countRows()).toEqual(1);
          expect(afterChangesObservedCallback.calls.count()).toEqual(1);
          expect(afterRenderSpy.calls.count()).toEqual(1);
          done();
        }, 200);
      });
      it('should run render ONCE after detecting that table data has changed', function (done) {
        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);
        var hot = createHOT(data, true);
        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
        hot.addHook('afterRender', afterRenderSpy);
        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');
        hot.addHook('afterChangesObserved', afterChangesObservedCallback);
        setDataAtRowProp(0, 'prop0', 'new value');
        setTimeout(function () {
          expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('new value');
          expect(afterChangesObservedCallback.calls.count()).toEqual(1);
          expect(afterRenderSpy.calls.count()).toEqual(1);
          done();
        }, 200);
      });
    });
  });
  describe('refreshing table after changes have been detected', function () {
    it('should observe changes to new data bound using loadData', function (done) {
      var data = Handsontable.helper.createSpreadsheetData(2, 2);
      var newData = Handsontable.helper.createSpreadsheetData(2, 2);
      var hot = createHOT(data, true);
      var htCore = getHtCore();
      hot.loadData(newData);
      var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
      hot.addHook('afterRender', afterRenderSpy);
      newData.push(['A3', 'B3']);
      setTimeout(function () {
        expect(afterRenderSpy.calls.count()).toBe(1);
        expect(htCore.find('tr').length).toEqual(3);
        expect(htCore.find('col').length).toEqual(2);
        done();
      }, 200);
    });
    it('should not observe changes to old data after it was replaced using loadData', function (done) {
      var data = Handsontable.helper.createSpreadsheetData(2, 2);
      var newData = Handsontable.helper.createSpreadsheetData(2, 2);
      var hot = createHOT(data, true);
      var htCore = getHtCore();
      hot.loadData(newData);
      var afterRenderSpy = jasmine.createSpy('afterRenderSpy');
      hot.addHook('afterRender', afterRenderSpy);
      data.push(['A3', 'B3']);
      setTimeout(function () {
        expect(afterRenderSpy.calls.count()).toBe(0);
        expect(htCore.find('tr').length).toEqual(2);
        expect(htCore.find('col').length).toEqual(2);
        done();
      }, 1000);
    });
  });
});

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('persistentState', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }

    window.localStorage.clear();
  });
  it('should save data, when persistentStateSave is run', function () {
    var hot = handsontable({
      persistentState: true
    });
    hot.runHooks('persistentStateSave', 'testData', 100);
    var rawStoredData = window.localStorage["".concat(id, "_testData")];
    expect(rawStoredData).toBeDefined();
    var storedData = JSON.parse(rawStoredData);
    expect(storedData).toEqual(100);
  });
  it('should NOT save data, when persistentStateSave is run, if plugin is not enabled', function () {
    var hot = handsontable({
      persistentState: false
    });
    hot.runHooks('persistentStateSave', 'testData', 100);
    var rawStoredData = window.localStorage["".concat(id, "_testData")];
    expect(rawStoredData).toBeUndefined();
  });
  it('should load data, when persistentStateLoad is run', function () {
    var hot = handsontable({
      persistentState: true
    });
    hot.runHooks('persistentStateSave', 'testData', 100);
    var storedData = {};
    hot.runHooks('persistentStateLoad', 'testData', storedData);
    expect(storedData.value).toEqual(100);
  });
  it('should NOT load data, when persistentStateLoad is run, if plugin is not enabled', function () {
    var hot = handsontable({
      persistentState: false
    }); // We have to manually save data, as persistentStateSave won't work when the plugin is disabled

    window.localStorage["".concat(id, "_testData")] = JSON.stringify(100);
    var storedData = {};
    hot.runHooks('persistentStateLoad', 'testData', storedData);
    expect(storedData.value).toBeUndefined();
  });
  it('should clear the data under the given key, when persistentStateReset is run', function () {
    var hot = handsontable({
      persistentState: true
    });
    hot.runHooks('persistentStateSave', 'testData', 100);
    var storedData = {};
    hot.runHooks('persistentStateLoad', 'testData', storedData);
    expect(storedData.value).toEqual(100);
    hot.runHooks('persistentStateReset', 'testData');
    storedData = {};
    hot.runHooks('persistentStateLoad', 'testData', storedData);
    expect(storedData.value).toBeUndefined();
  });
  it('should NOT clear the data under the given key, when persistentStateReset is run', function () {
    var hot = handsontable({
      persistentState: false
    }); // We have to manually save data, as persistentStateSave won't work when the plugin is disabled

    window.localStorage["".concat(id, "_testData")] = JSON.stringify(100);
    hot.runHooks('persistentStateReset', 'testData');
    expect(JSON.parse(window.localStorage["".concat(id, "_testData")])).toEqual(100);
  });
  it('should clear all data, when persistentStateReset is run without specifying a key to reset', function () {
    var hot = handsontable({
      persistentState: true
    });
    hot.runHooks('persistentStateSave', 'testData0', 100);
    hot.runHooks('persistentStateSave', 'testData1', 'foo');
    hot.runHooks('persistentStateSave', 'testData2', 200);
    var storedData = [{}, {}, {}];
    hot.runHooks('persistentStateLoad', 'testData0', storedData[0]);
    hot.runHooks('persistentStateLoad', 'testData1', storedData[1]);
    hot.runHooks('persistentStateLoad', 'testData2', storedData[2]);
    expect(storedData[0].value).toEqual(100);
    expect(storedData[1].value).toEqual('foo');
    expect(storedData[2].value).toEqual(200);
    hot.runHooks('persistentStateReset');
    storedData = [{}, {}, {}];
    hot.runHooks('persistentStateLoad', 'testData0', storedData[0]);
    hot.runHooks('persistentStateLoad', 'testData1', storedData[1]);
    hot.runHooks('persistentStateLoad', 'testData2', storedData[2]);
    expect(storedData[0].value).toBeUndefined();
    expect(storedData[1].value).toBeUndefined();
    expect(storedData[2].value).toBeUndefined();
  });
  it('should allow to DISABLE plugin with updateSettings', function () {
    var hot = handsontable({
      persistentState: true
    });
    hot.runHooks('persistentStateSave', 'testData', 100);
    var storedData = {};
    hot.runHooks('persistentStateLoad', 'testData', storedData);
    expect(storedData.value).toEqual(100);
    updateSettings({
      persistentState: false
    });
    storedData = {};
    hot.runHooks('persistentStateLoad', 'testData', storedData);
    expect(storedData.value).toBeUndefined();
  });
  it('should allow to ENABLE plugin with updateSettings', function () {
    var hot = handsontable({
      persistentState: false
    });
    hot.runHooks('persistentStateSave', 'testData', 100);
    var storedData = {};
    hot.runHooks('persistentStateLoad', 'testData', storedData);
    expect(storedData.value).toBeUndefined();
    updateSettings({
      persistentState: true
    });
    hot.runHooks('persistentStateSave', 'testData', 100);
    storedData = {};
    hot.runHooks('persistentStateLoad', 'testData', storedData);
    expect(storedData.value).toEqual(100);
  });
});

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


describe('Search plugin', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('enabling/disabling plugin', function () {
    it('should be disabled by default', function () {
      var hot = handsontable();
      expect(hot.getPlugin('search').isEnabled()).toBe(false);
    });
    it('should disable plugin using updateSettings', function () {
      var hot = handsontable({
        search: true
      });
      hot.updateSettings({
        search: false
      });
      expect(hot.getPlugin('search').isEnabled()).toBe(false);
    });
    it('should enable plugin using updateSettings', function () {
      var hot = handsontable({
        search: false
      });
      hot.updateSettings({
        search: true
      });
      expect(hot.getPlugin('search')).toBeDefined();
    });
    it('should remove default search result class to cells when disable plugin', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        search: true
      });
      hot.getPlugin('search').query('2');
      render();
      var searchResultClass = hot.getPlugin('search').searchResultClass;
      var cell = hot.getCell(0, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(0, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(0, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(1, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(true);
      cell = hot.getCell(1, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(true);
      cell = hot.getCell(1, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(true);
      cell = hot.getCell(2, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(2, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(2, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      hot.updateSettings({
        search: false
      });
      cell = hot.getCell(0, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(0, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(0, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(1, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(1, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(1, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(2, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(2, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(2, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
    });
    it('should remove beforeRenderer hook when disable plugin', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        search: true
      });
      var onBeforeRenderer = spyOn(hot.getPlugin('search'), 'onBeforeRenderer');
      hot.getPlugin('search').query('2');
      hot.render();
      expect(onBeforeRenderer.calls.count()).toEqual(9);
      hot.updateSettings({
        search: false
      });
      expect(onBeforeRenderer.calls.count()).toEqual(18);
      hot.render();
      expect(onBeforeRenderer.calls.count()).toEqual(18);
    });
  });
  describe('query method', function () {
    it('should use the default query method if no queryMethod is passed to query function', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      spyOn(hot.getPlugin('search'), 'queryMethod');
      var queryMethod = hot.getPlugin('search').getQueryMethod();
      hot.getPlugin('search').query('A');
      expect(queryMethod.calls.count()).toEqual(25);
    });
    it('should use the custom default query method if no queryMethod is passed to query function', function () {
      var customQueryMethod = jasmine.createSpy('customQueryMethod');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      hot.getPlugin('search').setQueryMethod(customQueryMethod);
      hot.getPlugin('search').query('A');
      expect(customQueryMethod.calls.count()).toEqual(25);
    });
    it('should use the query method from the constructor if no queryMethod is passed to query function', function () {
      var customQueryMethod = jasmine.createSpy('customQueryMethod');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: {
          queryMethod: customQueryMethod
        }
      });
      hot.getPlugin('search').query('A');
      expect(customQueryMethod.calls.count()).toEqual(25);
    });
    it('should use method passed to query function', function () {
      var customQueryMethod = jasmine.createSpy('customQueryMethod');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      hot.getPlugin('search').query('A', null, customQueryMethod);
      expect(customQueryMethod.calls.count()).toEqual(25);
    });
  });
  describe('default query method', function () {
    it('should use query method to find phrase', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      var searchResult = hot.getPlugin('search').query('A');
      expect(searchResult.length).toEqual(5);

      for (var i = 0; i < searchResult.length; i += 1) {
        expect(searchResult[i].row).toEqual(i);
        expect(searchResult[i].col).toEqual(0);
        expect(searchResult[i].data).toEqual(hot.getDataAtCell(i, 0));
      }
    });
    it('default query method should be case insensitive', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      var searchResult = hot.getPlugin('search').query('a');
      expect(searchResult.length).toEqual(5);
      searchResult = hot.getPlugin('search').query('A');
      expect(searchResult.length).toEqual(5);
    });
    it('default query method should work with numeric values', function () {
      var hot = handsontable({
        data: [[1, 2], [22, 4]],
        search: true
      });
      var searchResult = hot.getPlugin('search').query('2');
      expect(searchResult.length).toEqual(2);
    });
    it('default query method should interpret query as string, not regex', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      var searchResult = hot.getPlugin('search').query('A*');
      expect(searchResult.length).toEqual(0);
    });
    it('default query method should always return false if query string is empty', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      var searchResult = hot.getPlugin('search').query('A');
      expect(searchResult.length).toEqual(5);
      searchResult = hot.getPlugin('search').query('');
      expect(searchResult.length).toEqual(0);
    });
    it('default query method should always return false if no query string has been specified', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      var searchResult = hot.getPlugin('search').query('A');
      expect(searchResult.length).toEqual(5);
      searchResult = hot.getPlugin('search').query();
      expect(searchResult.length).toEqual(0);
    });
    it('default query method should always return false if no query string is not a string', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      var searchResult = hot.getPlugin('search').query('A');
      expect(searchResult.length).toEqual(5);
      searchResult = hot.getPlugin('search').query([1, 2, 3]);
      expect(searchResult.length).toEqual(0);
    });
  });
  describe('search callback', function () {
    it('should invoke default callback for each cell', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      spyOn(hot.getPlugin('search'), 'callback');
      var callback = hot.getPlugin('search').callback;
      hot.getPlugin('search').query('A');
      expect(callback.calls.count()).toEqual(25);
    });
    it('should change the default callback', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: true
      });
      var search = hot.getPlugin('search');
      spyOn(search, 'callback');
      var callback = search.callback;
      var newCallback = jasmine.createSpy('newCallback');
      search.setCallback(newCallback);
      search.query('A');
      expect(callback).not.toHaveBeenCalled();
      expect(newCallback.calls.count()).toEqual(25);
    });
    it('should invoke callback passed in constructor', function () {
      var searchCallback = jasmine.createSpy('searchCallback');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        search: {
          callback: searchCallback
        }
      });
      hot.getPlugin('search').query('A');
      expect(searchCallback.calls.count()).toEqual(25);
    });
    it('should invoke custom callback for each cell which has been tested', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2),
        search: true
      });
      var searchCallback = jasmine.createSpy('searchCallback');
      hot.getPlugin('search').query('A', searchCallback);
      expect(searchCallback.calls.count()).toEqual(4);
      expect(searchCallback.calls.argsFor(0).splice(1)).toEqual([0, 0, 'A1', true]);
      expect(searchCallback.calls.argsFor(1).splice(1)).toEqual([0, 1, 'B1', false]);
      expect(searchCallback.calls.argsFor(2).splice(1)).toEqual([1, 0, 'A2', true]);
      expect(searchCallback.calls.argsFor(3).splice(1)).toEqual([1, 1, 'B2', false]);
    });
  });
  describe('default search callback', function () {
    it('should add isSearchResult = true, to cell properties of all matched cells', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        search: true
      });
      hot.getPlugin('search').query('2');
      render();
      var cellProperties = hot.getCellMeta(0, 0);
      expect(cellProperties.isSearchResult).toBeFalsy();
      cellProperties = hot.getCellMeta(0, 1);
      expect(cellProperties.isSearchResult).toBeFalsy();
      cellProperties = hot.getCellMeta(0, 2);
      expect(cellProperties.isSearchResult).toBeFalsy();
      cellProperties = hot.getCellMeta(1, 0);
      expect(cellProperties.isSearchResult).toBeTruthy();
      cellProperties = hot.getCellMeta(1, 1);
      expect(cellProperties.isSearchResult).toBeTruthy();
      cellProperties = hot.getCellMeta(1, 2);
      expect(cellProperties.isSearchResult).toBeTruthy();
      cellProperties = hot.getCellMeta(2, 0);
      expect(cellProperties.isSearchResult).toBeFalsy();
      cellProperties = hot.getCellMeta(2, 1);
      expect(cellProperties.isSearchResult).toBeFalsy();
      cellProperties = hot.getCellMeta(2, 2);
      expect(cellProperties.isSearchResult).toBeFalsy();
    });
  });
  describe('search result decorator', function () {
    it('should add default search result class to cells which mach the query', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        search: true
      });
      hot.getPlugin('search').query('2');
      render();
      var searchResultClass = hot.getPlugin('search').searchResultClass;
      var cell = hot.getCell(0, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(0, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(0, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(1, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(true);
      cell = hot.getCell(1, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(true);
      cell = hot.getCell(1, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(true);
      cell = hot.getCell(2, 0);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(2, 1);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
      cell = hot.getCell(2, 2);
      expect($(cell).hasClass(searchResultClass)).toBe(false);
    });
    it('should add custom search result class to cells which mach the query', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        search: {
          searchResultClass: 'customSearchResultClass'
        }
      });
      hot.getPlugin('search').query('2');
      render();
      var cell = hot.getCell(0, 0);
      expect($(cell).hasClass('customSearchResultClass')).toBe(false);
      cell = hot.getCell(0, 1);
      expect($(cell).hasClass('customSearchResultClass')).toBe(false);
      cell = hot.getCell(0, 2);
      expect($(cell).hasClass('customSearchResultClass')).toBe(false);
      cell = hot.getCell(1, 0);
      expect($(cell).hasClass('customSearchResultClass')).toBe(true);
      cell = hot.getCell(1, 1);
      expect($(cell).hasClass('customSearchResultClass')).toBe(true);
      cell = hot.getCell(1, 2);
      expect($(cell).hasClass('customSearchResultClass')).toBe(true);
      cell = hot.getCell(2, 0);
      expect($(cell).hasClass('customSearchResultClass')).toBe(false);
      cell = hot.getCell(2, 1);
      expect($(cell).hasClass('customSearchResultClass')).toBe(false);
      cell = hot.getCell(2, 2);
      expect($(cell).hasClass('customSearchResultClass')).toBe(false);
    });
  });
  describe('HOT properties compatibility', function () {
    it('should work properly when the last row is empty', function () {
      // connected with https://github.com/handsontable/handsontable/issues/1606
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(5, 5),
        colHeaders: true,
        search: true,
        minSpareRows: 1
      });
      var errorThrown = false;

      try {
        hot.getPlugin('search').query('A');
      } catch (err) {
        errorThrown = true;
      }

      expect(errorThrown).toBe(false);
    });
  });
  describe('cellProperties.className', function () {
    it('should add default search result class to cells when we have classes in array', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        search: true,
        columns: function columns() {
          return {
            className: ['columns', 'cell']
          };
        }
      });
      hot.getPlugin('search').query('2');
      render();
      var cellClassName = hot.getCell(0, 0).className;
      expect(cellClassName).toBe('columns cell');
      cellClassName = hot.getCell(0, 1).className;
      expect(cellClassName).toBe('columns cell');
      cellClassName = hot.getCell(0, 2).className;
      expect(cellClassName).toBe('columns cell');
      cellClassName = hot.getCell(1, 0).className;
      expect(cellClassName).toBe('columns cell htSearchResult');
      cellClassName = hot.getCell(1, 1).className;
      expect(cellClassName).toBe('columns cell htSearchResult');
      cellClassName = hot.getCell(1, 2).className;
      expect(cellClassName).toBe('columns cell htSearchResult');
      cellClassName = hot.getCell(2, 0).className;
      expect(cellClassName).toBe('columns cell');
      cellClassName = hot.getCell(2, 1).className;
      expect(cellClassName).toBe('columns cell');
      cellClassName = hot.getCell(2, 2).className;
      expect(cellClassName).toBe('columns cell');
    });
    it('should add default search result class to cells when we have class in string', function () {
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(3, 3),
        search: true,
        className: 'cell'
      });
      hot.getPlugin('search').query('2');
      render();
      var cellClassName = hot.getCell(0, 0).className;
      expect(cellClassName).toBe('cell');
      cellClassName = hot.getCell(0, 1).className;
      expect(cellClassName).toBe('cell');
      cellClassName = hot.getCell(0, 2).className;
      expect(cellClassName).toBe('cell');
      cellClassName = hot.getCell(1, 0).className;
      expect(cellClassName).toBe('cell htSearchResult');
      cellClassName = hot.getCell(1, 1).className;
      expect(cellClassName).toBe('cell htSearchResult');
      cellClassName = hot.getCell(1, 2).className;
      expect(cellClassName).toBe('cell htSearchResult');
      cellClassName = hot.getCell(2, 0).className;
      expect(cellClassName).toBe('cell');
      cellClassName = hot.getCell(2, 1).className;
      expect(cellClassName).toBe('cell');
      cellClassName = hot.getCell(2, 2).className;
      expect(cellClassName).toBe('cell');
    });
  });
});

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

describe('UndoRedo', function () {
  var id = 'testContainer';
  beforeEach(function () {
    this.$container = $("<div id=\"".concat(id, "\"></div>")).appendTo('body');
  });
  afterEach(function () {
    if (this.$container) {
      destroy();
      this.$container.remove();
    }
  });
  describe('core features', function () {
    describe('Array data', function () {
      describe('undo', function () {
        it('should undo single change', function () {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          var HOT = getInstance();
          setDataAtCell(0, 0, 'X1');
          expect(getDataAtCell(0, 0)).toBe('X1');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('A1');
        });
        it('should undo single change on cell with validator', function (done) {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          var HOT = getInstance();
          setDataAtCell(0, 0, 'X1');
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            HOT.undo();
          }, 200);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('A1');
            done();
          }, 400);
        });
        it('should undo creation of a single row', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row');
          expect(countRows()).toEqual(3);
          HOT.undo();
          expect(countRows()).toEqual(2);
        });
        it('should undo creation of multiple rows', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row', 0, 5);
          expect(countRows()).toEqual(7);
          HOT.undo();
          expect(countRows()).toEqual(2);
        });
        it('should undo creation of multiple rows with minSpareRows', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 1),
            minSpareRows: 2
          });
          expect(getData()).toEqual([['A1'], ['A2'], [null], [null]]);
          setDataAtCell(2, 0, 'A3');
          setDataAtCell(4, 0, 'A4');
          expect(getData()).toEqual([['A1'], ['A2'], ['A3'], [null], ['A4'], [null], [null]]);
          HOT.undo();
          HOT.undo();
          expect(getData()).toEqual([['A1'], ['A2'], [null], [null]]);
        });
        it('should undo removal of single row', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(3, 2)
          });
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          alter('remove_row', 1);
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A3');
          expect(getDataAtCell(1, 1)).toEqual('B3');
          HOT.undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
        });
        it('should undo removal of multiple rows', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(4, 2)
          });
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
          alter('remove_row', 1, 2);
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A4');
          expect(getDataAtCell(1, 1)).toEqual('B4');
          HOT.undo();
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
        });
        it('should undo removal of single row after column sorting', function () {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(3, 2),
            colHeaders: true,
            columnSorting: true
          });
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          getPlugin('ColumnSorting').sort({
            column: 0,
            sortOrder: 'desc'
          });
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A3');
          expect(getDataAtCell(0, 1)).toEqual('B3');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A1');
          expect(getDataAtCell(2, 1)).toEqual('B1');
          alter('remove_row', 0);
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A2');
          expect(getDataAtCell(0, 1)).toEqual('B2');
          expect(getDataAtCell(1, 0)).toEqual('A1');
          expect(getDataAtCell(1, 1)).toEqual('B1');
          undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A3');
          expect(getDataAtCell(0, 1)).toEqual('B3');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A1');
          expect(getDataAtCell(2, 1)).toEqual('B1');
        });
        it('should undo creation of a single column (colHeaders: undefined)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 3)
          });
          expect(countCols()).toEqual(3);
          alter('insert_col');
          expect(countCols()).toEqual(4);
          HOT.undo();
          expect(countCols()).toEqual(3);
        });
        it('should undo creation of a single column (colHeaders: true)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 3),
            colHeaders: true
          });
          expect(countCols()).toEqual(3);
          expect(getColHeader()).toEqual(['A', 'B', 'C']);
          alter('insert_col');
          expect(countCols()).toEqual(4);
          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);
          HOT.undo();
          expect(countCols()).toEqual(3);
          expect(getColHeader()).toEqual(['A', 'B', 'C']);
        });
        it('should undo creation of a single column (colHeaders: Array)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 3),
            colHeaders: ['Header1', 'Header2', 'Header3']
          });
          expect(countCols()).toEqual(3);
          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3']);
          alter('insert_col', 1);
          expect(countCols()).toEqual(4);
          expect(getColHeader()).toEqual(['Header1', 'B', 'Header2', 'Header3']);
          HOT.undo();
          expect(countCols()).toEqual(3);
          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3']);
        });
        it('should undo creation of multiple columns (colHeaders: undefined)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countCols()).toEqual(2);
          alter('insert_col', 1, 5);
          expect(countCols()).toEqual(7);
          HOT.undo();
          expect(countCols()).toEqual(2);
        });
        it('should undo creation of multiple columns (colHeaders: true)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2),
            colHeaders: true
          });
          expect(countCols()).toEqual(2);
          expect(getColHeader()).toEqual(['A', 'B']);
          alter('insert_col', 1, 5);
          expect(countCols()).toEqual(7);
          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D', 'E', 'F', 'G']);
          HOT.undo();
          expect(countCols()).toEqual(2);
          expect(getColHeader()).toEqual(['A', 'B']);
        });
        it('should undo creation of multiple columns (colHeaders: Array)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2),
            colHeaders: ['Header1', 'Header2']
          });
          expect(countCols()).toEqual(2);
          expect(getColHeader()).toEqual(['Header1', 'Header2']);
          alter('insert_col', 1, 5);
          expect(countCols()).toEqual(7);
          expect(getColHeader()).toEqual(['Header1', 'B', 'C', 'D', 'E', 'F', 'Header2']);
          HOT.undo();
          expect(countCols()).toEqual(2);
          expect(getColHeader()).toEqual(['Header1', 'Header2']);
        });
        it('should undo creation of multiple columns with minSpareCols', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(1, 1),
            minSpareCols: 2
          });
          expect(getData()).toEqual([['A1', null, null]]);
          setDataAtCell(0, 1, 'B1');
          setDataAtCell(0, 3, 'C1');
          expect(getData()).toEqual([['A1', 'B1', null, 'C1', null, null]]);
          HOT.undo();
          HOT.undo();
          expect(getData()).toEqual([['A1', null, null]]);
        });
        it('should undo removal of single column (colHeaders: undefined)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 3)
          });
          expect(countCols()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          alter('remove_col', 1);
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('C1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('C2');
          HOT.undo();
          expect(countCols()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
        });
        it('should undo removal of single column (colHeaders: true)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2),
            colHeaders: true
          });
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getColHeader()).toEqual(['A', 'B']);
          alter('remove_col');
          expect(countCols()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toBeNull();
          expect(getColHeader()).toEqual(['A']);
          HOT.undo();
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getColHeader()).toEqual(['A', 'B']);
        });
        it('should undo removal of single column (colHeaders: Array)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2),
            colHeaders: ['Header1', 'Header2']
          });
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getColHeader()).toEqual(['Header1', 'Header2']);
          alter('remove_col');
          expect(countCols()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toBeNull();
          expect(getColHeader()).toEqual(['Header1']);
          HOT.undo();
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getColHeader()).toEqual(['Header1', 'Header2']);
        });
        it('should undo removal of multiple columns (colHeaders: undefined)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 4)
          });
          expect(countCols()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(0, 3)).toEqual('D1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          expect(getDataAtCell(1, 3)).toEqual('D2');
          alter('remove_col', 1, 2);
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('D1');
          expect(getDataAtCell(0, 2)).toBeNull();
          expect(getDataAtCell(0, 3)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('D2');
          expect(getDataAtCell(1, 2)).toBeNull();
          expect(getDataAtCell(1, 3)).toBeNull();
          HOT.undo();
          expect(countCols()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(0, 3)).toEqual('D1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          expect(getDataAtCell(1, 3)).toEqual('D2');
        });
        it('should undo removal of multiple columns (colHeaders: true)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 4),
            colHeaders: true
          });
          expect(countCols()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(0, 3)).toEqual('D1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          expect(getDataAtCell(1, 3)).toEqual('D2');
          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);
          alter('remove_col', 1, 3);
          expect(countCols()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toBeNull();
          expect(getDataAtCell(0, 2)).toBeNull();
          expect(getDataAtCell(0, 3)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toBeNull();
          expect(getDataAtCell(1, 2)).toBeNull();
          expect(getDataAtCell(1, 3)).toBeNull();
          expect(getColHeader()).toEqual(['A']);
          HOT.undo();
          expect(countCols()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(0, 3)).toEqual('D1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          expect(getDataAtCell(1, 3)).toEqual('D2');
          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);
        });
        it('should undo removal of multiple columns (colHeaders: Array)', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 4),
            colHeaders: ['Header1', 'Header2', 'Header3', 'Header4']
          });
          expect(countCols()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(0, 3)).toEqual('D1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          expect(getDataAtCell(1, 3)).toEqual('D2');
          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3', 'Header4']);
          alter('remove_col', 1, 2);
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('D1');
          expect(getDataAtCell(0, 2)).toBeNull();
          expect(getDataAtCell(0, 3)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('D2');
          expect(getDataAtCell(1, 2)).toBeNull();
          expect(getDataAtCell(1, 3)).toBeNull();
          expect(getColHeader()).toEqual(['Header1', 'Header4']);
          HOT.undo();
          expect(countCols()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(0, 3)).toEqual('D1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          expect(getDataAtCell(1, 3)).toEqual('D2');
          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3', 'Header4']);
        });
        it('should undo removal of multiple columns (with a used manualColumnMove)', function () {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 7),
            manualColumnMove: [3, 2, 0, 6, 1, 5, 4]
          });
          expect(countCols()).toEqual(7);
          expect(getDataAtRow(0)).toEqual(['D1', 'C1', 'A1', 'G1', 'B1', 'F1', 'E1']);
          alter('remove_col', 1, 3);
          expect(countCols()).toEqual(4);
          expect(getDataAtRow(0)).toEqual(['D1', 'B1', 'F1', 'E1']); // HOT.undo();
          //
          // expect(countCols()).toEqual(7);
          // expect(getDataAtRow(0)).toEqual(['D1', 'C1', 'A1', 'G1', 'B1', 'F1', 'E1']);
        });
        it('should undo multiple changes', function () {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          var HOT = getInstance();
          setDataAtCell(0, 0, 'X1');
          setDataAtCell(1, 0, 'X2');
          setDataAtCell(0, 1, 'Y1');
          setDataAtCell(1, 1, 'Y2');
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('X2');
          expect(getDataAtCell(0, 1)).toBe('Y1');
          expect(getDataAtCell(1, 1)).toBe('Y2');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('X2');
          expect(getDataAtCell(0, 1)).toBe('Y1');
          expect(getDataAtCell(1, 1)).toBe('B2');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('X2');
          expect(getDataAtCell(0, 1)).toBe('B1');
          expect(getDataAtCell(1, 1)).toBe('B2');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('A2');
          expect(getDataAtCell(0, 1)).toBe('B1');
          expect(getDataAtCell(1, 1)).toBe('B2');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('A1');
          expect(getDataAtCell(1, 0)).toBe('A2');
          expect(getDataAtCell(0, 1)).toBe('B1');
          expect(getDataAtCell(1, 1)).toBe('B2');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('A1');
          expect(getDataAtCell(1, 0)).toBe('A2');
          expect(getDataAtCell(0, 1)).toBe('B1');
          expect(getDataAtCell(1, 1)).toBe('B2');
        });
        it('should undo multiple changes in cells with validators', function (done) {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          var HOT = getInstance();
          setDataAtCell(0, 0, 'X1');
          setDataAtCell(1, 0, 'X2');
          setDataAtCell(0, 1, 'Y1');
          setDataAtCell(1, 1, 'Y2');
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('X2');
            expect(getDataAtCell(0, 1)).toBe('Y1');
            expect(getDataAtCell(1, 1)).toBe('Y2');
            HOT.undo();
          }, 200);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('X2');
            expect(getDataAtCell(0, 1)).toBe('Y1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            HOT.undo();
          }, 400);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('X2');
            expect(getDataAtCell(0, 1)).toBe('B1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            HOT.undo();
          }, 600);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('A2');
            expect(getDataAtCell(0, 1)).toBe('B1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            HOT.undo();
          }, 800);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('A1');
            expect(getDataAtCell(1, 0)).toBe('A2');
            expect(getDataAtCell(0, 1)).toBe('B1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            HOT.undo();
          }, 1000);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('A1');
            expect(getDataAtCell(1, 0)).toBe('A2');
            expect(getDataAtCell(0, 1)).toBe('B1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            done();
          }, 1200);
        });
        it('should undo multiple row creations', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row');
          alter('insert_row');
          alter('insert_row');
          alter('insert_row');
          expect(countRows()).toEqual(6);
          HOT.undo();
          expect(countRows()).toEqual(5);
          HOT.undo();
          expect(countRows()).toEqual(4);
          HOT.undo();
          expect(countRows()).toEqual(3);
          HOT.undo();
          expect(countRows()).toEqual(2);
          HOT.undo();
          expect(countRows()).toEqual(2);
        });
        it('should undo multiple row removals', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(4, 2)
          });
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
          alter('remove_row');
          alter('remove_row');
          alter('remove_row');
          expect(countRows()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          HOT.undo();
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          HOT.undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          HOT.undo();
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
          HOT.undo();
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
        });
        it('should undo changes only for table where the change actually took place', function () {
          spec().$container2 = $("<div id=\"".concat(id, "-2\"></div>")).appendTo('body');
          var hot1 = handsontable({
            data: [[1], [2], [3]]
          });
          spec().$container2.handsontable({
            data: [['A'], ['B'], ['C']]
          });
          var hot2 = spec().$container2.handsontable('getInstance');
          hot1.setDataAtCell(0, 0, 4);
          expect(hot1.getDataAtCell(0, 0)).toEqual(4);
          expect(hot2.getDataAtCell(0, 0)).toEqual('A');
          hot2.undo();
          expect(hot2.getDataAtCell(0, 0)).toEqual('A');
          expect(hot1.getDataAtCell(0, 0)).toEqual(4);
          hot1.undo();
          expect(hot2.getDataAtCell(0, 0)).toEqual('A');
          expect(hot1.getDataAtCell(0, 0)).toEqual(1);
          hot2.destroy();
          spec().$container2.remove();
        });
        it('should return the right amount after undo removal of single column', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 3)
          });
          var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');
          HOT.addHook('afterCreateCol', afterCreateColCallback);
          expect(countCols()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          alter('remove_col', 1);
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('C1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('C2');
          HOT.undo();
          expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'UndoRedo.undo', void 0, void 0, void 0);
          expect(countCols()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
        });
      });
      describe('redo', function () {
        it('should redo single change', function () {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          var HOT = getInstance();
          setDataAtCell(0, 0, 'new value');
          expect(getDataAtCell(0, 0)).toBe('new value');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('A1');
          HOT.redo();
          expect(getDataAtCell(0, 0)).toBe('new value');
        });
        it('should redo single change in cell with validator', function (done) {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          var HOT = getInstance();
          setDataAtCell(0, 0, 'new value');
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('new value');
            HOT.undo();
          }, 200);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('A1');
            HOT.redo();
          }, 400);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('new value');
            done();
          }, 600);
        });
        it('should redo creation of a single row', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row');
          expect(countRows()).toEqual(3);
          HOT.undo();
          expect(countRows()).toEqual(2);
          HOT.redo();
          expect(countRows()).toEqual(3);
        });
        it('should redo creation of multiple rows', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row', 0, 5);
          expect(countRows()).toEqual(7);
          HOT.undo();
          expect(countRows()).toEqual(2);
          HOT.redo();
          expect(countRows()).toEqual(7);
        });
        it('should redo removal of single row', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(3, 2)
          });
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          alter('remove_row', 1);
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A3');
          expect(getDataAtCell(1, 1)).toEqual('B3');
          HOT.undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          HOT.redo();
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A3');
          expect(getDataAtCell(1, 1)).toEqual('B3');
        });
        it('should redo removal of multiple rows', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(4, 2)
          });
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
          alter('remove_row', 1, 2);
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A4');
          expect(getDataAtCell(1, 1)).toEqual('B4');
          HOT.undo();
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
          HOT.redo();
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A4');
          expect(getDataAtCell(1, 1)).toEqual('B4');
        });
        it('should redo creation of a single column', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countCols()).toEqual(2);
          alter('insert_col');
          expect(countCols()).toEqual(3);
          HOT.undo();
          expect(countCols()).toEqual(2);
          HOT.redo();
          expect(countCols()).toEqual(3);
        });
        it('should redo creation of multiple columns', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countCols()).toEqual(2);
          alter('insert_col', 1, 5);
          expect(countCols()).toEqual(7);
          HOT.undo();
          expect(countCols()).toEqual(2);
          HOT.redo();
          expect(countCols()).toEqual(7);
        });
        it('should redo removal of single column', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          alter('remove_col');
          expect(countCols()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toBeNull();
          HOT.undo();
          expect(countCols()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          HOT.redo();
          expect(countCols()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toBeNull();
        });
        it('should redo removal of multiple columns', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 4)
          });
          expect(countCols()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(0, 3)).toEqual('D1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          expect(getDataAtCell(1, 3)).toEqual('D2');
          alter('remove_col', 1, 3);
          expect(countCols()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toBeNull();
          expect(getDataAtCell(0, 2)).toBeNull();
          expect(getDataAtCell(0, 3)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toBeNull();
          expect(getDataAtCell(1, 2)).toBeNull();
          expect(getDataAtCell(1, 3)).toBeNull();
          HOT.undo();
          expect(countCols()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(0, 2)).toEqual('C1');
          expect(getDataAtCell(0, 3)).toEqual('D1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(1, 2)).toEqual('C2');
          expect(getDataAtCell(1, 3)).toEqual('D2');
          HOT.redo();
          expect(countCols()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toBeNull();
          expect(getDataAtCell(0, 2)).toBeNull();
          expect(getDataAtCell(0, 3)).toBeNull();
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toBeNull();
          expect(getDataAtCell(1, 2)).toBeNull();
          expect(getDataAtCell(1, 3)).toBeNull();
        });
        it('should redo multiple changes', function () {
          handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          var HOT = getInstance();
          setDataAtCell(0, 0, 'X1');
          setDataAtCell(1, 0, 'X2');
          setDataAtCell(0, 1, 'Y1');
          setDataAtCell(1, 1, 'Y2');
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('X2');
          expect(getDataAtCell(0, 1)).toBe('Y1');
          expect(getDataAtCell(1, 1)).toBe('Y2');
          HOT.undo();
          HOT.undo();
          HOT.undo();
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('A1');
          expect(getDataAtCell(1, 0)).toBe('A2');
          expect(getDataAtCell(0, 1)).toBe('B1');
          expect(getDataAtCell(1, 1)).toBe('B2');
          HOT.redo();
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('A2');
          expect(getDataAtCell(0, 1)).toBe('B1');
          expect(getDataAtCell(1, 1)).toBe('B2');
          HOT.redo();
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('X2');
          expect(getDataAtCell(0, 1)).toBe('B1');
          expect(getDataAtCell(1, 1)).toBe('B2');
          HOT.redo();
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('X2');
          expect(getDataAtCell(0, 1)).toBe('Y1');
          expect(getDataAtCell(1, 1)).toBe('B2');
          HOT.redo();
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('X2');
          expect(getDataAtCell(0, 1)).toBe('Y1');
          expect(getDataAtCell(1, 1)).toBe('Y2');
          HOT.redo();
          expect(getDataAtCell(0, 0)).toBe('X1');
          expect(getDataAtCell(1, 0)).toBe('X2');
          expect(getDataAtCell(0, 1)).toBe('Y1');
          expect(getDataAtCell(1, 1)).toBe('Y2');
        });
        it('should redo multiple changes in cell with validator', function (done) {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          setDataAtCell(0, 0, 'X1');
          setDataAtCell(1, 0, 'X2');
          setDataAtCell(0, 1, 'Y1');
          setDataAtCell(1, 1, 'Y2');
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('X2');
            expect(getDataAtCell(0, 1)).toBe('Y1');
            expect(getDataAtCell(1, 1)).toBe('Y2');
            HOT.undo();
          }, 200);
          setTimeout(function () {
            HOT.undo();
          }, 400);
          setTimeout(function () {
            HOT.undo();
          }, 600);
          setTimeout(function () {
            HOT.undo();
          }, 800);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('A1');
            expect(getDataAtCell(1, 0)).toBe('A2');
            expect(getDataAtCell(0, 1)).toBe('B1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            HOT.redo();
          }, 1000);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('A2');
            expect(getDataAtCell(0, 1)).toBe('B1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            HOT.redo();
          }, 1200);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('X2');
            expect(getDataAtCell(0, 1)).toBe('B1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            HOT.redo();
          }, 1400);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('X2');
            expect(getDataAtCell(0, 1)).toBe('Y1');
            expect(getDataAtCell(1, 1)).toBe('B2');
            HOT.redo();
          }, 1600);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('X2');
            expect(getDataAtCell(0, 1)).toBe('Y1');
            expect(getDataAtCell(1, 1)).toBe('Y2');
            HOT.redo();
          }, 1800);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('X1');
            expect(getDataAtCell(1, 0)).toBe('X2');
            expect(getDataAtCell(0, 1)).toBe('Y1');
            expect(getDataAtCell(1, 1)).toBe('Y2');
            done();
          }, 2000);
        });
        it('should redo multiple row creations', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(2, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row');
          alter('insert_row');
          alter('insert_row');
          alter('insert_row');
          expect(countRows()).toEqual(6);
          HOT.undo();
          HOT.undo();
          HOT.undo();
          HOT.undo();
          expect(countRows()).toEqual(2);
          HOT.redo();
          expect(countRows()).toEqual(3);
          HOT.redo();
          expect(countRows()).toEqual(4);
          HOT.redo();
          expect(countRows()).toEqual(5);
          HOT.redo();
          expect(countRows()).toEqual(6);
          HOT.redo();
          expect(countRows()).toEqual(6);
        });
        it('should undo multiple row removals', function () {
          var HOT = handsontable({
            data: Handsontable.helper.createSpreadsheetData(4, 2)
          });
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
          alter('remove_row');
          alter('remove_row');
          alter('remove_row');
          expect(countRows()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          HOT.undo();
          HOT.undo();
          HOT.undo();
          expect(countRows()).toEqual(4);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          expect(getDataAtCell(3, 0)).toEqual('A4');
          expect(getDataAtCell(3, 1)).toEqual('B4');
          HOT.redo();
          expect(countRows()).toEqual(3);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          expect(getDataAtCell(2, 0)).toEqual('A3');
          expect(getDataAtCell(2, 1)).toEqual('B3');
          HOT.redo();
          expect(countRows()).toEqual(2);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          expect(getDataAtCell(1, 0)).toEqual('A2');
          expect(getDataAtCell(1, 1)).toEqual('B2');
          HOT.redo();
          expect(countRows()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
          HOT.redo();
          expect(countRows()).toEqual(1);
          expect(getDataAtCell(0, 0)).toEqual('A1');
          expect(getDataAtCell(0, 1)).toEqual('B1');
        });
        it('should redo changes only for table where the change actually took place', function () {
          spec().$container2 = $("<div id=\"".concat(id, "-2\"></div>")).appendTo('body');
          var hot1 = handsontable({
            data: [[1], [2], [3]]
          });
          spec().$container2.handsontable({
            data: [['A'], ['B'], ['C']]
          });
          var hot2 = spec().$container2.handsontable('getInstance');
          hot1.setDataAtCell(0, 0, 4);
          expect(hot1.getDataAtCell(0, 0)).toEqual(4);
          expect(hot2.getDataAtCell(0, 0)).toEqual('A');
          hot1.undo();
          expect(hot1.getDataAtCell(0, 0)).toEqual(1);
          expect(hot2.getDataAtCell(0, 0)).toEqual('A');
          hot2.redo();
          expect(hot1.getDataAtCell(0, 0)).toEqual(1);
          expect(hot2.getDataAtCell(0, 0)).toEqual('A');
          hot1.redo();
          expect(hot1.getDataAtCell(0, 0)).toEqual(4);
          expect(hot2.getDataAtCell(0, 0)).toEqual('A');
          hot2.destroy();
          spec().$container2.remove();
        });
      });
    });
    describe('Object data', function () {
      function createObjectData() {
        return [{
          name: 'Timothy',
          surname: 'Dalton'
        }, {
          name: 'Sean',
          surname: 'Connery'
        }, {
          name: 'Roger',
          surname: 'Moore'
        }];
      }

      describe('undo', function () {
        it('should undo single change', function () {
          handsontable({
            data: createObjectData()
          });
          var HOT = getInstance();
          setDataAtRowProp(0, 0, 'Pearce');
          expect(getDataAtRowProp(0, 0)).toBe('Pearce');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('Timothy');
        });
        it('should undo single change in cell with validator', function (done) {
          handsontable({
            data: createObjectData()
          });
          var HOT = getInstance();
          setDataAtRowProp(0, 0, 'Pearce');
          setTimeout(function () {
            expect(getDataAtRowProp(0, 0)).toBe('Pearce');
            HOT.undo();
          }, 200);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('Timothy');
            done();
          }, 400);
        });
        it('should undo creation of a single row', function () {
          var HOT = handsontable({
            data: createObjectData().slice(0, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row');
          expect(countRows()).toEqual(3);
          HOT.undo();
          expect(countRows()).toEqual(2);
        });
        it('should undo creation of multiple rows', function () {
          var HOT = handsontable({
            data: createObjectData().slice(0, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row', 0, 5);
          expect(countRows()).toEqual(7);
          HOT.undo();
          expect(countRows()).toEqual(2);
        });
        it('should undo removal of single row', function () {
          var HOT = handsontable({
            data: createObjectData().slice(0, 2)
          });
          expect(countRows()).toEqual(2);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          alter('remove_row');
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBeNull();
          expect(getDataAtRowProp(1, 'surname')).toBeNull();
          HOT.undo();
          expect(countRows()).toEqual(2);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
        });
        it('should undo removal of multiple rows', function () {
          var HOT = handsontable({
            data: createObjectData()
          });
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
          alter('remove_row', 1, 2);
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBeNull();
          expect(getDataAtRowProp(1, 'surname')).toBeNull();
          expect(getDataAtRowProp(2, 'name')).toBeNull();
          expect(getDataAtRowProp(2, 'surname')).toBeNull();
          HOT.undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
        });
        it('should undo multiple changes', function () {
          handsontable({
            data: createObjectData().slice(0, 2)
          });
          var HOT = getInstance();
          setDataAtRowProp(0, 'name', 'Pierce');
          setDataAtRowProp(0, 'surname', 'Brosnan');
          setDataAtRowProp(1, 'name', 'Daniel');
          setDataAtRowProp(1, 'surname', 'Craig');
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');
          HOT.undo();
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
          HOT.undo();
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
          expect(getDataAtRowProp(1, 'name')).toBe('Sean');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
          HOT.undo();
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBe('Sean');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
          HOT.undo();
          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBe('Sean');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
          HOT.undo();
          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBe('Sean');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
        });
        it('should undo multiple changes in cells with validators', function (done) {
          handsontable({
            data: createObjectData().slice(0, 2)
          });
          var HOT = getInstance();
          setDataAtRowProp(0, 'name', 'Pierce');
          setDataAtRowProp(0, 'surname', 'Brosnan');
          setDataAtRowProp(1, 'name', 'Daniel');
          setDataAtRowProp(1, 'surname', 'Craig');
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');
            HOT.undo();
          }, 200);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            HOT.undo();
          }, 400);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
            expect(getDataAtRowProp(1, 'name')).toBe('Sean');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            HOT.undo();
          }, 600);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
            expect(getDataAtRowProp(1, 'name')).toBe('Sean');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            HOT.undo();
          }, 800);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');
            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
            expect(getDataAtRowProp(1, 'name')).toBe('Sean');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            HOT.undo();
          }, 1000);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');
            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
            expect(getDataAtRowProp(1, 'name')).toBe('Sean');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            done();
          }, 1200);
        });
        it('should undo multiple row creations', function () {
          var HOT = handsontable({
            data: createObjectData().slice(0, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row');
          alter('insert_row');
          alter('insert_row');
          alter('insert_row');
          expect(countRows()).toEqual(6);
          HOT.undo();
          expect(countRows()).toEqual(5);
          HOT.undo();
          expect(countRows()).toEqual(4);
          HOT.undo();
          expect(countRows()).toEqual(3);
          HOT.undo();
          expect(countRows()).toEqual(2);
          HOT.undo();
          expect(countRows()).toEqual(2);
        });
        it('should undo multiple row removals', function () {
          var HOT = handsontable({
            data: createObjectData()
          });
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
          alter('remove_row');
          alter('remove_row');
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          HOT.undo();
          expect(countRows()).toEqual(2);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          HOT.undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
          HOT.undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
        });
      });
      describe('redo', function () {
        it('should redo single change', function () {
          handsontable({
            data: createObjectData()
          });
          var HOT = getInstance();
          setDataAtRowProp(0, 0, 'Pearce');
          expect(getDataAtRowProp(0, 0)).toBe('Pearce');
          HOT.undo();
          expect(getDataAtCell(0, 0)).toBe('Timothy');
          HOT.redo();
          expect(getDataAtRowProp(0, 0)).toBe('Pearce');
        });
        it('should redo single change in cell with validator', function (done) {
          handsontable({
            data: createObjectData()
          });
          var HOT = getInstance();
          setDataAtRowProp(0, 0, 'Pearce');
          setTimeout(function () {
            expect(getDataAtRowProp(0, 0)).toBe('Pearce');
            HOT.undo();
          }, 200);
          setTimeout(function () {
            expect(getDataAtCell(0, 0)).toBe('Timothy');
            HOT.redo();
          }, 400);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 0)).toBe('Pearce');
            done();
          }, 600);
        });
        it('should redo creation of a single row', function () {
          var HOT = handsontable({
            data: createObjectData().slice(0, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row');
          expect(countRows()).toEqual(3);
          HOT.undo();
          expect(countRows()).toEqual(2);
          HOT.redo();
          expect(countRows()).toEqual(3);
        });
        it('should redo creation of multiple rows', function () {
          var HOT = handsontable({
            data: createObjectData().slice(0, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row', 0, 5);
          expect(countRows()).toEqual(7);
          HOT.undo();
          expect(countRows()).toEqual(2);
          HOT.redo();
          expect(countRows()).toEqual(7);
        });
        it('should redo removal of single row', function () {
          var HOT = handsontable({
            data: createObjectData().slice(0, 2)
          });
          expect(countRows()).toEqual(2);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          alter('remove_row');
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBeNull();
          expect(getDataAtRowProp(1, 'surname')).toBeNull();
          HOT.undo();
          expect(countRows()).toEqual(2);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          HOT.redo();
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBeNull();
          expect(getDataAtRowProp(1, 'surname')).toBeNull();
        });
        it('should redo removal of multiple rows', function () {
          var HOT = handsontable({
            data: createObjectData()
          });
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
          alter('remove_row', 1, 2);
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBeNull();
          expect(getDataAtRowProp(1, 'surname')).toBeNull();
          expect(getDataAtRowProp(2, 'name')).toBeNull();
          expect(getDataAtRowProp(2, 'surname')).toBeNull();
          HOT.undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
          HOT.redo();
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBeNull();
          expect(getDataAtRowProp(1, 'surname')).toBeNull();
          expect(getDataAtRowProp(2, 'name')).toBeNull();
          expect(getDataAtRowProp(2, 'surname')).toBeNull();
        });
        it('should redo multiple changes', function () {
          handsontable({
            data: createObjectData().slice(0, 2)
          });
          var HOT = getInstance();
          setDataAtRowProp(0, 'name', 'Pierce');
          setDataAtRowProp(0, 'surname', 'Brosnan');
          setDataAtRowProp(1, 'name', 'Daniel');
          setDataAtRowProp(1, 'surname', 'Craig');
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');
          HOT.undo();
          HOT.undo();
          HOT.undo();
          HOT.undo();
          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBe('Sean');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
          HOT.redo();
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
          expect(getDataAtRowProp(1, 'name')).toBe('Sean');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
          HOT.redo();
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
          expect(getDataAtRowProp(1, 'name')).toBe('Sean');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
          HOT.redo();
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
          HOT.redo();
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');
          HOT.redo();
          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');
        });
        it('should redo multiple changes in cells with validators', function (done) {
          handsontable({
            data: createObjectData().slice(0, 2)
          });
          var HOT = getInstance();
          setDataAtRowProp(0, 'name', 'Pierce');
          setDataAtRowProp(0, 'surname', 'Brosnan');
          setDataAtRowProp(1, 'name', 'Daniel');
          setDataAtRowProp(1, 'surname', 'Craig');
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');
            HOT.undo();
          }, 200);
          setTimeout(function () {
            HOT.undo();
          }, 400);
          setTimeout(function () {
            HOT.undo();
          }, 600);
          setTimeout(function () {
            HOT.undo();
          }, 800);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');
            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
            expect(getDataAtRowProp(1, 'name')).toBe('Sean');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            HOT.redo();
          }, 1000);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');
            expect(getDataAtRowProp(1, 'name')).toBe('Sean');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            HOT.redo();
          }, 1200);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
            expect(getDataAtRowProp(1, 'name')).toBe('Sean');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            HOT.redo();
          }, 1400);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');
            HOT.redo();
          }, 1600);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');
            HOT.redo();
          }, 1800);
          setTimeout(function () {
            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');
            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');
            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');
            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');
            done();
          }, 2000);
        });
        it('should redo multiple row creations', function () {
          var HOT = handsontable({
            data: createObjectData().slice(0, 2)
          });
          expect(countRows()).toEqual(2);
          alter('insert_row');
          alter('insert_row');
          alter('insert_row');
          alter('insert_row');
          expect(countRows()).toEqual(6);
          HOT.undo();
          HOT.undo();
          HOT.undo();
          HOT.undo();
          expect(countRows()).toEqual(2);
          HOT.redo();
          expect(countRows()).toEqual(3);
          HOT.redo();
          expect(countRows()).toEqual(4);
          HOT.redo();
          expect(countRows()).toEqual(5);
          HOT.redo();
          expect(countRows()).toEqual(6);
          HOT.redo();
          expect(countRows()).toEqual(6);
        });
        it('should undo multiple row removals', function () {
          var HOT = handsontable({
            data: createObjectData()
          });
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
          alter('remove_row');
          alter('remove_row');
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          HOT.undo();
          HOT.undo();
          HOT.undo();
          expect(countRows()).toEqual(3);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');
          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');
          HOT.redo();
          expect(countRows()).toEqual(2);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');
          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');
          HOT.redo();
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
          HOT.redo();
          expect(countRows()).toEqual(1);
          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');
          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');
        });
      });
    });
  });
  describe('plugin features', function () {
    describe('cell alignment', function () {
      it('should undo a sequence of aligning cells', function () {
        var hot = handsontable({
          data: Handsontable.helper.createSpreadsheetData(9, 9),
          contextMenu: true,
          colWidths: [50, 50, 50, 50, 50, 50, 50, 50, 50],
          rowHeights: [50, 50, 50, 50, 50, 50, 50, 50, 50]
        }); // top 3 rows center

        selectCell(0, 0, 2, 8);
        hot.getPlugin('contextMenu').executeCommand('alignment:center'); // middle 3 rows unchanged - left
        // bottom 3 rows right

        selectCell(6, 0, 8, 8);
        hot.getPlugin('contextMenu').executeCommand('alignment:right'); // left 3 columns - middle

        selectCell(0, 0, 8, 2);
        hot.getPlugin('contextMenu').executeCommand('alignment:middle'); // middle 3 columns unchanged - top
        // right 3 columns - bottom

        selectCell(0, 6, 8, 8);
        hot.getPlugin('contextMenu').executeCommand('alignment:bottom');
        var cellMeta = hot.getCellMeta(0, 0);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(0, 7);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(5, 1);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(5, 7);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(7, 1);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(7, 5);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(7, 7);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        hot.undo();
        cellMeta = hot.getCellMeta(0, 7);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);
        cellMeta = hot.getCellMeta(5, 7);
        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);
        cellMeta = hot.getCellMeta(7, 7);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);
        hot.undo();
        cellMeta = hot.getCellMeta(0, 0);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);
        cellMeta = hot.getCellMeta(5, 1);
        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);
        cellMeta = hot.getCellMeta(7, 1);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);
        hot.undo();
        cellMeta = hot.getCellMeta(7, 1);
        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);
        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);
        cellMeta = hot.getCellMeta(7, 5);
        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);
        cellMeta = hot.getCellMeta(7, 7);
        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);
        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);
        hot.undo(); // check if all cells are either non-adjusted or adjusted to the left (as default)

        var finish;

        for (var i = 0; i < 9; i++) {
          for (var j = 0; j < 9; j++) {
            cellMeta = hot.getCellMeta(i, j);
            finish = cellMeta.className === void 0 || cellMeta.className.trim() === '' || cellMeta.className.trim() === 'htLeft';
            expect(finish).toBe(true);
          }
        }
      });
      it('should redo a sequence of aligning cells', function () {
        var hot = handsontable({
          data: Handsontable.helper.createSpreadsheetData(9, 9),
          contextMenu: true,
          colWidths: [50, 50, 50, 50, 50, 50, 50, 50, 50],
          rowHeights: [50, 50, 50, 50, 50, 50, 50, 50, 50]
        }); // top 3 rows center

        selectCell(0, 0, 2, 8);
        hot.getPlugin('contextMenu').executeCommand('alignment:center'); // middle 3 rows unchanged - left
        // bottom 3 rows right

        selectCell(6, 0, 8, 8);
        hot.getPlugin('contextMenu').executeCommand('alignment:right'); // left 3 columns - middle

        selectCell(0, 0, 8, 2);
        hot.getPlugin('contextMenu').executeCommand('alignment:middle'); // middle 3 columns unchanged - top
        // right 3 columns - bottom

        selectCell(0, 6, 8, 8);
        hot.getPlugin('contextMenu').executeCommand('alignment:bottom');
        var cellMeta = hot.getCellMeta(0, 0);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(0, 7);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(5, 1);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(5, 7);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(7, 1);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(7, 5);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(7, 7);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        hot.undo();
        hot.undo();
        hot.undo();
        hot.undo(); // check if all cells are either non-adjusted or adjusted to the left (as default)

        var finish;

        for (var i = 0; i < 9; i++) {
          for (var j = 0; j < 9; j++) {
            cellMeta = hot.getCellMeta(i, j);
            finish = cellMeta.className === void 0 || cellMeta.className.trim() === '' || cellMeta.className.trim() === 'htLeft';
            expect(finish).toBe(true);
          }
        }

        hot.redo();
        cellMeta = hot.getCellMeta(0, 0);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(1, 5);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(2, 8);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        hot.redo();
        cellMeta = hot.getCellMeta(6, 0);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(7, 5);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(8, 8);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        hot.redo();
        cellMeta = hot.getCellMeta(0, 0);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(5, 1);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(8, 2);
        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
        hot.redo();
        cellMeta = hot.getCellMeta(0, 6);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(5, 7);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        cellMeta = hot.getCellMeta(8, 8);
        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);
        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);
      });
    });
    it('should exposed new methods when plugin is enabled', function () {
      var hot = handsontable({
        undo: false
      });
      expect(hot.undo).toBeUndefined();
      expect(hot.redo).toBeUndefined();
      expect(hot.isUndoAvailable).toBeUndefined();
      expect(hot.isRedoAvailable).toBeUndefined();
      expect(hot.clearUndo).toBeUndefined();
      updateSettings({
        undo: true
      });
      expect(_typeof(hot.undo)).toEqual('function');
      expect(_typeof(hot.redo)).toEqual('function');
      expect(_typeof(hot.isUndoAvailable)).toEqual('function');
      expect(_typeof(hot.isRedoAvailable)).toEqual('function');
      expect(_typeof(hot.clearUndo)).toEqual('function');
    });
    it('should remove exposed methods when plugin is disbaled', function () {
      var hot = handsontable({
        undo: true
      });
      expect(_typeof(hot.undo)).toEqual('function');
      expect(_typeof(hot.redo)).toEqual('function');
      expect(_typeof(hot.isUndoAvailable)).toEqual('function');
      expect(_typeof(hot.isRedoAvailable)).toEqual('function');
      expect(_typeof(hot.clearUndo)).toEqual('function');
      updateSettings({
        undo: false
      });
      expect(hot.undo).toBeUndefined();
      expect(hot.redo).toBeUndefined();
      expect(hot.isUndoAvailable).toBeUndefined();
      expect(hot.isRedoAvailable).toBeUndefined();
      expect(hot.clearUndo).toBeUndefined();
    });
    describe('Keyboard shortcuts', function () {
      it('should undo single change after hitting CTRL+Z', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(2, 2)
        });
        selectCell(0, 0);
        setDataAtCell(0, 0, 'new value');
        spec().$container.simulate('keydown', {
          ctrlKey: true,
          keyCode: 'Z'.charCodeAt(0)
        });
        expect(getDataAtCell(0, 0)).toBe('A1');
      });
      it('should redo single change after hitting CTRL+Y', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(2, 2)
        });
        var HOT = getInstance();
        selectCell(0, 0);
        setDataAtCell(0, 0, 'new value');
        expect(getDataAtCell(0, 0)).toBe('new value');
        HOT.undo();
        expect(getDataAtCell(0, 0)).toBe('A1');
        spec().$container.simulate('keydown', {
          ctrlKey: true,
          keyCode: 'Y'.charCodeAt(0)
        });
        expect(getDataAtCell(0, 0)).toBe('new value');
      });
      it('should redo single change after hitting CTRL+SHIFT+Z', function () {
        handsontable({
          data: Handsontable.helper.createSpreadsheetData(2, 2)
        });
        var HOT = getInstance();
        selectCell(0, 0);
        setDataAtCell(0, 0, 'new value');
        expect(getDataAtCell(0, 0)).toBe('new value');
        HOT.undo();
        expect(getDataAtCell(0, 0)).toBe('A1');
        spec().$container.simulate('keydown', {
          ctrlKey: true,
          shiftKey: true,
          keyCode: 'Z'.charCodeAt(0)
        });
        expect(getDataAtCell(0, 0)).toBe('new value');
      });
    });
  });
  describe('Hooks', function () {
    it('should fire a `beforeUndo` hook after the undo process begins', function (done) {
      var beforeUndoSpy = jasmine.createSpy('beforeUndo');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      var hookData = null;
      hot.addHook('beforeUndo', beforeUndoSpy);
      hot.addHook('beforeUndo', function (data) {
        hookData = data;
      });
      alter('remove_row', 1);
      setTimeout(function () {
        hot.undo();
      }, 10);
      setTimeout(function () {
        expect(beforeUndoSpy.calls.count()).toEqual(1);
        expect(hookData).not.toBe(null);
        expect(hookData.actionType).toEqual('remove_row');
        expect(hookData.data).toEqual([['A2', 'B2']]);
        done();
      }, 100);
    });
    it('should fire a `beforeRedo` hook before the redo process begins', function (done) {
      var beforeRedoSpy = jasmine.createSpy('beforeRedo');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      var hookData = null;
      hot.addHook('beforeRedo', beforeRedoSpy);
      hot.addHook('beforeRedo', function (data) {
        hookData = data;
      });
      alter('remove_row', 1);
      setTimeout(function () {
        hot.undo();
        hot.redo();
      }, 10);
      setTimeout(function () {
        expect(beforeRedoSpy.calls.count()).toEqual(1);
        expect(hookData).not.toBe(null);
        expect(hookData.actionType).toEqual('remove_row');
        expect(hookData.data).toEqual([['A2', 'B2']]);
        done();
      }, 100);
    });
    it('should fire a `afterRedo` hook after the redo process begins', function (done) {
      var afterRedoSpy = jasmine.createSpy('afterRedo');
      var hot = handsontable({
        data: Handsontable.helper.createSpreadsheetData(2, 2)
      });
      var hookData = null;
      hot.addHook('beforeRedo', afterRedoSpy);
      hot.addHook('beforeRedo', function (data) {
        hookData = data;
      });
      alter('remove_row', 1);
      setTimeout(function () {
        hot.undo();
        hot.redo();
      }, 10);
      setTimeout(function () {
        expect(afterRedoSpy.calls.count()).toEqual(1);
        expect(hookData).not.toBe(null);
        expect(hookData.actionType).toEqual('remove_row');
        expect(hookData.data).toEqual([['A2', 'B2']]);
        done();
      }, 100);
    });
  });
});

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// this file is called MemoryLeakTest.js (not MemoryLeak.spec.js) to make sure it is manually executed as the last suite
describe('MemoryLeakTest', function () {
  it('after all Handsontable instances are destroy()\'d, there should be no more active listeners', function () {
    expect(Handsontable._getListenersCounter()).toBe(0);
  });
});

/***/ })
/******/ ]);
//# sourceMappingURL=e2e.entry.js.map